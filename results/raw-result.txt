java -jar target/benchmarks.jar
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1743,339 ms/op
# Warmup Iteration   2: 1715,801 ms/op
# Warmup Iteration   3: 1679,871 ms/op
# Warmup Iteration   4: 1745,424 ms/op
# Warmup Iteration   5: 1725,105 ms/op
# Warmup Iteration   6: 1780,791 ms/op
# Warmup Iteration   7: 1750,607 ms/op
# Warmup Iteration   8: 1744,948 ms/op
# Warmup Iteration   9: 1688,442 ms/op
# Warmup Iteration  10: 1704,608 ms/op
Iteration   1: 1688,493 ms/op
Iteration   2: 1712,365 ms/op
Iteration   3: 1775,979 ms/op
Iteration   4: 1845,885 ms/op
Iteration   5: 1999,047 ms/op
Iteration   6: 1798,798 ms/op
Iteration   7: 1746,853 ms/op
Iteration   8: 1851,658 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1802,385 ±(99.9%) 188,259 ms/op

  Histogram, ms/op:
    [1600,000, 1625,000) = 0
    [1625,000, 1650,000) = 0
    [1650,000, 1675,000) = 0
    [1675,000, 1700,000) = 1
    [1700,000, 1725,000) = 1
    [1725,000, 1750,000) = 1
    [1750,000, 1775,000) = 0
    [1775,000, 1800,000) = 2
    [1800,000, 1825,000) = 0
    [1825,000, 1850,000) = 1
    [1850,000, 1875,000) = 1
    [1875,000, 1900,000) = 0
    [1900,000, 1925,000) = 0
    [1925,000, 1950,000) = 0
    [1950,000, 1975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1688,493 ms/op
     p(50,0000) =   1787,389 ms/op
     p(90,0000) =   1999,047 ms/op
     p(95,0000) =   1999,047 ms/op
     p(99,0000) =   1999,047 ms/op
     p(99,9000) =   1999,047 ms/op
     p(99,9900) =   1999,047 ms/op
     p(99,9990) =   1999,047 ms/op
     p(99,9999) =   1999,047 ms/op
    p(100,0000) =   1999,047 ms/op


# Run complete. Total time: 00:00:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test        10000           get    ss    8  1802,385 ± 188,259  ms/op
tests.maptests.article_examples.IntIntMap1Test (10000) = 1802.3847906250003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1205,880 ms/op
# Warmup Iteration   2: 1220,973 ms/op
# Warmup Iteration   3: 1161,857 ms/op
# Warmup Iteration   4: 1140,978 ms/op
# Warmup Iteration   5: 1140,824 ms/op
# Warmup Iteration   6: 1143,511 ms/op
# Warmup Iteration   7: 1220,636 ms/op
# Warmup Iteration   8: 1228,424 ms/op
# Warmup Iteration   9: 1241,341 ms/op
# Warmup Iteration  10: 1220,523 ms/op
Iteration   1: 1231,001 ms/op
Iteration   2: 1191,488 ms/op
Iteration   3: 1185,577 ms/op
Iteration   4: 1176,553 ms/op
Iteration   5: 1178,669 ms/op
Iteration   6: 1204,243 ms/op
Iteration   7: 1144,197 ms/op
Iteration   8: 1141,969 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1181,712 ±(99.9%) 56,304 ms/op

  Histogram, ms/op:
    [1140,000, 1150,000) = 2
    [1150,000, 1160,000) = 0
    [1160,000, 1170,000) = 0
    [1170,000, 1180,000) = 2
    [1180,000, 1190,000) = 1
    [1190,000, 1200,000) = 1
    [1200,000, 1210,000) = 1
    [1210,000, 1220,000) = 0
    [1220,000, 1230,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1141,969 ms/op
     p(50,0000) =   1182,123 ms/op
     p(90,0000) =   1231,001 ms/op
     p(95,0000) =   1231,001 ms/op
     p(99,0000) =   1231,001 ms/op
     p(99,9000) =   1231,001 ms/op
     p(99,9900) =   1231,001 ms/op
     p(99,9990) =   1231,001 ms/op
     p(99,9999) =   1231,001 ms/op
    p(100,0000) =   1231,001 ms/op


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test        10000           get    ss    8  1181,712 ± 56,304  ms/op
tests.maptests.article_examples.IntIntMap2Test (10000) = 1181.712307125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1070,057 ms/op
# Warmup Iteration   2: 1057,616 ms/op
# Warmup Iteration   3: 1037,368 ms/op
# Warmup Iteration   4: 1045,192 ms/op
# Warmup Iteration   5: 1045,630 ms/op
# Warmup Iteration   6: 1068,676 ms/op
# Warmup Iteration   7: 1061,410 ms/op
# Warmup Iteration   8: 1134,320 ms/op
# Warmup Iteration   9: 1045,690 ms/op
# Warmup Iteration  10: 994,388 ms/op
Iteration   1: 995,862 ms/op
Iteration   2: 961,726 ms/op
Iteration   3: 958,371 ms/op
Iteration   4: 969,469 ms/op
Iteration   5: 949,317 ms/op
Iteration   6: 952,456 ms/op
Iteration   7: 957,082 ms/op
Iteration   8: 957,961 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    962,781 ±(99.9%) 28,019 ms/op

  Histogram, ms/op:
    [ 940,000,  945,000) = 0
    [ 945,000,  950,000) = 1
    [ 950,000,  955,000) = 1
    [ 955,000,  960,000) = 3
    [ 960,000,  965,000) = 1
    [ 965,000,  970,000) = 1
    [ 970,000,  975,000) = 0
    [ 975,000,  980,000) = 0
    [ 980,000,  985,000) = 0
    [ 985,000,  990,000) = 0
    [ 990,000,  995,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    949,317 ms/op
     p(50,0000) =    958,166 ms/op
     p(90,0000) =    995,862 ms/op
     p(95,0000) =    995,862 ms/op
     p(99,0000) =    995,862 ms/op
     p(99,9000) =    995,862 ms/op
     p(99,9900) =    995,862 ms/op
     p(99,9990) =    995,862 ms/op
     p(99,9999) =    995,862 ms/op
    p(100,0000) =    995,862 ms/op


# Run complete. Total time: 00:00:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test        10000           get    ss    8  962,781 ± 28,019  ms/op
tests.maptests.article_examples.IntIntMap3Test (10000) = 962.780702625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 894,760 ms/op
# Warmup Iteration   2: 919,847 ms/op
# Warmup Iteration   3: 920,536 ms/op
# Warmup Iteration   4: 924,826 ms/op
# Warmup Iteration   5: 920,006 ms/op
# Warmup Iteration   6: 920,082 ms/op
# Warmup Iteration   7: 830,749 ms/op
# Warmup Iteration   8: 834,381 ms/op
# Warmup Iteration   9: 824,978 ms/op
# Warmup Iteration  10: 815,885 ms/op
Iteration   1: 825,316 ms/op
Iteration   2: 780,704 ms/op
Iteration   3: 780,138 ms/op
Iteration   4: 781,685 ms/op
Iteration   5: 784,113 ms/op
Iteration   6: 786,471 ms/op
Iteration   7: 848,362 ms/op
Iteration   8: 781,423 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    796,026 ±(99.9%) 49,734 ms/op

  Histogram, ms/op:
    [780,000, 785,000) = 5
    [785,000, 790,000) = 1
    [790,000, 795,000) = 0
    [795,000, 800,000) = 0
    [800,000, 805,000) = 0
    [805,000, 810,000) = 0
    [810,000, 815,000) = 0
    [815,000, 820,000) = 0
    [820,000, 825,000) = 0
    [825,000, 830,000) = 1
    [830,000, 835,000) = 0
    [835,000, 840,000) = 0
    [840,000, 845,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    780,138 ms/op
     p(50,0000) =    782,899 ms/op
     p(90,0000) =    848,362 ms/op
     p(95,0000) =    848,362 ms/op
     p(99,0000) =    848,362 ms/op
     p(99,9000) =    848,362 ms/op
     p(99,9900) =    848,362 ms/op
     p(99,9990) =    848,362 ms/op
     p(99,9999) =    848,362 ms/op
    p(100,0000) =    848,362 ms/op


# Run complete. Total time: 00:00:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test        10000           get    ss    8  796,026 ± 49,734  ms/op
tests.maptests.article_examples.IntIntMap4Test (10000) = 796.02627225
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 781,662 ms/op
# Warmup Iteration   2: 845,877 ms/op
# Warmup Iteration   3: 850,673 ms/op
# Warmup Iteration   4: 844,083 ms/op
# Warmup Iteration   5: 845,990 ms/op
# Warmup Iteration   6: 847,629 ms/op
# Warmup Iteration   7: 710,645 ms/op
# Warmup Iteration   8: 702,331 ms/op
# Warmup Iteration   9: 686,842 ms/op
# Warmup Iteration  10: 687,961 ms/op
Iteration   1: 696,158 ms/op
Iteration   2: 735,614 ms/op
Iteration   3: 763,882 ms/op
Iteration   4: 769,304 ms/op
Iteration   5: 739,171 ms/op
Iteration   6: 736,675 ms/op
Iteration   7: 742,721 ms/op
Iteration   8: 732,360 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    739,486 ±(99.9%) 42,421 ms/op

  Histogram, ms/op:
    [690,000, 695,000) = 0
    [695,000, 700,000) = 1
    [700,000, 705,000) = 0
    [705,000, 710,000) = 0
    [710,000, 715,000) = 0
    [715,000, 720,000) = 0
    [720,000, 725,000) = 0
    [725,000, 730,000) = 0
    [730,000, 735,000) = 1
    [735,000, 740,000) = 3
    [740,000, 745,000) = 1
    [745,000, 750,000) = 0
    [750,000, 755,000) = 0
    [755,000, 760,000) = 0
    [760,000, 765,000) = 1

  Percentiles, ms/op:
      p(0,0000) =    696,158 ms/op
     p(50,0000) =    737,923 ms/op
     p(90,0000) =    769,304 ms/op
     p(95,0000) =    769,304 ms/op
     p(99,0000) =    769,304 ms/op
     p(99,9000) =    769,304 ms/op
     p(99,9900) =    769,304 ms/op
     p(99,9990) =    769,304 ms/op
     p(99,9999) =    769,304 ms/op
    p(100,0000) =    769,304 ms/op


# Run complete. Total time: 00:00:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest        10000           get    ss    8  739,486 ± 42,421  ms/op
tests.maptests.article_examples.IntIntMap4aTest (10000) = 739.4856013749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 785,437 ms/op
# Warmup Iteration   2: 817,418 ms/op
# Warmup Iteration   3: 820,680 ms/op
# Warmup Iteration   4: 816,078 ms/op
# Warmup Iteration   5: 813,647 ms/op
# Warmup Iteration   6: 875,977 ms/op
# Warmup Iteration   7: 756,006 ms/op
# Warmup Iteration   8: 737,766 ms/op
# Warmup Iteration   9: 749,467 ms/op
# Warmup Iteration  10: 737,334 ms/op
Iteration   1: 739,339 ms/op
Iteration   2: 780,993 ms/op
Iteration   3: 782,432 ms/op
Iteration   4: 788,036 ms/op
Iteration   5: 781,922 ms/op
Iteration   6: 784,361 ms/op
Iteration   7: 785,248 ms/op
Iteration   8: 783,255 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    778,198 ±(99.9%) 30,314 ms/op

  Histogram, ms/op:
    [730,000, 735,000) = 0
    [735,000, 740,000) = 1
    [740,000, 745,000) = 0
    [745,000, 750,000) = 0
    [750,000, 755,000) = 0
    [755,000, 760,000) = 0
    [760,000, 765,000) = 0
    [765,000, 770,000) = 0
    [770,000, 775,000) = 0
    [775,000, 780,000) = 0
    [780,000, 785,000) = 5

  Percentiles, ms/op:
      p(0,0000) =    739,339 ms/op
     p(50,0000) =    782,844 ms/op
     p(90,0000) =    788,036 ms/op
     p(95,0000) =    788,036 ms/op
     p(99,0000) =    788,036 ms/op
     p(99,9000) =    788,036 ms/op
     p(99,9900) =    788,036 ms/op
     p(99,9990) =    788,036 ms/op
     p(99,9999) =    788,036 ms/op
    p(100,0000) =    788,036 ms/op


# Run complete. Total time: 00:00:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest        10000           get    ss    8  778,198 ± 30,314  ms/op
tests.maptests.primitive.FastUtilMapTest (10000) = 778.1982117499999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 988,939 ms/op
# Warmup Iteration   2: 990,417 ms/op
# Warmup Iteration   3: 997,563 ms/op
# Warmup Iteration   4: 1021,545 ms/op
# Warmup Iteration   5: 1017,014 ms/op
# Warmup Iteration   6: 1008,064 ms/op
# Warmup Iteration   7: 963,094 ms/op
# Warmup Iteration   8: 959,933 ms/op
# Warmup Iteration   9: 951,164 ms/op
# Warmup Iteration  10: 948,675 ms/op
Iteration   1: 949,692 ms/op
Iteration   2: 1026,790 ms/op
Iteration   3: 1024,181 ms/op
Iteration   4: 1021,153 ms/op
Iteration   5: 1043,749 ms/op
Iteration   6: 1070,042 ms/op
Iteration   7: 1024,101 ms/op
Iteration   8: 1039,559 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1024,908 ±(99.9%) 65,770 ms/op

  Histogram, ms/op:
    [ 900,000,  912,500) = 0
    [ 912,500,  925,000) = 0
    [ 925,000,  937,500) = 0
    [ 937,500,  950,000) = 1
    [ 950,000,  962,500) = 0
    [ 962,500,  975,000) = 0
    [ 975,000,  987,500) = 0
    [ 987,500, 1000,000) = 0
    [1000,000, 1012,500) = 0
    [1012,500, 1025,000) = 3
    [1025,000, 1037,500) = 1
    [1037,500, 1050,000) = 2
    [1050,000, 1062,500) = 0
    [1062,500, 1075,000) = 1
    [1075,000, 1087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =    949,692 ms/op
     p(50,0000) =   1025,486 ms/op
     p(90,0000) =   1070,042 ms/op
     p(95,0000) =   1070,042 ms/op
     p(99,0000) =   1070,042 ms/op
     p(99,9000) =   1070,042 ms/op
     p(99,9900) =   1070,042 ms/op
     p(99,9990) =   1070,042 ms/op
     p(99,9999) =   1070,042 ms/op
    p(100,0000) =   1070,042 ms/op


# Run complete. Total time: 00:00:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest        10000           get    ss    8  1024,908 ± 65,770  ms/op
tests.maptests.primitive.GsMutableMapTest (10000) = 1024.90841275
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 780,921 ms/op
# Warmup Iteration   2: 860,997 ms/op
# Warmup Iteration   3: 856,152 ms/op
# Warmup Iteration   4: 861,744 ms/op
# Warmup Iteration   5: 869,462 ms/op
# Warmup Iteration   6: 857,487 ms/op
# Warmup Iteration   7: 715,055 ms/op
# Warmup Iteration   8: 687,166 ms/op
# Warmup Iteration   9: 690,324 ms/op
# Warmup Iteration  10: 686,374 ms/op
Iteration   1: 701,485 ms/op
Iteration   2: 661,294 ms/op
Iteration   3: 664,259 ms/op
Iteration   4: 663,946 ms/op
Iteration   5: 664,527 ms/op
Iteration   6: 668,196 ms/op
Iteration   7: 665,597 ms/op
Iteration   8: 669,651 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    669,869 ±(99.9%) 24,922 ms/op

  Histogram, ms/op:
    [660,000, 665,000) = 4
    [665,000, 670,000) = 3
    [670,000, 675,000) = 0
    [675,000, 680,000) = 0
    [680,000, 685,000) = 0
    [685,000, 690,000) = 0
    [690,000, 695,000) = 0
    [695,000, 700,000) = 0
    [700,000, 705,000) = 1

  Percentiles, ms/op:
      p(0,0000) =    661,294 ms/op
     p(50,0000) =    665,062 ms/op
     p(90,0000) =    701,485 ms/op
     p(95,0000) =    701,485 ms/op
     p(99,0000) =    701,485 ms/op
     p(99,9000) =    701,485 ms/op
     p(99,9900) =    701,485 ms/op
     p(99,9990) =    701,485 ms/op
     p(99,9999) =    701,485 ms/op
    p(100,0000) =    701,485 ms/op


# Run complete. Total time: 00:00:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest        10000           get    ss    8  669,869 ± 24,922  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (10000) = 669.86918975
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 897,261 ms/op
# Warmup Iteration   2: 882,737 ms/op
# Warmup Iteration   3: 880,750 ms/op
# Warmup Iteration   4: 933,878 ms/op
# Warmup Iteration   5: 876,246 ms/op
# Warmup Iteration   6: 876,583 ms/op
# Warmup Iteration   7: 907,091 ms/op
# Warmup Iteration   8: 900,221 ms/op
# Warmup Iteration   9: 892,758 ms/op
# Warmup Iteration  10: 894,850 ms/op
Iteration   1: 896,712 ms/op
Iteration   2: 826,206 ms/op
Iteration   3: 828,092 ms/op
Iteration   4: 827,078 ms/op
Iteration   5: 827,051 ms/op
Iteration   6: 831,115 ms/op
Iteration   7: 832,891 ms/op
Iteration   8: 841,876 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    838,878 ±(99.9%) 45,739 ms/op

  Histogram, ms/op:
    [820,000, 825,000) = 0
    [825,000, 830,000) = 4
    [830,000, 835,000) = 2
    [835,000, 840,000) = 0
    [840,000, 845,000) = 1
    [845,000, 850,000) = 0
    [850,000, 855,000) = 0
    [855,000, 860,000) = 0
    [860,000, 865,000) = 0
    [865,000, 870,000) = 0
    [870,000, 875,000) = 0
    [875,000, 880,000) = 0
    [880,000, 885,000) = 0
    [885,000, 890,000) = 0
    [890,000, 895,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    826,206 ms/op
     p(50,0000) =    829,604 ms/op
     p(90,0000) =    896,712 ms/op
     p(95,0000) =    896,712 ms/op
     p(99,0000) =    896,712 ms/op
     p(99,9000) =    896,712 ms/op
     p(99,9900) =    896,712 ms/op
     p(99,9990) =    896,712 ms/op
     p(99,9999) =    896,712 ms/op
    p(100,0000) =    896,712 ms/op


# Run complete. Total time: 00:00:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest        10000           get    ss    8  838,878 ± 45,739  ms/op
tests.maptests.primitive.HppcMapTest (10000) = 838.87767775
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2209,504 ms/op
# Warmup Iteration   2: 2184,169 ms/op
# Warmup Iteration   3: 2193,594 ms/op
# Warmup Iteration   4: 2186,017 ms/op
# Warmup Iteration   5: 2184,409 ms/op
# Warmup Iteration   6: 2245,734 ms/op
# Warmup Iteration   7: 2221,388 ms/op
# Warmup Iteration   8: 2217,239 ms/op
# Warmup Iteration   9: 2214,659 ms/op
# Warmup Iteration  10: 2222,387 ms/op
Iteration   1: 2214,245 ms/op
Iteration   2: 2233,568 ms/op
Iteration   3: 2224,571 ms/op
Iteration   4: 2224,055 ms/op
Iteration   5: 2223,620 ms/op
Iteration   6: 2234,587 ms/op
Iteration   7: 2226,053 ms/op
Iteration   8: 2227,298 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2226,000 ±(99.9%) 12,143 ms/op

  Histogram, ms/op:
    [2210,000, 2212,500) = 0
    [2212,500, 2215,000) = 1
    [2215,000, 2217,500) = 0
    [2217,500, 2220,000) = 0
    [2220,000, 2222,500) = 0
    [2222,500, 2225,000) = 3
    [2225,000, 2227,500) = 2
    [2227,500, 2230,000) = 0
    [2230,000, 2232,500) = 0
    [2232,500, 2235,000) = 2
    [2235,000, 2237,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2214,245 ms/op
     p(50,0000) =   2225,312 ms/op
     p(90,0000) =   2234,587 ms/op
     p(95,0000) =   2234,587 ms/op
     p(99,0000) =   2234,587 ms/op
     p(99,9000) =   2234,587 ms/op
     p(99,9900) =   2234,587 ms/op
     p(99,9990) =   2234,587 ms/op
     p(99,9999) =   2234,587 ms/op
    p(100,0000) =   2234,587 ms/op


# Run complete. Total time: 00:00:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest        10000           get    ss    8  2226,000 ± 12,143  ms/op
tests.maptests.primitive.TroveJbMapTest (10000) = 2225.999505875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2087,135 ms/op
# Warmup Iteration   2: 2017,704 ms/op
# Warmup Iteration   3: 2018,429 ms/op
# Warmup Iteration   4: 2024,199 ms/op
# Warmup Iteration   5: 2021,584 ms/op
# Warmup Iteration   6: 2014,126 ms/op
# Warmup Iteration   7: 2109,411 ms/op
# Warmup Iteration   8: 2123,753 ms/op
# Warmup Iteration   9: 2121,627 ms/op
# Warmup Iteration  10: 2136,192 ms/op
Iteration   1: 2119,661 ms/op
Iteration   2: 2053,133 ms/op
Iteration   3: 2107,290 ms/op
Iteration   4: 2055,447 ms/op
Iteration   5: 2058,270 ms/op
Iteration   6: 2050,092 ms/op
Iteration   7: 2057,627 ms/op
Iteration   8: 2049,805 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2068,916 ±(99.9%) 53,293 ms/op

  Histogram, ms/op:
    [2040,000, 2045,000) = 0
    [2045,000, 2050,000) = 1
    [2050,000, 2055,000) = 2
    [2055,000, 2060,000) = 3
    [2060,000, 2065,000) = 0
    [2065,000, 2070,000) = 0
    [2070,000, 2075,000) = 0
    [2075,000, 2080,000) = 0
    [2080,000, 2085,000) = 0
    [2085,000, 2090,000) = 0
    [2090,000, 2095,000) = 0
    [2095,000, 2100,000) = 0
    [2100,000, 2105,000) = 0
    [2105,000, 2110,000) = 1
    [2110,000, 2115,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2049,805 ms/op
     p(50,0000) =   2056,537 ms/op
     p(90,0000) =   2119,661 ms/op
     p(95,0000) =   2119,661 ms/op
     p(99,0000) =   2119,661 ms/op
     p(99,9000) =   2119,661 ms/op
     p(99,9900) =   2119,661 ms/op
     p(99,9990) =   2119,661 ms/op
     p(99,9999) =   2119,661 ms/op
    p(100,0000) =   2119,661 ms/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest        10000           get    ss    8  2068,916 ± 53,293  ms/op
tests.maptests.primitive.TroveMapTest (10000) = 2068.915539875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1206,150 ms/op
# Warmup Iteration   2: 1206,890 ms/op
# Warmup Iteration   3: 1183,778 ms/op
# Warmup Iteration   4: 1189,084 ms/op
# Warmup Iteration   5: 1198,331 ms/op
# Warmup Iteration   6: 1206,788 ms/op
# Warmup Iteration   7: 1202,532 ms/op
# Warmup Iteration   8: 1183,425 ms/op
# Warmup Iteration   9: 1188,483 ms/op
# Warmup Iteration  10: 1183,678 ms/op
Iteration   1: 1182,463 ms/op
Iteration   2: 1132,541 ms/op
Iteration   3: 1074,223 ms/op
Iteration   4: 1080,468 ms/op
Iteration   5: 1092,413 ms/op
Iteration   6: 1068,663 ms/op
Iteration   7: 1072,133 ms/op
Iteration   8: 1079,254 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1097,770 ±(99.9%) 76,177 ms/op

  Histogram, ms/op:
    [1000,000, 1012,500) = 0
    [1012,500, 1025,000) = 0
    [1025,000, 1037,500) = 0
    [1037,500, 1050,000) = 0
    [1050,000, 1062,500) = 0
    [1062,500, 1075,000) = 3
    [1075,000, 1087,500) = 2
    [1087,500, 1100,000) = 1
    [1100,000, 1112,500) = 0
    [1112,500, 1125,000) = 0
    [1125,000, 1137,500) = 1
    [1137,500, 1150,000) = 0
    [1150,000, 1162,500) = 0
    [1162,500, 1175,000) = 0
    [1175,000, 1187,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   1068,663 ms/op
     p(50,0000) =   1079,861 ms/op
     p(90,0000) =   1182,463 ms/op
     p(95,0000) =   1182,463 ms/op
     p(99,0000) =   1182,463 ms/op
     p(99,9000) =   1182,463 ms/op
     p(99,9900) =   1182,463 ms/op
     p(99,9990) =   1182,463 ms/op
     p(99,9999) =   1182,463 ms/op
    p(100,0000) =   1182,463 ms/op


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest        10000           get    ss    8  1097,770 ± 76,177  ms/op
tests.maptests.object.FastUtilObjMapTest (10000) = 1097.7697606250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1612,104 ms/op
# Warmup Iteration   2: 1642,255 ms/op
# Warmup Iteration   3: 1638,200 ms/op
# Warmup Iteration   4: 1630,888 ms/op
# Warmup Iteration   5: 1639,781 ms/op
# Warmup Iteration   6: 1630,297 ms/op
# Warmup Iteration   7: 1592,400 ms/op
# Warmup Iteration   8: 1565,541 ms/op
# Warmup Iteration   9: 1563,632 ms/op
# Warmup Iteration  10: 1557,693 ms/op
Iteration   1: 1572,180 ms/op
Iteration   2: 1545,571 ms/op
Iteration   3: 1521,306 ms/op
Iteration   4: 1526,214 ms/op
Iteration   5: 1488,533 ms/op
Iteration   6: 1498,292 ms/op
Iteration   7: 1494,233 ms/op
Iteration   8: 1495,290 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1517,702 ±(99.9%) 56,491 ms/op

  Histogram, ms/op:
    [1480,000, 1490,000) = 1
    [1490,000, 1500,000) = 3
    [1500,000, 1510,000) = 0
    [1510,000, 1520,000) = 0
    [1520,000, 1530,000) = 2
    [1530,000, 1540,000) = 0
    [1540,000, 1550,000) = 1
    [1550,000, 1560,000) = 0
    [1560,000, 1570,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1488,533 ms/op
     p(50,0000) =   1509,799 ms/op
     p(90,0000) =   1572,180 ms/op
     p(95,0000) =   1572,180 ms/op
     p(99,0000) =   1572,180 ms/op
     p(99,9000) =   1572,180 ms/op
     p(99,9900) =   1572,180 ms/op
     p(99,9990) =   1572,180 ms/op
     p(99,9999) =   1572,180 ms/op
    p(100,0000) =   1572,180 ms/op


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest        10000           get    ss    8  1517,702 ± 56,491  ms/op
tests.maptests.object.KolobokeMutableObjTest (10000) = 1517.702450625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1637,111 ms/op
# Warmup Iteration   2: 1665,679 ms/op
# Warmup Iteration   3: 1640,776 ms/op
# Warmup Iteration   4: 1643,957 ms/op
# Warmup Iteration   5: 1655,537 ms/op
# Warmup Iteration   6: 1635,122 ms/op
# Warmup Iteration   7: 1580,543 ms/op
# Warmup Iteration   8: 1578,020 ms/op
# Warmup Iteration   9: 1633,910 ms/op
# Warmup Iteration  10: 1559,743 ms/op
Iteration   1: 1587,632 ms/op
Iteration   2: 1495,590 ms/op
Iteration   3: 1490,402 ms/op
Iteration   4: 1500,782 ms/op
Iteration   5: 1501,229 ms/op
Iteration   6: 1506,452 ms/op
Iteration   7: 1532,520 ms/op
Iteration   8: 1506,624 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1515,154 ±(99.9%) 60,888 ms/op

  Histogram, ms/op:
    [1490,000, 1500,000) = 2
    [1500,000, 1510,000) = 4
    [1510,000, 1520,000) = 0
    [1520,000, 1530,000) = 0
    [1530,000, 1540,000) = 1
    [1540,000, 1550,000) = 0
    [1550,000, 1560,000) = 0
    [1560,000, 1570,000) = 0
    [1570,000, 1580,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1490,402 ms/op
     p(50,0000) =   1503,840 ms/op
     p(90,0000) =   1587,632 ms/op
     p(95,0000) =   1587,632 ms/op
     p(99,0000) =   1587,632 ms/op
     p(99,9000) =   1587,632 ms/op
     p(99,9900) =   1587,632 ms/op
     p(99,9990) =   1587,632 ms/op
     p(99,9999) =   1587,632 ms/op
    p(100,0000) =   1587,632 ms/op


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest        10000           get    ss    8  1515,154 ± 60,888  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (10000) = 1515.153828
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1203,985 ms/op
# Warmup Iteration   2: 1149,424 ms/op
# Warmup Iteration   3: 1172,637 ms/op
# Warmup Iteration   4: 1140,674 ms/op
# Warmup Iteration   5: 1146,484 ms/op
# Warmup Iteration   6: 1138,217 ms/op
# Warmup Iteration   7: 1185,979 ms/op
# Warmup Iteration   8: 1187,954 ms/op
# Warmup Iteration   9: 1185,162 ms/op
# Warmup Iteration  10: 1245,908 ms/op
Iteration   1: 1196,309 ms/op
Iteration   2: 1243,197 ms/op
Iteration   3: 1210,306 ms/op
Iteration   4: 1220,288 ms/op
Iteration   5: 1228,664 ms/op
Iteration   6: 1212,529 ms/op
Iteration   7: 1231,266 ms/op
Iteration   8: 1214,468 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1219,628 ±(99.9%) 27,808 ms/op

  Histogram, ms/op:
    [1190,000, 1195,000) = 0
    [1195,000, 1200,000) = 1
    [1200,000, 1205,000) = 0
    [1205,000, 1210,000) = 0
    [1210,000, 1215,000) = 3
    [1215,000, 1220,000) = 0
    [1220,000, 1225,000) = 1
    [1225,000, 1230,000) = 1
    [1230,000, 1235,000) = 1
    [1235,000, 1240,000) = 0
    [1240,000, 1245,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1196,309 ms/op
     p(50,0000) =   1217,378 ms/op
     p(90,0000) =   1243,197 ms/op
     p(95,0000) =   1243,197 ms/op
     p(99,0000) =   1243,197 ms/op
     p(99,9000) =   1243,197 ms/op
     p(99,9900) =   1243,197 ms/op
     p(99,9990) =   1243,197 ms/op
     p(99,9999) =   1243,197 ms/op
    p(100,0000) =   1243,197 ms/op


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest        10000           get    ss    8  1219,628 ± 27,808  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (10000) = 1219.6282445
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1586,908 ms/op
# Warmup Iteration   2: 1648,422 ms/op
# Warmup Iteration   3: 1634,555 ms/op
# Warmup Iteration   4: 1660,619 ms/op
# Warmup Iteration   5: 1642,198 ms/op
# Warmup Iteration   6: 1648,450 ms/op
# Warmup Iteration   7: 1542,644 ms/op
# Warmup Iteration   8: 1524,417 ms/op
# Warmup Iteration   9: 1584,863 ms/op
# Warmup Iteration  10: 1521,783 ms/op
Iteration   1: 1531,319 ms/op
Iteration   2: 1305,034 ms/op
Iteration   3: 1310,525 ms/op
Iteration   4: 1305,272 ms/op
Iteration   5: 1304,810 ms/op
Iteration   6: 1312,978 ms/op
Iteration   7: 1306,699 ms/op
Iteration   8: 1316,910 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1336,693 ±(99.9%) 150,590 ms/op

  Histogram, ms/op:
    [1300,000, 1325,000) = 7
    [1325,000, 1350,000) = 0
    [1350,000, 1375,000) = 0
    [1375,000, 1400,000) = 0
    [1400,000, 1425,000) = 0
    [1425,000, 1450,000) = 0
    [1450,000, 1475,000) = 0
    [1475,000, 1500,000) = 0
    [1500,000, 1525,000) = 0
    [1525,000, 1550,000) = 1
    [1550,000, 1575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1304,810 ms/op
     p(50,0000) =   1308,612 ms/op
     p(90,0000) =   1531,319 ms/op
     p(95,0000) =   1531,319 ms/op
     p(99,0000) =   1531,319 ms/op
     p(99,9000) =   1531,319 ms/op
     p(99,9900) =   1531,319 ms/op
     p(99,9990) =   1531,319 ms/op
     p(99,9999) =   1531,319 ms/op
    p(100,0000) =   1531,319 ms/op


# Run complete. Total time: 00:00:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest        10000           get    ss    8  1336,693 ± 150,590  ms/op
tests.maptests.object.HppcObjMapTest (10000) = 1336.6934190000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1458,448 ms/op
# Warmup Iteration   2: 1429,000 ms/op
# Warmup Iteration   3: 1438,002 ms/op
# Warmup Iteration   4: 1432,443 ms/op
# Warmup Iteration   5: 1420,599 ms/op
# Warmup Iteration   6: 1420,202 ms/op
# Warmup Iteration   7: 1466,431 ms/op
# Warmup Iteration   8: 1470,066 ms/op
# Warmup Iteration   9: 1519,395 ms/op
# Warmup Iteration  10: 1477,966 ms/op
Iteration   1: 1463,285 ms/op
Iteration   2: 1203,641 ms/op
Iteration   3: 1195,918 ms/op
Iteration   4: 1198,867 ms/op
Iteration   5: 1209,514 ms/op
Iteration   6: 1199,534 ms/op
Iteration   7: 1202,990 ms/op
Iteration   8: 1221,443 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1236,899 ±(99.9%) 175,559 ms/op

  Histogram, ms/op:
    [1100,000, 1125,000) = 0
    [1125,000, 1150,000) = 0
    [1150,000, 1175,000) = 0
    [1175,000, 1200,000) = 3
    [1200,000, 1225,000) = 4
    [1225,000, 1250,000) = 0
    [1250,000, 1275,000) = 0
    [1275,000, 1300,000) = 0
    [1300,000, 1325,000) = 0
    [1325,000, 1350,000) = 0
    [1350,000, 1375,000) = 0
    [1375,000, 1400,000) = 0
    [1400,000, 1425,000) = 0
    [1425,000, 1450,000) = 0
    [1450,000, 1475,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1195,918 ms/op
     p(50,0000) =   1203,315 ms/op
     p(90,0000) =   1463,285 ms/op
     p(95,0000) =   1463,285 ms/op
     p(99,0000) =   1463,285 ms/op
     p(99,9000) =   1463,285 ms/op
     p(99,9900) =   1463,285 ms/op
     p(99,9990) =   1463,285 ms/op
     p(99,9999) =   1463,285 ms/op
    p(100,0000) =   1463,285 ms/op


# Run complete. Total time: 00:00:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest        10000           get    ss    8  1236,899 ± 175,559  ms/op
tests.maptests.object.GsObjMapTest (10000) = 1236.898951375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 894,398 ms/op
# Warmup Iteration   2: 875,509 ms/op
# Warmup Iteration   3: 872,942 ms/op
# Warmup Iteration   4: 880,654 ms/op
# Warmup Iteration   5: 885,000 ms/op
# Warmup Iteration   6: 869,304 ms/op
# Warmup Iteration   7: 884,609 ms/op
# Warmup Iteration   8: 879,035 ms/op
# Warmup Iteration   9: 897,289 ms/op
# Warmup Iteration  10: 886,966 ms/op
Iteration   1: 896,110 ms/op
Iteration   2: 959,063 ms/op
Iteration   3: 949,544 ms/op
Iteration   4: 1016,757 ms/op
Iteration   5: 943,136 ms/op
Iteration   6: 965,857 ms/op
Iteration   7: 948,382 ms/op
Iteration   8: 958,651 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    954,687 ±(99.9%) 63,179 ms/op

  Histogram, ms/op:
    [ 800,000,  825,000) = 0
    [ 825,000,  850,000) = 0
    [ 850,000,  875,000) = 0
    [ 875,000,  900,000) = 1
    [ 900,000,  925,000) = 0
    [ 925,000,  950,000) = 3
    [ 950,000,  975,000) = 3
    [ 975,000, 1000,000) = 0
    [1000,000, 1025,000) = 1
    [1025,000, 1050,000) = 0
    [1050,000, 1075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    896,110 ms/op
     p(50,0000) =    954,097 ms/op
     p(90,0000) =   1016,757 ms/op
     p(95,0000) =   1016,757 ms/op
     p(99,0000) =   1016,757 ms/op
     p(99,9000) =   1016,757 ms/op
     p(99,9900) =   1016,757 ms/op
     p(99,9990) =   1016,757 ms/op
     p(99,9999) =   1016,757 ms/op
    p(100,0000) =   1016,757 ms/op


# Run complete. Total time: 00:00:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest        10000           get    ss    8  954,687 ± 63,179  ms/op
tests.maptests.object.JdkMapTest (10000) = 954.687470625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 889,462 ms/op
# Warmup Iteration   2: 888,279 ms/op
# Warmup Iteration   3: 874,354 ms/op
# Warmup Iteration   4: 878,466 ms/op
# Warmup Iteration   5: 879,841 ms/op
# Warmup Iteration   6: 873,838 ms/op
# Warmup Iteration   7: 884,746 ms/op
# Warmup Iteration   8: 885,771 ms/op
# Warmup Iteration   9: 890,492 ms/op
# Warmup Iteration  10: 884,850 ms/op
Iteration   1: 885,609 ms/op
Iteration   2: 956,100 ms/op
Iteration   3: 950,807 ms/op
Iteration   4: 958,161 ms/op
Iteration   5: 967,192 ms/op
Iteration   6: 961,901 ms/op
Iteration   7: 943,280 ms/op
Iteration   8: 953,227 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    947,035 ±(99.9%) 49,401 ms/op

  Histogram, ms/op:
    [880,000, 885,000) = 0
    [885,000, 890,000) = 1
    [890,000, 895,000) = 0
    [895,000, 900,000) = 0
    [900,000, 905,000) = 0
    [905,000, 910,000) = 0
    [910,000, 915,000) = 0
    [915,000, 920,000) = 0
    [920,000, 925,000) = 0
    [925,000, 930,000) = 0
    [930,000, 935,000) = 0
    [935,000, 940,000) = 0
    [940,000, 945,000) = 1
    [945,000, 950,000) = 0
    [950,000, 955,000) = 2
    [955,000, 960,000) = 2
    [960,000, 965,000) = 1

  Percentiles, ms/op:
      p(0,0000) =    885,609 ms/op
     p(50,0000) =    954,664 ms/op
     p(90,0000) =    967,192 ms/op
     p(95,0000) =    967,192 ms/op
     p(99,0000) =    967,192 ms/op
     p(99,9000) =    967,192 ms/op
     p(99,9900) =    967,192 ms/op
     p(99,9990) =    967,192 ms/op
     p(99,9999) =    967,192 ms/op
    p(100,0000) =    967,192 ms/op


# Run complete. Total time: 00:00:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity        10000           get    ss    8  947,035 ± 49,401  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (10000) = 947.0346370000001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2644,296 ms/op
# Warmup Iteration   2: 2694,614 ms/op
# Warmup Iteration   3: 2688,002 ms/op
# Warmup Iteration   4: 2689,177 ms/op
# Warmup Iteration   5: 2697,353 ms/op
# Warmup Iteration   6: 2687,917 ms/op
# Warmup Iteration   7: 2576,700 ms/op
# Warmup Iteration   8: 2568,392 ms/op
# Warmup Iteration   9: 2568,008 ms/op
# Warmup Iteration  10: 2560,053 ms/op
Iteration   1: 2618,618 ms/op
Iteration   2: 2539,513 ms/op
Iteration   3: 2526,879 ms/op
Iteration   4: 2537,716 ms/op
Iteration   5: 2526,860 ms/op
Iteration   6: 2544,230 ms/op
Iteration   7: 2529,446 ms/op
Iteration   8: 2525,662 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2543,615 ±(99.9%) 59,422 ms/op

  Histogram, ms/op:
    [2520,000, 2530,000) = 4
    [2530,000, 2540,000) = 2
    [2540,000, 2550,000) = 1
    [2550,000, 2560,000) = 0
    [2560,000, 2570,000) = 0
    [2570,000, 2580,000) = 0
    [2580,000, 2590,000) = 0
    [2590,000, 2600,000) = 0
    [2600,000, 2610,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2525,662 ms/op
     p(50,0000) =   2533,581 ms/op
     p(90,0000) =   2618,618 ms/op
     p(95,0000) =   2618,618 ms/op
     p(99,0000) =   2618,618 ms/op
     p(99,9000) =   2618,618 ms/op
     p(99,9900) =   2618,618 ms/op
     p(99,9990) =   2618,618 ms/op
     p(99,9999) =   2618,618 ms/op
    p(100,0000) =   2618,618 ms/op


# Run complete. Total time: 00:00:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest        10000           get    ss    8  2543,615 ± 59,422  ms/op
tests.maptests.object.TroveJbObjMapTest (10000) = 2543.615398
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2526,063 ms/op
# Warmup Iteration   2: 2546,608 ms/op
# Warmup Iteration   3: 2611,840 ms/op
# Warmup Iteration   4: 2557,784 ms/op
# Warmup Iteration   5: 2533,848 ms/op
# Warmup Iteration   6: 2537,182 ms/op
# Warmup Iteration   7: 2502,736 ms/op
# Warmup Iteration   8: 2509,827 ms/op
# Warmup Iteration   9: 2499,602 ms/op
# Warmup Iteration  10: 2496,284 ms/op
Iteration   1: 2506,707 ms/op
Iteration   2: 2304,366 ms/op
Iteration   3: 2289,490 ms/op
Iteration   4: 2296,789 ms/op
Iteration   5: 2349,858 ms/op
Iteration   6: 2302,649 ms/op
Iteration   7: 2288,051 ms/op
Iteration   8: 2297,346 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2329,407 ±(99.9%) 141,965 ms/op

  Histogram, ms/op:
    [2200,000, 2225,000) = 0
    [2225,000, 2250,000) = 0
    [2250,000, 2275,000) = 0
    [2275,000, 2300,000) = 4
    [2300,000, 2325,000) = 2
    [2325,000, 2350,000) = 1
    [2350,000, 2375,000) = 0
    [2375,000, 2400,000) = 0
    [2400,000, 2425,000) = 0
    [2425,000, 2450,000) = 0
    [2450,000, 2475,000) = 0
    [2475,000, 2500,000) = 0
    [2500,000, 2525,000) = 1
    [2525,000, 2550,000) = 0
    [2550,000, 2575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2288,051 ms/op
     p(50,0000) =   2299,998 ms/op
     p(90,0000) =   2506,707 ms/op
     p(95,0000) =   2506,707 ms/op
     p(99,0000) =   2506,707 ms/op
     p(99,9000) =   2506,707 ms/op
     p(99,9900) =   2506,707 ms/op
     p(99,9990) =   2506,707 ms/op
     p(99,9999) =   2506,707 ms/op
    p(100,0000) =   2506,707 ms/op


# Run complete. Total time: 00:00:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest        10000           get    ss    8  2329,407 ± 141,965  ms/op
tests.maptests.object.TroveObjMapTest (10000) = 2329.4073066250003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1137,814 ms/op
# Warmup Iteration   2: 1091,566 ms/op
# Warmup Iteration   3: 1076,394 ms/op
# Warmup Iteration   4: 1096,932 ms/op
# Warmup Iteration   5: 1086,405 ms/op
# Warmup Iteration   6: 1098,606 ms/op
# Warmup Iteration   7: 1141,625 ms/op
# Warmup Iteration   8: 1131,652 ms/op
# Warmup Iteration   9: 1158,300 ms/op
# Warmup Iteration  10: 1154,047 ms/op
Iteration   1: 1154,886 ms/op
Iteration   2: 1024,873 ms/op
Iteration   3: 1003,576 ms/op
Iteration   4: 996,489 ms/op
Iteration   5: 1003,328 ms/op
Iteration   6: 1089,584 ms/op
Iteration   7: 1012,613 ms/op
Iteration   8: 1025,229 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1038,822 ±(99.9%) 105,736 ms/op

  Histogram, ms/op:
    [ 900,000,  925,000) = 0
    [ 925,000,  950,000) = 0
    [ 950,000,  975,000) = 0
    [ 975,000, 1000,000) = 1
    [1000,000, 1025,000) = 4
    [1025,000, 1050,000) = 1
    [1050,000, 1075,000) = 0
    [1075,000, 1100,000) = 1
    [1100,000, 1125,000) = 0
    [1125,000, 1150,000) = 0
    [1150,000, 1175,000) = 1

  Percentiles, ms/op:
      p(0,0000) =    996,489 ms/op
     p(50,0000) =   1018,743 ms/op
     p(90,0000) =   1154,886 ms/op
     p(95,0000) =   1154,886 ms/op
     p(99,0000) =   1154,886 ms/op
     p(99,9000) =   1154,886 ms/op
     p(99,9900) =   1154,886 ms/op
     p(99,9990) =   1154,886 ms/op
     p(99,9999) =   1154,886 ms/op
    p(100,0000) =   1154,886 ms/op


# Run complete. Total time: 00:00:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest        10000           get    ss    8  1038,822 ± 105,736  ms/op
tests.maptests.article_examples.ObjObjMapTest (10000) = 1038.8221961250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 827,996 ms/op
# Warmup Iteration   2: 788,083 ms/op
# Warmup Iteration   3: 784,290 ms/op
# Warmup Iteration   4: 784,160 ms/op
# Warmup Iteration   5: 784,348 ms/op
# Warmup Iteration   6: 800,693 ms/op
# Warmup Iteration   7: 818,809 ms/op
# Warmup Iteration   8: 822,740 ms/op
# Warmup Iteration   9: 824,599 ms/op
# Warmup Iteration  10: 841,724 ms/op
Iteration   1: 832,788 ms/op
Iteration   2: 779,968 ms/op
Iteration   3: 793,288 ms/op
Iteration   4: 781,806 ms/op
Iteration   5: 779,732 ms/op
Iteration   6: 779,190 ms/op
Iteration   7: 778,188 ms/op
Iteration   8: 778,103 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    787,883 ±(99.9%) 35,966 ms/op

  Histogram, ms/op:
    [770,000, 775,000) = 0
    [775,000, 780,000) = 5
    [780,000, 785,000) = 1
    [785,000, 790,000) = 0
    [790,000, 795,000) = 1
    [795,000, 800,000) = 0
    [800,000, 805,000) = 0
    [805,000, 810,000) = 0
    [810,000, 815,000) = 0
    [815,000, 820,000) = 0
    [820,000, 825,000) = 0
    [825,000, 830,000) = 0
    [830,000, 835,000) = 1

  Percentiles, ms/op:
      p(0,0000) =    778,103 ms/op
     p(50,0000) =    779,850 ms/op
     p(90,0000) =    832,788 ms/op
     p(95,0000) =    832,788 ms/op
     p(99,0000) =    832,788 ms/op
     p(99,9000) =    832,788 ms/op
     p(99,9900) =    832,788 ms/op
     p(99,9990) =    832,788 ms/op
     p(99,9999) =    832,788 ms/op
    p(100,0000) =    832,788 ms/op


# Run complete. Total time: 00:00:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest        10000           get    ss    8  787,883 ± 35,966  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (10000) = 787.8829432499999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1028,362 ms/op
# Warmup Iteration   2: 1060,666 ms/op
# Warmup Iteration   3: 1112,924 ms/op
# Warmup Iteration   4: 1054,665 ms/op
# Warmup Iteration   5: 1064,278 ms/op
# Warmup Iteration   6: 1049,766 ms/op
# Warmup Iteration   7: 963,035 ms/op
# Warmup Iteration   8: 945,377 ms/op
# Warmup Iteration   9: 948,695 ms/op
# Warmup Iteration  10: 945,711 ms/op
Iteration   1: 950,226 ms/op
Iteration   2: 825,460 ms/op
Iteration   3: 825,331 ms/op
Iteration   4: 828,956 ms/op
Iteration   5: 826,545 ms/op
Iteration   6: 831,478 ms/op
Iteration   7: 825,794 ms/op
Iteration   8: 820,957 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    841,843 ±(99.9%) 83,932 ms/op

  Histogram, ms/op:
    [ 800,000,  812,500) = 0
    [ 812,500,  825,000) = 1
    [ 825,000,  837,500) = 6
    [ 837,500,  850,000) = 0
    [ 850,000,  862,500) = 0
    [ 862,500,  875,000) = 0
    [ 875,000,  887,500) = 0
    [ 887,500,  900,000) = 0
    [ 900,000,  912,500) = 0
    [ 912,500,  925,000) = 0
    [ 925,000,  937,500) = 0
    [ 937,500,  950,000) = 0
    [ 950,000,  962,500) = 1
    [ 962,500,  975,000) = 0
    [ 975,000,  987,500) = 0

  Percentiles, ms/op:
      p(0,0000) =    820,957 ms/op
     p(50,0000) =    826,169 ms/op
     p(90,0000) =    950,226 ms/op
     p(95,0000) =    950,226 ms/op
     p(99,0000) =    950,226 ms/op
     p(99,9000) =    950,226 ms/op
     p(99,9900) =    950,226 ms/op
     p(99,9990) =    950,226 ms/op
     p(99,9999) =    950,226 ms/op
    p(100,0000) =    950,226 ms/op


# Run complete. Total time: 00:00:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest        10000           get    ss    8  841,843 ± 83,932  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (10000) = 841.843384
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 850,419 ms/op
# Warmup Iteration   2: 785,873 ms/op
# Warmup Iteration   3: 773,385 ms/op
# Warmup Iteration   4: 783,545 ms/op
# Warmup Iteration   5: 789,197 ms/op
# Warmup Iteration   6: 774,715 ms/op
# Warmup Iteration   7: 869,889 ms/op
# Warmup Iteration   8: 888,452 ms/op
# Warmup Iteration   9: 894,522 ms/op
# Warmup Iteration  10: 883,252 ms/op
Iteration   1: 875,125 ms/op
Iteration   2: 984,630 ms/op
Iteration   3: 926,227 ms/op
Iteration   4: 925,973 ms/op
Iteration   5: 920,190 ms/op
Iteration   6: 926,364 ms/op
Iteration   7: 924,002 ms/op
Iteration   8: 926,166 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    926,085 ±(99.9%) 56,273 ms/op

  Histogram, ms/op:
    [ 800,000,  812,500) = 0
    [ 812,500,  825,000) = 0
    [ 825,000,  837,500) = 0
    [ 837,500,  850,000) = 0
    [ 850,000,  862,500) = 0
    [ 862,500,  875,000) = 0
    [ 875,000,  887,500) = 1
    [ 887,500,  900,000) = 0
    [ 900,000,  912,500) = 0
    [ 912,500,  925,000) = 2
    [ 925,000,  937,500) = 4
    [ 937,500,  950,000) = 0
    [ 950,000,  962,500) = 0
    [ 962,500,  975,000) = 0
    [ 975,000,  987,500) = 1

  Percentiles, ms/op:
      p(0,0000) =    875,125 ms/op
     p(50,0000) =    926,069 ms/op
     p(90,0000) =    984,630 ms/op
     p(95,0000) =    984,630 ms/op
     p(99,0000) =    984,630 ms/op
     p(99,9000) =    984,630 ms/op
     p(99,9900) =    984,630 ms/op
     p(99,9990) =    984,630 ms/op
     p(99,9999) =    984,630 ms/op
    p(100,0000) =    984,630 ms/op


# Run complete. Total time: 00:00:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest        10000           get    ss    8  926,085 ± 56,273  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (10000) = 926.084636875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 929,890 ms/op
# Warmup Iteration   2: 931,628 ms/op
# Warmup Iteration   3: 925,678 ms/op
# Warmup Iteration   4: 931,922 ms/op
# Warmup Iteration   5: 927,734 ms/op
# Warmup Iteration   6: 928,940 ms/op
# Warmup Iteration   7: 916,795 ms/op
# Warmup Iteration   8: 910,916 ms/op
# Warmup Iteration   9: 910,866 ms/op
# Warmup Iteration  10: 911,616 ms/op
Iteration   1: 909,300 ms/op
Iteration   2: 1046,681 ms/op
Iteration   3: 1049,984 ms/op
Iteration   4: 1045,253 ms/op
Iteration   5: 1043,833 ms/op
Iteration   6: 1043,984 ms/op
Iteration   7: 1044,790 ms/op
Iteration   8: 1045,887 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1028,714 ±(99.9%) 92,330 ms/op

  Histogram, ms/op:
    [ 900,000,  912,500) = 1
    [ 912,500,  925,000) = 0
    [ 925,000,  937,500) = 0
    [ 937,500,  950,000) = 0
    [ 950,000,  962,500) = 0
    [ 962,500,  975,000) = 0
    [ 975,000,  987,500) = 0
    [ 987,500, 1000,000) = 0
    [1000,000, 1012,500) = 0
    [1012,500, 1025,000) = 0
    [1025,000, 1037,500) = 0
    [1037,500, 1050,000) = 7
    [1050,000, 1062,500) = 0
    [1062,500, 1075,000) = 0
    [1075,000, 1087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =    909,300 ms/op
     p(50,0000) =   1045,022 ms/op
     p(90,0000) =   1049,984 ms/op
     p(95,0000) =   1049,984 ms/op
     p(99,0000) =   1049,984 ms/op
     p(99,9000) =   1049,984 ms/op
     p(99,9900) =   1049,984 ms/op
     p(99,9990) =   1049,984 ms/op
     p(99,9999) =   1049,984 ms/op
    p(100,0000) =   1049,984 ms/op


# Run complete. Total time: 00:00:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest        10000           get    ss    8  1028,714 ± 92,330  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (10000) = 1028.714180125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2257,118 ms/op
# Warmup Iteration   2: 2245,949 ms/op
# Warmup Iteration   3: 2230,544 ms/op
# Warmup Iteration   4: 2215,107 ms/op
# Warmup Iteration   5: 2245,605 ms/op
# Warmup Iteration   6: 2246,120 ms/op
# Warmup Iteration   7: 2262,462 ms/op
# Warmup Iteration   8: 2231,024 ms/op
# Warmup Iteration   9: 2234,200 ms/op
# Warmup Iteration  10: 2234,296 ms/op
Iteration   1: 2233,369 ms/op
Iteration   2: 2202,923 ms/op
Iteration   3: 2141,761 ms/op
Iteration   4: 2141,150 ms/op
Iteration   5: 2136,196 ms/op
Iteration   6: 2143,251 ms/op
Iteration   7: 2135,009 ms/op
Iteration   8: 2139,203 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2159,108 ±(99.9%) 71,581 ms/op

  Histogram, ms/op:
    [2130,000, 2140,000) = 3
    [2140,000, 2150,000) = 3
    [2150,000, 2160,000) = 0
    [2160,000, 2170,000) = 0
    [2170,000, 2180,000) = 0
    [2180,000, 2190,000) = 0
    [2190,000, 2200,000) = 0
    [2200,000, 2210,000) = 1
    [2210,000, 2220,000) = 0
    [2220,000, 2230,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2135,009 ms/op
     p(50,0000) =   2141,456 ms/op
     p(90,0000) =   2233,369 ms/op
     p(95,0000) =   2233,369 ms/op
     p(99,0000) =   2233,369 ms/op
     p(99,9000) =   2233,369 ms/op
     p(99,9900) =   2233,369 ms/op
     p(99,9990) =   2233,369 ms/op
     p(99,9999) =   2233,369 ms/op
    p(100,0000) =   2233,369 ms/op


# Run complete. Total time: 00:00:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest        10000           get    ss    8  2159,108 ± 71,581  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (10000) = 2159.10788375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2127,572 ms/op
# Warmup Iteration   2: 2134,678 ms/op
# Warmup Iteration   3: 2135,729 ms/op
# Warmup Iteration   4: 2125,791 ms/op
# Warmup Iteration   5: 2127,181 ms/op
# Warmup Iteration   6: 2190,818 ms/op
# Warmup Iteration   7: 2088,901 ms/op
# Warmup Iteration   8: 2081,908 ms/op
# Warmup Iteration   9: 2083,193 ms/op
# Warmup Iteration  10: 2081,504 ms/op
Iteration   1: 2084,355 ms/op
Iteration   2: 2028,702 ms/op
Iteration   3: 2048,052 ms/op
Iteration   4: 2029,392 ms/op
Iteration   5: 2028,365 ms/op
Iteration   6: 2029,233 ms/op
Iteration   7: 2033,121 ms/op
Iteration   8: 2027,705 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2038,616 ±(99.9%) 37,598 ms/op

  Histogram, ms/op:
    [2020,000, 2025,000) = 0
    [2025,000, 2030,000) = 5
    [2030,000, 2035,000) = 1
    [2035,000, 2040,000) = 0
    [2040,000, 2045,000) = 0
    [2045,000, 2050,000) = 1
    [2050,000, 2055,000) = 0
    [2055,000, 2060,000) = 0
    [2060,000, 2065,000) = 0
    [2065,000, 2070,000) = 0
    [2070,000, 2075,000) = 0
    [2075,000, 2080,000) = 0
    [2080,000, 2085,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2027,705 ms/op
     p(50,0000) =   2029,312 ms/op
     p(90,0000) =   2084,355 ms/op
     p(95,0000) =   2084,355 ms/op
     p(99,0000) =   2084,355 ms/op
     p(99,9000) =   2084,355 ms/op
     p(99,9900) =   2084,355 ms/op
     p(99,9990) =   2084,355 ms/op
     p(99,9999) =   2084,355 ms/op
    p(100,0000) =   2084,355 ms/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest        10000           get    ss    8  2038,616 ± 37,598  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (10000) = 2038.615572375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1252,553 ms/op
# Warmup Iteration   2: 1241,758 ms/op
# Warmup Iteration   3: 1230,894 ms/op
# Warmup Iteration   4: 1229,978 ms/op
# Warmup Iteration   5: 1228,407 ms/op
# Warmup Iteration   6: 1233,485 ms/op
# Warmup Iteration   7: 1223,544 ms/op
# Warmup Iteration   8: 1216,519 ms/op
# Warmup Iteration   9: 1230,290 ms/op
# Warmup Iteration  10: 1224,109 ms/op
Iteration   1: 1220,067 ms/op
Iteration   2: 1215,866 ms/op
Iteration   3: 1222,467 ms/op
Iteration   4: 1223,007 ms/op
Iteration   5: 1213,341 ms/op
Iteration   6: 1217,368 ms/op
Iteration   7: 1216,053 ms/op
Iteration   8: 1210,827 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1217,374 ±(99.9%) 8,178 ms/op

  Histogram, ms/op:
    [1210,000, 1211,250) = 1
    [1211,250, 1212,500) = 0
    [1212,500, 1213,750) = 1
    [1213,750, 1215,000) = 0
    [1215,000, 1216,250) = 2
    [1216,250, 1217,500) = 1
    [1217,500, 1218,750) = 0
    [1218,750, 1220,000) = 0
    [1220,000, 1221,250) = 1
    [1221,250, 1222,500) = 1
    [1222,500, 1223,750) = 1
    [1223,750, 1225,000) = 0
    [1225,000, 1226,250) = 0
    [1226,250, 1227,500) = 0
    [1227,500, 1228,750) = 0

  Percentiles, ms/op:
      p(0,0000) =   1210,827 ms/op
     p(50,0000) =   1216,711 ms/op
     p(90,0000) =   1223,007 ms/op
     p(95,0000) =   1223,007 ms/op
     p(99,0000) =   1223,007 ms/op
     p(99,9000) =   1223,007 ms/op
     p(99,9900) =   1223,007 ms/op
     p(99,9990) =   1223,007 ms/op
     p(99,9999) =   1223,007 ms/op
    p(100,0000) =   1223,007 ms/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score   Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest        10000           get    ss    8  1217,374 ± 8,178  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (10000) = 1217.374470875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1639,736 ms/op
# Warmup Iteration   2: 1541,021 ms/op
# Warmup Iteration   3: 1564,782 ms/op
# Warmup Iteration   4: 1553,384 ms/op
# Warmup Iteration   5: 1550,548 ms/op
# Warmup Iteration   6: 1560,802 ms/op
# Warmup Iteration   7: 1587,847 ms/op
# Warmup Iteration   8: 1582,882 ms/op
# Warmup Iteration   9: 1592,426 ms/op
# Warmup Iteration  10: 1594,797 ms/op
Iteration   1: 1580,744 ms/op
Iteration   2: 1537,010 ms/op
Iteration   3: 1533,000 ms/op
Iteration   4: 1532,480 ms/op
Iteration   5: 1537,287 ms/op
Iteration   6: 1553,802 ms/op
Iteration   7: 1538,886 ms/op
Iteration   8: 1543,366 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1544,572 ±(99.9%) 30,811 ms/op

  Histogram, ms/op:
    [1530,000, 1535,000) = 2
    [1535,000, 1540,000) = 3
    [1540,000, 1545,000) = 1
    [1545,000, 1550,000) = 0
    [1550,000, 1555,000) = 1
    [1555,000, 1560,000) = 0
    [1560,000, 1565,000) = 0
    [1565,000, 1570,000) = 0
    [1570,000, 1575,000) = 0
    [1575,000, 1580,000) = 0
    [1580,000, 1585,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1532,480 ms/op
     p(50,0000) =   1538,086 ms/op
     p(90,0000) =   1580,744 ms/op
     p(95,0000) =   1580,744 ms/op
     p(99,0000) =   1580,744 ms/op
     p(99,9000) =   1580,744 ms/op
     p(99,9900) =   1580,744 ms/op
     p(99,9990) =   1580,744 ms/op
     p(99,9999) =   1580,744 ms/op
    p(100,0000) =   1580,744 ms/op


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest        10000           get    ss    8  1544,572 ± 30,811  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (10000) = 1544.57181875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1377,640 ms/op
# Warmup Iteration   2: 1367,225 ms/op
# Warmup Iteration   3: 1362,790 ms/op
# Warmup Iteration   4: 1351,993 ms/op
# Warmup Iteration   5: 1370,546 ms/op
# Warmup Iteration   6: 1373,660 ms/op
# Warmup Iteration   7: 1377,514 ms/op
# Warmup Iteration   8: 1354,317 ms/op
# Warmup Iteration   9: 1360,621 ms/op
# Warmup Iteration  10: 1371,401 ms/op
Iteration   1: 1368,336 ms/op
Iteration   2: 1362,303 ms/op
Iteration   3: 1342,865 ms/op
Iteration   4: 1369,073 ms/op
Iteration   5: 1348,903 ms/op
Iteration   6: 1348,132 ms/op
Iteration   7: 1340,399 ms/op
Iteration   8: 1362,339 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1355,294 ±(99.9%) 22,005 ms/op

  Histogram, ms/op:
    [1340,000, 1342,500) = 1
    [1342,500, 1345,000) = 1
    [1345,000, 1347,500) = 0
    [1347,500, 1350,000) = 2
    [1350,000, 1352,500) = 0
    [1352,500, 1355,000) = 0
    [1355,000, 1357,500) = 0
    [1357,500, 1360,000) = 0
    [1360,000, 1362,500) = 2
    [1362,500, 1365,000) = 0
    [1365,000, 1367,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1340,399 ms/op
     p(50,0000) =   1355,603 ms/op
     p(90,0000) =   1369,073 ms/op
     p(95,0000) =   1369,073 ms/op
     p(99,0000) =   1369,073 ms/op
     p(99,9000) =   1369,073 ms/op
     p(99,9900) =   1369,073 ms/op
     p(99,9990) =   1369,073 ms/op
     p(99,9999) =   1369,073 ms/op
    p(100,0000) =   1369,073 ms/op


# Run complete. Total time: 00:00:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest        10000           get    ss    8  1355,294 ± 22,005  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (10000) = 1355.293616875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1322,002 ms/op
# Warmup Iteration   2: 1361,046 ms/op
# Warmup Iteration   3: 1358,030 ms/op
# Warmup Iteration   4: 1356,970 ms/op
# Warmup Iteration   5: 1368,270 ms/op
# Warmup Iteration   6: 1351,898 ms/op
# Warmup Iteration   7: 1279,061 ms/op
# Warmup Iteration   8: 1243,064 ms/op
# Warmup Iteration   9: 1244,575 ms/op
# Warmup Iteration  10: 1234,795 ms/op
Iteration   1: 1243,843 ms/op
Iteration   2: 1384,054 ms/op
Iteration   3: 1385,077 ms/op
Iteration   4: 1388,655 ms/op
Iteration   5: 1389,065 ms/op
Iteration   6: 1397,752 ms/op
Iteration   7: 1386,395 ms/op
Iteration   8: 1401,939 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1372,097 ±(99.9%) 99,810 ms/op

  Histogram, ms/op:
    [1200,000, 1225,000) = 0
    [1225,000, 1250,000) = 1
    [1250,000, 1275,000) = 0
    [1275,000, 1300,000) = 0
    [1300,000, 1325,000) = 0
    [1325,000, 1350,000) = 0
    [1350,000, 1375,000) = 0
    [1375,000, 1400,000) = 6
    [1400,000, 1425,000) = 1
    [1425,000, 1450,000) = 0
    [1450,000, 1475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1243,843 ms/op
     p(50,0000) =   1387,525 ms/op
     p(90,0000) =   1401,939 ms/op
     p(95,0000) =   1401,939 ms/op
     p(99,0000) =   1401,939 ms/op
     p(99,9000) =   1401,939 ms/op
     p(99,9900) =   1401,939 ms/op
     p(99,9990) =   1401,939 ms/op
     p(99,9999) =   1401,939 ms/op
    p(100,0000) =   1401,939 ms/op


# Run complete. Total time: 00:00:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest        10000           get    ss    8  1372,097 ± 99,810  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (10000) = 1372.0972525
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2657,542 ms/op
# Warmup Iteration   2: 2630,152 ms/op
# Warmup Iteration   3: 2639,297 ms/op
# Warmup Iteration   4: 2630,728 ms/op
# Warmup Iteration   5: 2633,559 ms/op
# Warmup Iteration   6: 2636,714 ms/op
# Warmup Iteration   7: 2677,101 ms/op
# Warmup Iteration   8: 2644,599 ms/op
# Warmup Iteration   9: 2650,151 ms/op
# Warmup Iteration  10: 2655,911 ms/op
Iteration   1: 2710,420 ms/op
Iteration   2: 2511,159 ms/op
Iteration   3: 2509,466 ms/op
Iteration   4: 2505,301 ms/op
Iteration   5: 2539,091 ms/op
Iteration   6: 2511,485 ms/op
Iteration   7: 2509,814 ms/op
Iteration   8: 2508,698 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2538,179 ±(99.9%) 134,596 ms/op

  Histogram, ms/op:
    [2500,000, 2525,000) = 6
    [2525,000, 2550,000) = 1
    [2550,000, 2575,000) = 0
    [2575,000, 2600,000) = 0
    [2600,000, 2625,000) = 0
    [2625,000, 2650,000) = 0
    [2650,000, 2675,000) = 0
    [2675,000, 2700,000) = 0
    [2700,000, 2725,000) = 1
    [2725,000, 2750,000) = 0
    [2750,000, 2775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2505,301 ms/op
     p(50,0000) =   2510,487 ms/op
     p(90,0000) =   2710,420 ms/op
     p(95,0000) =   2710,420 ms/op
     p(99,0000) =   2710,420 ms/op
     p(99,9000) =   2710,420 ms/op
     p(99,9900) =   2710,420 ms/op
     p(99,9990) =   2710,420 ms/op
     p(99,9999) =   2710,420 ms/op
    p(100,0000) =   2710,420 ms/op


# Run complete. Total time: 00:00:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest        10000           get    ss    8  2538,179 ± 134,596  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (10000) = 2538.179296625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2489,496 ms/op
# Warmup Iteration   2: 2525,135 ms/op
# Warmup Iteration   3: 2583,586 ms/op
# Warmup Iteration   4: 2524,055 ms/op
# Warmup Iteration   5: 2518,709 ms/op
# Warmup Iteration   6: 2527,068 ms/op
# Warmup Iteration   7: 2448,649 ms/op
# Warmup Iteration   8: 2424,261 ms/op
# Warmup Iteration   9: 2435,655 ms/op
# Warmup Iteration  10: 2443,581 ms/op
Iteration   1: 2439,188 ms/op
Iteration   2: 2431,267 ms/op
Iteration   3: 2436,205 ms/op
Iteration   4: 2420,385 ms/op
Iteration   5: 2489,689 ms/op
Iteration   6: 2417,472 ms/op
Iteration   7: 2415,274 ms/op
Iteration   8: 2439,214 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2436,087 ±(99.9%) 45,373 ms/op

  Histogram, ms/op:
    [2410,000, 2415,000) = 0
    [2415,000, 2420,000) = 2
    [2420,000, 2425,000) = 1
    [2425,000, 2430,000) = 0
    [2430,000, 2435,000) = 1
    [2435,000, 2440,000) = 3
    [2440,000, 2445,000) = 0
    [2445,000, 2450,000) = 0
    [2450,000, 2455,000) = 0
    [2455,000, 2460,000) = 0
    [2460,000, 2465,000) = 0
    [2465,000, 2470,000) = 0
    [2470,000, 2475,000) = 0
    [2475,000, 2480,000) = 0
    [2480,000, 2485,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2415,274 ms/op
     p(50,0000) =   2433,736 ms/op
     p(90,0000) =   2489,689 ms/op
     p(95,0000) =   2489,689 ms/op
     p(99,0000) =   2489,689 ms/op
     p(99,9000) =   2489,689 ms/op
     p(99,9900) =   2489,689 ms/op
     p(99,9990) =   2489,689 ms/op
     p(99,9999) =   2489,689 ms/op
    p(100,0000) =   2489,689 ms/op


# Run complete. Total time: 00:00:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest        10000           get    ss    8  2436,087 ± 45,373  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (10000) = 2436.0868703749998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 694,049 ms/op
# Warmup Iteration   2: 651,496 ms/op
# Warmup Iteration   3: 648,964 ms/op
# Warmup Iteration   4: 648,467 ms/op
# Warmup Iteration   5: 652,376 ms/op
# Warmup Iteration   6: 653,106 ms/op
# Warmup Iteration   7: 667,431 ms/op
# Warmup Iteration   8: 683,580 ms/op
# Warmup Iteration   9: 679,130 ms/op
# Warmup Iteration  10: 675,890 ms/op
Iteration   1: 676,720 ms/op
Iteration   2: 648,019 ms/op
Iteration   3: 642,154 ms/op
Iteration   4: 659,932 ms/op
Iteration   5: 644,760 ms/op
Iteration   6: 642,174 ms/op
Iteration   7: 647,156 ms/op
Iteration   8: 650,245 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    651,395 ±(99.9%) 22,384 ms/op

  Histogram, ms/op:
    [640,000, 642,500) = 2
    [642,500, 645,000) = 1
    [645,000, 647,500) = 1
    [647,500, 650,000) = 1
    [650,000, 652,500) = 1
    [652,500, 655,000) = 0
    [655,000, 657,500) = 0
    [657,500, 660,000) = 1
    [660,000, 662,500) = 0
    [662,500, 665,000) = 0
    [665,000, 667,500) = 0
    [667,500, 670,000) = 0
    [670,000, 672,500) = 0
    [672,500, 675,000) = 0
    [675,000, 677,500) = 1

  Percentiles, ms/op:
      p(0,0000) =    642,154 ms/op
     p(50,0000) =    647,587 ms/op
     p(90,0000) =    676,720 ms/op
     p(95,0000) =    676,720 ms/op
     p(99,0000) =    676,720 ms/op
     p(99,9000) =    676,720 ms/op
     p(99,9900) =    676,720 ms/op
     p(99,9990) =    676,720 ms/op
     p(99,9999) =    676,720 ms/op
    p(100,0000) =    676,720 ms/op


# Run complete. Total time: 00:00:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest        10000           get    ss    8  651,395 ± 22,384  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (10000) = 651.394769
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 767,906 ms/op
# Warmup Iteration   2: 756,090 ms/op
# Warmup Iteration   3: 749,275 ms/op
# Warmup Iteration   4: 749,520 ms/op
# Warmup Iteration   5: 752,488 ms/op
# Warmup Iteration   6: 747,596 ms/op
# Warmup Iteration   7: 758,989 ms/op
# Warmup Iteration   8: 751,116 ms/op
# Warmup Iteration   9: 743,976 ms/op
# Warmup Iteration  10: 744,098 ms/op
Iteration   1: 751,354 ms/op
Iteration   2: 841,020 ms/op
Iteration   3: 856,382 ms/op
Iteration   4: 848,824 ms/op
Iteration   5: 845,633 ms/op
Iteration   6: 840,448 ms/op
Iteration   7: 842,182 ms/op
Iteration   8: 842,989 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    833,604 ±(99.9%) 64,328 ms/op

  Histogram, ms/op:
    [700,000, 712,500) = 0
    [712,500, 725,000) = 0
    [725,000, 737,500) = 0
    [737,500, 750,000) = 0
    [750,000, 762,500) = 1
    [762,500, 775,000) = 0
    [775,000, 787,500) = 0
    [787,500, 800,000) = 0
    [800,000, 812,500) = 0
    [812,500, 825,000) = 0
    [825,000, 837,500) = 0
    [837,500, 850,000) = 6
    [850,000, 862,500) = 1
    [862,500, 875,000) = 0
    [875,000, 887,500) = 0

  Percentiles, ms/op:
      p(0,0000) =    751,354 ms/op
     p(50,0000) =    842,586 ms/op
     p(90,0000) =    856,382 ms/op
     p(95,0000) =    856,382 ms/op
     p(99,0000) =    856,382 ms/op
     p(99,9000) =    856,382 ms/op
     p(99,9900) =    856,382 ms/op
     p(99,9990) =    856,382 ms/op
     p(99,9999) =    856,382 ms/op
    p(100,0000) =    856,382 ms/op


# Run complete. Total time: 00:00:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest        10000           get    ss    8  833,604 ± 64,328  ms/op
tests.maptests.identity_object.GsIdentityMapTest (10000) = 833.60404125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 861,252 ms/op
# Warmup Iteration   2: 773,694 ms/op
# Warmup Iteration   3: 770,156 ms/op
# Warmup Iteration   4: 767,562 ms/op
# Warmup Iteration   5: 775,786 ms/op
# Warmup Iteration   6: 770,406 ms/op
# Warmup Iteration   7: 885,280 ms/op
# Warmup Iteration   8: 895,811 ms/op
# Warmup Iteration   9: 898,078 ms/op
# Warmup Iteration  10: 894,000 ms/op
Iteration   1: 886,262 ms/op
Iteration   2: 1037,024 ms/op
Iteration   3: 971,558 ms/op
Iteration   4: 964,264 ms/op
Iteration   5: 968,466 ms/op
Iteration   6: 965,358 ms/op
Iteration   7: 973,400 ms/op
Iteration   8: 974,476 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    967,601 ±(99.9%) 77,662 ms/op

  Histogram, ms/op:
    [ 800,000,  825,000) = 0
    [ 825,000,  850,000) = 0
    [ 850,000,  875,000) = 0
    [ 875,000,  900,000) = 1
    [ 900,000,  925,000) = 0
    [ 925,000,  950,000) = 0
    [ 950,000,  975,000) = 6
    [ 975,000, 1000,000) = 0
    [1000,000, 1025,000) = 0
    [1025,000, 1050,000) = 1
    [1050,000, 1075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    886,262 ms/op
     p(50,0000) =    970,012 ms/op
     p(90,0000) =   1037,024 ms/op
     p(95,0000) =   1037,024 ms/op
     p(99,0000) =   1037,024 ms/op
     p(99,9000) =   1037,024 ms/op
     p(99,9900) =   1037,024 ms/op
     p(99,9990) =   1037,024 ms/op
     p(99,9999) =   1037,024 ms/op
    p(100,0000) =   1037,024 ms/op


# Run complete. Total time: 00:00:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest        10000           get    ss    8  967,601 ± 77,662  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (10000) = 967.600957125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 762,630 ms/op
# Warmup Iteration   2: 790,928 ms/op
# Warmup Iteration   3: 799,463 ms/op
# Warmup Iteration   4: 801,485 ms/op
# Warmup Iteration   5: 790,484 ms/op
# Warmup Iteration   6: 793,949 ms/op
# Warmup Iteration   7: 709,072 ms/op
# Warmup Iteration   8: 702,752 ms/op
# Warmup Iteration   9: 693,897 ms/op
# Warmup Iteration  10: 695,960 ms/op
Iteration   1: 701,397 ms/op
Iteration   2: 903,470 ms/op
Iteration   3: 899,781 ms/op
Iteration   4: 898,794 ms/op
Iteration   5: 904,972 ms/op
Iteration   6: 894,314 ms/op
Iteration   7: 899,165 ms/op
Iteration   8: 901,443 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    875,417 ±(99.9%) 134,582 ms/op

  Histogram, ms/op:
    [ 700,000,  725,000) = 1
    [ 725,000,  750,000) = 0
    [ 750,000,  775,000) = 0
    [ 775,000,  800,000) = 0
    [ 800,000,  825,000) = 0
    [ 825,000,  850,000) = 0
    [ 850,000,  875,000) = 0
    [ 875,000,  900,000) = 4
    [ 900,000,  925,000) = 3
    [ 925,000,  950,000) = 0
    [ 950,000,  975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    701,397 ms/op
     p(50,0000) =    899,473 ms/op
     p(90,0000) =    904,972 ms/op
     p(95,0000) =    904,972 ms/op
     p(99,0000) =    904,972 ms/op
     p(99,9000) =    904,972 ms/op
     p(99,9900) =    904,972 ms/op
     p(99,9990) =    904,972 ms/op
     p(99,9999) =    904,972 ms/op
    p(100,0000) =    904,972 ms/op


# Run complete. Total time: 00:00:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest        10000           get    ss    8  875,417 ± 134,582  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (10000) = 875.4171361250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1502,681 ms/op
# Warmup Iteration   2: 1602,508 ms/op
# Warmup Iteration   3: 1592,913 ms/op
# Warmup Iteration   4: 1601,929 ms/op
# Warmup Iteration   5: 1602,626 ms/op
# Warmup Iteration   6: 1597,727 ms/op
# Warmup Iteration   7: 1429,180 ms/op
# Warmup Iteration   8: 1400,302 ms/op
# Warmup Iteration   9: 1410,698 ms/op
# Warmup Iteration  10: 1399,326 ms/op
Iteration   1: 1416,615 ms/op
Iteration   2: 1551,988 ms/op
Iteration   3: 1567,674 ms/op
Iteration   4: 1550,583 ms/op
Iteration   5: 1544,996 ms/op
Iteration   6: 1548,722 ms/op
Iteration   7: 1544,058 ms/op
Iteration   8: 1554,696 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1534,916 ±(99.9%) 92,467 ms/op

  Histogram, ms/op:
    [1400,000, 1412,500) = 0
    [1412,500, 1425,000) = 1
    [1425,000, 1437,500) = 0
    [1437,500, 1450,000) = 0
    [1450,000, 1462,500) = 0
    [1462,500, 1475,000) = 0
    [1475,000, 1487,500) = 0
    [1487,500, 1500,000) = 0
    [1500,000, 1512,500) = 0
    [1512,500, 1525,000) = 0
    [1525,000, 1537,500) = 0
    [1537,500, 1550,000) = 3
    [1550,000, 1562,500) = 3
    [1562,500, 1575,000) = 1
    [1575,000, 1587,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1416,615 ms/op
     p(50,0000) =   1549,652 ms/op
     p(90,0000) =   1567,674 ms/op
     p(95,0000) =   1567,674 ms/op
     p(99,0000) =   1567,674 ms/op
     p(99,9000) =   1567,674 ms/op
     p(99,9900) =   1567,674 ms/op
     p(99,9990) =   1567,674 ms/op
     p(99,9999) =   1567,674 ms/op
    p(100,0000) =   1567,674 ms/op


# Run complete. Total time: 00:00:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest        10000           get    ss    8  1534,916 ± 92,467  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (10000) = 1534.916346125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2280,103 ms/op
# Warmup Iteration   2: 2232,660 ms/op
# Warmup Iteration   3: 2234,818 ms/op
# Warmup Iteration   4: 2228,926 ms/op
# Warmup Iteration   5: 2230,780 ms/op
# Warmup Iteration   6: 2225,410 ms/op
# Warmup Iteration   7: 2291,429 ms/op
# Warmup Iteration   8: 2300,014 ms/op
# Warmup Iteration   9: 2307,665 ms/op
# Warmup Iteration  10: 2300,725 ms/op
Iteration   1: 2295,912 ms/op
Iteration   2: 2269,200 ms/op
Iteration   3: 2203,792 ms/op
Iteration   4: 2211,214 ms/op
Iteration   5: 2203,998 ms/op
Iteration   6: 2205,489 ms/op
Iteration   7: 2205,512 ms/op
Iteration   8: 2206,167 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2225,161 ±(99.9%) 69,233 ms/op

  Histogram, ms/op:
    [2200,000, 2210,000) = 5
    [2210,000, 2220,000) = 1
    [2220,000, 2230,000) = 0
    [2230,000, 2240,000) = 0
    [2240,000, 2250,000) = 0
    [2250,000, 2260,000) = 0
    [2260,000, 2270,000) = 1
    [2270,000, 2280,000) = 0
    [2280,000, 2290,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2203,792 ms/op
     p(50,0000) =   2205,839 ms/op
     p(90,0000) =   2295,912 ms/op
     p(95,0000) =   2295,912 ms/op
     p(99,0000) =   2295,912 ms/op
     p(99,9000) =   2295,912 ms/op
     p(99,9900) =   2295,912 ms/op
     p(99,9990) =   2295,912 ms/op
     p(99,9999) =   2295,912 ms/op
    p(100,0000) =   2295,912 ms/op


# Run complete. Total time: 00:00:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest        10000           get    ss    8  2225,161 ± 69,233  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (10000) = 2225.160596625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 10000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2288,995 ms/op
# Warmup Iteration   2: 2228,777 ms/op
# Warmup Iteration   3: 2230,640 ms/op
# Warmup Iteration   4: 2226,136 ms/op
# Warmup Iteration   5: 2289,777 ms/op
# Warmup Iteration   6: 2227,635 ms/op
# Warmup Iteration   7: 2301,728 ms/op
# Warmup Iteration   8: 2329,369 ms/op
# Warmup Iteration   9: 2318,032 ms/op
# Warmup Iteration  10: 2308,304 ms/op
Iteration   1: 2309,221 ms/op
Iteration   2: 2502,769 ms/op
Iteration   3: 2504,212 ms/op
Iteration   4: 2510,910 ms/op
Iteration   5: 2509,694 ms/op
Iteration   6: 2505,222 ms/op
Iteration   7: 2564,897 ms/op
Iteration   8: 2506,345 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2489,159 ±(99.9%) 144,485 ms/op

  Histogram, ms/op:
    [2300,000, 2325,000) = 1
    [2325,000, 2350,000) = 0
    [2350,000, 2375,000) = 0
    [2375,000, 2400,000) = 0
    [2400,000, 2425,000) = 0
    [2425,000, 2450,000) = 0
    [2450,000, 2475,000) = 0
    [2475,000, 2500,000) = 0
    [2500,000, 2525,000) = 6
    [2525,000, 2550,000) = 0
    [2550,000, 2575,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2309,221 ms/op
     p(50,0000) =   2505,783 ms/op
     p(90,0000) =   2564,897 ms/op
     p(95,0000) =   2564,897 ms/op
     p(99,0000) =   2564,897 ms/op
     p(99,9000) =   2564,897 ms/op
     p(99,9900) =   2564,897 ms/op
     p(99,9990) =   2564,897 ms/op
     p(99,9999) =   2564,897 ms/op
    p(100,0000) =   2564,897 ms/op


# Run complete. Total time: 00:00:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest        10000           get    ss    8  2489,159 ± 144,485  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (10000) = 2489.1587125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1779,249 ms/op
# Warmup Iteration   2: 1760,908 ms/op
# Warmup Iteration   3: 1748,417 ms/op
# Warmup Iteration   4: 1754,739 ms/op
# Warmup Iteration   5: 1754,489 ms/op
# Warmup Iteration   6: 1749,873 ms/op
# Warmup Iteration   7: 1734,018 ms/op
# Warmup Iteration   8: 1719,605 ms/op
# Warmup Iteration   9: 1717,869 ms/op
# Warmup Iteration  10: 1726,285 ms/op
Iteration   1: 1720,898 ms/op
Iteration   2: 1741,452 ms/op
Iteration   3: 1792,809 ms/op
Iteration   4: 1735,291 ms/op
Iteration   5: 1752,916 ms/op
Iteration   6: 1725,697 ms/op
Iteration   7: 1717,741 ms/op
Iteration   8: 1729,151 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1739,494 ±(99.9%) 46,613 ms/op

  Histogram, ms/op:
    [1710,000, 1715,000) = 0
    [1715,000, 1720,000) = 1
    [1720,000, 1725,000) = 1
    [1725,000, 1730,000) = 2
    [1730,000, 1735,000) = 0
    [1735,000, 1740,000) = 1
    [1740,000, 1745,000) = 1
    [1745,000, 1750,000) = 0
    [1750,000, 1755,000) = 1
    [1755,000, 1760,000) = 0
    [1760,000, 1765,000) = 0
    [1765,000, 1770,000) = 0
    [1770,000, 1775,000) = 0
    [1775,000, 1780,000) = 0
    [1780,000, 1785,000) = 0
    [1785,000, 1790,000) = 0
    [1790,000, 1795,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1717,741 ms/op
     p(50,0000) =   1732,221 ms/op
     p(90,0000) =   1792,809 ms/op
     p(95,0000) =   1792,809 ms/op
     p(99,0000) =   1792,809 ms/op
     p(99,9000) =   1792,809 ms/op
     p(99,9900) =   1792,809 ms/op
     p(99,9990) =   1792,809 ms/op
     p(99,9999) =   1792,809 ms/op
    p(100,0000) =   1792,809 ms/op


# Run complete. Total time: 00:00:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test       100000           get    ss    8  1739,494 ± 46,613  ms/op
tests.maptests.article_examples.IntIntMap1Test (100000) = 1739.49420225
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1477,170 ms/op
# Warmup Iteration   2: 1462,837 ms/op
# Warmup Iteration   3: 1453,750 ms/op
# Warmup Iteration   4: 1465,685 ms/op
# Warmup Iteration   5: 1455,726 ms/op
# Warmup Iteration   6: 1541,658 ms/op
# Warmup Iteration   7: 1581,395 ms/op
# Warmup Iteration   8: 1572,129 ms/op
# Warmup Iteration   9: 1569,579 ms/op
# Warmup Iteration  10: 1638,040 ms/op
Iteration   1: 1572,949 ms/op
Iteration   2: 1591,585 ms/op
Iteration   3: 1577,619 ms/op
Iteration   4: 1581,528 ms/op
Iteration   5: 1577,032 ms/op
Iteration   6: 1571,381 ms/op
Iteration   7: 1574,019 ms/op
Iteration   8: 1577,060 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1577,897 ±(99.9%) 12,180 ms/op

  Histogram, ms/op:
    [1570,000, 1572,500) = 1
    [1572,500, 1575,000) = 2
    [1575,000, 1577,500) = 2
    [1577,500, 1580,000) = 1
    [1580,000, 1582,500) = 1
    [1582,500, 1585,000) = 0
    [1585,000, 1587,500) = 0
    [1587,500, 1590,000) = 0
    [1590,000, 1592,500) = 1
    [1592,500, 1595,000) = 0
    [1595,000, 1597,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1571,381 ms/op
     p(50,0000) =   1577,046 ms/op
     p(90,0000) =   1591,585 ms/op
     p(95,0000) =   1591,585 ms/op
     p(99,0000) =   1591,585 ms/op
     p(99,9000) =   1591,585 ms/op
     p(99,9900) =   1591,585 ms/op
     p(99,9990) =   1591,585 ms/op
     p(99,9999) =   1591,585 ms/op
    p(100,0000) =   1591,585 ms/op


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test       100000           get    ss    8  1577,897 ± 12,180  ms/op
tests.maptests.article_examples.IntIntMap2Test (100000) = 1577.8965973749998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1318,297 ms/op
# Warmup Iteration   2: 1312,659 ms/op
# Warmup Iteration   3: 1307,497 ms/op
# Warmup Iteration   4: 1308,690 ms/op
# Warmup Iteration   5: 1310,123 ms/op
# Warmup Iteration   6: 1285,634 ms/op
# Warmup Iteration   7: 1270,556 ms/op
# Warmup Iteration   8: 1267,226 ms/op
# Warmup Iteration   9: 1329,633 ms/op
# Warmup Iteration  10: 1271,536 ms/op
Iteration   1: 1269,518 ms/op
Iteration   2: 1272,683 ms/op
Iteration   3: 1264,387 ms/op
Iteration   4: 1266,151 ms/op
Iteration   5: 1270,540 ms/op
Iteration   6: 1272,299 ms/op
Iteration   7: 1280,847 ms/op
Iteration   8: 1275,822 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1271,531 ±(99.9%) 10,017 ms/op

  Histogram, ms/op:
    [1260,000, 1262,500) = 0
    [1262,500, 1265,000) = 1
    [1265,000, 1267,500) = 1
    [1267,500, 1270,000) = 1
    [1270,000, 1272,500) = 2
    [1272,500, 1275,000) = 1
    [1275,000, 1277,500) = 1
    [1277,500, 1280,000) = 0
    [1280,000, 1282,500) = 1
    [1282,500, 1285,000) = 0
    [1285,000, 1287,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1264,387 ms/op
     p(50,0000) =   1271,420 ms/op
     p(90,0000) =   1280,847 ms/op
     p(95,0000) =   1280,847 ms/op
     p(99,0000) =   1280,847 ms/op
     p(99,9000) =   1280,847 ms/op
     p(99,9900) =   1280,847 ms/op
     p(99,9990) =   1280,847 ms/op
     p(99,9999) =   1280,847 ms/op
    p(100,0000) =   1280,847 ms/op


# Run complete. Total time: 00:00:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test       100000           get    ss    8  1271,531 ± 10,017  ms/op
tests.maptests.article_examples.IntIntMap3Test (100000) = 1271.5308167500002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1247,373 ms/op
# Warmup Iteration   2: 1239,238 ms/op
# Warmup Iteration   3: 1249,304 ms/op
# Warmup Iteration   4: 1241,974 ms/op
# Warmup Iteration   5: 1239,976 ms/op
# Warmup Iteration   6: 1369,037 ms/op
# Warmup Iteration   7: 1443,837 ms/op
# Warmup Iteration   8: 1441,512 ms/op
# Warmup Iteration   9: 1441,996 ms/op
# Warmup Iteration  10: 1503,121 ms/op
Iteration   1: 1440,410 ms/op
Iteration   2: 1437,744 ms/op
Iteration   3: 1443,513 ms/op
Iteration   4: 1437,470 ms/op
Iteration   5: 1437,869 ms/op
Iteration   6: 1442,783 ms/op
Iteration   7: 1447,293 ms/op
Iteration   8: 1447,617 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1441,837 ±(99.9%) 7,932 ms/op

  Histogram, ms/op:
    [1430,000, 1431,250) = 0
    [1431,250, 1432,500) = 0
    [1432,500, 1433,750) = 0
    [1433,750, 1435,000) = 0
    [1435,000, 1436,250) = 0
    [1436,250, 1437,500) = 1
    [1437,500, 1438,750) = 2
    [1438,750, 1440,000) = 0
    [1440,000, 1441,250) = 1
    [1441,250, 1442,500) = 0
    [1442,500, 1443,750) = 2
    [1443,750, 1445,000) = 0
    [1445,000, 1446,250) = 0
    [1446,250, 1447,500) = 1
    [1447,500, 1448,750) = 1

  Percentiles, ms/op:
      p(0,0000) =   1437,470 ms/op
     p(50,0000) =   1441,597 ms/op
     p(90,0000) =   1447,617 ms/op
     p(95,0000) =   1447,617 ms/op
     p(99,0000) =   1447,617 ms/op
     p(99,9000) =   1447,617 ms/op
     p(99,9900) =   1447,617 ms/op
     p(99,9990) =   1447,617 ms/op
     p(99,9999) =   1447,617 ms/op
    p(100,0000) =   1447,617 ms/op


# Run complete. Total time: 00:00:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score   Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test       100000           get    ss    8  1441,837 ± 7,932  ms/op
tests.maptests.article_examples.IntIntMap4Test (100000) = 1441.8372248750002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1115,814 ms/op
# Warmup Iteration   2: 1105,382 ms/op
# Warmup Iteration   3: 1101,897 ms/op
# Warmup Iteration   4: 1102,770 ms/op
# Warmup Iteration   5: 1101,831 ms/op
# Warmup Iteration   6: 1293,320 ms/op
# Warmup Iteration   7: 1400,358 ms/op
# Warmup Iteration   8: 1396,766 ms/op
# Warmup Iteration   9: 1398,628 ms/op
# Warmup Iteration  10: 1399,774 ms/op
Iteration   1: 1459,636 ms/op
Iteration   2: 1399,504 ms/op
Iteration   3: 1402,064 ms/op
Iteration   4: 1401,109 ms/op
Iteration   5: 1400,621 ms/op
Iteration   6: 1397,151 ms/op
Iteration   7: 1402,124 ms/op
Iteration   8: 1404,706 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1408,364 ±(99.9%) 39,829 ms/op

  Histogram, ms/op:
    [1390,000, 1395,000) = 0
    [1395,000, 1400,000) = 2
    [1400,000, 1405,000) = 5
    [1405,000, 1410,000) = 0
    [1410,000, 1415,000) = 0
    [1415,000, 1420,000) = 0
    [1420,000, 1425,000) = 0
    [1425,000, 1430,000) = 0
    [1430,000, 1435,000) = 0
    [1435,000, 1440,000) = 0
    [1440,000, 1445,000) = 0
    [1445,000, 1450,000) = 0
    [1450,000, 1455,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1397,151 ms/op
     p(50,0000) =   1401,586 ms/op
     p(90,0000) =   1459,636 ms/op
     p(95,0000) =   1459,636 ms/op
     p(99,0000) =   1459,636 ms/op
     p(99,9000) =   1459,636 ms/op
     p(99,9900) =   1459,636 ms/op
     p(99,9990) =   1459,636 ms/op
     p(99,9999) =   1459,636 ms/op
    p(100,0000) =   1459,636 ms/op


# Run complete. Total time: 00:00:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest       100000           get    ss    8  1408,364 ± 39,829  ms/op
tests.maptests.article_examples.IntIntMap4aTest (100000) = 1408.364370875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1072,879 ms/op
# Warmup Iteration   2: 1059,572 ms/op
# Warmup Iteration   3: 1054,735 ms/op
# Warmup Iteration   4: 1060,264 ms/op
# Warmup Iteration   5: 1062,598 ms/op
# Warmup Iteration   6: 1136,604 ms/op
# Warmup Iteration   7: 1184,479 ms/op
# Warmup Iteration   8: 1177,405 ms/op
# Warmup Iteration   9: 1181,839 ms/op
# Warmup Iteration  10: 1179,701 ms/op
Iteration   1: 1177,006 ms/op
Iteration   2: 1209,581 ms/op
Iteration   3: 1215,964 ms/op
Iteration   4: 1182,762 ms/op
Iteration   5: 1179,214 ms/op
Iteration   6: 1178,326 ms/op
Iteration   7: 1184,378 ms/op
Iteration   8: 1179,885 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1188,390 ±(99.9%) 29,307 ms/op

  Histogram, ms/op:
    [1170,000, 1175,000) = 0
    [1175,000, 1180,000) = 4
    [1180,000, 1185,000) = 2
    [1185,000, 1190,000) = 0
    [1190,000, 1195,000) = 0
    [1195,000, 1200,000) = 0
    [1200,000, 1205,000) = 0
    [1205,000, 1210,000) = 1
    [1210,000, 1215,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1177,006 ms/op
     p(50,0000) =   1181,323 ms/op
     p(90,0000) =   1215,964 ms/op
     p(95,0000) =   1215,964 ms/op
     p(99,0000) =   1215,964 ms/op
     p(99,9000) =   1215,964 ms/op
     p(99,9900) =   1215,964 ms/op
     p(99,9990) =   1215,964 ms/op
     p(99,9999) =   1215,964 ms/op
    p(100,0000) =   1215,964 ms/op


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest       100000           get    ss    8  1188,390 ± 29,307  ms/op
tests.maptests.primitive.FastUtilMapTest (100000) = 1188.3895892500002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1429,278 ms/op
# Warmup Iteration   2: 1413,722 ms/op
# Warmup Iteration   3: 1416,183 ms/op
# Warmup Iteration   4: 1415,365 ms/op
# Warmup Iteration   5: 1418,295 ms/op
# Warmup Iteration   6: 1506,053 ms/op
# Warmup Iteration   7: 1563,008 ms/op
# Warmup Iteration   8: 1561,799 ms/op
# Warmup Iteration   9: 1555,149 ms/op
# Warmup Iteration  10: 1556,173 ms/op
Iteration   1: 1559,454 ms/op
Iteration   2: 1616,510 ms/op
Iteration   3: 1552,821 ms/op
Iteration   4: 1556,598 ms/op
Iteration   5: 1557,183 ms/op
Iteration   6: 1561,246 ms/op
Iteration   7: 1559,362 ms/op
Iteration   8: 1558,773 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1565,243 ±(99.9%) 39,899 ms/op

  Histogram, ms/op:
    [1550,000, 1555,000) = 1
    [1555,000, 1560,000) = 5
    [1560,000, 1565,000) = 1
    [1565,000, 1570,000) = 0
    [1570,000, 1575,000) = 0
    [1575,000, 1580,000) = 0
    [1580,000, 1585,000) = 0
    [1585,000, 1590,000) = 0
    [1590,000, 1595,000) = 0
    [1595,000, 1600,000) = 0
    [1600,000, 1605,000) = 0
    [1605,000, 1610,000) = 0
    [1610,000, 1615,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1552,821 ms/op
     p(50,0000) =   1559,067 ms/op
     p(90,0000) =   1616,510 ms/op
     p(95,0000) =   1616,510 ms/op
     p(99,0000) =   1616,510 ms/op
     p(99,9000) =   1616,510 ms/op
     p(99,9900) =   1616,510 ms/op
     p(99,9990) =   1616,510 ms/op
     p(99,9999) =   1616,510 ms/op
    p(100,0000) =   1616,510 ms/op


# Run complete. Total time: 00:00:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest       100000           get    ss    8  1565,243 ± 39,899  ms/op
tests.maptests.primitive.GsMutableMapTest (100000) = 1565.243283375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1075,108 ms/op
# Warmup Iteration   2: 1063,214 ms/op
# Warmup Iteration   3: 1061,335 ms/op
# Warmup Iteration   4: 1061,325 ms/op
# Warmup Iteration   5: 1064,906 ms/op
# Warmup Iteration   6: 1228,051 ms/op
# Warmup Iteration   7: 1334,335 ms/op
# Warmup Iteration   8: 1327,528 ms/op
# Warmup Iteration   9: 1329,552 ms/op
# Warmup Iteration  10: 1333,025 ms/op
Iteration   1: 1328,492 ms/op
Iteration   2: 1330,883 ms/op
Iteration   3: 1386,584 ms/op
Iteration   4: 1331,444 ms/op
Iteration   5: 1330,241 ms/op
Iteration   6: 1329,153 ms/op
Iteration   7: 1325,794 ms/op
Iteration   8: 1329,456 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1336,506 ±(99.9%) 38,829 ms/op

  Histogram, ms/op:
    [1320,000, 1325,000) = 0
    [1325,000, 1330,000) = 4
    [1330,000, 1335,000) = 3
    [1335,000, 1340,000) = 0
    [1340,000, 1345,000) = 0
    [1345,000, 1350,000) = 0
    [1350,000, 1355,000) = 0
    [1355,000, 1360,000) = 0
    [1360,000, 1365,000) = 0
    [1365,000, 1370,000) = 0
    [1370,000, 1375,000) = 0
    [1375,000, 1380,000) = 0
    [1380,000, 1385,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1325,794 ms/op
     p(50,0000) =   1329,849 ms/op
     p(90,0000) =   1386,584 ms/op
     p(95,0000) =   1386,584 ms/op
     p(99,0000) =   1386,584 ms/op
     p(99,9000) =   1386,584 ms/op
     p(99,9900) =   1386,584 ms/op
     p(99,9990) =   1386,584 ms/op
     p(99,9999) =   1386,584 ms/op
    p(100,0000) =   1386,584 ms/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest       100000           get    ss    8  1336,506 ± 38,829  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (100000) = 1336.5058658750002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1431,729 ms/op
# Warmup Iteration   2: 1429,293 ms/op
# Warmup Iteration   3: 1426,937 ms/op
# Warmup Iteration   4: 1427,803 ms/op
# Warmup Iteration   5: 1418,885 ms/op
# Warmup Iteration   6: 1412,525 ms/op
# Warmup Iteration   7: 1399,518 ms/op
# Warmup Iteration   8: 1397,625 ms/op
# Warmup Iteration   9: 1401,335 ms/op
# Warmup Iteration  10: 1400,609 ms/op
Iteration   1: 1400,301 ms/op
Iteration   2: 1469,316 ms/op
Iteration   3: 1398,094 ms/op
Iteration   4: 1397,311 ms/op
Iteration   5: 1414,274 ms/op
Iteration   6: 1408,539 ms/op
Iteration   7: 1414,748 ms/op
Iteration   8: 1407,969 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1413,819 ±(99.9%) 44,815 ms/op

  Histogram, ms/op:
    [1390,000, 1395,000) = 0
    [1395,000, 1400,000) = 2
    [1400,000, 1405,000) = 1
    [1405,000, 1410,000) = 2
    [1410,000, 1415,000) = 2
    [1415,000, 1420,000) = 0
    [1420,000, 1425,000) = 0
    [1425,000, 1430,000) = 0
    [1430,000, 1435,000) = 0
    [1435,000, 1440,000) = 0
    [1440,000, 1445,000) = 0
    [1445,000, 1450,000) = 0
    [1450,000, 1455,000) = 0
    [1455,000, 1460,000) = 0
    [1460,000, 1465,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1397,311 ms/op
     p(50,0000) =   1408,254 ms/op
     p(90,0000) =   1469,316 ms/op
     p(95,0000) =   1469,316 ms/op
     p(99,0000) =   1469,316 ms/op
     p(99,9000) =   1469,316 ms/op
     p(99,9900) =   1469,316 ms/op
     p(99,9990) =   1469,316 ms/op
     p(99,9999) =   1469,316 ms/op
    p(100,0000) =   1469,316 ms/op


# Run complete. Total time: 00:00:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest       100000           get    ss    8  1413,819 ± 44,815  ms/op
tests.maptests.primitive.HppcMapTest (100000) = 1413.8188539999999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2711,491 ms/op
# Warmup Iteration   2: 2710,473 ms/op
# Warmup Iteration   3: 2693,018 ms/op
# Warmup Iteration   4: 2707,362 ms/op
# Warmup Iteration   5: 2718,289 ms/op
# Warmup Iteration   6: 2746,854 ms/op
# Warmup Iteration   7: 2685,055 ms/op
# Warmup Iteration   8: 2688,289 ms/op
# Warmup Iteration   9: 2689,366 ms/op
# Warmup Iteration  10: 2685,950 ms/op
Iteration   1: 2679,858 ms/op
Iteration   2: 2694,130 ms/op
Iteration   3: 2706,232 ms/op
Iteration   4: 2688,670 ms/op
Iteration   5: 2676,674 ms/op
Iteration   6: 2681,331 ms/op
Iteration   7: 2707,923 ms/op
Iteration   8: 2740,236 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2696,882 ±(99.9%) 40,261 ms/op

  Histogram, ms/op:
    [2670,000, 2675,000) = 0
    [2675,000, 2680,000) = 2
    [2680,000, 2685,000) = 1
    [2685,000, 2690,000) = 1
    [2690,000, 2695,000) = 1
    [2695,000, 2700,000) = 0
    [2700,000, 2705,000) = 0
    [2705,000, 2710,000) = 2
    [2710,000, 2715,000) = 0
    [2715,000, 2720,000) = 0
    [2720,000, 2725,000) = 0
    [2725,000, 2730,000) = 0
    [2730,000, 2735,000) = 0
    [2735,000, 2740,000) = 0
    [2740,000, 2745,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2676,674 ms/op
     p(50,0000) =   2691,400 ms/op
     p(90,0000) =   2740,236 ms/op
     p(95,0000) =   2740,236 ms/op
     p(99,0000) =   2740,236 ms/op
     p(99,9000) =   2740,236 ms/op
     p(99,9900) =   2740,236 ms/op
     p(99,9990) =   2740,236 ms/op
     p(99,9999) =   2740,236 ms/op
    p(100,0000) =   2740,236 ms/op


# Run complete. Total time: 00:00:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest       100000           get    ss    8  2696,882 ± 40,261  ms/op
tests.maptests.primitive.TroveJbMapTest (100000) = 2696.8817449999997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2488,102 ms/op
# Warmup Iteration   2: 2529,198 ms/op
# Warmup Iteration   3: 2485,309 ms/op
# Warmup Iteration   4: 2465,088 ms/op
# Warmup Iteration   5: 2486,669 ms/op
# Warmup Iteration   6: 2462,907 ms/op
# Warmup Iteration   7: 2478,288 ms/op
# Warmup Iteration   8: 2449,245 ms/op
# Warmup Iteration   9: 2520,346 ms/op
# Warmup Iteration  10: 2444,635 ms/op
Iteration   1: 2445,504 ms/op
Iteration   2: 2446,791 ms/op
Iteration   3: 2435,230 ms/op
Iteration   4: 2438,606 ms/op
Iteration   5: 2443,990 ms/op
Iteration   6: 2444,048 ms/op
Iteration   7: 2439,784 ms/op
Iteration   8: 2449,423 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2442,922 ±(99.9%) 8,967 ms/op

  Histogram, ms/op:
    [2430,000, 2431,250) = 0
    [2431,250, 2432,500) = 0
    [2432,500, 2433,750) = 0
    [2433,750, 2435,000) = 0
    [2435,000, 2436,250) = 1
    [2436,250, 2437,500) = 0
    [2437,500, 2438,750) = 1
    [2438,750, 2440,000) = 1
    [2440,000, 2441,250) = 0
    [2441,250, 2442,500) = 0
    [2442,500, 2443,750) = 0
    [2443,750, 2445,000) = 2
    [2445,000, 2446,250) = 1
    [2446,250, 2447,500) = 1
    [2447,500, 2448,750) = 0

  Percentiles, ms/op:
      p(0,0000) =   2435,230 ms/op
     p(50,0000) =   2444,019 ms/op
     p(90,0000) =   2449,423 ms/op
     p(95,0000) =   2449,423 ms/op
     p(99,0000) =   2449,423 ms/op
     p(99,9000) =   2449,423 ms/op
     p(99,9900) =   2449,423 ms/op
     p(99,9990) =   2449,423 ms/op
     p(99,9999) =   2449,423 ms/op
    p(100,0000) =   2449,423 ms/op


# Run complete. Total time: 00:00:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score   Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest       100000           get    ss    8  2442,922 ± 8,967  ms/op
tests.maptests.primitive.TroveMapTest (100000) = 2442.9219378750004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1543,486 ms/op
# Warmup Iteration   2: 1610,415 ms/op
# Warmup Iteration   3: 1537,024 ms/op
# Warmup Iteration   4: 1579,349 ms/op
# Warmup Iteration   5: 1563,223 ms/op
# Warmup Iteration   6: 1666,950 ms/op
# Warmup Iteration   7: 1728,739 ms/op
# Warmup Iteration   8: 1747,098 ms/op
# Warmup Iteration   9: 1746,361 ms/op
# Warmup Iteration  10: 1736,345 ms/op
Iteration   1: 1746,220 ms/op
Iteration   2: 1759,546 ms/op
Iteration   3: 1737,961 ms/op
Iteration   4: 1732,198 ms/op
Iteration   5: 1753,333 ms/op
Iteration   6: 1749,838 ms/op
Iteration   7: 1753,585 ms/op
Iteration   8: 1752,854 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1748,192 ±(99.9%) 17,302 ms/op

  Histogram, ms/op:
    [1730,000, 1732,500) = 1
    [1732,500, 1735,000) = 0
    [1735,000, 1737,500) = 0
    [1737,500, 1740,000) = 1
    [1740,000, 1742,500) = 0
    [1742,500, 1745,000) = 0
    [1745,000, 1747,500) = 1
    [1747,500, 1750,000) = 1
    [1750,000, 1752,500) = 0
    [1752,500, 1755,000) = 3
    [1755,000, 1757,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1732,198 ms/op
     p(50,0000) =   1751,346 ms/op
     p(90,0000) =   1759,546 ms/op
     p(95,0000) =   1759,546 ms/op
     p(99,0000) =   1759,546 ms/op
     p(99,9000) =   1759,546 ms/op
     p(99,9900) =   1759,546 ms/op
     p(99,9990) =   1759,546 ms/op
     p(99,9999) =   1759,546 ms/op
    p(100,0000) =   1759,546 ms/op


# Run complete. Total time: 00:00:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest       100000           get    ss    8  1748,192 ± 17,302  ms/op
tests.maptests.object.FastUtilObjMapTest (100000) = 1748.1917008749997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2007,173 ms/op
# Warmup Iteration   2: 2039,043 ms/op
# Warmup Iteration   3: 1983,567 ms/op
# Warmup Iteration   4: 1996,990 ms/op
# Warmup Iteration   5: 1984,261 ms/op
# Warmup Iteration   6: 1978,299 ms/op
# Warmup Iteration   7: 2003,698 ms/op
# Warmup Iteration   8: 2012,240 ms/op
# Warmup Iteration   9: 2014,397 ms/op
# Warmup Iteration  10: 1986,772 ms/op
Iteration   1: 2000,128 ms/op
Iteration   2: 1979,062 ms/op
Iteration   3: 1995,011 ms/op
Iteration   4: 2066,871 ms/op
Iteration   5: 1975,891 ms/op
Iteration   6: 1989,163 ms/op
Iteration   7: 1993,686 ms/op
Iteration   8: 2000,134 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1999,993 ±(99.9%) 54,433 ms/op

  Histogram, ms/op:
    [1970,000, 1980,000) = 2
    [1980,000, 1990,000) = 1
    [1990,000, 2000,000) = 2
    [2000,000, 2010,000) = 2
    [2010,000, 2020,000) = 0
    [2020,000, 2030,000) = 0
    [2030,000, 2040,000) = 0
    [2040,000, 2050,000) = 0
    [2050,000, 2060,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1975,891 ms/op
     p(50,0000) =   1994,348 ms/op
     p(90,0000) =   2066,871 ms/op
     p(95,0000) =   2066,871 ms/op
     p(99,0000) =   2066,871 ms/op
     p(99,9000) =   2066,871 ms/op
     p(99,9900) =   2066,871 ms/op
     p(99,9990) =   2066,871 ms/op
     p(99,9999) =   2066,871 ms/op
    p(100,0000) =   2066,871 ms/op


# Run complete. Total time: 00:00:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest       100000           get    ss    8  1999,993 ± 54,433  ms/op
tests.maptests.object.KolobokeMutableObjTest (100000) = 1999.9933387499998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2011,780 ms/op
# Warmup Iteration   2: 1994,695 ms/op
# Warmup Iteration   3: 1973,902 ms/op
# Warmup Iteration   4: 2012,327 ms/op
# Warmup Iteration   5: 1981,541 ms/op
# Warmup Iteration   6: 2004,284 ms/op
# Warmup Iteration   7: 2000,997 ms/op
# Warmup Iteration   8: 2068,142 ms/op
# Warmup Iteration   9: 1986,332 ms/op
# Warmup Iteration  10: 1990,736 ms/op
Iteration   1: 2005,245 ms/op
Iteration   2: 2011,228 ms/op
Iteration   3: 1999,664 ms/op
Iteration   4: 1984,029 ms/op
Iteration   5: 2012,980 ms/op
Iteration   6: 2004,359 ms/op
Iteration   7: 1992,199 ms/op
Iteration   8: 2015,873 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2003,197 ±(99.9%) 20,786 ms/op

  Histogram, ms/op:
    [1980,000, 1982,500) = 0
    [1982,500, 1985,000) = 1
    [1985,000, 1987,500) = 0
    [1987,500, 1990,000) = 0
    [1990,000, 1992,500) = 1
    [1992,500, 1995,000) = 0
    [1995,000, 1997,500) = 0
    [1997,500, 2000,000) = 1
    [2000,000, 2002,500) = 0
    [2002,500, 2005,000) = 1
    [2005,000, 2007,500) = 1
    [2007,500, 2010,000) = 0
    [2010,000, 2012,500) = 1
    [2012,500, 2015,000) = 1
    [2015,000, 2017,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   1984,029 ms/op
     p(50,0000) =   2004,802 ms/op
     p(90,0000) =   2015,873 ms/op
     p(95,0000) =   2015,873 ms/op
     p(99,0000) =   2015,873 ms/op
     p(99,9000) =   2015,873 ms/op
     p(99,9900) =   2015,873 ms/op
     p(99,9990) =   2015,873 ms/op
     p(99,9999) =   2015,873 ms/op
    p(100,0000) =   2015,873 ms/op


# Run complete. Total time: 00:00:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest       100000           get    ss    8  2003,197 ± 20,786  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (100000) = 2003.1971338750002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1778,079 ms/op
# Warmup Iteration   2: 1845,436 ms/op
# Warmup Iteration   3: 1773,991 ms/op
# Warmup Iteration   4: 1780,202 ms/op
# Warmup Iteration   5: 1774,505 ms/op
# Warmup Iteration   6: 1770,134 ms/op
# Warmup Iteration   7: 1766,624 ms/op
# Warmup Iteration   8: 1771,528 ms/op
# Warmup Iteration   9: 1773,965 ms/op
# Warmup Iteration  10: 1775,856 ms/op
Iteration   1: 1770,057 ms/op
Iteration   2: 1783,876 ms/op
Iteration   3: 1761,719 ms/op
Iteration   4: 1773,602 ms/op
Iteration   5: 1776,914 ms/op
Iteration   6: 1786,212 ms/op
Iteration   7: 1776,474 ms/op
Iteration   8: 1764,049 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1774,113 ±(99.9%) 16,586 ms/op

  Histogram, ms/op:
    [1760,000, 1762,500) = 1
    [1762,500, 1765,000) = 1
    [1765,000, 1767,500) = 0
    [1767,500, 1770,000) = 0
    [1770,000, 1772,500) = 1
    [1772,500, 1775,000) = 1
    [1775,000, 1777,500) = 2
    [1777,500, 1780,000) = 0
    [1780,000, 1782,500) = 0
    [1782,500, 1785,000) = 1
    [1785,000, 1787,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   1761,719 ms/op
     p(50,0000) =   1775,038 ms/op
     p(90,0000) =   1786,212 ms/op
     p(95,0000) =   1786,212 ms/op
     p(99,0000) =   1786,212 ms/op
     p(99,9000) =   1786,212 ms/op
     p(99,9900) =   1786,212 ms/op
     p(99,9990) =   1786,212 ms/op
     p(99,9999) =   1786,212 ms/op
    p(100,0000) =   1786,212 ms/op


# Run complete. Total time: 00:00:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest       100000           get    ss    8  1774,113 ± 16,586  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (100000) = 1774.112908125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1911,395 ms/op
# Warmup Iteration   2: 1903,555 ms/op
# Warmup Iteration   3: 1923,596 ms/op
# Warmup Iteration   4: 1900,060 ms/op
# Warmup Iteration   5: 1881,785 ms/op
# Warmup Iteration   6: 2095,085 ms/op
# Warmup Iteration   7: 2180,431 ms/op
# Warmup Iteration   8: 2196,237 ms/op
# Warmup Iteration   9: 2177,423 ms/op
# Warmup Iteration  10: 2178,996 ms/op
Iteration   1: 2175,747 ms/op
Iteration   2: 2173,739 ms/op
Iteration   3: 2244,227 ms/op
Iteration   4: 2179,555 ms/op
Iteration   5: 2193,137 ms/op
Iteration   6: 2198,978 ms/op
Iteration   7: 2176,583 ms/op
Iteration   8: 2175,423 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2189,674 ±(99.9%) 45,701 ms/op

  Histogram, ms/op:
    [2170,000, 2175,000) = 1
    [2175,000, 2180,000) = 4
    [2180,000, 2185,000) = 0
    [2185,000, 2190,000) = 0
    [2190,000, 2195,000) = 1
    [2195,000, 2200,000) = 1
    [2200,000, 2205,000) = 0
    [2205,000, 2210,000) = 0
    [2210,000, 2215,000) = 0
    [2215,000, 2220,000) = 0
    [2220,000, 2225,000) = 0
    [2225,000, 2230,000) = 0
    [2230,000, 2235,000) = 0
    [2235,000, 2240,000) = 0
    [2240,000, 2245,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2173,739 ms/op
     p(50,0000) =   2178,069 ms/op
     p(90,0000) =   2244,227 ms/op
     p(95,0000) =   2244,227 ms/op
     p(99,0000) =   2244,227 ms/op
     p(99,9000) =   2244,227 ms/op
     p(99,9900) =   2244,227 ms/op
     p(99,9990) =   2244,227 ms/op
     p(99,9999) =   2244,227 ms/op
    p(100,0000) =   2244,227 ms/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest       100000           get    ss    8  2189,674 ± 45,701  ms/op
tests.maptests.object.HppcObjMapTest (100000) = 2189.6736278750004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1975,038 ms/op
# Warmup Iteration   2: 1982,129 ms/op
# Warmup Iteration   3: 1964,489 ms/op
# Warmup Iteration   4: 1966,425 ms/op
# Warmup Iteration   5: 1958,781 ms/op
# Warmup Iteration   6: 1894,154 ms/op
# Warmup Iteration   7: 1935,602 ms/op
# Warmup Iteration   8: 1862,059 ms/op
# Warmup Iteration   9: 1878,183 ms/op
# Warmup Iteration  10: 1879,667 ms/op
Iteration   1: 1867,337 ms/op
Iteration   2: 1881,562 ms/op
Iteration   3: 1888,562 ms/op
Iteration   4: 1876,016 ms/op
Iteration   5: 1906,603 ms/op
Iteration   6: 1889,851 ms/op
Iteration   7: 1868,254 ms/op
Iteration   8: 1900,913 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1884,887 ±(99.9%) 27,432 ms/op

  Histogram, ms/op:
    [1860,000, 1865,000) = 0
    [1865,000, 1870,000) = 2
    [1870,000, 1875,000) = 0
    [1875,000, 1880,000) = 1
    [1880,000, 1885,000) = 1
    [1885,000, 1890,000) = 2
    [1890,000, 1895,000) = 0
    [1895,000, 1900,000) = 0
    [1900,000, 1905,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1867,337 ms/op
     p(50,0000) =   1885,062 ms/op
     p(90,0000) =   1906,603 ms/op
     p(95,0000) =   1906,603 ms/op
     p(99,0000) =   1906,603 ms/op
     p(99,9000) =   1906,603 ms/op
     p(99,9900) =   1906,603 ms/op
     p(99,9990) =   1906,603 ms/op
     p(99,9999) =   1906,603 ms/op
    p(100,0000) =   1906,603 ms/op


# Run complete. Total time: 00:00:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest       100000           get    ss    8  1884,887 ± 27,432  ms/op
tests.maptests.object.GsObjMapTest (100000) = 1884.8871327499996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1144,710 ms/op
# Warmup Iteration   2: 1138,901 ms/op
# Warmup Iteration   3: 1229,635 ms/op
# Warmup Iteration   4: 1136,140 ms/op
# Warmup Iteration   5: 1141,992 ms/op
# Warmup Iteration   6: 1172,366 ms/op
# Warmup Iteration   7: 1188,933 ms/op
# Warmup Iteration   8: 1180,442 ms/op
# Warmup Iteration   9: 1177,738 ms/op
# Warmup Iteration  10: 1172,665 ms/op
Iteration   1: 1188,248 ms/op
Iteration   2: 1193,136 ms/op
Iteration   3: 1174,712 ms/op
Iteration   4: 1184,497 ms/op
Iteration   5: 1188,737 ms/op
Iteration   6: 1192,483 ms/op
Iteration   7: 1182,252 ms/op
Iteration   8: 1176,659 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1185,090 ±(99.9%) 13,125 ms/op

  Histogram, ms/op:
    [1170,000, 1172,500) = 0
    [1172,500, 1175,000) = 1
    [1175,000, 1177,500) = 1
    [1177,500, 1180,000) = 0
    [1180,000, 1182,500) = 1
    [1182,500, 1185,000) = 1
    [1185,000, 1187,500) = 0
    [1187,500, 1190,000) = 2
    [1190,000, 1192,500) = 1
    [1192,500, 1195,000) = 1
    [1195,000, 1197,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1174,712 ms/op
     p(50,0000) =   1186,372 ms/op
     p(90,0000) =   1193,136 ms/op
     p(95,0000) =   1193,136 ms/op
     p(99,0000) =   1193,136 ms/op
     p(99,9000) =   1193,136 ms/op
     p(99,9900) =   1193,136 ms/op
     p(99,9990) =   1193,136 ms/op
     p(99,9999) =   1193,136 ms/op
    p(100,0000) =   1193,136 ms/op


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest       100000           get    ss    8  1185,090 ± 13,125  ms/op
tests.maptests.object.JdkMapTest (100000) = 1185.0904828750001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1150,982 ms/op
# Warmup Iteration   2: 1158,347 ms/op
# Warmup Iteration   3: 1142,540 ms/op
# Warmup Iteration   4: 1134,772 ms/op
# Warmup Iteration   5: 1151,737 ms/op
# Warmup Iteration   6: 1221,159 ms/op
# Warmup Iteration   7: 1136,453 ms/op
# Warmup Iteration   8: 1129,719 ms/op
# Warmup Iteration   9: 1150,434 ms/op
# Warmup Iteration  10: 1131,189 ms/op
Iteration   1: 1150,111 ms/op
Iteration   2: 1144,060 ms/op
Iteration   3: 1129,678 ms/op
Iteration   4: 1140,175 ms/op
Iteration   5: 1142,895 ms/op
Iteration   6: 1131,171 ms/op
Iteration   7: 1137,937 ms/op
Iteration   8: 1128,756 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1138,098 ±(99.9%) 14,692 ms/op

  Histogram, ms/op:
    [1120,000, 1122,500) = 0
    [1122,500, 1125,000) = 0
    [1125,000, 1127,500) = 0
    [1127,500, 1130,000) = 2
    [1130,000, 1132,500) = 1
    [1132,500, 1135,000) = 0
    [1135,000, 1137,500) = 0
    [1137,500, 1140,000) = 1
    [1140,000, 1142,500) = 1
    [1142,500, 1145,000) = 2
    [1145,000, 1147,500) = 0
    [1147,500, 1150,000) = 0
    [1150,000, 1152,500) = 1
    [1152,500, 1155,000) = 0
    [1155,000, 1157,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1128,756 ms/op
     p(50,0000) =   1139,056 ms/op
     p(90,0000) =   1150,111 ms/op
     p(95,0000) =   1150,111 ms/op
     p(99,0000) =   1150,111 ms/op
     p(99,9000) =   1150,111 ms/op
     p(99,9900) =   1150,111 ms/op
     p(99,9990) =   1150,111 ms/op
     p(99,9999) =   1150,111 ms/op
    p(100,0000) =   1150,111 ms/op


# Run complete. Total time: 00:00:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity       100000           get    ss    8  1138,098 ± 14,692  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (100000) = 1138.097943125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2989,095 ms/op
# Warmup Iteration   2: 2964,063 ms/op
# Warmup Iteration   3: 2975,769 ms/op
# Warmup Iteration   4: 3035,705 ms/op
# Warmup Iteration   5: 2997,261 ms/op
# Warmup Iteration   6: 3042,634 ms/op
# Warmup Iteration   7: 3103,265 ms/op
# Warmup Iteration   8: 3103,261 ms/op
# Warmup Iteration   9: 3082,826 ms/op
# Warmup Iteration  10: 3093,879 ms/op
Iteration   1: 3105,310 ms/op
Iteration   2: 3087,684 ms/op
Iteration   3: 3124,595 ms/op
Iteration   4: 3152,178 ms/op
Iteration   5: 3104,468 ms/op
Iteration   6: 3090,137 ms/op
Iteration   7: 3081,685 ms/op
Iteration   8: 3099,601 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3105,707 ±(99.9%) 43,955 ms/op

  Histogram, ms/op:
    [3080,000, 3085,000) = 1
    [3085,000, 3090,000) = 1
    [3090,000, 3095,000) = 1
    [3095,000, 3100,000) = 1
    [3100,000, 3105,000) = 1
    [3105,000, 3110,000) = 1
    [3110,000, 3115,000) = 0
    [3115,000, 3120,000) = 0
    [3120,000, 3125,000) = 1
    [3125,000, 3130,000) = 0
    [3130,000, 3135,000) = 0
    [3135,000, 3140,000) = 0
    [3140,000, 3145,000) = 0
    [3145,000, 3150,000) = 0
    [3150,000, 3155,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3081,685 ms/op
     p(50,0000) =   3102,035 ms/op
     p(90,0000) =   3152,178 ms/op
     p(95,0000) =   3152,178 ms/op
     p(99,0000) =   3152,178 ms/op
     p(99,9000) =   3152,178 ms/op
     p(99,9900) =   3152,178 ms/op
     p(99,9990) =   3152,178 ms/op
     p(99,9999) =   3152,178 ms/op
    p(100,0000) =   3152,178 ms/op


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest       100000           get    ss    8  3105,707 ± 43,955  ms/op
tests.maptests.object.TroveJbObjMapTest (100000) = 3105.7073512499996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3087,102 ms/op
# Warmup Iteration   2: 3092,488 ms/op
# Warmup Iteration   3: 3093,718 ms/op
# Warmup Iteration   4: 3176,643 ms/op
# Warmup Iteration   5: 3116,138 ms/op
# Warmup Iteration   6: 3073,786 ms/op
# Warmup Iteration   7: 3020,401 ms/op
# Warmup Iteration   8: 2994,323 ms/op
# Warmup Iteration   9: 3008,605 ms/op
# Warmup Iteration  10: 3032,876 ms/op
Iteration   1: 3024,479 ms/op
Iteration   2: 3038,465 ms/op
Iteration   3: 3020,369 ms/op
Iteration   4: 3068,986 ms/op
Iteration   5: 3019,834 ms/op
Iteration   6: 2984,951 ms/op
Iteration   7: 3003,596 ms/op
Iteration   8: 3001,950 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3020,329 ±(99.9%) 48,924 ms/op

  Histogram, ms/op:
    [2980,000, 2985,000) = 1
    [2985,000, 2990,000) = 0
    [2990,000, 2995,000) = 0
    [2995,000, 3000,000) = 0
    [3000,000, 3005,000) = 2
    [3005,000, 3010,000) = 0
    [3010,000, 3015,000) = 0
    [3015,000, 3020,000) = 1
    [3020,000, 3025,000) = 2
    [3025,000, 3030,000) = 0
    [3030,000, 3035,000) = 0
    [3035,000, 3040,000) = 1
    [3040,000, 3045,000) = 0
    [3045,000, 3050,000) = 0
    [3050,000, 3055,000) = 0
    [3055,000, 3060,000) = 0
    [3060,000, 3065,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2984,951 ms/op
     p(50,0000) =   3020,101 ms/op
     p(90,0000) =   3068,986 ms/op
     p(95,0000) =   3068,986 ms/op
     p(99,0000) =   3068,986 ms/op
     p(99,9000) =   3068,986 ms/op
     p(99,9900) =   3068,986 ms/op
     p(99,9990) =   3068,986 ms/op
     p(99,9999) =   3068,986 ms/op
    p(100,0000) =   3068,986 ms/op


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest       100000           get    ss    8  3020,329 ± 48,924  ms/op
tests.maptests.object.TroveObjMapTest (100000) = 3020.328685125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1645,152 ms/op
# Warmup Iteration   2: 1624,725 ms/op
# Warmup Iteration   3: 1614,973 ms/op
# Warmup Iteration   4: 1638,419 ms/op
# Warmup Iteration   5: 1628,622 ms/op
# Warmup Iteration   6: 1653,058 ms/op
# Warmup Iteration   7: 1600,400 ms/op
# Warmup Iteration   8: 1578,410 ms/op
# Warmup Iteration   9: 1590,141 ms/op
# Warmup Iteration  10: 1562,468 ms/op
Iteration   1: 1587,383 ms/op
Iteration   2: 1566,762 ms/op
Iteration   3: 1576,499 ms/op
Iteration   4: 1568,972 ms/op
Iteration   5: 1586,258 ms/op
Iteration   6: 1593,090 ms/op
Iteration   7: 1565,094 ms/op
Iteration   8: 1563,799 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1575,982 ±(99.9%) 22,034 ms/op

  Histogram, ms/op:
    [1560,000, 1562,500) = 0
    [1562,500, 1565,000) = 1
    [1565,000, 1567,500) = 2
    [1567,500, 1570,000) = 1
    [1570,000, 1572,500) = 0
    [1572,500, 1575,000) = 0
    [1575,000, 1577,500) = 1
    [1577,500, 1580,000) = 0
    [1580,000, 1582,500) = 0
    [1582,500, 1585,000) = 0
    [1585,000, 1587,500) = 2
    [1587,500, 1590,000) = 0
    [1590,000, 1592,500) = 0
    [1592,500, 1595,000) = 1
    [1595,000, 1597,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1563,799 ms/op
     p(50,0000) =   1572,735 ms/op
     p(90,0000) =   1593,090 ms/op
     p(95,0000) =   1593,090 ms/op
     p(99,0000) =   1593,090 ms/op
     p(99,9000) =   1593,090 ms/op
     p(99,9900) =   1593,090 ms/op
     p(99,9990) =   1593,090 ms/op
     p(99,9999) =   1593,090 ms/op
    p(100,0000) =   1593,090 ms/op


# Run complete. Total time: 00:00:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest       100000           get    ss    8  1575,982 ± 22,034  ms/op
tests.maptests.article_examples.ObjObjMapTest (100000) = 1575.9820206250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1230,094 ms/op
# Warmup Iteration   2: 1218,193 ms/op
# Warmup Iteration   3: 1219,030 ms/op
# Warmup Iteration   4: 1216,478 ms/op
# Warmup Iteration   5: 1276,516 ms/op
# Warmup Iteration   6: 1153,635 ms/op
# Warmup Iteration   7: 1120,421 ms/op
# Warmup Iteration   8: 1115,649 ms/op
# Warmup Iteration   9: 1119,026 ms/op
# Warmup Iteration  10: 1115,739 ms/op
Iteration   1: 1116,331 ms/op
Iteration   2: 1120,919 ms/op
Iteration   3: 1122,119 ms/op
Iteration   4: 1121,268 ms/op
Iteration   5: 1114,997 ms/op
Iteration   6: 1118,975 ms/op
Iteration   7: 1114,533 ms/op
Iteration   8: 1121,854 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1118,875 ±(99.9%) 6,032 ms/op

  Histogram, ms/op:
    [1114,000, 1114,500) = 0
    [1114,500, 1115,000) = 2
    [1115,000, 1115,500) = 0
    [1115,500, 1116,000) = 0
    [1116,000, 1116,500) = 1
    [1116,500, 1117,000) = 0
    [1117,000, 1117,500) = 0
    [1117,500, 1118,000) = 0
    [1118,000, 1118,500) = 0
    [1118,500, 1119,000) = 1
    [1119,000, 1119,500) = 0
    [1119,500, 1120,000) = 0
    [1120,000, 1120,500) = 0
    [1120,500, 1121,000) = 1
    [1121,000, 1121,500) = 1
    [1121,500, 1122,000) = 1
    [1122,000, 1122,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   1114,533 ms/op
     p(50,0000) =   1119,947 ms/op
     p(90,0000) =   1122,119 ms/op
     p(95,0000) =   1122,119 ms/op
     p(99,0000) =   1122,119 ms/op
     p(99,9000) =   1122,119 ms/op
     p(99,9900) =   1122,119 ms/op
     p(99,9990) =   1122,119 ms/op
     p(99,9999) =   1122,119 ms/op
    p(100,0000) =   1122,119 ms/op


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score   Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest       100000           get    ss    8  1118,875 ± 6,032  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (100000) = 1118.8745820000001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1463,728 ms/op
# Warmup Iteration   2: 1451,784 ms/op
# Warmup Iteration   3: 1450,219 ms/op
# Warmup Iteration   4: 1445,812 ms/op
# Warmup Iteration   5: 1447,624 ms/op
# Warmup Iteration   6: 1614,581 ms/op
# Warmup Iteration   7: 1769,659 ms/op
# Warmup Iteration   8: 1710,730 ms/op
# Warmup Iteration   9: 1710,574 ms/op
# Warmup Iteration  10: 1705,553 ms/op
Iteration   1: 1711,189 ms/op
Iteration   2: 1710,128 ms/op
Iteration   3: 1713,959 ms/op
Iteration   4: 1713,332 ms/op
Iteration   5: 1707,386 ms/op
Iteration   6: 1709,237 ms/op
Iteration   7: 1712,211 ms/op
Iteration   8: 1713,109 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1711,319 ±(99.9%) 4,352 ms/op

  Histogram, ms/op:
    [1707,000, 1707,500) = 1
    [1707,500, 1708,000) = 0
    [1708,000, 1708,500) = 0
    [1708,500, 1709,000) = 0
    [1709,000, 1709,500) = 1
    [1709,500, 1710,000) = 0
    [1710,000, 1710,500) = 1
    [1710,500, 1711,000) = 0
    [1711,000, 1711,500) = 1
    [1711,500, 1712,000) = 0
    [1712,000, 1712,500) = 1
    [1712,500, 1713,000) = 0
    [1713,000, 1713,500) = 2

  Percentiles, ms/op:
      p(0,0000) =   1707,386 ms/op
     p(50,0000) =   1711,700 ms/op
     p(90,0000) =   1713,959 ms/op
     p(95,0000) =   1713,959 ms/op
     p(99,0000) =   1713,959 ms/op
     p(99,9000) =   1713,959 ms/op
     p(99,9900) =   1713,959 ms/op
     p(99,9990) =   1713,959 ms/op
     p(99,9999) =   1713,959 ms/op
    p(100,0000) =   1713,959 ms/op


# Run complete. Total time: 00:00:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score   Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest       100000           get    ss    8  1711,319 ± 4,352  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (100000) = 1711.318986125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1359,324 ms/op
# Warmup Iteration   2: 1351,565 ms/op
# Warmup Iteration   3: 1342,866 ms/op
# Warmup Iteration   4: 1410,514 ms/op
# Warmup Iteration   5: 1348,035 ms/op
# Warmup Iteration   6: 1248,203 ms/op
# Warmup Iteration   7: 1200,320 ms/op
# Warmup Iteration   8: 1192,607 ms/op
# Warmup Iteration   9: 1187,890 ms/op
# Warmup Iteration  10: 1202,185 ms/op
Iteration   1: 1196,362 ms/op
Iteration   2: 1195,865 ms/op
Iteration   3: 1191,551 ms/op
Iteration   4: 1197,470 ms/op
Iteration   5: 1195,765 ms/op
Iteration   6: 1196,979 ms/op
Iteration   7: 1191,906 ms/op
Iteration   8: 1193,761 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1194,957 ±(99.9%) 4,348 ms/op

  Histogram, ms/op:
    [1191,000, 1191,500) = 0
    [1191,500, 1192,000) = 2
    [1192,000, 1192,500) = 0
    [1192,500, 1193,000) = 0
    [1193,000, 1193,500) = 0
    [1193,500, 1194,000) = 1
    [1194,000, 1194,500) = 0
    [1194,500, 1195,000) = 0
    [1195,000, 1195,500) = 0
    [1195,500, 1196,000) = 2
    [1196,000, 1196,500) = 1
    [1196,500, 1197,000) = 1
    [1197,000, 1197,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   1191,551 ms/op
     p(50,0000) =   1195,815 ms/op
     p(90,0000) =   1197,470 ms/op
     p(95,0000) =   1197,470 ms/op
     p(99,0000) =   1197,470 ms/op
     p(99,9000) =   1197,470 ms/op
     p(99,9900) =   1197,470 ms/op
     p(99,9990) =   1197,470 ms/op
     p(99,9999) =   1197,470 ms/op
    p(100,0000) =   1197,470 ms/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score   Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest       100000           get    ss    8  1194,957 ± 4,348  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (100000) = 1194.9574485
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1422,019 ms/op
# Warmup Iteration   2: 1403,067 ms/op
# Warmup Iteration   3: 1407,276 ms/op
# Warmup Iteration   4: 1401,271 ms/op
# Warmup Iteration   5: 1472,233 ms/op
# Warmup Iteration   6: 1459,343 ms/op
# Warmup Iteration   7: 1491,016 ms/op
# Warmup Iteration   8: 1489,745 ms/op
# Warmup Iteration   9: 1487,106 ms/op
# Warmup Iteration  10: 1490,447 ms/op
Iteration   1: 1489,623 ms/op
Iteration   2: 1484,567 ms/op
Iteration   3: 1522,034 ms/op
Iteration   4: 1488,182 ms/op
Iteration   5: 1488,455 ms/op
Iteration   6: 1489,690 ms/op
Iteration   7: 1486,995 ms/op
Iteration   8: 1489,935 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1492,435 ±(99.9%) 23,116 ms/op

  Histogram, ms/op:
    [1480,000, 1485,000) = 1
    [1485,000, 1490,000) = 6
    [1490,000, 1495,000) = 0
    [1495,000, 1500,000) = 0
    [1500,000, 1505,000) = 0
    [1505,000, 1510,000) = 0
    [1510,000, 1515,000) = 0
    [1515,000, 1520,000) = 0
    [1520,000, 1525,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1484,567 ms/op
     p(50,0000) =   1489,039 ms/op
     p(90,0000) =   1522,034 ms/op
     p(95,0000) =   1522,034 ms/op
     p(99,0000) =   1522,034 ms/op
     p(99,9000) =   1522,034 ms/op
     p(99,9900) =   1522,034 ms/op
     p(99,9990) =   1522,034 ms/op
     p(99,9999) =   1522,034 ms/op
    p(100,0000) =   1522,034 ms/op


# Run complete. Total time: 00:00:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest       100000           get    ss    8  1492,435 ± 23,116  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (100000) = 1492.4354005000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2833,795 ms/op
# Warmup Iteration   2: 2895,663 ms/op
# Warmup Iteration   3: 2823,979 ms/op
# Warmup Iteration   4: 2824,086 ms/op
# Warmup Iteration   5: 2832,071 ms/op
# Warmup Iteration   6: 2762,036 ms/op
# Warmup Iteration   7: 2741,852 ms/op
# Warmup Iteration   8: 2732,217 ms/op
# Warmup Iteration   9: 2737,985 ms/op
# Warmup Iteration  10: 2721,504 ms/op
Iteration   1: 2730,439 ms/op
Iteration   2: 2735,163 ms/op
Iteration   3: 2799,997 ms/op
Iteration   4: 2708,660 ms/op
Iteration   5: 2729,578 ms/op
Iteration   6: 2734,052 ms/op
Iteration   7: 2736,570 ms/op
Iteration   8: 2743,734 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2739,774 ±(99.9%) 50,410 ms/op

  Histogram, ms/op:
    [2700,000, 2710,000) = 1
    [2710,000, 2720,000) = 0
    [2720,000, 2730,000) = 1
    [2730,000, 2740,000) = 4
    [2740,000, 2750,000) = 1
    [2750,000, 2760,000) = 0
    [2760,000, 2770,000) = 0
    [2770,000, 2780,000) = 0
    [2780,000, 2790,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2708,660 ms/op
     p(50,0000) =   2734,607 ms/op
     p(90,0000) =   2799,997 ms/op
     p(95,0000) =   2799,997 ms/op
     p(99,0000) =   2799,997 ms/op
     p(99,9000) =   2799,997 ms/op
     p(99,9900) =   2799,997 ms/op
     p(99,9990) =   2799,997 ms/op
     p(99,9999) =   2799,997 ms/op
    p(100,0000) =   2799,997 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest       100000           get    ss    8  2739,774 ± 50,410  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (100000) = 2739.77390175
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2523,770 ms/op
# Warmup Iteration   2: 2522,238 ms/op
# Warmup Iteration   3: 2516,214 ms/op
# Warmup Iteration   4: 2578,262 ms/op
# Warmup Iteration   5: 2508,998 ms/op
# Warmup Iteration   6: 2523,763 ms/op
# Warmup Iteration   7: 2546,639 ms/op
# Warmup Iteration   8: 2521,099 ms/op
# Warmup Iteration   9: 2543,211 ms/op
# Warmup Iteration  10: 2543,043 ms/op
Iteration   1: 2516,403 ms/op
Iteration   2: 2520,743 ms/op
Iteration   3: 2513,500 ms/op
Iteration   4: 2521,505 ms/op
Iteration   5: 2512,917 ms/op
Iteration   6: 2588,248 ms/op
Iteration   7: 2525,137 ms/op
Iteration   8: 2533,165 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2528,952 ±(99.9%) 47,523 ms/op

  Histogram, ms/op:
    [2510,000, 2515,000) = 2
    [2515,000, 2520,000) = 1
    [2520,000, 2525,000) = 2
    [2525,000, 2530,000) = 1
    [2530,000, 2535,000) = 1
    [2535,000, 2540,000) = 0
    [2540,000, 2545,000) = 0
    [2545,000, 2550,000) = 0
    [2550,000, 2555,000) = 0
    [2555,000, 2560,000) = 0
    [2560,000, 2565,000) = 0
    [2565,000, 2570,000) = 0
    [2570,000, 2575,000) = 0
    [2575,000, 2580,000) = 0
    [2580,000, 2585,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2512,917 ms/op
     p(50,0000) =   2521,124 ms/op
     p(90,0000) =   2588,248 ms/op
     p(95,0000) =   2588,248 ms/op
     p(99,0000) =   2588,248 ms/op
     p(99,9000) =   2588,248 ms/op
     p(99,9900) =   2588,248 ms/op
     p(99,9990) =   2588,248 ms/op
     p(99,9999) =   2588,248 ms/op
    p(100,0000) =   2588,248 ms/op


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest       100000           get    ss    8  2528,952 ± 47,523  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (100000) = 2528.952075
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1581,621 ms/op
# Warmup Iteration   2: 1606,212 ms/op
# Warmup Iteration   3: 1583,724 ms/op
# Warmup Iteration   4: 1606,621 ms/op
# Warmup Iteration   5: 1565,344 ms/op
# Warmup Iteration   6: 1566,518 ms/op
# Warmup Iteration   7: 1568,124 ms/op
# Warmup Iteration   8: 1563,272 ms/op
# Warmup Iteration   9: 1555,436 ms/op
# Warmup Iteration  10: 1581,099 ms/op
Iteration   1: 1605,081 ms/op
Iteration   2: 1654,031 ms/op
Iteration   3: 1570,607 ms/op
Iteration   4: 1578,121 ms/op
Iteration   5: 1575,582 ms/op
Iteration   6: 1566,749 ms/op
Iteration   7: 1610,078 ms/op
Iteration   8: 1570,329 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1591,322 ±(99.9%) 57,673 ms/op

  Histogram, ms/op:
    [1560,000, 1570,000) = 1
    [1570,000, 1580,000) = 4
    [1580,000, 1590,000) = 0
    [1590,000, 1600,000) = 0
    [1600,000, 1610,000) = 1
    [1610,000, 1620,000) = 1
    [1620,000, 1630,000) = 0
    [1630,000, 1640,000) = 0
    [1640,000, 1650,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1566,749 ms/op
     p(50,0000) =   1576,852 ms/op
     p(90,0000) =   1654,031 ms/op
     p(95,0000) =   1654,031 ms/op
     p(99,0000) =   1654,031 ms/op
     p(99,9000) =   1654,031 ms/op
     p(99,9900) =   1654,031 ms/op
     p(99,9990) =   1654,031 ms/op
     p(99,9999) =   1654,031 ms/op
    p(100,0000) =   1654,031 ms/op


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest       100000           get    ss    8  1591,322 ± 57,673  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (100000) = 1591.322216
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2140,358 ms/op
# Warmup Iteration   2: 2148,417 ms/op
# Warmup Iteration   3: 2109,631 ms/op
# Warmup Iteration   4: 2137,581 ms/op
# Warmup Iteration   5: 2145,607 ms/op
# Warmup Iteration   6: 2084,039 ms/op
# Warmup Iteration   7: 2055,135 ms/op
# Warmup Iteration   8: 2137,594 ms/op
# Warmup Iteration   9: 2116,257 ms/op
# Warmup Iteration  10: 2086,682 ms/op
Iteration   1: 2087,822 ms/op
Iteration   2: 2057,944 ms/op
Iteration   3: 2056,116 ms/op
Iteration   4: 2076,450 ms/op
Iteration   5: 2071,018 ms/op
Iteration   6: 2057,026 ms/op
Iteration   7: 2054,230 ms/op
Iteration   8: 2081,841 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2067,806 ±(99.9%) 25,211 ms/op

  Histogram, ms/op:
    [2050,000, 2052,500) = 0
    [2052,500, 2055,000) = 1
    [2055,000, 2057,500) = 2
    [2057,500, 2060,000) = 1
    [2060,000, 2062,500) = 0
    [2062,500, 2065,000) = 0
    [2065,000, 2067,500) = 0
    [2067,500, 2070,000) = 0
    [2070,000, 2072,500) = 1
    [2072,500, 2075,000) = 0
    [2075,000, 2077,500) = 1
    [2077,500, 2080,000) = 0
    [2080,000, 2082,500) = 1
    [2082,500, 2085,000) = 0
    [2085,000, 2087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2054,230 ms/op
     p(50,0000) =   2064,481 ms/op
     p(90,0000) =   2087,822 ms/op
     p(95,0000) =   2087,822 ms/op
     p(99,0000) =   2087,822 ms/op
     p(99,9000) =   2087,822 ms/op
     p(99,9900) =   2087,822 ms/op
     p(99,9990) =   2087,822 ms/op
     p(99,9999) =   2087,822 ms/op
    p(100,0000) =   2087,822 ms/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest       100000           get    ss    8  2067,806 ± 25,211  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (100000) = 2067.806028875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1714,108 ms/op
# Warmup Iteration   2: 1797,777 ms/op
# Warmup Iteration   3: 1712,174 ms/op
# Warmup Iteration   4: 1722,728 ms/op
# Warmup Iteration   5: 1706,836 ms/op
# Warmup Iteration   6: 1699,677 ms/op
# Warmup Iteration   7: 1785,130 ms/op
# Warmup Iteration   8: 1745,479 ms/op
# Warmup Iteration   9: 1749,699 ms/op
# Warmup Iteration  10: 1723,039 ms/op
Iteration   1: 1713,997 ms/op
Iteration   2: 1731,130 ms/op
Iteration   3: 1751,915 ms/op
Iteration   4: 1727,520 ms/op
Iteration   5: 1705,631 ms/op
Iteration   6: 1729,572 ms/op
Iteration   7: 1777,834 ms/op
Iteration   8: 1716,093 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1731,712 ±(99.9%) 44,523 ms/op

  Histogram, ms/op:
    [1700,000, 1705,000) = 0
    [1705,000, 1710,000) = 1
    [1710,000, 1715,000) = 1
    [1715,000, 1720,000) = 1
    [1720,000, 1725,000) = 0
    [1725,000, 1730,000) = 2
    [1730,000, 1735,000) = 1
    [1735,000, 1740,000) = 0
    [1740,000, 1745,000) = 0
    [1745,000, 1750,000) = 0
    [1750,000, 1755,000) = 1
    [1755,000, 1760,000) = 0
    [1760,000, 1765,000) = 0
    [1765,000, 1770,000) = 0
    [1770,000, 1775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1705,631 ms/op
     p(50,0000) =   1728,546 ms/op
     p(90,0000) =   1777,834 ms/op
     p(95,0000) =   1777,834 ms/op
     p(99,0000) =   1777,834 ms/op
     p(99,9000) =   1777,834 ms/op
     p(99,9900) =   1777,834 ms/op
     p(99,9990) =   1777,834 ms/op
     p(99,9999) =   1777,834 ms/op
    p(100,0000) =   1777,834 ms/op


# Run complete. Total time: 00:00:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest       100000           get    ss    8  1731,712 ± 44,523  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (100000) = 1731.7115727500002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1945,349 ms/op
# Warmup Iteration   2: 1963,559 ms/op
# Warmup Iteration   3: 1927,484 ms/op
# Warmup Iteration   4: 1918,434 ms/op
# Warmup Iteration   5: 1911,576 ms/op
# Warmup Iteration   6: 1936,630 ms/op
# Warmup Iteration   7: 1896,583 ms/op
# Warmup Iteration   8: 1912,709 ms/op
# Warmup Iteration   9: 1899,094 ms/op
# Warmup Iteration  10: 1923,642 ms/op
Iteration   1: 1984,567 ms/op
Iteration   2: 1931,544 ms/op
Iteration   3: 1918,923 ms/op
Iteration   4: 2025,730 ms/op
Iteration   5: 1960,234 ms/op
Iteration   6: 1909,629 ms/op
Iteration   7: 1912,056 ms/op
Iteration   8: 1939,720 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1947,800 ±(99.9%) 77,421 ms/op

  Histogram, ms/op:
    [1900,000, 1912,500) = 2
    [1912,500, 1925,000) = 1
    [1925,000, 1937,500) = 1
    [1937,500, 1950,000) = 1
    [1950,000, 1962,500) = 1
    [1962,500, 1975,000) = 0
    [1975,000, 1987,500) = 1
    [1987,500, 2000,000) = 0
    [2000,000, 2012,500) = 0
    [2012,500, 2025,000) = 0
    [2025,000, 2037,500) = 1
    [2037,500, 2050,000) = 0
    [2050,000, 2062,500) = 0
    [2062,500, 2075,000) = 0
    [2075,000, 2087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1909,629 ms/op
     p(50,0000) =   1935,632 ms/op
     p(90,0000) =   2025,730 ms/op
     p(95,0000) =   2025,730 ms/op
     p(99,0000) =   2025,730 ms/op
     p(99,9000) =   2025,730 ms/op
     p(99,9900) =   2025,730 ms/op
     p(99,9990) =   2025,730 ms/op
     p(99,9999) =   2025,730 ms/op
    p(100,0000) =   2025,730 ms/op


# Run complete. Total time: 00:00:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest       100000           get    ss    8  1947,800 ± 77,421  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (100000) = 1947.8004340000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3173,060 ms/op
# Warmup Iteration   2: 3138,745 ms/op
# Warmup Iteration   3: 3166,125 ms/op
# Warmup Iteration   4: 3116,640 ms/op
# Warmup Iteration   5: 3209,712 ms/op
# Warmup Iteration   6: 3238,560 ms/op
# Warmup Iteration   7: 3165,870 ms/op
# Warmup Iteration   8: 3074,979 ms/op
# Warmup Iteration   9: 3186,592 ms/op
# Warmup Iteration  10: 3196,917 ms/op
Iteration   1: 3089,344 ms/op
Iteration   2: 3097,642 ms/op
Iteration   3: 3116,581 ms/op
Iteration   4: 3086,794 ms/op
Iteration   5: 3158,551 ms/op
Iteration   6: 3098,192 ms/op
Iteration   7: 3081,821 ms/op
Iteration   8: 3049,332 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3097,282 ±(99.9%) 59,760 ms/op

  Histogram, ms/op:
    [3000,000, 3012,500) = 0
    [3012,500, 3025,000) = 0
    [3025,000, 3037,500) = 0
    [3037,500, 3050,000) = 1
    [3050,000, 3062,500) = 0
    [3062,500, 3075,000) = 0
    [3075,000, 3087,500) = 2
    [3087,500, 3100,000) = 3
    [3100,000, 3112,500) = 0
    [3112,500, 3125,000) = 1
    [3125,000, 3137,500) = 0
    [3137,500, 3150,000) = 0
    [3150,000, 3162,500) = 1
    [3162,500, 3175,000) = 0
    [3175,000, 3187,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   3049,332 ms/op
     p(50,0000) =   3093,493 ms/op
     p(90,0000) =   3158,551 ms/op
     p(95,0000) =   3158,551 ms/op
     p(99,0000) =   3158,551 ms/op
     p(99,9000) =   3158,551 ms/op
     p(99,9900) =   3158,551 ms/op
     p(99,9990) =   3158,551 ms/op
     p(99,9999) =   3158,551 ms/op
    p(100,0000) =   3158,551 ms/op


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest       100000           get    ss    8  3097,282 ± 59,760  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (100000) = 3097.282157375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2961,736 ms/op
# Warmup Iteration   2: 2942,140 ms/op
# Warmup Iteration   3: 2930,648 ms/op
# Warmup Iteration   4: 2948,693 ms/op
# Warmup Iteration   5: 3052,688 ms/op
# Warmup Iteration   6: 2902,555 ms/op
# Warmup Iteration   7: 2909,938 ms/op
# Warmup Iteration   8: 2919,364 ms/op
# Warmup Iteration   9: 2905,105 ms/op
# Warmup Iteration  10: 2906,498 ms/op
Iteration   1: 2940,508 ms/op
Iteration   2: 2904,107 ms/op
Iteration   3: 2927,769 ms/op
Iteration   4: 2888,294 ms/op
Iteration   5: 2956,468 ms/op
Iteration   6: 2898,344 ms/op
Iteration   7: 2891,358 ms/op
Iteration   8: 2881,341 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2911,024 ±(99.9%) 52,152 ms/op

  Histogram, ms/op:
    [2880,000, 2885,000) = 1
    [2885,000, 2890,000) = 1
    [2890,000, 2895,000) = 1
    [2895,000, 2900,000) = 1
    [2900,000, 2905,000) = 1
    [2905,000, 2910,000) = 0
    [2910,000, 2915,000) = 0
    [2915,000, 2920,000) = 0
    [2920,000, 2925,000) = 0
    [2925,000, 2930,000) = 1
    [2930,000, 2935,000) = 0
    [2935,000, 2940,000) = 0
    [2940,000, 2945,000) = 1
    [2945,000, 2950,000) = 0
    [2950,000, 2955,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2881,341 ms/op
     p(50,0000) =   2901,225 ms/op
     p(90,0000) =   2956,468 ms/op
     p(95,0000) =   2956,468 ms/op
     p(99,0000) =   2956,468 ms/op
     p(99,9000) =   2956,468 ms/op
     p(99,9900) =   2956,468 ms/op
     p(99,9990) =   2956,468 ms/op
     p(99,9999) =   2956,468 ms/op
    p(100,0000) =   2956,468 ms/op


# Run complete. Total time: 00:00:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest       100000           get    ss    8  2911,024 ± 52,152  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (100000) = 2911.023512375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1283,797 ms/op
# Warmup Iteration   2: 1272,018 ms/op
# Warmup Iteration   3: 1276,120 ms/op
# Warmup Iteration   4: 1266,144 ms/op
# Warmup Iteration   5: 1273,950 ms/op
# Warmup Iteration   6: 1279,604 ms/op
# Warmup Iteration   7: 1297,948 ms/op
# Warmup Iteration   8: 1278,184 ms/op
# Warmup Iteration   9: 1291,542 ms/op
# Warmup Iteration  10: 1288,982 ms/op
Iteration   1: 1291,886 ms/op
Iteration   2: 1356,591 ms/op
Iteration   3: 1287,482 ms/op
Iteration   4: 1289,968 ms/op
Iteration   5: 1286,128 ms/op
Iteration   6: 1277,950 ms/op
Iteration   7: 1292,323 ms/op
Iteration   8: 1282,328 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1295,582 ±(99.9%) 48,042 ms/op

  Histogram, ms/op:
    [1270,000, 1275,000) = 0
    [1275,000, 1280,000) = 1
    [1280,000, 1285,000) = 1
    [1285,000, 1290,000) = 3
    [1290,000, 1295,000) = 2
    [1295,000, 1300,000) = 0
    [1300,000, 1305,000) = 0
    [1305,000, 1310,000) = 0
    [1310,000, 1315,000) = 0
    [1315,000, 1320,000) = 0
    [1320,000, 1325,000) = 0
    [1325,000, 1330,000) = 0
    [1330,000, 1335,000) = 0
    [1335,000, 1340,000) = 0
    [1340,000, 1345,000) = 0
    [1345,000, 1350,000) = 0
    [1350,000, 1355,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1277,950 ms/op
     p(50,0000) =   1288,725 ms/op
     p(90,0000) =   1356,591 ms/op
     p(95,0000) =   1356,591 ms/op
     p(99,0000) =   1356,591 ms/op
     p(99,9000) =   1356,591 ms/op
     p(99,9900) =   1356,591 ms/op
     p(99,9990) =   1356,591 ms/op
     p(99,9999) =   1356,591 ms/op
    p(100,0000) =   1356,591 ms/op


# Run complete. Total time: 00:00:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest       100000           get    ss    8  1295,582 ± 48,042  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (100000) = 1295.5820525000001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1140,982 ms/op
# Warmup Iteration   2: 1131,525 ms/op
# Warmup Iteration   3: 1116,886 ms/op
# Warmup Iteration   4: 1105,940 ms/op
# Warmup Iteration   5: 1131,872 ms/op
# Warmup Iteration   6: 1145,190 ms/op
# Warmup Iteration   7: 1164,843 ms/op
# Warmup Iteration   8: 1154,637 ms/op
# Warmup Iteration   9: 1180,420 ms/op
# Warmup Iteration  10: 1159,644 ms/op
Iteration   1: 1167,625 ms/op
Iteration   2: 1162,359 ms/op
Iteration   3: 1151,159 ms/op
Iteration   4: 1154,180 ms/op
Iteration   5: 1233,916 ms/op
Iteration   6: 1162,204 ms/op
Iteration   7: 1160,172 ms/op
Iteration   8: 1180,042 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1171,457 ±(99.9%) 51,078 ms/op

  Histogram, ms/op:
    [1150,000, 1155,000) = 2
    [1155,000, 1160,000) = 0
    [1160,000, 1165,000) = 3
    [1165,000, 1170,000) = 1
    [1170,000, 1175,000) = 0
    [1175,000, 1180,000) = 0
    [1180,000, 1185,000) = 1
    [1185,000, 1190,000) = 0
    [1190,000, 1195,000) = 0
    [1195,000, 1200,000) = 0
    [1200,000, 1205,000) = 0
    [1205,000, 1210,000) = 0
    [1210,000, 1215,000) = 0
    [1215,000, 1220,000) = 0
    [1220,000, 1225,000) = 0
    [1225,000, 1230,000) = 0
    [1230,000, 1235,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1151,159 ms/op
     p(50,0000) =   1162,282 ms/op
     p(90,0000) =   1233,916 ms/op
     p(95,0000) =   1233,916 ms/op
     p(99,0000) =   1233,916 ms/op
     p(99,9000) =   1233,916 ms/op
     p(99,9900) =   1233,916 ms/op
     p(99,9990) =   1233,916 ms/op
     p(99,9999) =   1233,916 ms/op
    p(100,0000) =   1233,916 ms/op


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest       100000           get    ss    8  1171,457 ± 51,078  ms/op
tests.maptests.identity_object.GsIdentityMapTest (100000) = 1171.457047375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1423,194 ms/op
# Warmup Iteration   2: 1396,058 ms/op
# Warmup Iteration   3: 1387,534 ms/op
# Warmup Iteration   4: 1402,975 ms/op
# Warmup Iteration   5: 1405,139 ms/op
# Warmup Iteration   6: 1482,898 ms/op
# Warmup Iteration   7: 1517,815 ms/op
# Warmup Iteration   8: 1517,193 ms/op
# Warmup Iteration   9: 1516,909 ms/op
# Warmup Iteration  10: 1509,564 ms/op
Iteration   1: 1516,093 ms/op
Iteration   2: 1522,122 ms/op
Iteration   3: 1513,595 ms/op
Iteration   4: 1585,176 ms/op
Iteration   5: 1518,078 ms/op
Iteration   6: 1513,194 ms/op
Iteration   7: 1508,382 ms/op
Iteration   8: 1515,917 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1524,070 ±(99.9%) 47,815 ms/op

  Histogram, ms/op:
    [1500,000, 1505,000) = 0
    [1505,000, 1510,000) = 1
    [1510,000, 1515,000) = 2
    [1515,000, 1520,000) = 3
    [1520,000, 1525,000) = 1
    [1525,000, 1530,000) = 0
    [1530,000, 1535,000) = 0
    [1535,000, 1540,000) = 0
    [1540,000, 1545,000) = 0
    [1545,000, 1550,000) = 0
    [1550,000, 1555,000) = 0
    [1555,000, 1560,000) = 0
    [1560,000, 1565,000) = 0
    [1565,000, 1570,000) = 0
    [1570,000, 1575,000) = 0
    [1575,000, 1580,000) = 0
    [1580,000, 1585,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1508,382 ms/op
     p(50,0000) =   1516,005 ms/op
     p(90,0000) =   1585,176 ms/op
     p(95,0000) =   1585,176 ms/op
     p(99,0000) =   1585,176 ms/op
     p(99,9000) =   1585,176 ms/op
     p(99,9900) =   1585,176 ms/op
     p(99,9990) =   1585,176 ms/op
     p(99,9999) =   1585,176 ms/op
    p(100,0000) =   1585,176 ms/op


# Run complete. Total time: 00:00:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest       100000           get    ss    8  1524,070 ± 47,815  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (100000) = 1524.069671
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1479,817 ms/op
# Warmup Iteration   2: 1452,486 ms/op
# Warmup Iteration   3: 1456,200 ms/op
# Warmup Iteration   4: 1450,749 ms/op
# Warmup Iteration   5: 1458,944 ms/op
# Warmup Iteration   6: 1453,595 ms/op
# Warmup Iteration   7: 1452,632 ms/op
# Warmup Iteration   8: 1458,961 ms/op
# Warmup Iteration   9: 1453,397 ms/op
# Warmup Iteration  10: 1453,158 ms/op
Iteration   1: 1455,486 ms/op
Iteration   2: 1453,174 ms/op
Iteration   3: 1522,186 ms/op
Iteration   4: 1455,572 ms/op
Iteration   5: 1449,175 ms/op
Iteration   6: 1451,475 ms/op
Iteration   7: 1459,339 ms/op
Iteration   8: 1466,947 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1464,169 ±(99.9%) 46,008 ms/op

  Histogram, ms/op:
    [1440,000, 1445,000) = 0
    [1445,000, 1450,000) = 1
    [1450,000, 1455,000) = 2
    [1455,000, 1460,000) = 3
    [1460,000, 1465,000) = 0
    [1465,000, 1470,000) = 1
    [1470,000, 1475,000) = 0
    [1475,000, 1480,000) = 0
    [1480,000, 1485,000) = 0
    [1485,000, 1490,000) = 0
    [1490,000, 1495,000) = 0
    [1495,000, 1500,000) = 0
    [1500,000, 1505,000) = 0
    [1505,000, 1510,000) = 0
    [1510,000, 1515,000) = 0
    [1515,000, 1520,000) = 0
    [1520,000, 1525,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1449,175 ms/op
     p(50,0000) =   1455,529 ms/op
     p(90,0000) =   1522,186 ms/op
     p(95,0000) =   1522,186 ms/op
     p(99,0000) =   1522,186 ms/op
     p(99,9000) =   1522,186 ms/op
     p(99,9900) =   1522,186 ms/op
     p(99,9990) =   1522,186 ms/op
     p(99,9999) =   1522,186 ms/op
    p(100,0000) =   1522,186 ms/op


# Run complete. Total time: 00:00:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest       100000           get    ss    8  1464,169 ± 46,008  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (100000) = 1464.1694067499998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1296,536 ms/op
# Warmup Iteration   2: 1270,046 ms/op
# Warmup Iteration   3: 1264,524 ms/op
# Warmup Iteration   4: 1288,332 ms/op
# Warmup Iteration   5: 1272,530 ms/op
# Warmup Iteration   6: 1251,089 ms/op
# Warmup Iteration   7: 1235,768 ms/op
# Warmup Iteration   8: 1234,892 ms/op
# Warmup Iteration   9: 1247,174 ms/op
# Warmup Iteration  10: 1230,642 ms/op
Iteration   1: 1230,556 ms/op
Iteration   2: 1230,216 ms/op
Iteration   3: 1228,372 ms/op
Iteration   4: 1285,771 ms/op
Iteration   5: 1226,742 ms/op
Iteration   6: 1232,931 ms/op
Iteration   7: 1240,233 ms/op
Iteration   8: 1232,968 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1238,474 ±(99.9%) 37,353 ms/op

  Histogram, ms/op:
    [1220,000, 1225,000) = 0
    [1225,000, 1230,000) = 2
    [1230,000, 1235,000) = 4
    [1235,000, 1240,000) = 0
    [1240,000, 1245,000) = 1
    [1245,000, 1250,000) = 0
    [1250,000, 1255,000) = 0
    [1255,000, 1260,000) = 0
    [1260,000, 1265,000) = 0
    [1265,000, 1270,000) = 0
    [1270,000, 1275,000) = 0
    [1275,000, 1280,000) = 0
    [1280,000, 1285,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1226,742 ms/op
     p(50,0000) =   1231,744 ms/op
     p(90,0000) =   1285,771 ms/op
     p(95,0000) =   1285,771 ms/op
     p(99,0000) =   1285,771 ms/op
     p(99,9000) =   1285,771 ms/op
     p(99,9900) =   1285,771 ms/op
     p(99,9990) =   1285,771 ms/op
     p(99,9999) =   1285,771 ms/op
    p(100,0000) =   1285,771 ms/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest       100000           get    ss    8  1238,474 ± 37,353  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (100000) = 1238.4737315
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2909,146 ms/op
# Warmup Iteration   2: 2897,957 ms/op
# Warmup Iteration   3: 2910,555 ms/op
# Warmup Iteration   4: 2910,977 ms/op
# Warmup Iteration   5: 2899,563 ms/op
# Warmup Iteration   6: 2808,414 ms/op
# Warmup Iteration   7: 2796,567 ms/op
# Warmup Iteration   8: 2745,558 ms/op
# Warmup Iteration   9: 2738,008 ms/op
# Warmup Iteration  10: 2748,298 ms/op
Iteration   1: 2729,115 ms/op
Iteration   2: 2727,378 ms/op
Iteration   3: 2745,727 ms/op
Iteration   4: 2747,004 ms/op
Iteration   5: 2777,876 ms/op
Iteration   6: 2742,516 ms/op
Iteration   7: 2741,414 ms/op
Iteration   8: 2812,712 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2752,968 ±(99.9%) 54,771 ms/op

  Histogram, ms/op:
    [2720,000, 2730,000) = 2
    [2730,000, 2740,000) = 0
    [2740,000, 2750,000) = 4
    [2750,000, 2760,000) = 0
    [2760,000, 2770,000) = 0
    [2770,000, 2780,000) = 1
    [2780,000, 2790,000) = 0
    [2790,000, 2800,000) = 0
    [2800,000, 2810,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2727,378 ms/op
     p(50,0000) =   2744,122 ms/op
     p(90,0000) =   2812,712 ms/op
     p(95,0000) =   2812,712 ms/op
     p(99,0000) =   2812,712 ms/op
     p(99,9000) =   2812,712 ms/op
     p(99,9900) =   2812,712 ms/op
     p(99,9990) =   2812,712 ms/op
     p(99,9999) =   2812,712 ms/op
    p(100,0000) =   2812,712 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest       100000           get    ss    8  2752,968 ± 54,771  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (100000) = 2752.96776625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 100000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2791,485 ms/op
# Warmup Iteration   2: 2807,763 ms/op
# Warmup Iteration   3: 2779,689 ms/op
# Warmup Iteration   4: 2758,765 ms/op
# Warmup Iteration   5: 2784,016 ms/op
# Warmup Iteration   6: 2801,328 ms/op
# Warmup Iteration   7: 2851,400 ms/op
# Warmup Iteration   8: 2832,469 ms/op
# Warmup Iteration   9: 2909,893 ms/op
# Warmup Iteration  10: 2836,702 ms/op
Iteration   1: 2859,267 ms/op
Iteration   2: 2842,200 ms/op
Iteration   3: 2856,365 ms/op
Iteration   4: 2853,268 ms/op
Iteration   5: 2829,984 ms/op
Iteration   6: 2833,257 ms/op
Iteration   7: 2851,000 ms/op
Iteration   8: 2832,733 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2844,759 ±(99.9%) 22,371 ms/op

  Histogram, ms/op:
    [2820,000, 2822,500) = 0
    [2822,500, 2825,000) = 0
    [2825,000, 2827,500) = 0
    [2827,500, 2830,000) = 1
    [2830,000, 2832,500) = 0
    [2832,500, 2835,000) = 2
    [2835,000, 2837,500) = 0
    [2837,500, 2840,000) = 0
    [2840,000, 2842,500) = 1
    [2842,500, 2845,000) = 0
    [2845,000, 2847,500) = 0
    [2847,500, 2850,000) = 0
    [2850,000, 2852,500) = 1
    [2852,500, 2855,000) = 1
    [2855,000, 2857,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   2829,984 ms/op
     p(50,0000) =   2846,600 ms/op
     p(90,0000) =   2859,267 ms/op
     p(95,0000) =   2859,267 ms/op
     p(99,0000) =   2859,267 ms/op
     p(99,9000) =   2859,267 ms/op
     p(99,9900) =   2859,267 ms/op
     p(99,9990) =   2859,267 ms/op
     p(99,9999) =   2859,267 ms/op
    p(100,0000) =   2859,267 ms/op


# Run complete. Total time: 00:00:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest       100000           get    ss    8  2844,759 ± 22,371  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (100000) = 2844.75919075
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4921,962 ms/op
# Warmup Iteration   2: 4905,410 ms/op
# Warmup Iteration   3: 4923,538 ms/op
# Warmup Iteration   4: 4907,745 ms/op
# Warmup Iteration   5: 4914,671 ms/op
# Warmup Iteration   6: 4990,538 ms/op
# Warmup Iteration   7: 4973,444 ms/op
# Warmup Iteration   8: 4919,086 ms/op
# Warmup Iteration   9: 4896,790 ms/op
# Warmup Iteration  10: 4939,967 ms/op
Iteration   1: 4881,445 ms/op
Iteration   2: 4963,325 ms/op
Iteration   3: 4963,631 ms/op
Iteration   4: 4964,048 ms/op
Iteration   5: 4940,673 ms/op
Iteration   6: 4943,156 ms/op
Iteration   7: 4910,216 ms/op
Iteration   8: 4960,807 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4940,913 ±(99.9%) 57,963 ms/op

  Histogram, ms/op:
    [4880,000, 4885,000) = 1
    [4885,000, 4890,000) = 0
    [4890,000, 4895,000) = 0
    [4895,000, 4900,000) = 0
    [4900,000, 4905,000) = 0
    [4905,000, 4910,000) = 0
    [4910,000, 4915,000) = 1
    [4915,000, 4920,000) = 0
    [4920,000, 4925,000) = 0
    [4925,000, 4930,000) = 0
    [4930,000, 4935,000) = 0
    [4935,000, 4940,000) = 0
    [4940,000, 4945,000) = 2
    [4945,000, 4950,000) = 0
    [4950,000, 4955,000) = 0
    [4955,000, 4960,000) = 0
    [4960,000, 4965,000) = 4

  Percentiles, ms/op:
      p(0,0000) =   4881,445 ms/op
     p(50,0000) =   4951,982 ms/op
     p(90,0000) =   4964,048 ms/op
     p(95,0000) =   4964,048 ms/op
     p(99,0000) =   4964,048 ms/op
     p(99,9000) =   4964,048 ms/op
     p(99,9900) =   4964,048 ms/op
     p(99,9990) =   4964,048 ms/op
     p(99,9999) =   4964,048 ms/op
    p(100,0000) =   4964,048 ms/op


# Run complete. Total time: 00:01:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test      1000000           get    ss    8  4940,913 ± 57,963  ms/op
tests.maptests.article_examples.IntIntMap1Test (1000000) = 4940.912535749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3663,469 ms/op
# Warmup Iteration   2: 3657,487 ms/op
# Warmup Iteration   3: 3637,944 ms/op
# Warmup Iteration   4: 3637,433 ms/op
# Warmup Iteration   5: 3626,718 ms/op
# Warmup Iteration   6: 3640,535 ms/op
# Warmup Iteration   7: 3660,997 ms/op
# Warmup Iteration   8: 3643,809 ms/op
# Warmup Iteration   9: 3641,387 ms/op
# Warmup Iteration  10: 3680,444 ms/op
Iteration   1: 3633,613 ms/op
Iteration   2: 3664,695 ms/op
Iteration   3: 3640,430 ms/op
Iteration   4: 3647,080 ms/op
Iteration   5: 3680,443 ms/op
Iteration   6: 3637,535 ms/op
Iteration   7: 3655,395 ms/op
Iteration   8: 3674,437 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3654,204 ±(99.9%) 33,521 ms/op

  Histogram, ms/op:
    [3630,000, 3635,000) = 1
    [3635,000, 3640,000) = 1
    [3640,000, 3645,000) = 1
    [3645,000, 3650,000) = 1
    [3650,000, 3655,000) = 0
    [3655,000, 3660,000) = 1
    [3660,000, 3665,000) = 1
    [3665,000, 3670,000) = 0
    [3670,000, 3675,000) = 1
    [3675,000, 3680,000) = 0
    [3680,000, 3685,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3633,613 ms/op
     p(50,0000) =   3651,238 ms/op
     p(90,0000) =   3680,443 ms/op
     p(95,0000) =   3680,443 ms/op
     p(99,0000) =   3680,443 ms/op
     p(99,9000) =   3680,443 ms/op
     p(99,9900) =   3680,443 ms/op
     p(99,9990) =   3680,443 ms/op
     p(99,9999) =   3680,443 ms/op
    p(100,0000) =   3680,443 ms/op


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test      1000000           get    ss    8  3654,204 ± 33,521  ms/op
tests.maptests.article_examples.IntIntMap2Test (1000000) = 3654.2035286249998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3294,517 ms/op
# Warmup Iteration   2: 3286,985 ms/op
# Warmup Iteration   3: 3278,117 ms/op
# Warmup Iteration   4: 3325,903 ms/op
# Warmup Iteration   5: 3359,598 ms/op
# Warmup Iteration   6: 3281,101 ms/op
# Warmup Iteration   7: 3275,247 ms/op
# Warmup Iteration   8: 3305,863 ms/op
# Warmup Iteration   9: 3269,517 ms/op
# Warmup Iteration  10: 3306,240 ms/op
Iteration   1: 3284,248 ms/op
Iteration   2: 3270,994 ms/op
Iteration   3: 3365,218 ms/op
Iteration   4: 3271,413 ms/op
Iteration   5: 3273,563 ms/op
Iteration   6: 3288,071 ms/op
Iteration   7: 3284,069 ms/op
Iteration   8: 3274,574 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3289,019 ±(99.9%) 60,189 ms/op

  Histogram, ms/op:
    [3270,000, 3280,000) = 4
    [3280,000, 3290,000) = 3
    [3290,000, 3300,000) = 0
    [3300,000, 3310,000) = 0
    [3310,000, 3320,000) = 0
    [3320,000, 3330,000) = 0
    [3330,000, 3340,000) = 0
    [3340,000, 3350,000) = 0
    [3350,000, 3360,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3270,994 ms/op
     p(50,0000) =   3279,321 ms/op
     p(90,0000) =   3365,218 ms/op
     p(95,0000) =   3365,218 ms/op
     p(99,0000) =   3365,218 ms/op
     p(99,9000) =   3365,218 ms/op
     p(99,9900) =   3365,218 ms/op
     p(99,9990) =   3365,218 ms/op
     p(99,9999) =   3365,218 ms/op
    p(100,0000) =   3365,218 ms/op


# Run complete. Total time: 00:01:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test      1000000           get    ss    8  3289,019 ± 60,189  ms/op
tests.maptests.article_examples.IntIntMap3Test (1000000) = 3289.018749875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3182,188 ms/op
# Warmup Iteration   2: 3193,561 ms/op
# Warmup Iteration   3: 3194,190 ms/op
# Warmup Iteration   4: 3176,516 ms/op
# Warmup Iteration   5: 3194,403 ms/op
# Warmup Iteration   6: 3182,273 ms/op
# Warmup Iteration   7: 3167,939 ms/op
# Warmup Iteration   8: 3175,719 ms/op
# Warmup Iteration   9: 3195,581 ms/op
# Warmup Iteration  10: 3174,401 ms/op
Iteration   1: 3178,537 ms/op
Iteration   2: 3241,144 ms/op
Iteration   3: 3184,664 ms/op
Iteration   4: 3164,390 ms/op
Iteration   5: 3189,290 ms/op
Iteration   6: 3174,939 ms/op
Iteration   7: 3172,012 ms/op
Iteration   8: 3166,846 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3183,978 ±(99.9%) 46,991 ms/op

  Histogram, ms/op:
    [3160,000, 3165,000) = 1
    [3165,000, 3170,000) = 1
    [3170,000, 3175,000) = 2
    [3175,000, 3180,000) = 1
    [3180,000, 3185,000) = 1
    [3185,000, 3190,000) = 1
    [3190,000, 3195,000) = 0
    [3195,000, 3200,000) = 0
    [3200,000, 3205,000) = 0
    [3205,000, 3210,000) = 0
    [3210,000, 3215,000) = 0
    [3215,000, 3220,000) = 0
    [3220,000, 3225,000) = 0
    [3225,000, 3230,000) = 0
    [3230,000, 3235,000) = 0
    [3235,000, 3240,000) = 0
    [3240,000, 3245,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3164,390 ms/op
     p(50,0000) =   3176,738 ms/op
     p(90,0000) =   3241,144 ms/op
     p(95,0000) =   3241,144 ms/op
     p(99,0000) =   3241,144 ms/op
     p(99,9000) =   3241,144 ms/op
     p(99,9900) =   3241,144 ms/op
     p(99,9990) =   3241,144 ms/op
     p(99,9999) =   3241,144 ms/op
    p(100,0000) =   3241,144 ms/op


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test      1000000           get    ss    8  3183,978 ± 46,991  ms/op
tests.maptests.article_examples.IntIntMap4Test (1000000) = 3183.977696125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2744,314 ms/op
# Warmup Iteration   2: 2765,562 ms/op
# Warmup Iteration   3: 2725,641 ms/op
# Warmup Iteration   4: 2719,278 ms/op
# Warmup Iteration   5: 2726,792 ms/op
# Warmup Iteration   6: 2725,783 ms/op
# Warmup Iteration   7: 2734,598 ms/op
# Warmup Iteration   8: 2743,167 ms/op
# Warmup Iteration   9: 2739,996 ms/op
# Warmup Iteration  10: 2726,744 ms/op
Iteration   1: 2726,524 ms/op
Iteration   2: 2742,305 ms/op
Iteration   3: 2766,290 ms/op
Iteration   4: 2726,883 ms/op
Iteration   5: 2728,058 ms/op
Iteration   6: 2732,720 ms/op
Iteration   7: 2736,606 ms/op
Iteration   8: 2727,021 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2735,801 ±(99.9%) 25,902 ms/op

  Histogram, ms/op:
    [2720,000, 2725,000) = 0
    [2725,000, 2730,000) = 4
    [2730,000, 2735,000) = 1
    [2735,000, 2740,000) = 1
    [2740,000, 2745,000) = 1
    [2745,000, 2750,000) = 0
    [2750,000, 2755,000) = 0
    [2755,000, 2760,000) = 0
    [2760,000, 2765,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2726,524 ms/op
     p(50,0000) =   2730,389 ms/op
     p(90,0000) =   2766,290 ms/op
     p(95,0000) =   2766,290 ms/op
     p(99,0000) =   2766,290 ms/op
     p(99,9000) =   2766,290 ms/op
     p(99,9900) =   2766,290 ms/op
     p(99,9990) =   2766,290 ms/op
     p(99,9999) =   2766,290 ms/op
    p(100,0000) =   2766,290 ms/op


# Run complete. Total time: 00:00:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest      1000000           get    ss    8  2735,801 ± 25,902  ms/op
tests.maptests.article_examples.IntIntMap4aTest (1000000) = 2735.8009024999997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2735,128 ms/op
# Warmup Iteration   2: 2701,369 ms/op
# Warmup Iteration   3: 2718,502 ms/op
# Warmup Iteration   4: 2771,031 ms/op
# Warmup Iteration   5: 2746,324 ms/op
# Warmup Iteration   6: 2743,352 ms/op
# Warmup Iteration   7: 2690,063 ms/op
# Warmup Iteration   8: 2737,882 ms/op
# Warmup Iteration   9: 2730,233 ms/op
# Warmup Iteration  10: 2743,065 ms/op
Iteration   1: 2698,070 ms/op
Iteration   2: 2764,666 ms/op
Iteration   3: 2735,304 ms/op
Iteration   4: 2737,592 ms/op
Iteration   5: 2783,028 ms/op
Iteration   6: 2696,390 ms/op
Iteration   7: 2731,735 ms/op
Iteration   8: 2771,809 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2739,824 ±(99.9%) 61,437 ms/op

  Histogram, ms/op:
    [2690,000, 2700,000) = 2
    [2700,000, 2710,000) = 0
    [2710,000, 2720,000) = 0
    [2720,000, 2730,000) = 0
    [2730,000, 2740,000) = 3
    [2740,000, 2750,000) = 0
    [2750,000, 2760,000) = 0
    [2760,000, 2770,000) = 1
    [2770,000, 2780,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2696,390 ms/op
     p(50,0000) =   2736,448 ms/op
     p(90,0000) =   2783,028 ms/op
     p(95,0000) =   2783,028 ms/op
     p(99,0000) =   2783,028 ms/op
     p(99,9000) =   2783,028 ms/op
     p(99,9900) =   2783,028 ms/op
     p(99,9990) =   2783,028 ms/op
     p(99,9999) =   2783,028 ms/op
    p(100,0000) =   2783,028 ms/op


# Run complete. Total time: 00:00:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest      1000000           get    ss    8  2739,824 ± 61,437  ms/op
tests.maptests.primitive.FastUtilMapTest (1000000) = 2739.824254625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2797,334 ms/op
# Warmup Iteration   2: 2764,887 ms/op
# Warmup Iteration   3: 2758,710 ms/op
# Warmup Iteration   4: 2764,542 ms/op
# Warmup Iteration   5: 2760,016 ms/op
# Warmup Iteration   6: 2804,182 ms/op
# Warmup Iteration   7: 2769,368 ms/op
# Warmup Iteration   8: 2765,737 ms/op
# Warmup Iteration   9: 2758,923 ms/op
# Warmup Iteration  10: 2772,190 ms/op
Iteration   1: 2775,956 ms/op
Iteration   2: 2760,240 ms/op
Iteration   3: 2773,531 ms/op
Iteration   4: 2764,488 ms/op
Iteration   5: 2767,987 ms/op
Iteration   6: 2786,001 ms/op
Iteration   7: 2777,261 ms/op
Iteration   8: 2765,096 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2771,320 ±(99.9%) 16,102 ms/op

  Histogram, ms/op:
    [2760,000, 2762,500) = 1
    [2762,500, 2765,000) = 1
    [2765,000, 2767,500) = 1
    [2767,500, 2770,000) = 1
    [2770,000, 2772,500) = 0
    [2772,500, 2775,000) = 1
    [2775,000, 2777,500) = 2
    [2777,500, 2780,000) = 0
    [2780,000, 2782,500) = 0
    [2782,500, 2785,000) = 0
    [2785,000, 2787,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   2760,240 ms/op
     p(50,0000) =   2770,759 ms/op
     p(90,0000) =   2786,001 ms/op
     p(95,0000) =   2786,001 ms/op
     p(99,0000) =   2786,001 ms/op
     p(99,9000) =   2786,001 ms/op
     p(99,9900) =   2786,001 ms/op
     p(99,9990) =   2786,001 ms/op
     p(99,9999) =   2786,001 ms/op
    p(100,0000) =   2786,001 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest      1000000           get    ss    8  2771,320 ± 16,102  ms/op
tests.maptests.primitive.GsMutableMapTest (1000000) = 2771.319966125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2679,385 ms/op
# Warmup Iteration   2: 2666,201 ms/op
# Warmup Iteration   3: 2671,665 ms/op
# Warmup Iteration   4: 2663,149 ms/op
# Warmup Iteration   5: 2662,666 ms/op
# Warmup Iteration   6: 2663,608 ms/op
# Warmup Iteration   7: 2665,139 ms/op
# Warmup Iteration   8: 2705,715 ms/op
# Warmup Iteration   9: 2686,198 ms/op
# Warmup Iteration  10: 2664,985 ms/op
Iteration   1: 2678,128 ms/op
Iteration   2: 2671,265 ms/op
Iteration   3: 2669,963 ms/op
Iteration   4: 2665,442 ms/op
Iteration   5: 2661,802 ms/op
Iteration   6: 2663,364 ms/op
Iteration   7: 2676,120 ms/op
Iteration   8: 2655,815 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2667,737 ±(99.9%) 14,406 ms/op

  Histogram, ms/op:
    [2650,000, 2652,500) = 0
    [2652,500, 2655,000) = 0
    [2655,000, 2657,500) = 1
    [2657,500, 2660,000) = 0
    [2660,000, 2662,500) = 1
    [2662,500, 2665,000) = 1
    [2665,000, 2667,500) = 1
    [2667,500, 2670,000) = 1
    [2670,000, 2672,500) = 1
    [2672,500, 2675,000) = 0
    [2675,000, 2677,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   2655,815 ms/op
     p(50,0000) =   2667,702 ms/op
     p(90,0000) =   2678,128 ms/op
     p(95,0000) =   2678,128 ms/op
     p(99,0000) =   2678,128 ms/op
     p(99,9000) =   2678,128 ms/op
     p(99,9900) =   2678,128 ms/op
     p(99,9990) =   2678,128 ms/op
     p(99,9999) =   2678,128 ms/op
    p(100,0000) =   2678,128 ms/op


# Run complete. Total time: 00:00:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest      1000000           get    ss    8  2667,737 ± 14,406  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (1000000) = 2667.7371925000007
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3188,361 ms/op
# Warmup Iteration   2: 3165,641 ms/op
# Warmup Iteration   3: 3156,009 ms/op
# Warmup Iteration   4: 3170,339 ms/op
# Warmup Iteration   5: 3155,963 ms/op
# Warmup Iteration   6: 3175,709 ms/op
# Warmup Iteration   7: 3172,671 ms/op
# Warmup Iteration   8: 3155,349 ms/op
# Warmup Iteration   9: 3223,281 ms/op
# Warmup Iteration  10: 3166,487 ms/op
Iteration   1: 3162,964 ms/op
Iteration   2: 3161,260 ms/op
Iteration   3: 3151,589 ms/op
Iteration   4: 3180,463 ms/op
Iteration   5: 3162,626 ms/op
Iteration   6: 3159,214 ms/op
Iteration   7: 3189,648 ms/op
Iteration   8: 3211,109 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3172,359 ±(99.9%) 38,079 ms/op

  Histogram, ms/op:
    [3150,000, 3155,000) = 1
    [3155,000, 3160,000) = 1
    [3160,000, 3165,000) = 3
    [3165,000, 3170,000) = 0
    [3170,000, 3175,000) = 0
    [3175,000, 3180,000) = 0
    [3180,000, 3185,000) = 1
    [3185,000, 3190,000) = 1
    [3190,000, 3195,000) = 0
    [3195,000, 3200,000) = 0
    [3200,000, 3205,000) = 0
    [3205,000, 3210,000) = 0
    [3210,000, 3215,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3151,589 ms/op
     p(50,0000) =   3162,795 ms/op
     p(90,0000) =   3211,109 ms/op
     p(95,0000) =   3211,109 ms/op
     p(99,0000) =   3211,109 ms/op
     p(99,9000) =   3211,109 ms/op
     p(99,9900) =   3211,109 ms/op
     p(99,9990) =   3211,109 ms/op
     p(99,9999) =   3211,109 ms/op
    p(100,0000) =   3211,109 ms/op


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest      1000000           get    ss    8  3172,359 ± 38,079  ms/op
tests.maptests.primitive.HppcMapTest (1000000) = 3172.3591395000003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5523,680 ms/op
# Warmup Iteration   2: 5525,537 ms/op
# Warmup Iteration   3: 5501,272 ms/op
# Warmup Iteration   4: 5502,292 ms/op
# Warmup Iteration   5: 5512,276 ms/op
# Warmup Iteration   6: 5467,170 ms/op
# Warmup Iteration   7: 5500,998 ms/op
# Warmup Iteration   8: 5473,277 ms/op
# Warmup Iteration   9: 5520,365 ms/op
# Warmup Iteration  10: 5515,742 ms/op
Iteration   1: 5476,896 ms/op
Iteration   2: 5481,619 ms/op
Iteration   3: 5497,481 ms/op
Iteration   4: 5512,177 ms/op
Iteration   5: 5478,057 ms/op
Iteration   6: 5516,029 ms/op
Iteration   7: 5478,614 ms/op
Iteration   8: 5482,319 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5490,399 ±(99.9%) 30,636 ms/op

  Histogram, ms/op:
    [5470,000, 5475,000) = 0
    [5475,000, 5480,000) = 3
    [5480,000, 5485,000) = 2
    [5485,000, 5490,000) = 0
    [5490,000, 5495,000) = 0
    [5495,000, 5500,000) = 1
    [5500,000, 5505,000) = 0
    [5505,000, 5510,000) = 0
    [5510,000, 5515,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   5476,896 ms/op
     p(50,0000) =   5481,969 ms/op
     p(90,0000) =   5516,029 ms/op
     p(95,0000) =   5516,029 ms/op
     p(99,0000) =   5516,029 ms/op
     p(99,9000) =   5516,029 ms/op
     p(99,9900) =   5516,029 ms/op
     p(99,9990) =   5516,029 ms/op
     p(99,9999) =   5516,029 ms/op
    p(100,0000) =   5516,029 ms/op


# Run complete. Total time: 00:01:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest      1000000           get    ss    8  5490,399 ± 30,636  ms/op
tests.maptests.primitive.TroveJbMapTest (1000000) = 5490.398974375001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5199,984 ms/op
# Warmup Iteration   2: 5247,106 ms/op
# Warmup Iteration   3: 5212,344 ms/op
# Warmup Iteration   4: 5212,359 ms/op
# Warmup Iteration   5: 5195,336 ms/op
# Warmup Iteration   6: 5176,106 ms/op
# Warmup Iteration   7: 5168,950 ms/op
# Warmup Iteration   8: 5233,267 ms/op
# Warmup Iteration   9: 5183,699 ms/op
# Warmup Iteration  10: 5180,174 ms/op
Iteration   1: 5182,360 ms/op
Iteration   2: 5208,202 ms/op
Iteration   3: 5187,171 ms/op
Iteration   4: 5237,776 ms/op
Iteration   5: 5223,370 ms/op
Iteration   6: 5199,346 ms/op
Iteration   7: 5173,563 ms/op
Iteration   8: 5163,459 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5196,906 ±(99.9%) 48,338 ms/op

  Histogram, ms/op:
    [5160,000, 5165,000) = 1
    [5165,000, 5170,000) = 0
    [5170,000, 5175,000) = 1
    [5175,000, 5180,000) = 0
    [5180,000, 5185,000) = 1
    [5185,000, 5190,000) = 1
    [5190,000, 5195,000) = 0
    [5195,000, 5200,000) = 1
    [5200,000, 5205,000) = 0
    [5205,000, 5210,000) = 1
    [5210,000, 5215,000) = 0
    [5215,000, 5220,000) = 0
    [5220,000, 5225,000) = 1
    [5225,000, 5230,000) = 0
    [5230,000, 5235,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5163,459 ms/op
     p(50,0000) =   5193,258 ms/op
     p(90,0000) =   5237,776 ms/op
     p(95,0000) =   5237,776 ms/op
     p(99,0000) =   5237,776 ms/op
     p(99,9000) =   5237,776 ms/op
     p(99,9900) =   5237,776 ms/op
     p(99,9990) =   5237,776 ms/op
     p(99,9999) =   5237,776 ms/op
    p(100,0000) =   5237,776 ms/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest      1000000           get    ss    8  5196,906 ± 48,338  ms/op
tests.maptests.primitive.TroveMapTest (1000000) = 5196.905858624999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5849,907 ms/op
# Warmup Iteration   2: 5806,350 ms/op
# Warmup Iteration   3: 5808,409 ms/op
# Warmup Iteration   4: 5798,905 ms/op
# Warmup Iteration   5: 5802,619 ms/op
# Warmup Iteration   6: 5865,847 ms/op
# Warmup Iteration   7: 5808,725 ms/op
# Warmup Iteration   8: 5916,240 ms/op
# Warmup Iteration   9: 5869,179 ms/op
# Warmup Iteration  10: 5853,451 ms/op
Iteration   1: 5872,937 ms/op
Iteration   2: 5880,574 ms/op
Iteration   3: 5830,967 ms/op
Iteration   4: 5969,323 ms/op
Iteration   5: 5845,896 ms/op
Iteration   6: 5886,509 ms/op
Iteration   7: 5868,453 ms/op
Iteration   8: 5827,062 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5872,715 ±(99.9%) 85,962 ms/op

  Histogram, ms/op:
    [5800,000, 5812,500) = 0
    [5812,500, 5825,000) = 0
    [5825,000, 5837,500) = 2
    [5837,500, 5850,000) = 1
    [5850,000, 5862,500) = 0
    [5862,500, 5875,000) = 2
    [5875,000, 5887,500) = 2
    [5887,500, 5900,000) = 0
    [5900,000, 5912,500) = 0
    [5912,500, 5925,000) = 0
    [5925,000, 5937,500) = 0
    [5937,500, 5950,000) = 0
    [5950,000, 5962,500) = 0
    [5962,500, 5975,000) = 1
    [5975,000, 5987,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5827,062 ms/op
     p(50,0000) =   5870,695 ms/op
     p(90,0000) =   5969,323 ms/op
     p(95,0000) =   5969,323 ms/op
     p(99,0000) =   5969,323 ms/op
     p(99,9000) =   5969,323 ms/op
     p(99,9900) =   5969,323 ms/op
     p(99,9990) =   5969,323 ms/op
     p(99,9999) =   5969,323 ms/op
    p(100,0000) =   5969,323 ms/op


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest      1000000           get    ss    8  5872,715 ± 85,962  ms/op
tests.maptests.object.FastUtilObjMapTest (1000000) = 5872.7151837500005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7809,669 ms/op
# Warmup Iteration   2: 7838,989 ms/op
# Warmup Iteration   3: 7805,532 ms/op
# Warmup Iteration   4: 7804,174 ms/op
# Warmup Iteration   5: 7883,852 ms/op
# Warmup Iteration   6: 7902,240 ms/op
# Warmup Iteration   7: 7907,867 ms/op
# Warmup Iteration   8: 7863,633 ms/op
# Warmup Iteration   9: 7858,978 ms/op
# Warmup Iteration  10: 7832,762 ms/op
Iteration   1: 7857,228 ms/op
Iteration   2: 7935,650 ms/op
Iteration   3: 7887,909 ms/op
Iteration   4: 7833,839 ms/op
Iteration   5: 7897,760 ms/op
Iteration   6: 7896,985 ms/op
Iteration   7: 7883,191 ms/op
Iteration   8: 7894,524 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7885,886 ±(99.9%) 57,617 ms/op

  Histogram, ms/op:
    [7800,000, 7812,500) = 0
    [7812,500, 7825,000) = 0
    [7825,000, 7837,500) = 1
    [7837,500, 7850,000) = 0
    [7850,000, 7862,500) = 1
    [7862,500, 7875,000) = 0
    [7875,000, 7887,500) = 1
    [7887,500, 7900,000) = 4
    [7900,000, 7912,500) = 0
    [7912,500, 7925,000) = 0
    [7925,000, 7937,500) = 1
    [7937,500, 7950,000) = 0
    [7950,000, 7962,500) = 0
    [7962,500, 7975,000) = 0
    [7975,000, 7987,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   7833,839 ms/op
     p(50,0000) =   7891,216 ms/op
     p(90,0000) =   7935,650 ms/op
     p(95,0000) =   7935,650 ms/op
     p(99,0000) =   7935,650 ms/op
     p(99,9000) =   7935,650 ms/op
     p(99,9900) =   7935,650 ms/op
     p(99,9990) =   7935,650 ms/op
     p(99,9999) =   7935,650 ms/op
    p(100,0000) =   7935,650 ms/op


# Run complete. Total time: 00:02:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest      1000000           get    ss    8  7885,886 ± 57,617  ms/op
tests.maptests.object.KolobokeMutableObjTest (1000000) = 7885.8856722499995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7925,513 ms/op
# Warmup Iteration   2: 7879,138 ms/op
# Warmup Iteration   3: 7864,157 ms/op
# Warmup Iteration   4: 7815,142 ms/op
# Warmup Iteration   5: 7986,389 ms/op
# Warmup Iteration   6: 7934,309 ms/op
# Warmup Iteration   7: 7904,159 ms/op
# Warmup Iteration   8: 7867,390 ms/op
# Warmup Iteration   9: 7899,122 ms/op
# Warmup Iteration  10: 8057,393 ms/op
Iteration   1: 7853,796 ms/op
Iteration   2: 7843,683 ms/op
Iteration   3: 7910,188 ms/op
Iteration   4: 7998,657 ms/op
Iteration   5: 7784,216 ms/op
Iteration   6: 7865,845 ms/op
Iteration   7: 7865,977 ms/op
Iteration   8: 7876,574 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7874,867 ±(99.9%) 117,349 ms/op

  Histogram, ms/op:
    [7700,000, 7725,000) = 0
    [7725,000, 7750,000) = 0
    [7750,000, 7775,000) = 0
    [7775,000, 7800,000) = 1
    [7800,000, 7825,000) = 0
    [7825,000, 7850,000) = 1
    [7850,000, 7875,000) = 3
    [7875,000, 7900,000) = 1
    [7900,000, 7925,000) = 1
    [7925,000, 7950,000) = 0
    [7950,000, 7975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   7784,216 ms/op
     p(50,0000) =   7865,911 ms/op
     p(90,0000) =   7998,657 ms/op
     p(95,0000) =   7998,657 ms/op
     p(99,0000) =   7998,657 ms/op
     p(99,9000) =   7998,657 ms/op
     p(99,9900) =   7998,657 ms/op
     p(99,9990) =   7998,657 ms/op
     p(99,9999) =   7998,657 ms/op
    p(100,0000) =   7998,657 ms/op


# Run complete. Total time: 00:02:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest      1000000           get    ss    8  7874,867 ± 117,349  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (1000000) = 7874.867260875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6337,827 ms/op
# Warmup Iteration   2: 6242,375 ms/op
# Warmup Iteration   3: 6276,988 ms/op
# Warmup Iteration   4: 6304,440 ms/op
# Warmup Iteration   5: 6296,927 ms/op
# Warmup Iteration   6: 6263,993 ms/op
# Warmup Iteration   7: 6280,178 ms/op
# Warmup Iteration   8: 6277,633 ms/op
# Warmup Iteration   9: 6313,522 ms/op
# Warmup Iteration  10: 6275,228 ms/op
Iteration   1: 6260,258 ms/op
Iteration   2: 6374,904 ms/op
Iteration   3: 6242,450 ms/op
Iteration   4: 6261,565 ms/op
Iteration   5: 6250,075 ms/op
Iteration   6: 6299,960 ms/op
Iteration   7: 6275,903 ms/op
Iteration   8: 6278,873 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6280,498 ±(99.9%) 80,654 ms/op

  Histogram, ms/op:
    [6200,000, 6212,500) = 0
    [6212,500, 6225,000) = 0
    [6225,000, 6237,500) = 0
    [6237,500, 6250,000) = 1
    [6250,000, 6262,500) = 3
    [6262,500, 6275,000) = 0
    [6275,000, 6287,500) = 2
    [6287,500, 6300,000) = 1
    [6300,000, 6312,500) = 0
    [6312,500, 6325,000) = 0
    [6325,000, 6337,500) = 0
    [6337,500, 6350,000) = 0
    [6350,000, 6362,500) = 0
    [6362,500, 6375,000) = 1
    [6375,000, 6387,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   6242,450 ms/op
     p(50,0000) =   6268,734 ms/op
     p(90,0000) =   6374,904 ms/op
     p(95,0000) =   6374,904 ms/op
     p(99,0000) =   6374,904 ms/op
     p(99,9000) =   6374,904 ms/op
     p(99,9900) =   6374,904 ms/op
     p(99,9990) =   6374,904 ms/op
     p(99,9999) =   6374,904 ms/op
    p(100,0000) =   6374,904 ms/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest      1000000           get    ss    8  6280,498 ± 80,654  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (1000000) = 6280.498437875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6702,047 ms/op
# Warmup Iteration   2: 6799,466 ms/op
# Warmup Iteration   3: 6783,106 ms/op
# Warmup Iteration   4: 6690,966 ms/op
# Warmup Iteration   5: 6685,328 ms/op
# Warmup Iteration   6: 6734,405 ms/op
# Warmup Iteration   7: 6794,118 ms/op
# Warmup Iteration   8: 6725,948 ms/op
# Warmup Iteration   9: 6772,961 ms/op
# Warmup Iteration  10: 6721,346 ms/op
Iteration   1: 6762,306 ms/op
Iteration   2: 6844,540 ms/op
Iteration   3: 6732,997 ms/op
Iteration   4: 6704,729 ms/op
Iteration   5: 6710,259 ms/op
Iteration   6: 6823,867 ms/op
Iteration   7: 6838,407 ms/op
Iteration   8: 6671,867 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6761,121 ±(99.9%) 128,044 ms/op

  Histogram, ms/op:
    [6600,000, 6625,000) = 0
    [6625,000, 6650,000) = 0
    [6650,000, 6675,000) = 1
    [6675,000, 6700,000) = 0
    [6700,000, 6725,000) = 2
    [6725,000, 6750,000) = 1
    [6750,000, 6775,000) = 1
    [6775,000, 6800,000) = 0
    [6800,000, 6825,000) = 1
    [6825,000, 6850,000) = 2
    [6850,000, 6875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6671,867 ms/op
     p(50,0000) =   6747,651 ms/op
     p(90,0000) =   6844,540 ms/op
     p(95,0000) =   6844,540 ms/op
     p(99,0000) =   6844,540 ms/op
     p(99,9000) =   6844,540 ms/op
     p(99,9900) =   6844,540 ms/op
     p(99,9990) =   6844,540 ms/op
     p(99,9999) =   6844,540 ms/op
    p(100,0000) =   6844,540 ms/op


# Run complete. Total time: 00:02:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest      1000000           get    ss    8  6761,121 ± 128,044  ms/op
tests.maptests.object.HppcObjMapTest (1000000) = 6761.12139875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6839,208 ms/op
# Warmup Iteration   2: 6880,154 ms/op
# Warmup Iteration   3: 6866,420 ms/op
# Warmup Iteration   4: 6838,987 ms/op
# Warmup Iteration   5: 6829,356 ms/op
# Warmup Iteration   6: 6833,071 ms/op
# Warmup Iteration   7: 6837,291 ms/op
# Warmup Iteration   8: 6824,225 ms/op
# Warmup Iteration   9: 6842,958 ms/op
# Warmup Iteration  10: 6893,231 ms/op
Iteration   1: 6861,086 ms/op
Iteration   2: 6894,556 ms/op
Iteration   3: 6840,094 ms/op
Iteration   4: 6857,992 ms/op
Iteration   5: 6847,640 ms/op
Iteration   6: 6852,696 ms/op
Iteration   7: 6855,146 ms/op
Iteration   8: 6849,777 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6857,373 ±(99.9%) 31,289 ms/op

  Histogram, ms/op:
    [6840,000, 6845,000) = 1
    [6845,000, 6850,000) = 2
    [6850,000, 6855,000) = 1
    [6855,000, 6860,000) = 2
    [6860,000, 6865,000) = 1
    [6865,000, 6870,000) = 0
    [6870,000, 6875,000) = 0
    [6875,000, 6880,000) = 0
    [6880,000, 6885,000) = 0
    [6885,000, 6890,000) = 0
    [6890,000, 6895,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   6840,094 ms/op
     p(50,0000) =   6853,921 ms/op
     p(90,0000) =   6894,556 ms/op
     p(95,0000) =   6894,556 ms/op
     p(99,0000) =   6894,556 ms/op
     p(99,9000) =   6894,556 ms/op
     p(99,9900) =   6894,556 ms/op
     p(99,9990) =   6894,556 ms/op
     p(99,9999) =   6894,556 ms/op
    p(100,0000) =   6894,556 ms/op


# Run complete. Total time: 00:02:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest      1000000           get    ss    8  6857,373 ± 31,289  ms/op
tests.maptests.object.GsObjMapTest (1000000) = 6857.373406624999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5172,177 ms/op
# Warmup Iteration   2: 5084,564 ms/op
# Warmup Iteration   3: 5119,209 ms/op
# Warmup Iteration   4: 5087,403 ms/op
# Warmup Iteration   5: 5119,964 ms/op
# Warmup Iteration   6: 5192,648 ms/op
# Warmup Iteration   7: 5122,310 ms/op
# Warmup Iteration   8: 5090,382 ms/op
# Warmup Iteration   9: 5116,400 ms/op
# Warmup Iteration  10: 5120,697 ms/op
Iteration   1: 5130,541 ms/op
Iteration   2: 5120,658 ms/op
Iteration   3: 5110,845 ms/op
Iteration   4: 5100,630 ms/op
Iteration   5: 5096,677 ms/op
Iteration   6: 5102,223 ms/op
Iteration   7: 5139,729 ms/op
Iteration   8: 5183,767 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5123,134 ±(99.9%) 55,071 ms/op

  Histogram, ms/op:
    [5090,000, 5100,000) = 1
    [5100,000, 5110,000) = 2
    [5110,000, 5120,000) = 1
    [5120,000, 5130,000) = 1
    [5130,000, 5140,000) = 2
    [5140,000, 5150,000) = 0
    [5150,000, 5160,000) = 0
    [5160,000, 5170,000) = 0
    [5170,000, 5180,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5096,677 ms/op
     p(50,0000) =   5115,752 ms/op
     p(90,0000) =   5183,767 ms/op
     p(95,0000) =   5183,767 ms/op
     p(99,0000) =   5183,767 ms/op
     p(99,9000) =   5183,767 ms/op
     p(99,9900) =   5183,767 ms/op
     p(99,9990) =   5183,767 ms/op
     p(99,9999) =   5183,767 ms/op
    p(100,0000) =   5183,767 ms/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest      1000000           get    ss    8  5123,134 ± 55,071  ms/op
tests.maptests.object.JdkMapTest (1000000) = 5123.133650999999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5153,715 ms/op
# Warmup Iteration   2: 5169,386 ms/op
# Warmup Iteration   3: 5126,995 ms/op
# Warmup Iteration   4: 5105,797 ms/op
# Warmup Iteration   5: 5128,048 ms/op
# Warmup Iteration   6: 5145,200 ms/op
# Warmup Iteration   7: 5093,654 ms/op
# Warmup Iteration   8: 5225,975 ms/op
# Warmup Iteration   9: 5069,037 ms/op
# Warmup Iteration  10: 5097,746 ms/op
Iteration   1: 5145,307 ms/op
Iteration   2: 5129,490 ms/op
Iteration   3: 5141,800 ms/op
Iteration   4: 5097,067 ms/op
Iteration   5: 5079,651 ms/op
Iteration   6: 5099,724 ms/op
Iteration   7: 5082,622 ms/op
Iteration   8: 5051,872 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5103,442 ±(99.9%) 63,066 ms/op

  Histogram, ms/op:
    [5050,000, 5060,000) = 1
    [5060,000, 5070,000) = 0
    [5070,000, 5080,000) = 1
    [5080,000, 5090,000) = 1
    [5090,000, 5100,000) = 2
    [5100,000, 5110,000) = 0
    [5110,000, 5120,000) = 0
    [5120,000, 5130,000) = 1
    [5130,000, 5140,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5051,872 ms/op
     p(50,0000) =   5098,395 ms/op
     p(90,0000) =   5145,307 ms/op
     p(95,0000) =   5145,307 ms/op
     p(99,0000) =   5145,307 ms/op
     p(99,9000) =   5145,307 ms/op
     p(99,9900) =   5145,307 ms/op
     p(99,9990) =   5145,307 ms/op
     p(99,9999) =   5145,307 ms/op
    p(100,0000) =   5145,307 ms/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity      1000000           get    ss    8  5103,442 ± 63,066  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (1000000) = 5103.441612875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8887,933 ms/op
# Warmup Iteration   2: 9000,168 ms/op
# Warmup Iteration   3: 8864,733 ms/op
# Warmup Iteration   4: 8946,478 ms/op
# Warmup Iteration   5: 8904,428 ms/op
# Warmup Iteration   6: 8877,374 ms/op
# Warmup Iteration   7: 8926,365 ms/op
# Warmup Iteration   8: 8898,228 ms/op
# Warmup Iteration   9: 8879,722 ms/op
# Warmup Iteration  10: 8944,448 ms/op
Iteration   1: 8900,160 ms/op
Iteration   2: 8938,435 ms/op
Iteration   3: 8957,234 ms/op
Iteration   4: 8885,741 ms/op
Iteration   5: 8906,949 ms/op
Iteration   6: 8901,293 ms/op
Iteration   7: 8971,772 ms/op
Iteration   8: 8950,329 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8926,489 ±(99.9%) 60,794 ms/op

  Histogram, ms/op:
    [8880,000, 8890,000) = 1
    [8890,000, 8900,000) = 0
    [8900,000, 8910,000) = 3
    [8910,000, 8920,000) = 0
    [8920,000, 8930,000) = 0
    [8930,000, 8940,000) = 1
    [8940,000, 8950,000) = 0
    [8950,000, 8960,000) = 2
    [8960,000, 8970,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8885,741 ms/op
     p(50,0000) =   8922,692 ms/op
     p(90,0000) =   8971,772 ms/op
     p(95,0000) =   8971,772 ms/op
     p(99,0000) =   8971,772 ms/op
     p(99,9000) =   8971,772 ms/op
     p(99,9900) =   8971,772 ms/op
     p(99,9990) =   8971,772 ms/op
     p(99,9999) =   8971,772 ms/op
    p(100,0000) =   8971,772 ms/op


# Run complete. Total time: 00:02:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest      1000000           get    ss    8  8926,489 ± 60,794  ms/op
tests.maptests.object.TroveJbObjMapTest (1000000) = 8926.489124125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9099,448 ms/op
# Warmup Iteration   2: 9096,803 ms/op
# Warmup Iteration   3: 9117,684 ms/op
# Warmup Iteration   4: 9194,552 ms/op
# Warmup Iteration   5: 9130,282 ms/op
# Warmup Iteration   6: 9148,861 ms/op
# Warmup Iteration   7: 9160,166 ms/op
# Warmup Iteration   8: 9178,891 ms/op
# Warmup Iteration   9: 9123,147 ms/op
# Warmup Iteration  10: 9147,174 ms/op
Iteration   1: 9105,051 ms/op
Iteration   2: 9181,769 ms/op
Iteration   3: 9155,891 ms/op
Iteration   4: 9091,525 ms/op
Iteration   5: 9086,071 ms/op
Iteration   6: 9125,105 ms/op
Iteration   7: 9160,196 ms/op
Iteration   8: 9098,829 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9125,555 ±(99.9%) 69,059 ms/op

  Histogram, ms/op:
    [9080,000, 9090,000) = 1
    [9090,000, 9100,000) = 2
    [9100,000, 9110,000) = 1
    [9110,000, 9120,000) = 0
    [9120,000, 9130,000) = 1
    [9130,000, 9140,000) = 0
    [9140,000, 9150,000) = 0
    [9150,000, 9160,000) = 1
    [9160,000, 9170,000) = 1
    [9170,000, 9180,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9086,071 ms/op
     p(50,0000) =   9115,078 ms/op
     p(90,0000) =   9181,769 ms/op
     p(95,0000) =   9181,769 ms/op
     p(99,0000) =   9181,769 ms/op
     p(99,9000) =   9181,769 ms/op
     p(99,9900) =   9181,769 ms/op
     p(99,9990) =   9181,769 ms/op
     p(99,9999) =   9181,769 ms/op
    p(100,0000) =   9181,769 ms/op


# Run complete. Total time: 00:02:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest      1000000           get    ss    8  9125,555 ± 69,059  ms/op
tests.maptests.object.TroveObjMapTest (1000000) = 9125.554716125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6252,730 ms/op
# Warmup Iteration   2: 6279,652 ms/op
# Warmup Iteration   3: 6202,278 ms/op
# Warmup Iteration   4: 6214,691 ms/op
# Warmup Iteration   5: 6249,219 ms/op
# Warmup Iteration   6: 6235,421 ms/op
# Warmup Iteration   7: 6254,689 ms/op
# Warmup Iteration   8: 6325,678 ms/op
# Warmup Iteration   9: 6273,600 ms/op
# Warmup Iteration  10: 6215,715 ms/op
Iteration   1: 6223,174 ms/op
Iteration   2: 6308,457 ms/op
Iteration   3: 6228,567 ms/op
Iteration   4: 6264,101 ms/op
Iteration   5: 6208,784 ms/op
Iteration   6: 6225,575 ms/op
Iteration   7: 6375,444 ms/op
Iteration   8: 6243,270 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6259,671 ±(99.9%) 107,488 ms/op

  Histogram, ms/op:
    [6200,000, 6212,500) = 1
    [6212,500, 6225,000) = 1
    [6225,000, 6237,500) = 2
    [6237,500, 6250,000) = 1
    [6250,000, 6262,500) = 0
    [6262,500, 6275,000) = 1
    [6275,000, 6287,500) = 0
    [6287,500, 6300,000) = 0
    [6300,000, 6312,500) = 1
    [6312,500, 6325,000) = 0
    [6325,000, 6337,500) = 0
    [6337,500, 6350,000) = 0
    [6350,000, 6362,500) = 0
    [6362,500, 6375,000) = 0
    [6375,000, 6387,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   6208,784 ms/op
     p(50,0000) =   6235,918 ms/op
     p(90,0000) =   6375,444 ms/op
     p(95,0000) =   6375,444 ms/op
     p(99,0000) =   6375,444 ms/op
     p(99,9000) =   6375,444 ms/op
     p(99,9900) =   6375,444 ms/op
     p(99,9990) =   6375,444 ms/op
     p(99,9999) =   6375,444 ms/op
    p(100,0000) =   6375,444 ms/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest      1000000           get    ss    8  6259,671 ± 107,488  ms/op
tests.maptests.article_examples.ObjObjMapTest (1000000) = 6259.6714495
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3001,678 ms/op
# Warmup Iteration   2: 3021,214 ms/op
# Warmup Iteration   3: 3086,822 ms/op
# Warmup Iteration   4: 3048,079 ms/op
# Warmup Iteration   5: 3034,303 ms/op
# Warmup Iteration   6: 3023,924 ms/op
# Warmup Iteration   7: 3045,478 ms/op
# Warmup Iteration   8: 3000,177 ms/op
# Warmup Iteration   9: 2999,892 ms/op
# Warmup Iteration  10: 3057,514 ms/op
Iteration   1: 3013,078 ms/op
Iteration   2: 3018,389 ms/op
Iteration   3: 3096,694 ms/op
Iteration   4: 2988,084 ms/op
Iteration   5: 3024,927 ms/op
Iteration   6: 3029,816 ms/op
Iteration   7: 3003,680 ms/op
Iteration   8: 2995,698 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3021,296 ±(99.9%) 64,293 ms/op

  Histogram, ms/op:
    [2900,000, 2912,500) = 0
    [2912,500, 2925,000) = 0
    [2925,000, 2937,500) = 0
    [2937,500, 2950,000) = 0
    [2950,000, 2962,500) = 0
    [2962,500, 2975,000) = 0
    [2975,000, 2987,500) = 0
    [2987,500, 3000,000) = 2
    [3000,000, 3012,500) = 1
    [3012,500, 3025,000) = 3
    [3025,000, 3037,500) = 1
    [3037,500, 3050,000) = 0
    [3050,000, 3062,500) = 0
    [3062,500, 3075,000) = 0
    [3075,000, 3087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2988,084 ms/op
     p(50,0000) =   3015,733 ms/op
     p(90,0000) =   3096,694 ms/op
     p(95,0000) =   3096,694 ms/op
     p(99,0000) =   3096,694 ms/op
     p(99,9000) =   3096,694 ms/op
     p(99,9900) =   3096,694 ms/op
     p(99,9990) =   3096,694 ms/op
     p(99,9999) =   3096,694 ms/op
    p(100,0000) =   3096,694 ms/op


# Run complete. Total time: 00:00:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest      1000000           get    ss    8  3021,296 ± 64,293  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (1000000) = 3021.2957732500004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3542,010 ms/op
# Warmup Iteration   2: 3527,226 ms/op
# Warmup Iteration   3: 3576,276 ms/op
# Warmup Iteration   4: 3535,335 ms/op
# Warmup Iteration   5: 3511,157 ms/op
# Warmup Iteration   6: 3527,763 ms/op
# Warmup Iteration   7: 3552,006 ms/op
# Warmup Iteration   8: 3513,567 ms/op
# Warmup Iteration   9: 3540,422 ms/op
# Warmup Iteration  10: 3529,205 ms/op
Iteration   1: 3536,325 ms/op
Iteration   2: 3560,170 ms/op
Iteration   3: 3527,471 ms/op
Iteration   4: 3540,707 ms/op
Iteration   5: 3544,050 ms/op
Iteration   6: 3515,670 ms/op
Iteration   7: 3524,488 ms/op
Iteration   8: 3514,827 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3532,964 ±(99.9%) 29,482 ms/op

  Histogram, ms/op:
    [3510,000, 3515,000) = 1
    [3515,000, 3520,000) = 1
    [3520,000, 3525,000) = 1
    [3525,000, 3530,000) = 1
    [3530,000, 3535,000) = 0
    [3535,000, 3540,000) = 1
    [3540,000, 3545,000) = 2
    [3545,000, 3550,000) = 0
    [3550,000, 3555,000) = 0
    [3555,000, 3560,000) = 0
    [3560,000, 3565,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3514,827 ms/op
     p(50,0000) =   3531,898 ms/op
     p(90,0000) =   3560,170 ms/op
     p(95,0000) =   3560,170 ms/op
     p(99,0000) =   3560,170 ms/op
     p(99,9000) =   3560,170 ms/op
     p(99,9900) =   3560,170 ms/op
     p(99,9990) =   3560,170 ms/op
     p(99,9999) =   3560,170 ms/op
    p(100,0000) =   3560,170 ms/op


# Run complete. Total time: 00:01:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest      1000000           get    ss    8  3532,964 ± 29,482  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (1000000) = 3532.9635835
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3123,445 ms/op
# Warmup Iteration   2: 3064,070 ms/op
# Warmup Iteration   3: 3088,631 ms/op
# Warmup Iteration   4: 3112,497 ms/op
# Warmup Iteration   5: 3091,110 ms/op
# Warmup Iteration   6: 3079,656 ms/op
# Warmup Iteration   7: 3090,788 ms/op
# Warmup Iteration   8: 3071,698 ms/op
# Warmup Iteration   9: 3090,146 ms/op
# Warmup Iteration  10: 3087,260 ms/op
Iteration   1: 3127,023 ms/op
Iteration   2: 3115,760 ms/op
Iteration   3: 3101,101 ms/op
Iteration   4: 3099,149 ms/op
Iteration   5: 3077,503 ms/op
Iteration   6: 3087,583 ms/op
Iteration   7: 3090,280 ms/op
Iteration   8: 3077,951 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3097,044 ±(99.9%) 33,521 ms/op

  Histogram, ms/op:
    [3070,000, 3075,000) = 0
    [3075,000, 3080,000) = 2
    [3080,000, 3085,000) = 0
    [3085,000, 3090,000) = 1
    [3090,000, 3095,000) = 1
    [3095,000, 3100,000) = 1
    [3100,000, 3105,000) = 1
    [3105,000, 3110,000) = 0
    [3110,000, 3115,000) = 0
    [3115,000, 3120,000) = 1
    [3120,000, 3125,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3077,503 ms/op
     p(50,0000) =   3094,714 ms/op
     p(90,0000) =   3127,023 ms/op
     p(95,0000) =   3127,023 ms/op
     p(99,0000) =   3127,023 ms/op
     p(99,9000) =   3127,023 ms/op
     p(99,9900) =   3127,023 ms/op
     p(99,9990) =   3127,023 ms/op
     p(99,9999) =   3127,023 ms/op
    p(100,0000) =   3127,023 ms/op


# Run complete. Total time: 00:00:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest      1000000           get    ss    8  3097,044 ± 33,521  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (1000000) = 3097.04378775
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3347,205 ms/op
# Warmup Iteration   2: 3283,233 ms/op
# Warmup Iteration   3: 3307,926 ms/op
# Warmup Iteration   4: 3300,134 ms/op
# Warmup Iteration   5: 3321,004 ms/op
# Warmup Iteration   6: 3283,579 ms/op
# Warmup Iteration   7: 3290,902 ms/op
# Warmup Iteration   8: 3280,225 ms/op
# Warmup Iteration   9: 3275,457 ms/op
# Warmup Iteration  10: 3344,006 ms/op
Iteration   1: 3290,121 ms/op
Iteration   2: 3304,452 ms/op
Iteration   3: 3298,830 ms/op
Iteration   4: 3282,754 ms/op
Iteration   5: 3283,361 ms/op
Iteration   6: 3337,678 ms/op
Iteration   7: 3282,560 ms/op
Iteration   8: 3277,658 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3294,677 ±(99.9%) 37,476 ms/op

  Histogram, ms/op:
    [3270,000, 3275,000) = 0
    [3275,000, 3280,000) = 1
    [3280,000, 3285,000) = 3
    [3285,000, 3290,000) = 0
    [3290,000, 3295,000) = 1
    [3295,000, 3300,000) = 1
    [3300,000, 3305,000) = 1
    [3305,000, 3310,000) = 0
    [3310,000, 3315,000) = 0
    [3315,000, 3320,000) = 0
    [3320,000, 3325,000) = 0
    [3325,000, 3330,000) = 0
    [3330,000, 3335,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3277,658 ms/op
     p(50,0000) =   3286,741 ms/op
     p(90,0000) =   3337,678 ms/op
     p(95,0000) =   3337,678 ms/op
     p(99,0000) =   3337,678 ms/op
     p(99,9000) =   3337,678 ms/op
     p(99,9900) =   3337,678 ms/op
     p(99,9990) =   3337,678 ms/op
     p(99,9999) =   3337,678 ms/op
    p(100,0000) =   3337,678 ms/op


# Run complete. Total time: 00:01:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest      1000000           get    ss    8  3294,677 ± 37,476  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (1000000) = 3294.67674
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6182,912 ms/op
# Warmup Iteration   2: 6142,732 ms/op
# Warmup Iteration   3: 6181,268 ms/op
# Warmup Iteration   4: 6210,033 ms/op
# Warmup Iteration   5: 6213,802 ms/op
# Warmup Iteration   6: 6138,580 ms/op
# Warmup Iteration   7: 6137,329 ms/op
# Warmup Iteration   8: 6148,578 ms/op
# Warmup Iteration   9: 6148,122 ms/op
# Warmup Iteration  10: 6192,858 ms/op
Iteration   1: 6164,680 ms/op
Iteration   2: 6170,734 ms/op
Iteration   3: 6148,818 ms/op
Iteration   4: 6157,144 ms/op
Iteration   5: 6186,994 ms/op
Iteration   6: 6162,566 ms/op
Iteration   7: 6156,224 ms/op
Iteration   8: 6173,222 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6165,048 ±(99.9%) 22,747 ms/op

  Histogram, ms/op:
    [6140,000, 6145,000) = 0
    [6145,000, 6150,000) = 1
    [6150,000, 6155,000) = 0
    [6155,000, 6160,000) = 2
    [6160,000, 6165,000) = 2
    [6165,000, 6170,000) = 0
    [6170,000, 6175,000) = 2
    [6175,000, 6180,000) = 0
    [6180,000, 6185,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6148,818 ms/op
     p(50,0000) =   6163,623 ms/op
     p(90,0000) =   6186,994 ms/op
     p(95,0000) =   6186,994 ms/op
     p(99,0000) =   6186,994 ms/op
     p(99,9000) =   6186,994 ms/op
     p(99,9900) =   6186,994 ms/op
     p(99,9990) =   6186,994 ms/op
     p(99,9999) =   6186,994 ms/op
    p(100,0000) =   6186,994 ms/op


# Run complete. Total time: 00:01:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest      1000000           get    ss    8  6165,048 ± 22,747  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (1000000) = 6165.0477386249995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5173,972 ms/op
# Warmup Iteration   2: 5127,539 ms/op
# Warmup Iteration   3: 5102,707 ms/op
# Warmup Iteration   4: 5106,586 ms/op
# Warmup Iteration   5: 5093,638 ms/op
# Warmup Iteration   6: 5151,358 ms/op
# Warmup Iteration   7: 5093,593 ms/op
# Warmup Iteration   8: 5125,523 ms/op
# Warmup Iteration   9: 5098,135 ms/op
# Warmup Iteration  10: 5103,468 ms/op
Iteration   1: 5126,689 ms/op
Iteration   2: 5151,718 ms/op
Iteration   3: 5122,472 ms/op
Iteration   4: 5095,148 ms/op
Iteration   5: 5095,215 ms/op
Iteration   6: 5157,209 ms/op
Iteration   7: 5121,221 ms/op
Iteration   8: 5188,810 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5132,310 ±(99.9%) 61,308 ms/op

  Histogram, ms/op:
    [5090,000, 5100,000) = 2
    [5100,000, 5110,000) = 0
    [5110,000, 5120,000) = 0
    [5120,000, 5130,000) = 3
    [5130,000, 5140,000) = 0
    [5140,000, 5150,000) = 0
    [5150,000, 5160,000) = 2
    [5160,000, 5170,000) = 0
    [5170,000, 5180,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5095,148 ms/op
     p(50,0000) =   5124,580 ms/op
     p(90,0000) =   5188,810 ms/op
     p(95,0000) =   5188,810 ms/op
     p(99,0000) =   5188,810 ms/op
     p(99,9000) =   5188,810 ms/op
     p(99,9900) =   5188,810 ms/op
     p(99,9990) =   5188,810 ms/op
     p(99,9999) =   5188,810 ms/op
    p(100,0000) =   5188,810 ms/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest      1000000           get    ss    8  5132,310 ± 61,308  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (1000000) = 5132.310120749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5971,096 ms/op
# Warmup Iteration   2: 5984,395 ms/op
# Warmup Iteration   3: 5970,411 ms/op
# Warmup Iteration   4: 5988,983 ms/op
# Warmup Iteration   5: 6034,620 ms/op
# Warmup Iteration   6: 5990,692 ms/op
# Warmup Iteration   7: 5987,552 ms/op
# Warmup Iteration   8: 5976,033 ms/op
# Warmup Iteration   9: 6063,962 ms/op
# Warmup Iteration  10: 5980,380 ms/op
Iteration   1: 5941,391 ms/op
Iteration   2: 6031,370 ms/op
Iteration   3: 5984,577 ms/op
Iteration   4: 6032,116 ms/op
Iteration   5: 5979,247 ms/op
Iteration   6: 5955,383 ms/op
Iteration   7: 5974,736 ms/op
Iteration   8: 5972,156 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5983,872 ±(99.9%) 62,344 ms/op

  Histogram, ms/op:
    [5940,000, 5950,000) = 1
    [5950,000, 5960,000) = 1
    [5960,000, 5970,000) = 0
    [5970,000, 5980,000) = 3
    [5980,000, 5990,000) = 1
    [5990,000, 6000,000) = 0
    [6000,000, 6010,000) = 0
    [6010,000, 6020,000) = 0
    [6020,000, 6030,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5941,391 ms/op
     p(50,0000) =   5976,992 ms/op
     p(90,0000) =   6032,116 ms/op
     p(95,0000) =   6032,116 ms/op
     p(99,0000) =   6032,116 ms/op
     p(99,9000) =   6032,116 ms/op
     p(99,9900) =   6032,116 ms/op
     p(99,9990) =   6032,116 ms/op
     p(99,9999) =   6032,116 ms/op
    p(100,0000) =   6032,116 ms/op


# Run complete. Total time: 00:01:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest      1000000           get    ss    8  5983,872 ± 62,344  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (1000000) = 5983.872151124999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8055,793 ms/op
# Warmup Iteration   2: 8006,677 ms/op
# Warmup Iteration   3: 7896,146 ms/op
# Warmup Iteration   4: 7953,526 ms/op
# Warmup Iteration   5: 7898,306 ms/op
# Warmup Iteration   6: 7897,717 ms/op
# Warmup Iteration   7: 7945,919 ms/op
# Warmup Iteration   8: 7931,163 ms/op
# Warmup Iteration   9: 7991,657 ms/op
# Warmup Iteration  10: 7879,415 ms/op
Iteration   1: 7979,723 ms/op
Iteration   2: 7985,183 ms/op
Iteration   3: 7993,549 ms/op
Iteration   4: 7965,857 ms/op
Iteration   5: 8078,793 ms/op
Iteration   6: 7970,338 ms/op
Iteration   7: 7938,338 ms/op
Iteration   8: 8025,569 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7992,169 ±(99.9%) 82,051 ms/op

  Histogram, ms/op:
    [7900,000, 7912,500) = 0
    [7912,500, 7925,000) = 0
    [7925,000, 7937,500) = 0
    [7937,500, 7950,000) = 1
    [7950,000, 7962,500) = 0
    [7962,500, 7975,000) = 2
    [7975,000, 7987,500) = 2
    [7987,500, 8000,000) = 1
    [8000,000, 8012,500) = 0
    [8012,500, 8025,000) = 0
    [8025,000, 8037,500) = 1
    [8037,500, 8050,000) = 0
    [8050,000, 8062,500) = 0
    [8062,500, 8075,000) = 0
    [8075,000, 8087,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   7938,338 ms/op
     p(50,0000) =   7982,453 ms/op
     p(90,0000) =   8078,793 ms/op
     p(95,0000) =   8078,793 ms/op
     p(99,0000) =   8078,793 ms/op
     p(99,9000) =   8078,793 ms/op
     p(99,9900) =   8078,793 ms/op
     p(99,9990) =   8078,793 ms/op
     p(99,9999) =   8078,793 ms/op
    p(100,0000) =   8078,793 ms/op


# Run complete. Total time: 00:02:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest      1000000           get    ss    8  7992,169 ± 82,051  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (1000000) = 7992.16865925
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7411,557 ms/op
# Warmup Iteration   2: 7286,295 ms/op
# Warmup Iteration   3: 7487,628 ms/op
# Warmup Iteration   4: 7362,858 ms/op
# Warmup Iteration   5: 7352,709 ms/op
# Warmup Iteration   6: 7442,608 ms/op
# Warmup Iteration   7: 7357,143 ms/op
# Warmup Iteration   8: 7402,108 ms/op
# Warmup Iteration   9: 7474,743 ms/op
# Warmup Iteration  10: 7514,432 ms/op
Iteration   1: 7321,177 ms/op
Iteration   2: 7387,464 ms/op
Iteration   3: 7431,676 ms/op
Iteration   4: 7404,597 ms/op
Iteration   5: 7368,588 ms/op
Iteration   6: 7399,214 ms/op
Iteration   7: 7358,618 ms/op
Iteration   8: 7470,193 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7392,691 ±(99.9%) 87,302 ms/op

  Histogram, ms/op:
    [7300,000, 7312,500) = 0
    [7312,500, 7325,000) = 1
    [7325,000, 7337,500) = 0
    [7337,500, 7350,000) = 0
    [7350,000, 7362,500) = 1
    [7362,500, 7375,000) = 1
    [7375,000, 7387,500) = 1
    [7387,500, 7400,000) = 1
    [7400,000, 7412,500) = 1
    [7412,500, 7425,000) = 0
    [7425,000, 7437,500) = 1
    [7437,500, 7450,000) = 0
    [7450,000, 7462,500) = 0
    [7462,500, 7475,000) = 1
    [7475,000, 7487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   7321,177 ms/op
     p(50,0000) =   7393,339 ms/op
     p(90,0000) =   7470,193 ms/op
     p(95,0000) =   7470,193 ms/op
     p(99,0000) =   7470,193 ms/op
     p(99,9000) =   7470,193 ms/op
     p(99,9900) =   7470,193 ms/op
     p(99,9990) =   7470,193 ms/op
     p(99,9999) =   7470,193 ms/op
    p(100,0000) =   7470,193 ms/op


# Run complete. Total time: 00:02:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest      1000000           get    ss    8  7392,691 ± 87,302  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (1000000) = 7392.690832874999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7010,307 ms/op
# Warmup Iteration   2: 6954,014 ms/op
# Warmup Iteration   3: 6850,441 ms/op
# Warmup Iteration   4: 6839,251 ms/op
# Warmup Iteration   5: 6920,199 ms/op
# Warmup Iteration   6: 7058,931 ms/op
# Warmup Iteration   7: 6903,098 ms/op
# Warmup Iteration   8: 6978,228 ms/op
# Warmup Iteration   9: 6799,000 ms/op
# Warmup Iteration  10: 6926,264 ms/op
Iteration   1: 6855,676 ms/op
Iteration   2: 6887,957 ms/op
Iteration   3: 7019,373 ms/op
Iteration   4: 6771,804 ms/op
Iteration   5: 6921,447 ms/op
Iteration   6: 6899,446 ms/op
Iteration   7: 6826,624 ms/op
Iteration   8: 6881,293 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6882,952 ±(99.9%) 138,372 ms/op

  Histogram, ms/op:
    [6700,000, 6725,000) = 0
    [6725,000, 6750,000) = 0
    [6750,000, 6775,000) = 1
    [6775,000, 6800,000) = 0
    [6800,000, 6825,000) = 0
    [6825,000, 6850,000) = 1
    [6850,000, 6875,000) = 1
    [6875,000, 6900,000) = 3
    [6900,000, 6925,000) = 1
    [6925,000, 6950,000) = 0
    [6950,000, 6975,000) = 0
    [6975,000, 7000,000) = 0
    [7000,000, 7025,000) = 1
    [7025,000, 7050,000) = 0
    [7050,000, 7075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6771,804 ms/op
     p(50,0000) =   6884,625 ms/op
     p(90,0000) =   7019,373 ms/op
     p(95,0000) =   7019,373 ms/op
     p(99,0000) =   7019,373 ms/op
     p(99,9000) =   7019,373 ms/op
     p(99,9900) =   7019,373 ms/op
     p(99,9990) =   7019,373 ms/op
     p(99,9999) =   7019,373 ms/op
    p(100,0000) =   7019,373 ms/op


# Run complete. Total time: 00:02:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest      1000000           get    ss    8  6882,952 ± 138,372  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (1000000) = 6882.952332250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9519,033 ms/op
# Warmup Iteration   2: 9415,874 ms/op
# Warmup Iteration   3: 9594,777 ms/op
# Warmup Iteration   4: 9538,596 ms/op
# Warmup Iteration   5: 9506,945 ms/op
# Warmup Iteration   6: 9549,998 ms/op
# Warmup Iteration   7: 9534,261 ms/op
# Warmup Iteration   8: 9595,456 ms/op
# Warmup Iteration   9: 9510,621 ms/op
# Warmup Iteration  10: 9519,117 ms/op
Iteration   1: 9556,560 ms/op
Iteration   2: 9495,857 ms/op
Iteration   3: 9545,985 ms/op
Iteration   4: 9561,844 ms/op
Iteration   5: 9584,280 ms/op
Iteration   6: 9565,881 ms/op
Iteration   7: 9495,405 ms/op
Iteration   8: 9548,512 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9544,291 ±(99.9%) 61,661 ms/op

  Histogram, ms/op:
    [9490,000, 9500,000) = 2
    [9500,000, 9510,000) = 0
    [9510,000, 9520,000) = 0
    [9520,000, 9530,000) = 0
    [9530,000, 9540,000) = 0
    [9540,000, 9550,000) = 2
    [9550,000, 9560,000) = 1
    [9560,000, 9570,000) = 2
    [9570,000, 9580,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9495,405 ms/op
     p(50,0000) =   9552,536 ms/op
     p(90,0000) =   9584,280 ms/op
     p(95,0000) =   9584,280 ms/op
     p(99,0000) =   9584,280 ms/op
     p(99,9000) =   9584,280 ms/op
     p(99,9900) =   9584,280 ms/op
     p(99,9990) =   9584,280 ms/op
     p(99,9999) =   9584,280 ms/op
    p(100,0000) =   9584,280 ms/op


# Run complete. Total time: 00:02:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest      1000000           get    ss    8  9544,291 ± 61,661  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (1000000) = 9544.290531125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9143,269 ms/op
# Warmup Iteration   2: 9146,929 ms/op
# Warmup Iteration   3: 9121,675 ms/op
# Warmup Iteration   4: 9188,746 ms/op
# Warmup Iteration   5: 9170,335 ms/op
# Warmup Iteration   6: 9162,452 ms/op
# Warmup Iteration   7: 9084,041 ms/op
# Warmup Iteration   8: 9106,839 ms/op
# Warmup Iteration   9: 9225,731 ms/op
# Warmup Iteration  10: 9094,346 ms/op
Iteration   1: 9107,004 ms/op
Iteration   2: 9100,291 ms/op
Iteration   3: 9071,814 ms/op
Iteration   4: 9145,680 ms/op
Iteration   5: 9230,199 ms/op
Iteration   6: 9181,189 ms/op
Iteration   7: 9174,744 ms/op
Iteration   8: 9186,877 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9149,725 ±(99.9%) 101,758 ms/op

  Histogram, ms/op:
    [9000,000, 9025,000) = 0
    [9025,000, 9050,000) = 0
    [9050,000, 9075,000) = 1
    [9075,000, 9100,000) = 0
    [9100,000, 9125,000) = 2
    [9125,000, 9150,000) = 1
    [9150,000, 9175,000) = 1
    [9175,000, 9200,000) = 2
    [9200,000, 9225,000) = 0
    [9225,000, 9250,000) = 1
    [9250,000, 9275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9071,814 ms/op
     p(50,0000) =   9160,212 ms/op
     p(90,0000) =   9230,199 ms/op
     p(95,0000) =   9230,199 ms/op
     p(99,0000) =   9230,199 ms/op
     p(99,9000) =   9230,199 ms/op
     p(99,9900) =   9230,199 ms/op
     p(99,9990) =   9230,199 ms/op
     p(99,9999) =   9230,199 ms/op
    p(100,0000) =   9230,199 ms/op


# Run complete. Total time: 00:02:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest      1000000           get    ss    8  9149,725 ± 101,758  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (1000000) = 9149.724737875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3547,284 ms/op
# Warmup Iteration   2: 3718,129 ms/op
# Warmup Iteration   3: 3327,474 ms/op
# Warmup Iteration   4: 3264,498 ms/op
# Warmup Iteration   5: 3338,230 ms/op
# Warmup Iteration   6: 3307,651 ms/op
# Warmup Iteration   7: 3273,644 ms/op
# Warmup Iteration   8: 3235,309 ms/op
# Warmup Iteration   9: 3233,676 ms/op
# Warmup Iteration  10: 3274,713 ms/op
Iteration   1: 3332,670 ms/op
Iteration   2: 3404,476 ms/op
Iteration   3: 3405,255 ms/op
Iteration   4: 3500,771 ms/op
Iteration   5: 3214,153 ms/op
Iteration   6: 3275,495 ms/op
Iteration   7: 3228,991 ms/op
Iteration   8: 3206,836 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3321,081 ±(99.9%) 206,315 ms/op

  Histogram, ms/op:
    [3200,000, 3225,000) = 2
    [3225,000, 3250,000) = 1
    [3250,000, 3275,000) = 0
    [3275,000, 3300,000) = 1
    [3300,000, 3325,000) = 0
    [3325,000, 3350,000) = 1
    [3350,000, 3375,000) = 0
    [3375,000, 3400,000) = 0
    [3400,000, 3425,000) = 2
    [3425,000, 3450,000) = 0
    [3450,000, 3475,000) = 0
    [3475,000, 3500,000) = 0
    [3500,000, 3525,000) = 1
    [3525,000, 3550,000) = 0
    [3550,000, 3575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3206,836 ms/op
     p(50,0000) =   3304,082 ms/op
     p(90,0000) =   3500,771 ms/op
     p(95,0000) =   3500,771 ms/op
     p(99,0000) =   3500,771 ms/op
     p(99,9000) =   3500,771 ms/op
     p(99,9900) =   3500,771 ms/op
     p(99,9990) =   3500,771 ms/op
     p(99,9999) =   3500,771 ms/op
    p(100,0000) =   3500,771 ms/op


# Run complete. Total time: 00:01:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest      1000000           get    ss    8  3321,081 ± 206,315  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (1000000) = 3321.0809706249993
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4432,792 ms/op
# Warmup Iteration   2: 4285,068 ms/op
# Warmup Iteration   3: 4292,944 ms/op
# Warmup Iteration   4: 4269,050 ms/op
# Warmup Iteration   5: 4284,213 ms/op
# Warmup Iteration   6: 4313,900 ms/op
# Warmup Iteration   7: 4334,051 ms/op
# Warmup Iteration   8: 4288,762 ms/op
# Warmup Iteration   9: 4300,332 ms/op
# Warmup Iteration  10: 4299,740 ms/op
Iteration   1: 4250,422 ms/op
Iteration   2: 4292,574 ms/op
Iteration   3: 4375,107 ms/op
Iteration   4: 4288,827 ms/op
Iteration   5: 4280,559 ms/op
Iteration   6: 4296,915 ms/op
Iteration   7: 4320,171 ms/op
Iteration   8: 4259,845 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4295,552 ±(99.9%) 74,148 ms/op

  Histogram, ms/op:
    [4200,000, 4212,500) = 0
    [4212,500, 4225,000) = 0
    [4225,000, 4237,500) = 0
    [4237,500, 4250,000) = 0
    [4250,000, 4262,500) = 2
    [4262,500, 4275,000) = 0
    [4275,000, 4287,500) = 1
    [4287,500, 4300,000) = 3
    [4300,000, 4312,500) = 0
    [4312,500, 4325,000) = 1
    [4325,000, 4337,500) = 0
    [4337,500, 4350,000) = 0
    [4350,000, 4362,500) = 0
    [4362,500, 4375,000) = 0
    [4375,000, 4387,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   4250,422 ms/op
     p(50,0000) =   4290,700 ms/op
     p(90,0000) =   4375,107 ms/op
     p(95,0000) =   4375,107 ms/op
     p(99,0000) =   4375,107 ms/op
     p(99,9000) =   4375,107 ms/op
     p(99,9900) =   4375,107 ms/op
     p(99,9990) =   4375,107 ms/op
     p(99,9999) =   4375,107 ms/op
    p(100,0000) =   4375,107 ms/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest      1000000           get    ss    8  4295,552 ± 74,148  ms/op
tests.maptests.identity_object.GsIdentityMapTest (1000000) = 4295.55242875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4641,427 ms/op
# Warmup Iteration   2: 4480,911 ms/op
# Warmup Iteration   3: 4493,770 ms/op
# Warmup Iteration   4: 4536,251 ms/op
# Warmup Iteration   5: 4483,103 ms/op
# Warmup Iteration   6: 4476,076 ms/op
# Warmup Iteration   7: 4482,204 ms/op
# Warmup Iteration   8: 4507,113 ms/op
# Warmup Iteration   9: 4468,398 ms/op
# Warmup Iteration  10: 4536,829 ms/op
Iteration   1: 4483,397 ms/op
Iteration   2: 4518,738 ms/op
Iteration   3: 4493,074 ms/op
Iteration   4: 4485,995 ms/op
Iteration   5: 4504,287 ms/op
Iteration   6: 4510,128 ms/op
Iteration   7: 4502,421 ms/op
Iteration   8: 4455,870 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4494,239 ±(99.9%) 37,409 ms/op

  Histogram, ms/op:
    [4450,000, 4455,000) = 0
    [4455,000, 4460,000) = 1
    [4460,000, 4465,000) = 0
    [4465,000, 4470,000) = 0
    [4470,000, 4475,000) = 0
    [4475,000, 4480,000) = 0
    [4480,000, 4485,000) = 1
    [4485,000, 4490,000) = 1
    [4490,000, 4495,000) = 1
    [4495,000, 4500,000) = 0
    [4500,000, 4505,000) = 2
    [4505,000, 4510,000) = 0
    [4510,000, 4515,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   4455,870 ms/op
     p(50,0000) =   4497,748 ms/op
     p(90,0000) =   4518,738 ms/op
     p(95,0000) =   4518,738 ms/op
     p(99,0000) =   4518,738 ms/op
     p(99,9000) =   4518,738 ms/op
     p(99,9900) =   4518,738 ms/op
     p(99,9990) =   4518,738 ms/op
     p(99,9999) =   4518,738 ms/op
    p(100,0000) =   4518,738 ms/op


# Run complete. Total time: 00:01:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest      1000000           get    ss    8  4494,239 ± 37,409  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (1000000) = 4494.238876125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3435,311 ms/op
# Warmup Iteration   2: 3284,688 ms/op
# Warmup Iteration   3: 3330,297 ms/op
# Warmup Iteration   4: 3276,879 ms/op
# Warmup Iteration   5: 3305,595 ms/op
# Warmup Iteration   6: 3297,626 ms/op
# Warmup Iteration   7: 3243,226 ms/op
# Warmup Iteration   8: 3268,451 ms/op
# Warmup Iteration   9: 3254,215 ms/op
# Warmup Iteration  10: 3242,998 ms/op
Iteration   1: 3296,296 ms/op
Iteration   2: 3289,787 ms/op
Iteration   3: 3255,990 ms/op
Iteration   4: 3291,670 ms/op
Iteration   5: 3345,960 ms/op
Iteration   6: 3275,624 ms/op
Iteration   7: 3316,003 ms/op
Iteration   8: 3306,305 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3297,204 ±(99.9%) 51,426 ms/op

  Histogram, ms/op:
    [3250,000, 3260,000) = 1
    [3260,000, 3270,000) = 0
    [3270,000, 3280,000) = 1
    [3280,000, 3290,000) = 1
    [3290,000, 3300,000) = 2
    [3300,000, 3310,000) = 1
    [3310,000, 3320,000) = 1
    [3320,000, 3330,000) = 0
    [3330,000, 3340,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3255,990 ms/op
     p(50,0000) =   3293,983 ms/op
     p(90,0000) =   3345,960 ms/op
     p(95,0000) =   3345,960 ms/op
     p(99,0000) =   3345,960 ms/op
     p(99,9000) =   3345,960 ms/op
     p(99,9900) =   3345,960 ms/op
     p(99,9990) =   3345,960 ms/op
     p(99,9999) =   3345,960 ms/op
    p(100,0000) =   3345,960 ms/op


# Run complete. Total time: 00:01:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest      1000000           get    ss    8  3297,204 ± 51,426  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (1000000) = 3297.20446225
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3888,279 ms/op
# Warmup Iteration   2: 3720,351 ms/op
# Warmup Iteration   3: 3752,075 ms/op
# Warmup Iteration   4: 3835,121 ms/op
# Warmup Iteration   5: 3851,348 ms/op
# Warmup Iteration   6: 3744,902 ms/op
# Warmup Iteration   7: 3744,447 ms/op
# Warmup Iteration   8: 3719,060 ms/op
# Warmup Iteration   9: 3727,549 ms/op
# Warmup Iteration  10: 3733,947 ms/op
Iteration   1: 3750,264 ms/op
Iteration   2: 3797,710 ms/op
Iteration   3: 3747,719 ms/op
Iteration   4: 3728,597 ms/op
Iteration   5: 3774,818 ms/op
Iteration   6: 3721,471 ms/op
Iteration   7: 3730,257 ms/op
Iteration   8: 3743,722 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3749,320 ±(99.9%) 48,986 ms/op

  Histogram, ms/op:
    [3720,000, 3725,000) = 1
    [3725,000, 3730,000) = 1
    [3730,000, 3735,000) = 1
    [3735,000, 3740,000) = 0
    [3740,000, 3745,000) = 1
    [3745,000, 3750,000) = 1
    [3750,000, 3755,000) = 1
    [3755,000, 3760,000) = 0
    [3760,000, 3765,000) = 0
    [3765,000, 3770,000) = 0
    [3770,000, 3775,000) = 1
    [3775,000, 3780,000) = 0
    [3780,000, 3785,000) = 0
    [3785,000, 3790,000) = 0
    [3790,000, 3795,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3721,471 ms/op
     p(50,0000) =   3745,721 ms/op
     p(90,0000) =   3797,710 ms/op
     p(95,0000) =   3797,710 ms/op
     p(99,0000) =   3797,710 ms/op
     p(99,9000) =   3797,710 ms/op
     p(99,9900) =   3797,710 ms/op
     p(99,9990) =   3797,710 ms/op
     p(99,9999) =   3797,710 ms/op
    p(100,0000) =   3797,710 ms/op


# Run complete. Total time: 00:01:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest      1000000           get    ss    8  3749,320 ± 48,986  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (1000000) = 3749.3197852499998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5269,834 ms/op
# Warmup Iteration   2: 5084,724 ms/op
# Warmup Iteration   3: 5140,477 ms/op
# Warmup Iteration   4: 5083,805 ms/op
# Warmup Iteration   5: 5127,356 ms/op
# Warmup Iteration   6: 5206,958 ms/op
# Warmup Iteration   7: 5123,593 ms/op
# Warmup Iteration   8: 5119,931 ms/op
# Warmup Iteration   9: 5130,020 ms/op
# Warmup Iteration  10: 5183,920 ms/op
Iteration   1: 5125,385 ms/op
Iteration   2: 5226,433 ms/op
Iteration   3: 5121,565 ms/op
Iteration   4: 5138,708 ms/op
Iteration   5: 5101,961 ms/op
Iteration   6: 5108,036 ms/op
Iteration   7: 5145,436 ms/op
Iteration   8: 5236,263 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5150,474 ±(99.9%) 99,383 ms/op

  Histogram, ms/op:
    [5100,000, 5112,500) = 2
    [5112,500, 5125,000) = 1
    [5125,000, 5137,500) = 1
    [5137,500, 5150,000) = 2
    [5150,000, 5162,500) = 0
    [5162,500, 5175,000) = 0
    [5175,000, 5187,500) = 0
    [5187,500, 5200,000) = 0
    [5200,000, 5212,500) = 0
    [5212,500, 5225,000) = 0
    [5225,000, 5237,500) = 2
    [5237,500, 5250,000) = 0
    [5250,000, 5262,500) = 0
    [5262,500, 5275,000) = 0
    [5275,000, 5287,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5101,961 ms/op
     p(50,0000) =   5132,046 ms/op
     p(90,0000) =   5236,263 ms/op
     p(95,0000) =   5236,263 ms/op
     p(99,0000) =   5236,263 ms/op
     p(99,9000) =   5236,263 ms/op
     p(99,9900) =   5236,263 ms/op
     p(99,9990) =   5236,263 ms/op
     p(99,9999) =   5236,263 ms/op
    p(100,0000) =   5236,263 ms/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest      1000000           get    ss    8  5150,474 ± 99,383  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (1000000) = 5150.473529500001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 1000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5002,616 ms/op
# Warmup Iteration   2: 4819,860 ms/op
# Warmup Iteration   3: 4845,580 ms/op
# Warmup Iteration   4: 4847,597 ms/op
# Warmup Iteration   5: 4900,890 ms/op
# Warmup Iteration   6: 4825,326 ms/op
# Warmup Iteration   7: 4836,019 ms/op
# Warmup Iteration   8: 4860,047 ms/op
# Warmup Iteration   9: 4829,883 ms/op
# Warmup Iteration  10: 4813,139 ms/op
Iteration   1: 4865,529 ms/op
Iteration   2: 4841,776 ms/op
Iteration   3: 4855,598 ms/op
Iteration   4: 4861,802 ms/op
Iteration   5: 4815,641 ms/op
Iteration   6: 4864,743 ms/op
Iteration   7: 4885,063 ms/op
Iteration   8: 4821,346 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4851,437 ±(99.9%) 45,195 ms/op

  Histogram, ms/op:
    [4810,000, 4815,000) = 0
    [4815,000, 4820,000) = 1
    [4820,000, 4825,000) = 1
    [4825,000, 4830,000) = 0
    [4830,000, 4835,000) = 0
    [4835,000, 4840,000) = 0
    [4840,000, 4845,000) = 1
    [4845,000, 4850,000) = 0
    [4850,000, 4855,000) = 0
    [4855,000, 4860,000) = 1
    [4860,000, 4865,000) = 2
    [4865,000, 4870,000) = 1
    [4870,000, 4875,000) = 0
    [4875,000, 4880,000) = 0
    [4880,000, 4885,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4815,641 ms/op
     p(50,0000) =   4858,700 ms/op
     p(90,0000) =   4885,063 ms/op
     p(95,0000) =   4885,063 ms/op
     p(99,0000) =   4885,063 ms/op
     p(99,9000) =   4885,063 ms/op
     p(99,9900) =   4885,063 ms/op
     p(99,9990) =   4885,063 ms/op
     p(99,9999) =   4885,063 ms/op
    p(100,0000) =   4885,063 ms/op


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest      1000000           get    ss    8  4851,437 ± 45,195  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (1000000) = 4851.43719025
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8044,709 ms/op
# Warmup Iteration   2: 7910,609 ms/op
# Warmup Iteration   3: 7821,295 ms/op
# Warmup Iteration   4: 7902,809 ms/op
# Warmup Iteration   5: 7886,159 ms/op
# Warmup Iteration   6: 7879,064 ms/op
# Warmup Iteration   7: 7752,327 ms/op
# Warmup Iteration   8: 7897,807 ms/op
# Warmup Iteration   9: 7892,961 ms/op
# Warmup Iteration  10: 7909,239 ms/op
Iteration   1: 7903,167 ms/op
Iteration   2: 7929,233 ms/op
Iteration   3: 8007,604 ms/op
Iteration   4: 7970,422 ms/op
Iteration   5: 7898,198 ms/op
Iteration   6: 7915,474 ms/op
Iteration   7: 7961,756 ms/op
Iteration   8: 7947,708 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7941,695 ±(99.9%) 71,638 ms/op

  Histogram, ms/op:
    [7800,000, 7825,000) = 0
    [7825,000, 7850,000) = 0
    [7850,000, 7875,000) = 0
    [7875,000, 7900,000) = 1
    [7900,000, 7925,000) = 2
    [7925,000, 7950,000) = 2
    [7950,000, 7975,000) = 2
    [7975,000, 8000,000) = 0
    [8000,000, 8025,000) = 1
    [8025,000, 8050,000) = 0
    [8050,000, 8075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   7898,198 ms/op
     p(50,0000) =   7938,470 ms/op
     p(90,0000) =   8007,604 ms/op
     p(95,0000) =   8007,604 ms/op
     p(99,0000) =   8007,604 ms/op
     p(99,9000) =   8007,604 ms/op
     p(99,9900) =   8007,604 ms/op
     p(99,9990) =   8007,604 ms/op
     p(99,9999) =   8007,604 ms/op
    p(100,0000) =   8007,604 ms/op


# Run complete. Total time: 00:02:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test     10000000           get    ss    8  7941,695 ± 71,638  ms/op
tests.maptests.article_examples.IntIntMap1Test (10000000) = 7941.695259124999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6109,769 ms/op
# Warmup Iteration   2: 6134,175 ms/op
# Warmup Iteration   3: 6100,426 ms/op
# Warmup Iteration   4: 6086,910 ms/op
# Warmup Iteration   5: 6148,631 ms/op
# Warmup Iteration   6: 6089,237 ms/op
# Warmup Iteration   7: 6117,941 ms/op
# Warmup Iteration   8: 6107,342 ms/op
# Warmup Iteration   9: 6121,045 ms/op
# Warmup Iteration  10: 6098,936 ms/op
Iteration   1: 6111,377 ms/op
Iteration   2: 6079,160 ms/op
Iteration   3: 6090,163 ms/op
Iteration   4: 6109,912 ms/op
Iteration   5: 6148,313 ms/op
Iteration   6: 6068,271 ms/op
Iteration   7: 6086,381 ms/op
Iteration   8: 6100,325 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6099,238 ±(99.9%) 47,280 ms/op

  Histogram, ms/op:
    [6060,000, 6065,000) = 0
    [6065,000, 6070,000) = 1
    [6070,000, 6075,000) = 0
    [6075,000, 6080,000) = 1
    [6080,000, 6085,000) = 0
    [6085,000, 6090,000) = 1
    [6090,000, 6095,000) = 1
    [6095,000, 6100,000) = 0
    [6100,000, 6105,000) = 1
    [6105,000, 6110,000) = 1
    [6110,000, 6115,000) = 1
    [6115,000, 6120,000) = 0
    [6120,000, 6125,000) = 0
    [6125,000, 6130,000) = 0
    [6130,000, 6135,000) = 0
    [6135,000, 6140,000) = 0
    [6140,000, 6145,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6068,271 ms/op
     p(50,0000) =   6095,244 ms/op
     p(90,0000) =   6148,313 ms/op
     p(95,0000) =   6148,313 ms/op
     p(99,0000) =   6148,313 ms/op
     p(99,9000) =   6148,313 ms/op
     p(99,9900) =   6148,313 ms/op
     p(99,9990) =   6148,313 ms/op
     p(99,9999) =   6148,313 ms/op
    p(100,0000) =   6148,313 ms/op


# Run complete. Total time: 00:01:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test     10000000           get    ss    8  6099,238 ± 47,280  ms/op
tests.maptests.article_examples.IntIntMap2Test (10000000) = 6099.237785125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4315,199 ms/op
# Warmup Iteration   2: 4273,853 ms/op
# Warmup Iteration   3: 4366,748 ms/op
# Warmup Iteration   4: 4322,343 ms/op
# Warmup Iteration   5: 4277,813 ms/op
# Warmup Iteration   6: 4275,267 ms/op
# Warmup Iteration   7: 4301,812 ms/op
# Warmup Iteration   8: 4312,123 ms/op
# Warmup Iteration   9: 4272,240 ms/op
# Warmup Iteration  10: 4274,955 ms/op
Iteration   1: 4344,766 ms/op
Iteration   2: 4257,602 ms/op
Iteration   3: 4318,749 ms/op
Iteration   4: 4241,080 ms/op
Iteration   5: 4276,798 ms/op
Iteration   6: 4312,461 ms/op
Iteration   7: 4300,619 ms/op
Iteration   8: 4247,763 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4287,480 ±(99.9%) 71,515 ms/op

  Histogram, ms/op:
    [4200,000, 4212,500) = 0
    [4212,500, 4225,000) = 0
    [4225,000, 4237,500) = 0
    [4237,500, 4250,000) = 2
    [4250,000, 4262,500) = 1
    [4262,500, 4275,000) = 0
    [4275,000, 4287,500) = 1
    [4287,500, 4300,000) = 0
    [4300,000, 4312,500) = 2
    [4312,500, 4325,000) = 1
    [4325,000, 4337,500) = 0
    [4337,500, 4350,000) = 1
    [4350,000, 4362,500) = 0
    [4362,500, 4375,000) = 0
    [4375,000, 4387,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4241,080 ms/op
     p(50,0000) =   4288,708 ms/op
     p(90,0000) =   4344,766 ms/op
     p(95,0000) =   4344,766 ms/op
     p(99,0000) =   4344,766 ms/op
     p(99,9000) =   4344,766 ms/op
     p(99,9900) =   4344,766 ms/op
     p(99,9990) =   4344,766 ms/op
     p(99,9999) =   4344,766 ms/op
    p(100,0000) =   4344,766 ms/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test     10000000           get    ss    8  4287,480 ± 71,515  ms/op
tests.maptests.article_examples.IntIntMap3Test (10000000) = 4287.47976575
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3471,026 ms/op
# Warmup Iteration   2: 3428,205 ms/op
# Warmup Iteration   3: 3439,682 ms/op
# Warmup Iteration   4: 3414,142 ms/op
# Warmup Iteration   5: 3418,907 ms/op
# Warmup Iteration   6: 3412,229 ms/op
# Warmup Iteration   7: 3436,484 ms/op
# Warmup Iteration   8: 3429,661 ms/op
# Warmup Iteration   9: 3421,094 ms/op
# Warmup Iteration  10: 3428,095 ms/op
Iteration   1: 3456,237 ms/op
Iteration   2: 3412,928 ms/op
Iteration   3: 3445,730 ms/op
Iteration   4: 3418,317 ms/op
Iteration   5: 3428,926 ms/op
Iteration   6: 3419,285 ms/op
Iteration   7: 3411,763 ms/op
Iteration   8: 3415,515 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3426,088 ±(99.9%) 31,497 ms/op

  Histogram, ms/op:
    [3410,000, 3415,000) = 2
    [3415,000, 3420,000) = 3
    [3420,000, 3425,000) = 0
    [3425,000, 3430,000) = 1
    [3430,000, 3435,000) = 0
    [3435,000, 3440,000) = 0
    [3440,000, 3445,000) = 0
    [3445,000, 3450,000) = 1
    [3450,000, 3455,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3411,763 ms/op
     p(50,0000) =   3418,801 ms/op
     p(90,0000) =   3456,237 ms/op
     p(95,0000) =   3456,237 ms/op
     p(99,0000) =   3456,237 ms/op
     p(99,9000) =   3456,237 ms/op
     p(99,9900) =   3456,237 ms/op
     p(99,9990) =   3456,237 ms/op
     p(99,9999) =   3456,237 ms/op
    p(100,0000) =   3456,237 ms/op


# Run complete. Total time: 00:01:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test     10000000           get    ss    8  3426,088 ± 31,497  ms/op
tests.maptests.article_examples.IntIntMap4Test (10000000) = 3426.0876745
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3417,225 ms/op
# Warmup Iteration   2: 3380,766 ms/op
# Warmup Iteration   3: 3411,346 ms/op
# Warmup Iteration   4: 3367,490 ms/op
# Warmup Iteration   5: 3364,864 ms/op
# Warmup Iteration   6: 3372,748 ms/op
# Warmup Iteration   7: 3368,458 ms/op
# Warmup Iteration   8: 3381,952 ms/op
# Warmup Iteration   9: 3367,421 ms/op
# Warmup Iteration  10: 3371,337 ms/op
Iteration   1: 3385,385 ms/op
Iteration   2: 3370,803 ms/op
Iteration   3: 3364,467 ms/op
Iteration   4: 3360,201 ms/op
Iteration   5: 3390,986 ms/op
Iteration   6: 3376,946 ms/op
Iteration   7: 3366,749 ms/op
Iteration   8: 3394,158 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3376,212 ±(99.9%) 24,379 ms/op

  Histogram, ms/op:
    [3360,000, 3362,500) = 1
    [3362,500, 3365,000) = 1
    [3365,000, 3367,500) = 1
    [3367,500, 3370,000) = 0
    [3370,000, 3372,500) = 1
    [3372,500, 3375,000) = 0
    [3375,000, 3377,500) = 1
    [3377,500, 3380,000) = 0
    [3380,000, 3382,500) = 0
    [3382,500, 3385,000) = 0
    [3385,000, 3387,500) = 1
    [3387,500, 3390,000) = 0
    [3390,000, 3392,500) = 1
    [3392,500, 3395,000) = 1
    [3395,000, 3397,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   3360,201 ms/op
     p(50,0000) =   3373,875 ms/op
     p(90,0000) =   3394,158 ms/op
     p(95,0000) =   3394,158 ms/op
     p(99,0000) =   3394,158 ms/op
     p(99,9000) =   3394,158 ms/op
     p(99,9900) =   3394,158 ms/op
     p(99,9990) =   3394,158 ms/op
     p(99,9999) =   3394,158 ms/op
    p(100,0000) =   3394,158 ms/op


# Run complete. Total time: 00:01:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest     10000000           get    ss    8  3376,212 ± 24,379  ms/op
tests.maptests.article_examples.IntIntMap4aTest (10000000) = 3376.2119111250004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4119,301 ms/op
# Warmup Iteration   2: 4084,769 ms/op
# Warmup Iteration   3: 4035,580 ms/op
# Warmup Iteration   4: 4067,141 ms/op
# Warmup Iteration   5: 4060,102 ms/op
# Warmup Iteration   6: 4095,328 ms/op
# Warmup Iteration   7: 4067,683 ms/op
# Warmup Iteration   8: 4042,381 ms/op
# Warmup Iteration   9: 4062,064 ms/op
# Warmup Iteration  10: 4043,498 ms/op
Iteration   1: 4032,610 ms/op
Iteration   2: 4055,576 ms/op
Iteration   3: 4068,680 ms/op
Iteration   4: 4065,733 ms/op
Iteration   5: 4108,541 ms/op
Iteration   6: 4063,473 ms/op
Iteration   7: 4076,652 ms/op
Iteration   8: 4050,312 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4065,197 ±(99.9%) 42,146 ms/op

  Histogram, ms/op:
    [4030,000, 4035,000) = 1
    [4035,000, 4040,000) = 0
    [4040,000, 4045,000) = 0
    [4045,000, 4050,000) = 0
    [4050,000, 4055,000) = 1
    [4055,000, 4060,000) = 1
    [4060,000, 4065,000) = 1
    [4065,000, 4070,000) = 2
    [4070,000, 4075,000) = 0
    [4075,000, 4080,000) = 1
    [4080,000, 4085,000) = 0
    [4085,000, 4090,000) = 0
    [4090,000, 4095,000) = 0
    [4095,000, 4100,000) = 0
    [4100,000, 4105,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4032,610 ms/op
     p(50,0000) =   4064,603 ms/op
     p(90,0000) =   4108,541 ms/op
     p(95,0000) =   4108,541 ms/op
     p(99,0000) =   4108,541 ms/op
     p(99,9000) =   4108,541 ms/op
     p(99,9900) =   4108,541 ms/op
     p(99,9990) =   4108,541 ms/op
     p(99,9999) =   4108,541 ms/op
    p(100,0000) =   4108,541 ms/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest     10000000           get    ss    8  4065,197 ± 42,146  ms/op
tests.maptests.primitive.FastUtilMapTest (10000000) = 4065.19704875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4315,091 ms/op
# Warmup Iteration   2: 4310,429 ms/op
# Warmup Iteration   3: 4296,338 ms/op
# Warmup Iteration   4: 4298,554 ms/op
# Warmup Iteration   5: 4302,255 ms/op
# Warmup Iteration   6: 4341,809 ms/op
# Warmup Iteration   7: 4298,093 ms/op
# Warmup Iteration   8: 4298,860 ms/op
# Warmup Iteration   9: 4303,414 ms/op
# Warmup Iteration  10: 4295,618 ms/op
Iteration   1: 4289,402 ms/op
Iteration   2: 4294,051 ms/op
Iteration   3: 4339,044 ms/op
Iteration   4: 4171,881 ms/op
Iteration   5: 4306,742 ms/op
Iteration   6: 4298,748 ms/op
Iteration   7: 4297,452 ms/op
Iteration   8: 4289,906 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4285,903 ±(99.9%) 93,255 ms/op

  Histogram, ms/op:
    [4100,000, 4125,000) = 0
    [4125,000, 4150,000) = 0
    [4150,000, 4175,000) = 1
    [4175,000, 4200,000) = 0
    [4200,000, 4225,000) = 0
    [4225,000, 4250,000) = 0
    [4250,000, 4275,000) = 0
    [4275,000, 4300,000) = 5
    [4300,000, 4325,000) = 1
    [4325,000, 4350,000) = 1
    [4350,000, 4375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4171,881 ms/op
     p(50,0000) =   4295,752 ms/op
     p(90,0000) =   4339,044 ms/op
     p(95,0000) =   4339,044 ms/op
     p(99,0000) =   4339,044 ms/op
     p(99,9000) =   4339,044 ms/op
     p(99,9900) =   4339,044 ms/op
     p(99,9990) =   4339,044 ms/op
     p(99,9999) =   4339,044 ms/op
    p(100,0000) =   4339,044 ms/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest     10000000           get    ss    8  4285,903 ± 93,255  ms/op
tests.maptests.primitive.GsMutableMapTest (10000000) = 4285.90339625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3249,278 ms/op
# Warmup Iteration   2: 3186,862 ms/op
# Warmup Iteration   3: 3165,537 ms/op
# Warmup Iteration   4: 3165,648 ms/op
# Warmup Iteration   5: 3152,307 ms/op
# Warmup Iteration   6: 3149,492 ms/op
# Warmup Iteration   7: 3159,299 ms/op
# Warmup Iteration   8: 3170,800 ms/op
# Warmup Iteration   9: 3173,308 ms/op
# Warmup Iteration  10: 3167,376 ms/op
Iteration   1: 3175,949 ms/op
Iteration   2: 3179,883 ms/op
Iteration   3: 3182,029 ms/op
Iteration   4: 3173,197 ms/op
Iteration   5: 3169,763 ms/op
Iteration   6: 3156,270 ms/op
Iteration   7: 3183,154 ms/op
Iteration   8: 3196,661 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3177,113 ±(99.9%) 22,339 ms/op

  Histogram, ms/op:
    [3150,000, 3155,000) = 0
    [3155,000, 3160,000) = 1
    [3160,000, 3165,000) = 0
    [3165,000, 3170,000) = 1
    [3170,000, 3175,000) = 1
    [3175,000, 3180,000) = 2
    [3180,000, 3185,000) = 2
    [3185,000, 3190,000) = 0
    [3190,000, 3195,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3156,270 ms/op
     p(50,0000) =   3177,916 ms/op
     p(90,0000) =   3196,661 ms/op
     p(95,0000) =   3196,661 ms/op
     p(99,0000) =   3196,661 ms/op
     p(99,9000) =   3196,661 ms/op
     p(99,9900) =   3196,661 ms/op
     p(99,9990) =   3196,661 ms/op
     p(99,9999) =   3196,661 ms/op
    p(100,0000) =   3196,661 ms/op


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest     10000000           get    ss    8  3177,113 ± 22,339  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (10000000) = 3177.113324375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4733,682 ms/op
# Warmup Iteration   2: 4700,273 ms/op
# Warmup Iteration   3: 4718,650 ms/op
# Warmup Iteration   4: 4673,039 ms/op
# Warmup Iteration   5: 4768,160 ms/op
# Warmup Iteration   6: 4662,247 ms/op
# Warmup Iteration   7: 4700,500 ms/op
# Warmup Iteration   8: 4754,075 ms/op
# Warmup Iteration   9: 4730,402 ms/op
# Warmup Iteration  10: 4702,951 ms/op
Iteration   1: 4698,638 ms/op
Iteration   2: 4719,074 ms/op
Iteration   3: 4773,378 ms/op
Iteration   4: 4709,105 ms/op
Iteration   5: 4687,019 ms/op
Iteration   6: 4702,760 ms/op
Iteration   7: 4695,361 ms/op
Iteration   8: 4707,920 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4711,657 ±(99.9%) 51,132 ms/op

  Histogram, ms/op:
    [4680,000, 4690,000) = 1
    [4690,000, 4700,000) = 2
    [4700,000, 4710,000) = 3
    [4710,000, 4720,000) = 1
    [4720,000, 4730,000) = 0
    [4730,000, 4740,000) = 0
    [4740,000, 4750,000) = 0
    [4750,000, 4760,000) = 0
    [4760,000, 4770,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4687,019 ms/op
     p(50,0000) =   4705,340 ms/op
     p(90,0000) =   4773,378 ms/op
     p(95,0000) =   4773,378 ms/op
     p(99,0000) =   4773,378 ms/op
     p(99,9000) =   4773,378 ms/op
     p(99,9900) =   4773,378 ms/op
     p(99,9990) =   4773,378 ms/op
     p(99,9999) =   4773,378 ms/op
    p(100,0000) =   4773,378 ms/op


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest     10000000           get    ss    8  4711,657 ± 51,132  ms/op
tests.maptests.primitive.HppcMapTest (10000000) = 4711.656833250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10110,453 ms/op
# Warmup Iteration   2: 9989,881 ms/op
# Warmup Iteration   3: 9979,731 ms/op
# Warmup Iteration   4: 10000,522 ms/op
# Warmup Iteration   5: 9959,820 ms/op
# Warmup Iteration   6: 9954,271 ms/op
# Warmup Iteration   7: 9971,044 ms/op
# Warmup Iteration   8: 9978,633 ms/op
# Warmup Iteration   9: 9980,015 ms/op
# Warmup Iteration  10: 9953,131 ms/op
Iteration   1: 9948,568 ms/op
Iteration   2: 9971,285 ms/op
Iteration   3: 9887,065 ms/op
Iteration   4: 9949,516 ms/op
Iteration   5: 9969,620 ms/op
Iteration   6: 9987,095 ms/op
Iteration   7: 9944,119 ms/op
Iteration   8: 9985,588 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9955,357 ±(99.9%) 61,527 ms/op

  Histogram, ms/op:
    [ 9800,000,  9812,500) = 0
    [ 9812,500,  9825,000) = 0
    [ 9825,000,  9837,500) = 0
    [ 9837,500,  9850,000) = 0
    [ 9850,000,  9862,500) = 0
    [ 9862,500,  9875,000) = 0
    [ 9875,000,  9887,500) = 1
    [ 9887,500,  9900,000) = 0
    [ 9900,000,  9912,500) = 0
    [ 9912,500,  9925,000) = 0
    [ 9925,000,  9937,500) = 0
    [ 9937,500,  9950,000) = 3
    [ 9950,000,  9962,500) = 0
    [ 9962,500,  9975,000) = 2
    [ 9975,000,  9987,500) = 2

  Percentiles, ms/op:
      p(0,0000) =   9887,065 ms/op
     p(50,0000) =   9959,568 ms/op
     p(90,0000) =   9987,095 ms/op
     p(95,0000) =   9987,095 ms/op
     p(99,0000) =   9987,095 ms/op
     p(99,9000) =   9987,095 ms/op
     p(99,9900) =   9987,095 ms/op
     p(99,9990) =   9987,095 ms/op
     p(99,9999) =   9987,095 ms/op
    p(100,0000) =   9987,095 ms/op


# Run complete. Total time: 00:03:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest     10000000           get    ss    8  9955,357 ± 61,527  ms/op
tests.maptests.primitive.TroveJbMapTest (10000000) = 9955.3569995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9646,887 ms/op
# Warmup Iteration   2: 9607,531 ms/op
# Warmup Iteration   3: 9599,677 ms/op
# Warmup Iteration   4: 9594,756 ms/op
# Warmup Iteration   5: 9604,576 ms/op
# Warmup Iteration   6: 9606,047 ms/op
# Warmup Iteration   7: 9606,707 ms/op
# Warmup Iteration   8: 9605,162 ms/op
# Warmup Iteration   9: 9598,311 ms/op
# Warmup Iteration  10: 9694,575 ms/op
Iteration   1: 9614,384 ms/op
Iteration   2: 9614,280 ms/op
Iteration   3: 9566,039 ms/op
Iteration   4: 9594,091 ms/op
Iteration   5: 9584,974 ms/op
Iteration   6: 9579,964 ms/op
Iteration   7: 9660,318 ms/op
Iteration   8: 9623,321 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9604,671 ±(99.9%) 57,057 ms/op

  Histogram, ms/op:
    [9560,000, 9570,000) = 1
    [9570,000, 9580,000) = 1
    [9580,000, 9590,000) = 1
    [9590,000, 9600,000) = 1
    [9600,000, 9610,000) = 0
    [9610,000, 9620,000) = 2
    [9620,000, 9630,000) = 1
    [9630,000, 9640,000) = 0
    [9640,000, 9650,000) = 0
    [9650,000, 9660,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9566,039 ms/op
     p(50,0000) =   9604,186 ms/op
     p(90,0000) =   9660,318 ms/op
     p(95,0000) =   9660,318 ms/op
     p(99,0000) =   9660,318 ms/op
     p(99,9000) =   9660,318 ms/op
     p(99,9900) =   9660,318 ms/op
     p(99,9990) =   9660,318 ms/op
     p(99,9999) =   9660,318 ms/op
    p(100,0000) =   9660,318 ms/op


# Run complete. Total time: 00:02:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest     10000000           get    ss    8  9604,671 ± 57,057  ms/op
tests.maptests.primitive.TroveMapTest (10000000) = 9604.67131225
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6281,363 ms/op
# Warmup Iteration   2: 6389,371 ms/op
# Warmup Iteration   3: 6412,841 ms/op
# Warmup Iteration   4: 6415,639 ms/op
# Warmup Iteration   5: 6377,439 ms/op
# Warmup Iteration   6: 6412,684 ms/op
# Warmup Iteration   7: 6393,076 ms/op
# Warmup Iteration   8: 6433,979 ms/op
# Warmup Iteration   9: 6388,249 ms/op
# Warmup Iteration  10: 6205,764 ms/op
Iteration   1: 6341,513 ms/op
Iteration   2: 6383,862 ms/op
Iteration   3: 6405,734 ms/op
Iteration   4: 6394,117 ms/op
Iteration   5: 6398,228 ms/op
Iteration   6: 6491,280 ms/op
Iteration   7: 6399,993 ms/op
Iteration   8: 6388,298 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6400,378 ±(99.9%) 79,885 ms/op

  Histogram, ms/op:
    [6300,000, 6312,500) = 0
    [6312,500, 6325,000) = 0
    [6325,000, 6337,500) = 0
    [6337,500, 6350,000) = 1
    [6350,000, 6362,500) = 0
    [6362,500, 6375,000) = 0
    [6375,000, 6387,500) = 1
    [6387,500, 6400,000) = 4
    [6400,000, 6412,500) = 1
    [6412,500, 6425,000) = 0
    [6425,000, 6437,500) = 0
    [6437,500, 6450,000) = 0
    [6450,000, 6462,500) = 0
    [6462,500, 6475,000) = 0
    [6475,000, 6487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   6341,513 ms/op
     p(50,0000) =   6396,172 ms/op
     p(90,0000) =   6491,280 ms/op
     p(95,0000) =   6491,280 ms/op
     p(99,0000) =   6491,280 ms/op
     p(99,9000) =   6491,280 ms/op
     p(99,9900) =   6491,280 ms/op
     p(99,9990) =   6491,280 ms/op
     p(99,9999) =   6491,280 ms/op
    p(100,0000) =   6491,280 ms/op


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest     10000000           get    ss    8  6400,378 ± 79,885  ms/op
tests.maptests.object.FastUtilObjMapTest (10000000) = 6400.378052624999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7575,567 ms/op
# Warmup Iteration   2: 7607,234 ms/op
# Warmup Iteration   3: 7566,687 ms/op
# Warmup Iteration   4: 7541,678 ms/op
# Warmup Iteration   5: 7536,545 ms/op
# Warmup Iteration   6: 7517,585 ms/op
# Warmup Iteration   7: 7554,981 ms/op
# Warmup Iteration   8: 7544,009 ms/op
# Warmup Iteration   9: 7557,665 ms/op
# Warmup Iteration  10: 7579,394 ms/op
Iteration   1: 7563,377 ms/op
Iteration   2: 7554,561 ms/op
Iteration   3: 7527,380 ms/op
Iteration   4: 7588,499 ms/op
Iteration   5: 7546,014 ms/op
Iteration   6: 7526,886 ms/op
Iteration   7: 7628,403 ms/op
Iteration   8: 7573,536 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7563,582 ±(99.9%) 64,511 ms/op

  Histogram, ms/op:
    [7500,000, 7512,500) = 0
    [7512,500, 7525,000) = 0
    [7525,000, 7537,500) = 2
    [7537,500, 7550,000) = 1
    [7550,000, 7562,500) = 1
    [7562,500, 7575,000) = 2
    [7575,000, 7587,500) = 0
    [7587,500, 7600,000) = 1
    [7600,000, 7612,500) = 0
    [7612,500, 7625,000) = 0
    [7625,000, 7637,500) = 1
    [7637,500, 7650,000) = 0
    [7650,000, 7662,500) = 0
    [7662,500, 7675,000) = 0
    [7675,000, 7687,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   7526,886 ms/op
     p(50,0000) =   7558,969 ms/op
     p(90,0000) =   7628,403 ms/op
     p(95,0000) =   7628,403 ms/op
     p(99,0000) =   7628,403 ms/op
     p(99,9000) =   7628,403 ms/op
     p(99,9900) =   7628,403 ms/op
     p(99,9990) =   7628,403 ms/op
     p(99,9999) =   7628,403 ms/op
    p(100,0000) =   7628,403 ms/op


# Run complete. Total time: 00:02:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest     10000000           get    ss    8  7563,582 ± 64,511  ms/op
tests.maptests.object.KolobokeMutableObjTest (10000000) = 7563.582014250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7669,088 ms/op
# Warmup Iteration   2: 7521,677 ms/op
# Warmup Iteration   3: 7567,623 ms/op
# Warmup Iteration   4: 7569,961 ms/op
# Warmup Iteration   5: 7542,674 ms/op
# Warmup Iteration   6: 7525,913 ms/op
# Warmup Iteration   7: 7551,779 ms/op
# Warmup Iteration   8: 7600,655 ms/op
# Warmup Iteration   9: 7576,843 ms/op
# Warmup Iteration  10: 7554,719 ms/op
Iteration   1: 7614,646 ms/op
Iteration   2: 7546,514 ms/op
Iteration   3: 7542,034 ms/op
Iteration   4: 7622,338 ms/op
Iteration   5: 7563,689 ms/op
Iteration   6: 7562,043 ms/op
Iteration   7: 7562,149 ms/op
Iteration   8: 7565,990 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7572,425 ±(99.9%) 56,903 ms/op

  Histogram, ms/op:
    [7540,000, 7545,000) = 1
    [7545,000, 7550,000) = 1
    [7550,000, 7555,000) = 0
    [7555,000, 7560,000) = 0
    [7560,000, 7565,000) = 3
    [7565,000, 7570,000) = 1
    [7570,000, 7575,000) = 0
    [7575,000, 7580,000) = 0
    [7580,000, 7585,000) = 0
    [7585,000, 7590,000) = 0
    [7590,000, 7595,000) = 0
    [7595,000, 7600,000) = 0
    [7600,000, 7605,000) = 0
    [7605,000, 7610,000) = 0
    [7610,000, 7615,000) = 1
    [7615,000, 7620,000) = 0
    [7620,000, 7625,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   7542,034 ms/op
     p(50,0000) =   7562,919 ms/op
     p(90,0000) =   7622,338 ms/op
     p(95,0000) =   7622,338 ms/op
     p(99,0000) =   7622,338 ms/op
     p(99,9000) =   7622,338 ms/op
     p(99,9900) =   7622,338 ms/op
     p(99,9990) =   7622,338 ms/op
     p(99,9999) =   7622,338 ms/op
    p(100,0000) =   7622,338 ms/op


# Run complete. Total time: 00:02:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest     10000000           get    ss    8  7572,425 ± 56,903  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (10000000) = 7572.425459
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6114,572 ms/op
# Warmup Iteration   2: 6145,437 ms/op
# Warmup Iteration   3: 6136,264 ms/op
# Warmup Iteration   4: 6045,529 ms/op
# Warmup Iteration   5: 6065,563 ms/op
# Warmup Iteration   6: 6087,366 ms/op
# Warmup Iteration   7: 6055,518 ms/op
# Warmup Iteration   8: 6170,659 ms/op
# Warmup Iteration   9: 6063,055 ms/op
# Warmup Iteration  10: 6134,752 ms/op
Iteration   1: 6043,517 ms/op
Iteration   2: 6048,545 ms/op
Iteration   3: 6067,426 ms/op
Iteration   4: 6056,934 ms/op
Iteration   5: 6057,390 ms/op
Iteration   6: 6076,288 ms/op
Iteration   7: 6115,269 ms/op
Iteration   8: 6092,643 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6069,751 ±(99.9%) 46,267 ms/op

  Histogram, ms/op:
    [6040,000, 6045,000) = 1
    [6045,000, 6050,000) = 1
    [6050,000, 6055,000) = 0
    [6055,000, 6060,000) = 2
    [6060,000, 6065,000) = 0
    [6065,000, 6070,000) = 1
    [6070,000, 6075,000) = 0
    [6075,000, 6080,000) = 1
    [6080,000, 6085,000) = 0
    [6085,000, 6090,000) = 0
    [6090,000, 6095,000) = 1
    [6095,000, 6100,000) = 0
    [6100,000, 6105,000) = 0
    [6105,000, 6110,000) = 0
    [6110,000, 6115,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6043,517 ms/op
     p(50,0000) =   6062,408 ms/op
     p(90,0000) =   6115,269 ms/op
     p(95,0000) =   6115,269 ms/op
     p(99,0000) =   6115,269 ms/op
     p(99,9000) =   6115,269 ms/op
     p(99,9900) =   6115,269 ms/op
     p(99,9990) =   6115,269 ms/op
     p(99,9999) =   6115,269 ms/op
    p(100,0000) =   6115,269 ms/op


# Run complete. Total time: 00:01:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest     10000000           get    ss    8  6069,751 ± 46,267  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (10000000) = 6069.751454374999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7537,479 ms/op
# Warmup Iteration   2: 7347,595 ms/op
# Warmup Iteration   3: 7308,080 ms/op
# Warmup Iteration   4: 7387,919 ms/op
# Warmup Iteration   5: 7350,885 ms/op
# Warmup Iteration   6: 7399,512 ms/op
# Warmup Iteration   7: 7455,518 ms/op
# Warmup Iteration   8: 7378,064 ms/op
# Warmup Iteration   9: 7364,393 ms/op
# Warmup Iteration  10: 7403,962 ms/op
Iteration   1: 7378,049 ms/op
Iteration   2: 7400,284 ms/op
Iteration   3: 7367,022 ms/op
Iteration   4: 7358,882 ms/op
Iteration   5: 7362,467 ms/op
Iteration   6: 7428,142 ms/op
Iteration   7: 7270,908 ms/op
Iteration   8: 7381,373 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7368,391 ±(99.9%) 86,958 ms/op

  Histogram, ms/op:
    [7200,000, 7225,000) = 0
    [7225,000, 7250,000) = 0
    [7250,000, 7275,000) = 1
    [7275,000, 7300,000) = 0
    [7300,000, 7325,000) = 0
    [7325,000, 7350,000) = 0
    [7350,000, 7375,000) = 3
    [7375,000, 7400,000) = 2
    [7400,000, 7425,000) = 1
    [7425,000, 7450,000) = 1
    [7450,000, 7475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   7270,908 ms/op
     p(50,0000) =   7372,536 ms/op
     p(90,0000) =   7428,142 ms/op
     p(95,0000) =   7428,142 ms/op
     p(99,0000) =   7428,142 ms/op
     p(99,9000) =   7428,142 ms/op
     p(99,9900) =   7428,142 ms/op
     p(99,9990) =   7428,142 ms/op
     p(99,9999) =   7428,142 ms/op
    p(100,0000) =   7428,142 ms/op


# Run complete. Total time: 00:02:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest     10000000           get    ss    8  7368,391 ± 86,958  ms/op
tests.maptests.object.HppcObjMapTest (10000000) = 7368.3912095000005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7206,675 ms/op
# Warmup Iteration   2: 7268,288 ms/op
# Warmup Iteration   3: 7188,274 ms/op
# Warmup Iteration   4: 7205,583 ms/op
# Warmup Iteration   5: 7175,833 ms/op
# Warmup Iteration   6: 7214,334 ms/op
# Warmup Iteration   7: 7195,316 ms/op
# Warmup Iteration   8: 7204,934 ms/op
# Warmup Iteration   9: 7209,996 ms/op
# Warmup Iteration  10: 7216,427 ms/op
Iteration   1: 7262,066 ms/op
Iteration   2: 7228,563 ms/op
Iteration   3: 7236,515 ms/op
Iteration   4: 7216,521 ms/op
Iteration   5: 7192,826 ms/op
Iteration   6: 7233,682 ms/op
Iteration   7: 7202,919 ms/op
Iteration   8: 7235,331 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7226,053 ±(99.9%) 41,432 ms/op

  Histogram, ms/op:
    [7190,000, 7195,000) = 1
    [7195,000, 7200,000) = 0
    [7200,000, 7205,000) = 1
    [7205,000, 7210,000) = 0
    [7210,000, 7215,000) = 0
    [7215,000, 7220,000) = 1
    [7220,000, 7225,000) = 0
    [7225,000, 7230,000) = 1
    [7230,000, 7235,000) = 1
    [7235,000, 7240,000) = 2
    [7240,000, 7245,000) = 0
    [7245,000, 7250,000) = 0
    [7250,000, 7255,000) = 0
    [7255,000, 7260,000) = 0
    [7260,000, 7265,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   7192,826 ms/op
     p(50,0000) =   7231,122 ms/op
     p(90,0000) =   7262,066 ms/op
     p(95,0000) =   7262,066 ms/op
     p(99,0000) =   7262,066 ms/op
     p(99,9000) =   7262,066 ms/op
     p(99,9900) =   7262,066 ms/op
     p(99,9990) =   7262,066 ms/op
     p(99,9999) =   7262,066 ms/op
    p(100,0000) =   7262,066 ms/op


# Run complete. Total time: 00:02:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest     10000000           get    ss    8  7226,053 ± 41,432  ms/op
tests.maptests.object.GsObjMapTest (10000000) = 7226.0528715
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6163,710 ms/op
# Warmup Iteration   2: 6148,836 ms/op
# Warmup Iteration   3: 6112,244 ms/op
# Warmup Iteration   4: 6183,073 ms/op
# Warmup Iteration   5: 6243,558 ms/op
# Warmup Iteration   6: 6142,847 ms/op
# Warmup Iteration   7: 6089,224 ms/op
# Warmup Iteration   8: 6133,123 ms/op
# Warmup Iteration   9: 6243,122 ms/op
# Warmup Iteration  10: 6181,207 ms/op
Iteration   1: 6075,099 ms/op
Iteration   2: 6200,536 ms/op
Iteration   3: 6210,519 ms/op
Iteration   4: 6074,361 ms/op
Iteration   5: 6108,663 ms/op
Iteration   6: 6123,945 ms/op
Iteration   7: 6117,037 ms/op
Iteration   8: 6178,217 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6136,047 ±(99.9%) 102,863 ms/op

  Histogram, ms/op:
    [6000,000, 6025,000) = 0
    [6025,000, 6050,000) = 0
    [6050,000, 6075,000) = 1
    [6075,000, 6100,000) = 1
    [6100,000, 6125,000) = 3
    [6125,000, 6150,000) = 0
    [6150,000, 6175,000) = 0
    [6175,000, 6200,000) = 1
    [6200,000, 6225,000) = 2
    [6225,000, 6250,000) = 0
    [6250,000, 6275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6074,361 ms/op
     p(50,0000) =   6120,491 ms/op
     p(90,0000) =   6210,519 ms/op
     p(95,0000) =   6210,519 ms/op
     p(99,0000) =   6210,519 ms/op
     p(99,9000) =   6210,519 ms/op
     p(99,9900) =   6210,519 ms/op
     p(99,9990) =   6210,519 ms/op
     p(99,9999) =   6210,519 ms/op
    p(100,0000) =   6210,519 ms/op


# Run complete. Total time: 00:01:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest     10000000           get    ss    8  6136,047 ± 102,863  ms/op
tests.maptests.object.JdkMapTest (10000000) = 6136.047106250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4876,742 ms/op
# Warmup Iteration   2: 5256,962 ms/op
# Warmup Iteration   3: 5075,205 ms/op
# Warmup Iteration   4: 5011,228 ms/op
# Warmup Iteration   5: 5052,928 ms/op
# Warmup Iteration   6: 5093,477 ms/op
# Warmup Iteration   7: 5139,892 ms/op
# Warmup Iteration   8: 5168,329 ms/op
# Warmup Iteration   9: 5069,561 ms/op
# Warmup Iteration  10: 5104,922 ms/op
Iteration   1: 5135,844 ms/op
Iteration   2: 5135,265 ms/op
Iteration   3: 5151,080 ms/op
Iteration   4: 5204,644 ms/op
Iteration   5: 5057,032 ms/op
Iteration   6: 5148,716 ms/op
Iteration   7: 5070,551 ms/op
Iteration   8: 5106,892 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5126,253 ±(99.9%) 90,573 ms/op

  Histogram, ms/op:
    [5000,000, 5025,000) = 0
    [5025,000, 5050,000) = 0
    [5050,000, 5075,000) = 2
    [5075,000, 5100,000) = 0
    [5100,000, 5125,000) = 1
    [5125,000, 5150,000) = 3
    [5150,000, 5175,000) = 1
    [5175,000, 5200,000) = 0
    [5200,000, 5225,000) = 1
    [5225,000, 5250,000) = 0
    [5250,000, 5275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5057,032 ms/op
     p(50,0000) =   5135,555 ms/op
     p(90,0000) =   5204,644 ms/op
     p(95,0000) =   5204,644 ms/op
     p(99,0000) =   5204,644 ms/op
     p(99,9000) =   5204,644 ms/op
     p(99,9900) =   5204,644 ms/op
     p(99,9990) =   5204,644 ms/op
     p(99,9999) =   5204,644 ms/op
    p(100,0000) =   5204,644 ms/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity     10000000           get    ss    8  5126,253 ± 90,573  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (10000000) = 5126.253060375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12573,100 ms/op
# Warmup Iteration   2: 12589,491 ms/op
# Warmup Iteration   3: 12584,610 ms/op
# Warmup Iteration   4: 12656,243 ms/op
# Warmup Iteration   5: 12579,500 ms/op
# Warmup Iteration   6: 12589,544 ms/op
# Warmup Iteration   7: 12585,920 ms/op
# Warmup Iteration   8: 12709,135 ms/op
# Warmup Iteration   9: 12695,832 ms/op
# Warmup Iteration  10: 12592,217 ms/op
Iteration   1: 12597,266 ms/op
Iteration   2: 12596,344 ms/op
Iteration   3: 12549,060 ms/op
Iteration   4: 12604,105 ms/op
Iteration   5: 12552,123 ms/op
Iteration   6: 12652,459 ms/op
Iteration   7: 12750,242 ms/op
Iteration   8: 12699,845 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12625,180 ±(99.9%) 135,478 ms/op

  Histogram, ms/op:
    [12500,000, 12525,000) = 0
    [12525,000, 12550,000) = 1
    [12550,000, 12575,000) = 1
    [12575,000, 12600,000) = 2
    [12600,000, 12625,000) = 1
    [12625,000, 12650,000) = 0
    [12650,000, 12675,000) = 1
    [12675,000, 12700,000) = 1
    [12700,000, 12725,000) = 0
    [12725,000, 12750,000) = 0
    [12750,000, 12775,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  12549,060 ms/op
     p(50,0000) =  12600,685 ms/op
     p(90,0000) =  12750,242 ms/op
     p(95,0000) =  12750,242 ms/op
     p(99,0000) =  12750,242 ms/op
     p(99,9000) =  12750,242 ms/op
     p(99,9900) =  12750,242 ms/op
     p(99,9990) =  12750,242 ms/op
     p(99,9999) =  12750,242 ms/op
    p(100,0000) =  12750,242 ms/op


# Run complete. Total time: 00:03:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest     10000000           get    ss    8  12625,180 ± 135,478  ms/op
tests.maptests.object.TroveJbObjMapTest (10000000) = 12625.180347375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12977,115 ms/op
# Warmup Iteration   2: 13110,073 ms/op
# Warmup Iteration   3: 12961,619 ms/op
# Warmup Iteration   4: 12960,571 ms/op
# Warmup Iteration   5: 13004,100 ms/op
# Warmup Iteration   6: 13035,882 ms/op
# Warmup Iteration   7: 12945,667 ms/op
# Warmup Iteration   8: 12968,238 ms/op
# Warmup Iteration   9: 13074,103 ms/op
# Warmup Iteration  10: 13138,106 ms/op
Iteration   1: 13012,010 ms/op
Iteration   2: 12999,152 ms/op
Iteration   3: 12954,371 ms/op
Iteration   4: 13002,769 ms/op
Iteration   5: 12996,254 ms/op
Iteration   6: 12931,727 ms/op
Iteration   7: 13176,477 ms/op
Iteration   8: 13128,962 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13025,215 ±(99.9%) 160,942 ms/op

  Histogram, ms/op:
    [12900,000, 12925,000) = 0
    [12925,000, 12950,000) = 1
    [12950,000, 12975,000) = 1
    [12975,000, 13000,000) = 2
    [13000,000, 13025,000) = 2
    [13025,000, 13050,000) = 0
    [13050,000, 13075,000) = 0
    [13075,000, 13100,000) = 0
    [13100,000, 13125,000) = 0
    [13125,000, 13150,000) = 1
    [13150,000, 13175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  12931,727 ms/op
     p(50,0000) =  13000,961 ms/op
     p(90,0000) =  13176,477 ms/op
     p(95,0000) =  13176,477 ms/op
     p(99,0000) =  13176,477 ms/op
     p(99,9000) =  13176,477 ms/op
     p(99,9900) =  13176,477 ms/op
     p(99,9990) =  13176,477 ms/op
     p(99,9999) =  13176,477 ms/op
    p(100,0000) =  13176,477 ms/op


# Run complete. Total time: 00:04:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest     10000000           get    ss    8  13025,215 ± 160,942  ms/op
tests.maptests.object.TroveObjMapTest (10000000) = 13025.215404625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6180,728 ms/op
# Warmup Iteration   2: 6110,206 ms/op
# Warmup Iteration   3: 6124,257 ms/op
# Warmup Iteration   4: 6062,726 ms/op
# Warmup Iteration   5: 6070,427 ms/op
# Warmup Iteration   6: 6095,725 ms/op
# Warmup Iteration   7: 6039,721 ms/op
# Warmup Iteration   8: 6064,577 ms/op
# Warmup Iteration   9: 5982,746 ms/op
# Warmup Iteration  10: 6090,807 ms/op
Iteration   1: 6126,279 ms/op
Iteration   2: 6090,939 ms/op
Iteration   3: 6094,364 ms/op
Iteration   4: 6183,536 ms/op
Iteration   5: 6066,923 ms/op
Iteration   6: 6118,625 ms/op
Iteration   7: 6132,698 ms/op
Iteration   8: 6103,603 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6114,621 ±(99.9%) 67,000 ms/op

  Histogram, ms/op:
    [6000,000, 6012,500) = 0
    [6012,500, 6025,000) = 0
    [6025,000, 6037,500) = 0
    [6037,500, 6050,000) = 0
    [6050,000, 6062,500) = 0
    [6062,500, 6075,000) = 1
    [6075,000, 6087,500) = 0
    [6087,500, 6100,000) = 2
    [6100,000, 6112,500) = 1
    [6112,500, 6125,000) = 1
    [6125,000, 6137,500) = 2
    [6137,500, 6150,000) = 0
    [6150,000, 6162,500) = 0
    [6162,500, 6175,000) = 0
    [6175,000, 6187,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   6066,923 ms/op
     p(50,0000) =   6111,114 ms/op
     p(90,0000) =   6183,536 ms/op
     p(95,0000) =   6183,536 ms/op
     p(99,0000) =   6183,536 ms/op
     p(99,9000) =   6183,536 ms/op
     p(99,9900) =   6183,536 ms/op
     p(99,9990) =   6183,536 ms/op
     p(99,9999) =   6183,536 ms/op
    p(100,0000) =   6183,536 ms/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest     10000000           get    ss    8  6114,621 ± 67,000  ms/op
tests.maptests.article_examples.ObjObjMapTest (10000000) = 6114.62089625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4334,858 ms/op
# Warmup Iteration   2: 4284,786 ms/op
# Warmup Iteration   3: 4280,296 ms/op
# Warmup Iteration   4: 4326,384 ms/op
# Warmup Iteration   5: 4287,189 ms/op
# Warmup Iteration   6: 4320,358 ms/op
# Warmup Iteration   7: 4289,412 ms/op
# Warmup Iteration   8: 4301,356 ms/op
# Warmup Iteration   9: 4280,457 ms/op
# Warmup Iteration  10: 4273,907 ms/op
Iteration   1: 4311,752 ms/op
Iteration   2: 4316,094 ms/op
Iteration   3: 4290,050 ms/op
Iteration   4: 4269,857 ms/op
Iteration   5: 4300,279 ms/op
Iteration   6: 4286,197 ms/op
Iteration   7: 4296,972 ms/op
Iteration   8: 4319,293 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4298,812 ±(99.9%) 32,038 ms/op

  Histogram, ms/op:
    [4260,000, 4265,000) = 0
    [4265,000, 4270,000) = 1
    [4270,000, 4275,000) = 0
    [4275,000, 4280,000) = 0
    [4280,000, 4285,000) = 0
    [4285,000, 4290,000) = 1
    [4290,000, 4295,000) = 1
    [4295,000, 4300,000) = 1
    [4300,000, 4305,000) = 1
    [4305,000, 4310,000) = 0
    [4310,000, 4315,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   4269,857 ms/op
     p(50,0000) =   4298,625 ms/op
     p(90,0000) =   4319,293 ms/op
     p(95,0000) =   4319,293 ms/op
     p(99,0000) =   4319,293 ms/op
     p(99,9000) =   4319,293 ms/op
     p(99,9900) =   4319,293 ms/op
     p(99,9990) =   4319,293 ms/op
     p(99,9999) =   4319,293 ms/op
    p(100,0000) =   4319,293 ms/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest     10000000           get    ss    8  4298,812 ± 32,038  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (10000000) = 4298.811728375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4758,733 ms/op
# Warmup Iteration   2: 4778,837 ms/op
# Warmup Iteration   3: 4747,209 ms/op
# Warmup Iteration   4: 4746,441 ms/op
# Warmup Iteration   5: 4771,283 ms/op
# Warmup Iteration   6: 4780,812 ms/op
# Warmup Iteration   7: 4775,785 ms/op
# Warmup Iteration   8: 4742,024 ms/op
# Warmup Iteration   9: 4738,448 ms/op
# Warmup Iteration  10: 4797,709 ms/op
Iteration   1: 4746,403 ms/op
Iteration   2: 4754,377 ms/op
Iteration   3: 4787,839 ms/op
Iteration   4: 4706,060 ms/op
Iteration   5: 4757,938 ms/op
Iteration   6: 4763,248 ms/op
Iteration   7: 4760,920 ms/op
Iteration   8: 4773,167 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4756,244 ±(99.9%) 45,574 ms/op

  Histogram, ms/op:
    [4700,000, 4705,000) = 0
    [4705,000, 4710,000) = 1
    [4710,000, 4715,000) = 0
    [4715,000, 4720,000) = 0
    [4720,000, 4725,000) = 0
    [4725,000, 4730,000) = 0
    [4730,000, 4735,000) = 0
    [4735,000, 4740,000) = 0
    [4740,000, 4745,000) = 0
    [4745,000, 4750,000) = 1
    [4750,000, 4755,000) = 1
    [4755,000, 4760,000) = 1
    [4760,000, 4765,000) = 2
    [4765,000, 4770,000) = 0
    [4770,000, 4775,000) = 1
    [4775,000, 4780,000) = 0
    [4780,000, 4785,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4706,060 ms/op
     p(50,0000) =   4759,429 ms/op
     p(90,0000) =   4787,839 ms/op
     p(95,0000) =   4787,839 ms/op
     p(99,0000) =   4787,839 ms/op
     p(99,9000) =   4787,839 ms/op
     p(99,9900) =   4787,839 ms/op
     p(99,9990) =   4787,839 ms/op
     p(99,9999) =   4787,839 ms/op
    p(100,0000) =   4787,839 ms/op


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest     10000000           get    ss    8  4756,244 ± 45,574  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (10000000) = 4756.24388725
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4319,859 ms/op
# Warmup Iteration   2: 4311,923 ms/op
# Warmup Iteration   3: 4271,031 ms/op
# Warmup Iteration   4: 4324,065 ms/op
# Warmup Iteration   5: 4321,258 ms/op
# Warmup Iteration   6: 4293,419 ms/op
# Warmup Iteration   7: 4271,245 ms/op
# Warmup Iteration   8: 4312,505 ms/op
# Warmup Iteration   9: 4273,279 ms/op
# Warmup Iteration  10: 4341,232 ms/op
Iteration   1: 4323,726 ms/op
Iteration   2: 4249,113 ms/op
Iteration   3: 4287,230 ms/op
Iteration   4: 4130,153 ms/op
Iteration   5: 4324,323 ms/op
Iteration   6: 4275,377 ms/op
Iteration   7: 4296,726 ms/op
Iteration   8: 4266,507 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4269,144 ±(99.9%) 118,475 ms/op

  Histogram, ms/op:
    [4100,000, 4125,000) = 0
    [4125,000, 4150,000) = 1
    [4150,000, 4175,000) = 0
    [4175,000, 4200,000) = 0
    [4200,000, 4225,000) = 0
    [4225,000, 4250,000) = 1
    [4250,000, 4275,000) = 1
    [4275,000, 4300,000) = 3
    [4300,000, 4325,000) = 2
    [4325,000, 4350,000) = 0
    [4350,000, 4375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4130,153 ms/op
     p(50,0000) =   4281,304 ms/op
     p(90,0000) =   4324,323 ms/op
     p(95,0000) =   4324,323 ms/op
     p(99,0000) =   4324,323 ms/op
     p(99,9000) =   4324,323 ms/op
     p(99,9900) =   4324,323 ms/op
     p(99,9990) =   4324,323 ms/op
     p(99,9999) =   4324,323 ms/op
    p(100,0000) =   4324,323 ms/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest     10000000           get    ss    8  4269,144 ± 118,475  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (10000000) = 4269.14446625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4840,078 ms/op
# Warmup Iteration   2: 4772,589 ms/op
# Warmup Iteration   3: 4780,906 ms/op
# Warmup Iteration   4: 4769,657 ms/op
# Warmup Iteration   5: 4813,744 ms/op
# Warmup Iteration   6: 4776,347 ms/op
# Warmup Iteration   7: 4797,487 ms/op
# Warmup Iteration   8: 4853,376 ms/op
# Warmup Iteration   9: 4794,835 ms/op
# Warmup Iteration  10: 4761,606 ms/op
Iteration   1: 4785,861 ms/op
Iteration   2: 4798,835 ms/op
Iteration   3: 4784,185 ms/op
Iteration   4: 4761,459 ms/op
Iteration   5: 4764,128 ms/op
Iteration   6: 4801,193 ms/op
Iteration   7: 4767,637 ms/op
Iteration   8: 4818,771 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4785,259 ±(99.9%) 38,824 ms/op

  Histogram, ms/op:
    [4760,000, 4765,000) = 2
    [4765,000, 4770,000) = 1
    [4770,000, 4775,000) = 0
    [4775,000, 4780,000) = 0
    [4780,000, 4785,000) = 1
    [4785,000, 4790,000) = 1
    [4790,000, 4795,000) = 0
    [4795,000, 4800,000) = 1
    [4800,000, 4805,000) = 1
    [4805,000, 4810,000) = 0
    [4810,000, 4815,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4761,459 ms/op
     p(50,0000) =   4785,023 ms/op
     p(90,0000) =   4818,771 ms/op
     p(95,0000) =   4818,771 ms/op
     p(99,0000) =   4818,771 ms/op
     p(99,9000) =   4818,771 ms/op
     p(99,9900) =   4818,771 ms/op
     p(99,9990) =   4818,771 ms/op
     p(99,9999) =   4818,771 ms/op
    p(100,0000) =   4818,771 ms/op


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest     10000000           get    ss    8  4785,259 ± 38,824  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (10000000) = 4785.258708375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10248,520 ms/op
# Warmup Iteration   2: 10205,683 ms/op
# Warmup Iteration   3: 10201,890 ms/op
# Warmup Iteration   4: 10257,281 ms/op
# Warmup Iteration   5: 10202,283 ms/op
# Warmup Iteration   6: 10182,201 ms/op
# Warmup Iteration   7: 10204,233 ms/op
# Warmup Iteration   8: 10191,470 ms/op
# Warmup Iteration   9: 10172,431 ms/op
# Warmup Iteration  10: 10168,821 ms/op
Iteration   1: 10184,394 ms/op
Iteration   2: 10126,183 ms/op
Iteration   3: 10128,471 ms/op
Iteration   4: 10154,661 ms/op
Iteration   5: 10178,989 ms/op
Iteration   6: 10163,775 ms/op
Iteration   7: 10184,152 ms/op
Iteration   8: 10168,823 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10161,181 ±(99.9%) 44,466 ms/op

  Histogram, ms/op:
    [10120,000, 10125,000) = 0
    [10125,000, 10130,000) = 2
    [10130,000, 10135,000) = 0
    [10135,000, 10140,000) = 0
    [10140,000, 10145,000) = 0
    [10145,000, 10150,000) = 0
    [10150,000, 10155,000) = 1
    [10155,000, 10160,000) = 0
    [10160,000, 10165,000) = 1
    [10165,000, 10170,000) = 1
    [10170,000, 10175,000) = 0
    [10175,000, 10180,000) = 1
    [10180,000, 10185,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  10126,183 ms/op
     p(50,0000) =  10166,299 ms/op
     p(90,0000) =  10184,394 ms/op
     p(95,0000) =  10184,394 ms/op
     p(99,0000) =  10184,394 ms/op
     p(99,9000) =  10184,394 ms/op
     p(99,9900) =  10184,394 ms/op
     p(99,9990) =  10184,394 ms/op
     p(99,9999) =  10184,394 ms/op
    p(100,0000) =  10184,394 ms/op


# Run complete. Total time: 00:03:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest     10000000           get    ss    8  10161,181 ± 44,466  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (10000000) = 10161.180939875001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9611,815 ms/op
# Warmup Iteration   2: 9511,217 ms/op
# Warmup Iteration   3: 9541,770 ms/op
# Warmup Iteration   4: 9484,072 ms/op
# Warmup Iteration   5: 9494,570 ms/op
# Warmup Iteration   6: 9511,890 ms/op
# Warmup Iteration   7: 9508,388 ms/op
# Warmup Iteration   8: 9491,438 ms/op
# Warmup Iteration   9: 9493,432 ms/op
# Warmup Iteration  10: 9509,482 ms/op
Iteration   1: 9530,442 ms/op
Iteration   2: 9485,234 ms/op
Iteration   3: 9488,765 ms/op
Iteration   4: 9493,576 ms/op
Iteration   5: 9647,452 ms/op
Iteration   6: 9498,601 ms/op
Iteration   7: 9489,808 ms/op
Iteration   8: 9509,386 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9517,908 ±(99.9%) 103,929 ms/op

  Histogram, ms/op:
    [9400,000, 9425,000) = 0
    [9425,000, 9450,000) = 0
    [9450,000, 9475,000) = 0
    [9475,000, 9500,000) = 5
    [9500,000, 9525,000) = 1
    [9525,000, 9550,000) = 1
    [9550,000, 9575,000) = 0
    [9575,000, 9600,000) = 0
    [9600,000, 9625,000) = 0
    [9625,000, 9650,000) = 1
    [9650,000, 9675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9485,234 ms/op
     p(50,0000) =   9496,088 ms/op
     p(90,0000) =   9647,452 ms/op
     p(95,0000) =   9647,452 ms/op
     p(99,0000) =   9647,452 ms/op
     p(99,9000) =   9647,452 ms/op
     p(99,9900) =   9647,452 ms/op
     p(99,9990) =   9647,452 ms/op
     p(99,9999) =   9647,452 ms/op
    p(100,0000) =   9647,452 ms/op


# Run complete. Total time: 00:02:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest     10000000           get    ss    8  9517,908 ± 103,929  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (10000000) = 9517.9077645
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6456,513 ms/op
# Warmup Iteration   2: 6395,102 ms/op
# Warmup Iteration   3: 6305,002 ms/op
# Warmup Iteration   4: 6385,645 ms/op
# Warmup Iteration   5: 6436,623 ms/op
# Warmup Iteration   6: 6320,671 ms/op
# Warmup Iteration   7: 6314,447 ms/op
# Warmup Iteration   8: 6319,775 ms/op
# Warmup Iteration   9: 6300,346 ms/op
# Warmup Iteration  10: 6358,605 ms/op
Iteration   1: 6306,212 ms/op
Iteration   2: 6311,134 ms/op
Iteration   3: 6315,379 ms/op
Iteration   4: 6341,303 ms/op
Iteration   5: 6313,145 ms/op
Iteration   6: 6303,517 ms/op
Iteration   7: 6375,985 ms/op
Iteration   8: 6178,359 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6305,629 ±(99.9%) 108,656 ms/op

  Histogram, ms/op:
    [6100,000, 6125,000) = 0
    [6125,000, 6150,000) = 0
    [6150,000, 6175,000) = 0
    [6175,000, 6200,000) = 1
    [6200,000, 6225,000) = 0
    [6225,000, 6250,000) = 0
    [6250,000, 6275,000) = 0
    [6275,000, 6300,000) = 0
    [6300,000, 6325,000) = 5
    [6325,000, 6350,000) = 1
    [6350,000, 6375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6178,359 ms/op
     p(50,0000) =   6312,139 ms/op
     p(90,0000) =   6375,985 ms/op
     p(95,0000) =   6375,985 ms/op
     p(99,0000) =   6375,985 ms/op
     p(99,9000) =   6375,985 ms/op
     p(99,9900) =   6375,985 ms/op
     p(99,9990) =   6375,985 ms/op
     p(99,9999) =   6375,985 ms/op
    p(100,0000) =   6375,985 ms/op


# Run complete. Total time: 00:02:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest     10000000           get    ss    8  6305,629 ± 108,656  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (10000000) = 6305.6291845
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8329,434 ms/op
# Warmup Iteration   2: 8094,847 ms/op
# Warmup Iteration   3: 8386,095 ms/op
# Warmup Iteration   4: 8496,471 ms/op
# Warmup Iteration   5: 8299,733 ms/op
# Warmup Iteration   6: 8411,340 ms/op
# Warmup Iteration   7: 8405,019 ms/op
# Warmup Iteration   8: 8440,989 ms/op
# Warmup Iteration   9: 8463,927 ms/op
# Warmup Iteration  10: 8306,432 ms/op
Iteration   1: 8333,226 ms/op
Iteration   2: 8378,509 ms/op
Iteration   3: 8285,697 ms/op
Iteration   4: 8320,728 ms/op
Iteration   5: 8379,642 ms/op
Iteration   6: 8267,275 ms/op
Iteration   7: 8271,623 ms/op
Iteration   8: 8491,603 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8341,038 ±(99.9%) 143,370 ms/op

  Histogram, ms/op:
    [8200,000, 8225,000) = 0
    [8225,000, 8250,000) = 0
    [8250,000, 8275,000) = 2
    [8275,000, 8300,000) = 1
    [8300,000, 8325,000) = 1
    [8325,000, 8350,000) = 1
    [8350,000, 8375,000) = 0
    [8375,000, 8400,000) = 2
    [8400,000, 8425,000) = 0
    [8425,000, 8450,000) = 0
    [8450,000, 8475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8267,275 ms/op
     p(50,0000) =   8326,977 ms/op
     p(90,0000) =   8491,603 ms/op
     p(95,0000) =   8491,603 ms/op
     p(99,0000) =   8491,603 ms/op
     p(99,9000) =   8491,603 ms/op
     p(99,9900) =   8491,603 ms/op
     p(99,9990) =   8491,603 ms/op
     p(99,9999) =   8491,603 ms/op
    p(100,0000) =   8491,603 ms/op


# Run complete. Total time: 00:02:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest     10000000           get    ss    8  8341,038 ± 143,370  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (10000000) = 8341.037793000001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7145,005 ms/op
# Warmup Iteration   2: 7174,504 ms/op
# Warmup Iteration   3: 7379,121 ms/op
# Warmup Iteration   4: 7251,444 ms/op
# Warmup Iteration   5: 7170,677 ms/op
# Warmup Iteration   6: 7215,453 ms/op
# Warmup Iteration   7: 7224,968 ms/op
# Warmup Iteration   8: 7267,881 ms/op
# Warmup Iteration   9: 7204,327 ms/op
# Warmup Iteration  10: 7246,441 ms/op
Iteration   1: 7272,168 ms/op
Iteration   2: 7163,602 ms/op
Iteration   3: 7181,747 ms/op
Iteration   4: 7186,368 ms/op
Iteration   5: 7165,222 ms/op
Iteration   6: 7145,531 ms/op
Iteration   7: 7288,042 ms/op
Iteration   8: 7283,095 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7210,722 ±(99.9%) 114,182 ms/op

  Histogram, ms/op:
    [7100,000, 7112,500) = 0
    [7112,500, 7125,000) = 0
    [7125,000, 7137,500) = 0
    [7137,500, 7150,000) = 1
    [7150,000, 7162,500) = 0
    [7162,500, 7175,000) = 2
    [7175,000, 7187,500) = 2
    [7187,500, 7200,000) = 0
    [7200,000, 7212,500) = 0
    [7212,500, 7225,000) = 0
    [7225,000, 7237,500) = 0
    [7237,500, 7250,000) = 0
    [7250,000, 7262,500) = 0
    [7262,500, 7275,000) = 1
    [7275,000, 7287,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   7145,531 ms/op
     p(50,0000) =   7184,058 ms/op
     p(90,0000) =   7288,042 ms/op
     p(95,0000) =   7288,042 ms/op
     p(99,0000) =   7288,042 ms/op
     p(99,9000) =   7288,042 ms/op
     p(99,9900) =   7288,042 ms/op
     p(99,9990) =   7288,042 ms/op
     p(99,9999) =   7288,042 ms/op
    p(100,0000) =   7288,042 ms/op


# Run complete. Total time: 00:02:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest     10000000           get    ss    8  7210,722 ± 114,182  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (10000000) = 7210.7218325
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7103,571 ms/op
# Warmup Iteration   2: 7064,202 ms/op
# Warmup Iteration   3: 6964,521 ms/op
# Warmup Iteration   4: 7051,337 ms/op
# Warmup Iteration   5: 7051,009 ms/op
# Warmup Iteration   6: 7015,783 ms/op
# Warmup Iteration   7: 6957,541 ms/op
# Warmup Iteration   8: 7099,986 ms/op
# Warmup Iteration   9: 7014,607 ms/op
# Warmup Iteration  10: 7035,828 ms/op
Iteration   1: 7000,766 ms/op
Iteration   2: 6949,575 ms/op
Iteration   3: 6953,502 ms/op
Iteration   4: 7111,451 ms/op
Iteration   5: 6971,660 ms/op
Iteration   6: 6994,411 ms/op
Iteration   7: 6986,375 ms/op
Iteration   8: 7038,794 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7000,817 ±(99.9%) 101,291 ms/op

  Histogram, ms/op:
    [6900,000, 6925,000) = 0
    [6925,000, 6950,000) = 1
    [6950,000, 6975,000) = 2
    [6975,000, 7000,000) = 2
    [7000,000, 7025,000) = 1
    [7025,000, 7050,000) = 1
    [7050,000, 7075,000) = 0
    [7075,000, 7100,000) = 0
    [7100,000, 7125,000) = 1
    [7125,000, 7150,000) = 0
    [7150,000, 7175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6949,575 ms/op
     p(50,0000) =   6990,393 ms/op
     p(90,0000) =   7111,451 ms/op
     p(95,0000) =   7111,451 ms/op
     p(99,0000) =   7111,451 ms/op
     p(99,9000) =   7111,451 ms/op
     p(99,9900) =   7111,451 ms/op
     p(99,9990) =   7111,451 ms/op
     p(99,9999) =   7111,451 ms/op
    p(100,0000) =   7111,451 ms/op


# Run complete. Total time: 00:02:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest     10000000           get    ss    8  7000,817 ± 101,291  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (10000000) = 7000.816791
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12583,341 ms/op
# Warmup Iteration   2: 12558,054 ms/op
# Warmup Iteration   3: 12643,124 ms/op
# Warmup Iteration   4: 12575,574 ms/op
# Warmup Iteration   5: 12620,268 ms/op
# Warmup Iteration   6: 12644,001 ms/op
# Warmup Iteration   7: 12654,921 ms/op
# Warmup Iteration   8: 12631,017 ms/op
# Warmup Iteration   9: 12572,976 ms/op
# Warmup Iteration  10: 12577,155 ms/op
Iteration   1: 12654,720 ms/op
Iteration   2: 12605,958 ms/op
Iteration   3: 12523,481 ms/op
Iteration   4: 12608,126 ms/op
Iteration   5: 12677,986 ms/op
Iteration   6: 12644,658 ms/op
Iteration   7: 12800,423 ms/op
Iteration   8: 12763,337 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12659,836 ±(99.9%) 169,837 ms/op

  Histogram, ms/op:
    [12500,000, 12525,000) = 1
    [12525,000, 12550,000) = 0
    [12550,000, 12575,000) = 0
    [12575,000, 12600,000) = 0
    [12600,000, 12625,000) = 2
    [12625,000, 12650,000) = 1
    [12650,000, 12675,000) = 1
    [12675,000, 12700,000) = 1
    [12700,000, 12725,000) = 0
    [12725,000, 12750,000) = 0
    [12750,000, 12775,000) = 1
    [12775,000, 12800,000) = 0
    [12800,000, 12825,000) = 1
    [12825,000, 12850,000) = 0
    [12850,000, 12875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  12523,481 ms/op
     p(50,0000) =  12649,689 ms/op
     p(90,0000) =  12800,423 ms/op
     p(95,0000) =  12800,423 ms/op
     p(99,0000) =  12800,423 ms/op
     p(99,9000) =  12800,423 ms/op
     p(99,9900) =  12800,423 ms/op
     p(99,9990) =  12800,423 ms/op
     p(99,9999) =  12800,423 ms/op
    p(100,0000) =  12800,423 ms/op


# Run complete. Total time: 00:03:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest     10000000           get    ss    8  12659,836 ± 169,837  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (10000000) = 12659.835921625001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12345,214 ms/op
# Warmup Iteration   2: 12101,850 ms/op
# Warmup Iteration   3: 12220,386 ms/op
# Warmup Iteration   4: 12093,693 ms/op
# Warmup Iteration   5: 12156,315 ms/op
# Warmup Iteration   6: 12117,713 ms/op
# Warmup Iteration   7: 12169,540 ms/op
# Warmup Iteration   8: 12135,886 ms/op
# Warmup Iteration   9: 12235,626 ms/op
# Warmup Iteration  10: 12212,431 ms/op
Iteration   1: 12127,310 ms/op
Iteration   2: 12170,936 ms/op
Iteration   3: 12141,934 ms/op
Iteration   4: 12141,555 ms/op
Iteration   5: 12153,503 ms/op
Iteration   6: 12107,323 ms/op
Iteration   7: 12237,649 ms/op
Iteration   8: 12247,406 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12165,952 ±(99.9%) 97,110 ms/op

  Histogram, ms/op:
    [12100,000, 12112,500) = 1
    [12112,500, 12125,000) = 0
    [12125,000, 12137,500) = 1
    [12137,500, 12150,000) = 2
    [12150,000, 12162,500) = 1
    [12162,500, 12175,000) = 1
    [12175,000, 12187,500) = 0
    [12187,500, 12200,000) = 0
    [12200,000, 12212,500) = 0
    [12212,500, 12225,000) = 0
    [12225,000, 12237,500) = 0
    [12237,500, 12250,000) = 2
    [12250,000, 12262,500) = 0
    [12262,500, 12275,000) = 0
    [12275,000, 12287,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  12107,323 ms/op
     p(50,0000) =  12147,718 ms/op
     p(90,0000) =  12247,406 ms/op
     p(95,0000) =  12247,406 ms/op
     p(99,0000) =  12247,406 ms/op
     p(99,9000) =  12247,406 ms/op
     p(99,9900) =  12247,406 ms/op
     p(99,9990) =  12247,406 ms/op
     p(99,9999) =  12247,406 ms/op
    p(100,0000) =  12247,406 ms/op


# Run complete. Total time: 00:03:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest     10000000           get    ss    8  12165,952 ± 97,110  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (10000000) = 12165.951911
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5551,480 ms/op
# Warmup Iteration   2: 3783,486 ms/op
# Warmup Iteration   3: 3860,119 ms/op
# Warmup Iteration   4: 3847,643 ms/op
# Warmup Iteration   5: 3942,531 ms/op
# Warmup Iteration   6: 3881,847 ms/op
# Warmup Iteration   7: 3806,928 ms/op
# Warmup Iteration   8: 3900,329 ms/op
# Warmup Iteration   9: 3812,368 ms/op
# Warmup Iteration  10: 4070,926 ms/op
Iteration   1: 3883,130 ms/op
Iteration   2: 3887,776 ms/op
Iteration   3: 3818,969 ms/op
Iteration   4: 3890,786 ms/op
Iteration   5: 3776,842 ms/op
Iteration   6: 3891,029 ms/op
Iteration   7: 3905,664 ms/op
Iteration   8: 3791,726 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3855,740 ±(99.9%) 98,073 ms/op

  Histogram, ms/op:
    [3700,000, 3725,000) = 0
    [3725,000, 3750,000) = 0
    [3750,000, 3775,000) = 0
    [3775,000, 3800,000) = 2
    [3800,000, 3825,000) = 1
    [3825,000, 3850,000) = 0
    [3850,000, 3875,000) = 0
    [3875,000, 3900,000) = 4
    [3900,000, 3925,000) = 1
    [3925,000, 3950,000) = 0
    [3950,000, 3975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3776,842 ms/op
     p(50,0000) =   3885,453 ms/op
     p(90,0000) =   3905,664 ms/op
     p(95,0000) =   3905,664 ms/op
     p(99,0000) =   3905,664 ms/op
     p(99,9000) =   3905,664 ms/op
     p(99,9900) =   3905,664 ms/op
     p(99,9990) =   3905,664 ms/op
     p(99,9999) =   3905,664 ms/op
    p(100,0000) =   3905,664 ms/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest     10000000           get    ss    8  3855,740 ± 98,073  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (10000000) = 3855.740357875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6362,873 ms/op
# Warmup Iteration   2: 4701,931 ms/op
# Warmup Iteration   3: 4565,870 ms/op
# Warmup Iteration   4: 4612,817 ms/op
# Warmup Iteration   5: 4573,009 ms/op
# Warmup Iteration   6: 4512,546 ms/op
# Warmup Iteration   7: 4501,582 ms/op
# Warmup Iteration   8: 4553,138 ms/op
# Warmup Iteration   9: 4549,539 ms/op
# Warmup Iteration  10: 4525,785 ms/op
Iteration   1: 4541,080 ms/op
Iteration   2: 4636,168 ms/op
Iteration   3: 4562,322 ms/op
Iteration   4: 4521,462 ms/op
Iteration   5: 4510,332 ms/op
Iteration   6: 4515,809 ms/op
Iteration   7: 4591,069 ms/op
Iteration   8: 4535,839 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4551,760 ±(99.9%) 82,635 ms/op

  Histogram, ms/op:
    [4500,000, 4512,500) = 1
    [4512,500, 4525,000) = 2
    [4525,000, 4537,500) = 1
    [4537,500, 4550,000) = 1
    [4550,000, 4562,500) = 1
    [4562,500, 4575,000) = 0
    [4575,000, 4587,500) = 0
    [4587,500, 4600,000) = 1
    [4600,000, 4612,500) = 0
    [4612,500, 4625,000) = 0
    [4625,000, 4637,500) = 1
    [4637,500, 4650,000) = 0
    [4650,000, 4662,500) = 0
    [4662,500, 4675,000) = 0
    [4675,000, 4687,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4510,332 ms/op
     p(50,0000) =   4538,459 ms/op
     p(90,0000) =   4636,168 ms/op
     p(95,0000) =   4636,168 ms/op
     p(99,0000) =   4636,168 ms/op
     p(99,9000) =   4636,168 ms/op
     p(99,9900) =   4636,168 ms/op
     p(99,9990) =   4636,168 ms/op
     p(99,9999) =   4636,168 ms/op
    p(100,0000) =   4636,168 ms/op


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest     10000000           get    ss    8  4551,760 ± 82,635  ms/op
tests.maptests.identity_object.GsIdentityMapTest (10000000) = 4551.76003325
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6097,198 ms/op
# Warmup Iteration   2: 4305,326 ms/op
# Warmup Iteration   3: 4313,934 ms/op
# Warmup Iteration   4: 4303,368 ms/op
# Warmup Iteration   5: 4314,911 ms/op
# Warmup Iteration   6: 4303,602 ms/op
# Warmup Iteration   7: 4350,203 ms/op
# Warmup Iteration   8: 4272,948 ms/op
# Warmup Iteration   9: 4276,014 ms/op
# Warmup Iteration  10: 4272,308 ms/op
Iteration   1: 4283,603 ms/op
Iteration   2: 4466,784 ms/op
Iteration   3: 4287,669 ms/op
Iteration   4: 4269,700 ms/op
Iteration   5: 4329,414 ms/op
Iteration   6: 4302,461 ms/op
Iteration   7: 4343,732 ms/op
Iteration   8: 4269,692 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4319,132 ±(99.9%) 125,022 ms/op

  Histogram, ms/op:
    [4200,000, 4225,000) = 0
    [4225,000, 4250,000) = 0
    [4250,000, 4275,000) = 2
    [4275,000, 4300,000) = 2
    [4300,000, 4325,000) = 1
    [4325,000, 4350,000) = 2
    [4350,000, 4375,000) = 0
    [4375,000, 4400,000) = 0
    [4400,000, 4425,000) = 0
    [4425,000, 4450,000) = 0
    [4450,000, 4475,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   4269,692 ms/op
     p(50,0000) =   4295,065 ms/op
     p(90,0000) =   4466,784 ms/op
     p(95,0000) =   4466,784 ms/op
     p(99,0000) =   4466,784 ms/op
     p(99,9000) =   4466,784 ms/op
     p(99,9900) =   4466,784 ms/op
     p(99,9990) =   4466,784 ms/op
     p(99,9999) =   4466,784 ms/op
    p(100,0000) =   4466,784 ms/op


# Run complete. Total time: 00:01:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest     10000000           get    ss    8  4319,132 ± 125,022  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (10000000) = 4319.131693
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6039,480 ms/op
# Warmup Iteration   2: 4315,598 ms/op
# Warmup Iteration   3: 4307,447 ms/op
# Warmup Iteration   4: 4334,354 ms/op
# Warmup Iteration   5: 4337,206 ms/op
# Warmup Iteration   6: 4327,961 ms/op
# Warmup Iteration   7: 4317,072 ms/op
# Warmup Iteration   8: 4193,889 ms/op
# Warmup Iteration   9: 4325,049 ms/op
# Warmup Iteration  10: 4315,231 ms/op
Iteration   1: 4299,553 ms/op
Iteration   2: 4377,733 ms/op
Iteration   3: 4357,256 ms/op
Iteration   4: 4306,662 ms/op
Iteration   5: 4317,433 ms/op
Iteration   6: 4340,230 ms/op
Iteration   7: 4296,400 ms/op
Iteration   8: 4380,056 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4334,415 ±(99.9%) 65,576 ms/op

  Histogram, ms/op:
    [4290,000, 4300,000) = 2
    [4300,000, 4310,000) = 1
    [4310,000, 4320,000) = 1
    [4320,000, 4330,000) = 0
    [4330,000, 4340,000) = 0
    [4340,000, 4350,000) = 1
    [4350,000, 4360,000) = 1
    [4360,000, 4370,000) = 0
    [4370,000, 4380,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   4296,400 ms/op
     p(50,0000) =   4328,832 ms/op
     p(90,0000) =   4380,056 ms/op
     p(95,0000) =   4380,056 ms/op
     p(99,0000) =   4380,056 ms/op
     p(99,9000) =   4380,056 ms/op
     p(99,9900) =   4380,056 ms/op
     p(99,9990) =   4380,056 ms/op
     p(99,9999) =   4380,056 ms/op
    p(100,0000) =   4380,056 ms/op


# Run complete. Total time: 00:01:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest     10000000           get    ss    8  4334,415 ± 65,576  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (10000000) = 4334.41527625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8518,408 ms/op
# Warmup Iteration   2: 6914,674 ms/op
# Warmup Iteration   3: 6929,832 ms/op
# Warmup Iteration   4: 6934,451 ms/op
# Warmup Iteration   5: 6960,046 ms/op
# Warmup Iteration   6: 6972,949 ms/op
# Warmup Iteration   7: 6875,896 ms/op
# Warmup Iteration   8: 7029,686 ms/op
# Warmup Iteration   9: 6908,685 ms/op
# Warmup Iteration  10: 6956,878 ms/op
Iteration   1: 6923,676 ms/op
Iteration   2: 6942,650 ms/op
Iteration   3: 6985,826 ms/op
Iteration   4: 6986,311 ms/op
Iteration   5: 6980,831 ms/op
Iteration   6: 7020,395 ms/op
Iteration   7: 7012,420 ms/op
Iteration   8: 6923,011 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6971,890 ±(99.9%) 72,433 ms/op

  Histogram, ms/op:
    [6920,000, 6930,000) = 2
    [6930,000, 6940,000) = 0
    [6940,000, 6950,000) = 1
    [6950,000, 6960,000) = 0
    [6960,000, 6970,000) = 0
    [6970,000, 6980,000) = 0
    [6980,000, 6990,000) = 3
    [6990,000, 7000,000) = 0
    [7000,000, 7010,000) = 0
    [7010,000, 7020,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   6923,011 ms/op
     p(50,0000) =   6983,329 ms/op
     p(90,0000) =   7020,395 ms/op
     p(95,0000) =   7020,395 ms/op
     p(99,0000) =   7020,395 ms/op
     p(99,9000) =   7020,395 ms/op
     p(99,9900) =   7020,395 ms/op
     p(99,9990) =   7020,395 ms/op
     p(99,9999) =   7020,395 ms/op
    p(100,0000) =   7020,395 ms/op


# Run complete. Total time: 00:02:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest     10000000           get    ss    8  6971,890 ± 72,433  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (10000000) = 6971.889985125001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11559,775 ms/op
# Warmup Iteration   2: 9687,102 ms/op
# Warmup Iteration   3: 9716,330 ms/op
# Warmup Iteration   4: 9681,289 ms/op
# Warmup Iteration   5: 9811,069 ms/op
# Warmup Iteration   6: 9685,049 ms/op
# Warmup Iteration   7: 9713,065 ms/op
# Warmup Iteration   8: 9759,495 ms/op
# Warmup Iteration   9: 9717,189 ms/op
# Warmup Iteration  10: 9720,079 ms/op
Iteration   1: 9711,250 ms/op
Iteration   2: 9692,135 ms/op
Iteration   3: 9719,888 ms/op
Iteration   4: 9777,162 ms/op
Iteration   5: 9724,316 ms/op
Iteration   6: 9744,931 ms/op
Iteration   7: 9683,682 ms/op
Iteration   8: 9791,935 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9730,662 ±(99.9%) 73,502 ms/op

  Histogram, ms/op:
    [9600,000, 9612,500) = 0
    [9612,500, 9625,000) = 0
    [9625,000, 9637,500) = 0
    [9637,500, 9650,000) = 0
    [9650,000, 9662,500) = 0
    [9662,500, 9675,000) = 0
    [9675,000, 9687,500) = 1
    [9687,500, 9700,000) = 1
    [9700,000, 9712,500) = 1
    [9712,500, 9725,000) = 2
    [9725,000, 9737,500) = 0
    [9737,500, 9750,000) = 1
    [9750,000, 9762,500) = 0
    [9762,500, 9775,000) = 0
    [9775,000, 9787,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   9683,682 ms/op
     p(50,0000) =   9722,102 ms/op
     p(90,0000) =   9791,935 ms/op
     p(95,0000) =   9791,935 ms/op
     p(99,0000) =   9791,935 ms/op
     p(99,9000) =   9791,935 ms/op
     p(99,9900) =   9791,935 ms/op
     p(99,9990) =   9791,935 ms/op
     p(99,9999) =   9791,935 ms/op
    p(100,0000) =   9791,935 ms/op


# Run complete. Total time: 00:03:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest     10000000           get    ss    8  9730,662 ± 73,502  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (10000000) = 9730.66229425
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 10000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11364,696 ms/op
# Warmup Iteration   2: 9381,180 ms/op
# Warmup Iteration   3: 9334,275 ms/op
# Warmup Iteration   4: 9380,214 ms/op
# Warmup Iteration   5: 9383,077 ms/op
# Warmup Iteration   6: 9359,637 ms/op
# Warmup Iteration   7: 9393,375 ms/op
# Warmup Iteration   8: 9346,773 ms/op
# Warmup Iteration   9: 9348,423 ms/op
# Warmup Iteration  10: 9378,149 ms/op
Iteration   1: 9367,405 ms/op
Iteration   2: 9410,442 ms/op
Iteration   3: 9410,549 ms/op
Iteration   4: 9377,207 ms/op
Iteration   5: 9390,977 ms/op
Iteration   6: 9388,564 ms/op
Iteration   7: 9423,129 ms/op
Iteration   8: 9419,230 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9398,438 ±(99.9%) 38,914 ms/op

  Histogram, ms/op:
    [9360,000, 9365,000) = 0
    [9365,000, 9370,000) = 1
    [9370,000, 9375,000) = 0
    [9375,000, 9380,000) = 1
    [9380,000, 9385,000) = 0
    [9385,000, 9390,000) = 1
    [9390,000, 9395,000) = 1
    [9395,000, 9400,000) = 0
    [9400,000, 9405,000) = 0
    [9405,000, 9410,000) = 0
    [9410,000, 9415,000) = 2
    [9415,000, 9420,000) = 1
    [9420,000, 9425,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   9367,405 ms/op
     p(50,0000) =   9400,709 ms/op
     p(90,0000) =   9423,129 ms/op
     p(95,0000) =   9423,129 ms/op
     p(99,0000) =   9423,129 ms/op
     p(99,9000) =   9423,129 ms/op
     p(99,9900) =   9423,129 ms/op
     p(99,9990) =   9423,129 ms/op
     p(99,9999) =   9423,129 ms/op
    p(100,0000) =   9423,129 ms/op


# Run complete. Total time: 00:03:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest     10000000           get    ss    8  9398,438 ± 38,914  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (10000000) = 9398.437827625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9956,785 ms/op
# Warmup Iteration   2: 9836,327 ms/op
# Warmup Iteration   3: 9216,831 ms/op
# Warmup Iteration   4: 9339,959 ms/op
# Warmup Iteration   5: 9343,548 ms/op
# Warmup Iteration   6: 9353,640 ms/op
# Warmup Iteration   7: 9338,115 ms/op
# Warmup Iteration   8: 9388,747 ms/op
# Warmup Iteration   9: 9266,647 ms/op
# Warmup Iteration  10: 9302,945 ms/op
Iteration   1: 9252,439 ms/op
Iteration   2: 9280,335 ms/op
Iteration   3: 9333,476 ms/op
Iteration   4: 9303,577 ms/op
Iteration   5: 9300,070 ms/op
Iteration   6: 9342,107 ms/op
Iteration   7: 9380,725 ms/op
Iteration   8: 9319,052 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9313,973 ±(99.9%) 75,354 ms/op

  Histogram, ms/op:
    [9200,000, 9212,500) = 0
    [9212,500, 9225,000) = 0
    [9225,000, 9237,500) = 0
    [9237,500, 9250,000) = 0
    [9250,000, 9262,500) = 1
    [9262,500, 9275,000) = 0
    [9275,000, 9287,500) = 1
    [9287,500, 9300,000) = 0
    [9300,000, 9312,500) = 2
    [9312,500, 9325,000) = 1
    [9325,000, 9337,500) = 1
    [9337,500, 9350,000) = 1
    [9350,000, 9362,500) = 0
    [9362,500, 9375,000) = 0
    [9375,000, 9387,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   9252,439 ms/op
     p(50,0000) =   9311,315 ms/op
     p(90,0000) =   9380,725 ms/op
     p(95,0000) =   9380,725 ms/op
     p(99,0000) =   9380,725 ms/op
     p(99,9000) =   9380,725 ms/op
     p(99,9900) =   9380,725 ms/op
     p(99,9990) =   9380,725 ms/op
     p(99,9999) =   9380,725 ms/op
    p(100,0000) =   9380,725 ms/op


# Run complete. Total time: 00:03:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test    100000000           get    ss    8  9313,973 ± 75,354  ms/op
tests.maptests.article_examples.IntIntMap1Test (100000000) = 9313.97269475
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9174,782 ms/op
# Warmup Iteration   2: 8387,005 ms/op
# Warmup Iteration   3: 8966,341 ms/op
# Warmup Iteration   4: 8968,401 ms/op
# Warmup Iteration   5: 8927,262 ms/op
# Warmup Iteration   6: 9028,963 ms/op
# Warmup Iteration   7: 9170,063 ms/op
# Warmup Iteration   8: 8829,674 ms/op
# Warmup Iteration   9: 8973,656 ms/op
# Warmup Iteration  10: 8952,910 ms/op
Iteration   1: 9045,222 ms/op
Iteration   2: 9098,373 ms/op
Iteration   3: 8993,424 ms/op
Iteration   4: 8930,119 ms/op
Iteration   5: 8775,491 ms/op
Iteration   6: 8876,342 ms/op
Iteration   7: 8842,881 ms/op
Iteration   8: 8864,138 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8928,249 ±(99.9%) 209,824 ms/op

  Histogram, ms/op:
    [8700,000, 8725,000) = 0
    [8725,000, 8750,000) = 0
    [8750,000, 8775,000) = 0
    [8775,000, 8800,000) = 1
    [8800,000, 8825,000) = 0
    [8825,000, 8850,000) = 1
    [8850,000, 8875,000) = 1
    [8875,000, 8900,000) = 1
    [8900,000, 8925,000) = 0
    [8925,000, 8950,000) = 1
    [8950,000, 8975,000) = 0
    [8975,000, 9000,000) = 1
    [9000,000, 9025,000) = 0
    [9025,000, 9050,000) = 1
    [9050,000, 9075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8775,491 ms/op
     p(50,0000) =   8903,231 ms/op
     p(90,0000) =   9098,373 ms/op
     p(95,0000) =   9098,373 ms/op
     p(99,0000) =   9098,373 ms/op
     p(99,9000) =   9098,373 ms/op
     p(99,9900) =   9098,373 ms/op
     p(99,9990) =   9098,373 ms/op
     p(99,9999) =   9098,373 ms/op
    p(100,0000) =   9098,373 ms/op


# Run complete. Total time: 00:02:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test    100000000           get    ss    8  8928,249 ± 209,824  ms/op
tests.maptests.article_examples.IntIntMap2Test (100000000) = 8928.248858250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5658,226 ms/op
# Warmup Iteration   2: 5491,656 ms/op
# Warmup Iteration   3: 5472,005 ms/op
# Warmup Iteration   4: 5580,110 ms/op
# Warmup Iteration   5: 5583,806 ms/op
# Warmup Iteration   6: 5634,234 ms/op
# Warmup Iteration   7: 5538,103 ms/op
# Warmup Iteration   8: 5547,161 ms/op
# Warmup Iteration   9: 5577,775 ms/op
# Warmup Iteration  10: 5587,652 ms/op
Iteration   1: 5543,103 ms/op
Iteration   2: 5574,533 ms/op
Iteration   3: 5650,676 ms/op
Iteration   4: 5538,109 ms/op
Iteration   5: 5533,101 ms/op
Iteration   6: 5523,758 ms/op
Iteration   7: 5517,373 ms/op
Iteration   8: 5535,060 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5551,964 ±(99.9%) 82,893 ms/op

  Histogram, ms/op:
    [5500,000, 5512,500) = 0
    [5512,500, 5525,000) = 2
    [5525,000, 5537,500) = 2
    [5537,500, 5550,000) = 2
    [5550,000, 5562,500) = 0
    [5562,500, 5575,000) = 1
    [5575,000, 5587,500) = 0
    [5587,500, 5600,000) = 0
    [5600,000, 5612,500) = 0
    [5612,500, 5625,000) = 0
    [5625,000, 5637,500) = 0
    [5637,500, 5650,000) = 0
    [5650,000, 5662,500) = 1
    [5662,500, 5675,000) = 0
    [5675,000, 5687,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5517,373 ms/op
     p(50,0000) =   5536,585 ms/op
     p(90,0000) =   5650,676 ms/op
     p(95,0000) =   5650,676 ms/op
     p(99,0000) =   5650,676 ms/op
     p(99,9000) =   5650,676 ms/op
     p(99,9900) =   5650,676 ms/op
     p(99,9990) =   5650,676 ms/op
     p(99,9999) =   5650,676 ms/op
    p(100,0000) =   5650,676 ms/op


# Run complete. Total time: 00:01:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test    100000000           get    ss    8  5551,964 ± 82,893  ms/op
tests.maptests.article_examples.IntIntMap3Test (100000000) = 5551.963996750001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4456,370 ms/op
# Warmup Iteration   2: 4292,313 ms/op
# Warmup Iteration   3: 4297,147 ms/op
# Warmup Iteration   4: 4259,423 ms/op
# Warmup Iteration   5: 4305,628 ms/op
# Warmup Iteration   6: 4303,170 ms/op
# Warmup Iteration   7: 4327,983 ms/op
# Warmup Iteration   8: 4291,648 ms/op
# Warmup Iteration   9: 4313,703 ms/op
# Warmup Iteration  10: 4261,294 ms/op
Iteration   1: 4128,956 ms/op
Iteration   2: 3927,035 ms/op
Iteration   3: 4294,141 ms/op
Iteration   4: 4174,141 ms/op
Iteration   5: 4333,055 ms/op
Iteration   6: 4284,299 ms/op
Iteration   7: 4421,929 ms/op
Iteration   8: 4182,619 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4218,272 ±(99.9%) 289,769 ms/op

  Histogram, ms/op:
    [3900,000, 3950,000) = 1
    [3950,000, 4000,000) = 0
    [4000,000, 4050,000) = 0
    [4050,000, 4100,000) = 0
    [4100,000, 4150,000) = 1
    [4150,000, 4200,000) = 2
    [4200,000, 4250,000) = 0
    [4250,000, 4300,000) = 2
    [4300,000, 4350,000) = 1
    [4350,000, 4400,000) = 0
    [4400,000, 4450,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3927,035 ms/op
     p(50,0000) =   4233,459 ms/op
     p(90,0000) =   4421,929 ms/op
     p(95,0000) =   4421,929 ms/op
     p(99,0000) =   4421,929 ms/op
     p(99,9000) =   4421,929 ms/op
     p(99,9900) =   4421,929 ms/op
     p(99,9990) =   4421,929 ms/op
     p(99,9999) =   4421,929 ms/op
    p(100,0000) =   4421,929 ms/op


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test    100000000           get    ss    8  4218,272 ± 289,769  ms/op
tests.maptests.article_examples.IntIntMap4Test (100000000) = 4218.27208425
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4548,143 ms/op
# Warmup Iteration   2: 4511,373 ms/op
# Warmup Iteration   3: 4219,398 ms/op
# Warmup Iteration   4: 3945,294 ms/op
# Warmup Iteration   5: 4157,845 ms/op
# Warmup Iteration   6: 4296,357 ms/op
# Warmup Iteration   7: 4334,588 ms/op
# Warmup Iteration   8: 4323,244 ms/op
# Warmup Iteration   9: 4261,253 ms/op
# Warmup Iteration  10: 4316,409 ms/op
Iteration   1: 4340,176 ms/op
Iteration   2: 4330,113 ms/op
Iteration   3: 4234,853 ms/op
Iteration   4: 4312,173 ms/op
Iteration   5: 4308,645 ms/op
Iteration   6: 4300,473 ms/op
Iteration   7: 4241,055 ms/op
Iteration   8: 4279,761 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4293,406 ±(99.9%) 74,137 ms/op

  Histogram, ms/op:
    [4200,000, 4212,500) = 0
    [4212,500, 4225,000) = 0
    [4225,000, 4237,500) = 1
    [4237,500, 4250,000) = 1
    [4250,000, 4262,500) = 0
    [4262,500, 4275,000) = 0
    [4275,000, 4287,500) = 1
    [4287,500, 4300,000) = 0
    [4300,000, 4312,500) = 3
    [4312,500, 4325,000) = 0
    [4325,000, 4337,500) = 1
    [4337,500, 4350,000) = 1
    [4350,000, 4362,500) = 0
    [4362,500, 4375,000) = 0
    [4375,000, 4387,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4234,853 ms/op
     p(50,0000) =   4304,559 ms/op
     p(90,0000) =   4340,176 ms/op
     p(95,0000) =   4340,176 ms/op
     p(99,0000) =   4340,176 ms/op
     p(99,9000) =   4340,176 ms/op
     p(99,9900) =   4340,176 ms/op
     p(99,9990) =   4340,176 ms/op
     p(99,9999) =   4340,176 ms/op
    p(100,0000) =   4340,176 ms/op


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest    100000000           get    ss    8  4293,406 ± 74,137  ms/op
tests.maptests.article_examples.IntIntMap4aTest (100000000) = 4293.40629925
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5707,441 ms/op
# Warmup Iteration   2: 5404,890 ms/op
# Warmup Iteration   3: 5575,408 ms/op
# Warmup Iteration   4: 5551,489 ms/op
# Warmup Iteration   5: 5576,578 ms/op
# Warmup Iteration   6: 5650,818 ms/op
# Warmup Iteration   7: 5648,291 ms/op
# Warmup Iteration   8: 5530,642 ms/op
# Warmup Iteration   9: 5527,256 ms/op
# Warmup Iteration  10: 5427,175 ms/op
Iteration   1: 5634,548 ms/op
Iteration   2: 5538,229 ms/op
Iteration   3: 5599,424 ms/op
Iteration   4: 5464,261 ms/op
Iteration   5: 5561,369 ms/op
Iteration   6: 5705,366 ms/op
Iteration   7: 5634,243 ms/op
Iteration   8: 5569,077 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5588,315 ±(99.9%) 139,129 ms/op

  Histogram, ms/op:
    [5400,000, 5425,000) = 0
    [5425,000, 5450,000) = 0
    [5450,000, 5475,000) = 1
    [5475,000, 5500,000) = 0
    [5500,000, 5525,000) = 0
    [5525,000, 5550,000) = 1
    [5550,000, 5575,000) = 2
    [5575,000, 5600,000) = 1
    [5600,000, 5625,000) = 0
    [5625,000, 5650,000) = 2
    [5650,000, 5675,000) = 0
    [5675,000, 5700,000) = 0
    [5700,000, 5725,000) = 1
    [5725,000, 5750,000) = 0
    [5750,000, 5775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5464,261 ms/op
     p(50,0000) =   5584,251 ms/op
     p(90,0000) =   5705,366 ms/op
     p(95,0000) =   5705,366 ms/op
     p(99,0000) =   5705,366 ms/op
     p(99,9000) =   5705,366 ms/op
     p(99,9900) =   5705,366 ms/op
     p(99,9990) =   5705,366 ms/op
     p(99,9999) =   5705,366 ms/op
    p(100,0000) =   5705,366 ms/op


# Run complete. Total time: 00:01:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest    100000000           get    ss    8  5588,315 ± 139,129  ms/op
tests.maptests.primitive.FastUtilMapTest (100000000) = 5588.314591375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5246,371 ms/op
# Warmup Iteration   2: 5336,223 ms/op
# Warmup Iteration   3: 5470,550 ms/op
# Warmup Iteration   4: 5477,833 ms/op
# Warmup Iteration   5: 5469,152 ms/op
# Warmup Iteration   6: 5431,215 ms/op
# Warmup Iteration   7: 5492,308 ms/op
# Warmup Iteration   8: 5448,212 ms/op
# Warmup Iteration   9: 5443,150 ms/op
# Warmup Iteration  10: 5591,445 ms/op
Iteration   1: 5463,016 ms/op
Iteration   2: 5484,973 ms/op
Iteration   3: 5479,722 ms/op
Iteration   4: 5485,600 ms/op
Iteration   5: 5525,575 ms/op
Iteration   6: 5412,069 ms/op
Iteration   7: 5486,679 ms/op
Iteration   8: 5493,433 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5478,883 ±(99.9%) 61,538 ms/op

  Histogram, ms/op:
    [5400,000, 5412,500) = 1
    [5412,500, 5425,000) = 0
    [5425,000, 5437,500) = 0
    [5437,500, 5450,000) = 0
    [5450,000, 5462,500) = 0
    [5462,500, 5475,000) = 1
    [5475,000, 5487,500) = 4
    [5487,500, 5500,000) = 1
    [5500,000, 5512,500) = 0
    [5512,500, 5525,000) = 0
    [5525,000, 5537,500) = 1
    [5537,500, 5550,000) = 0
    [5550,000, 5562,500) = 0
    [5562,500, 5575,000) = 0
    [5575,000, 5587,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5412,069 ms/op
     p(50,0000) =   5485,286 ms/op
     p(90,0000) =   5525,575 ms/op
     p(95,0000) =   5525,575 ms/op
     p(99,0000) =   5525,575 ms/op
     p(99,9000) =   5525,575 ms/op
     p(99,9900) =   5525,575 ms/op
     p(99,9990) =   5525,575 ms/op
     p(99,9999) =   5525,575 ms/op
    p(100,0000) =   5525,575 ms/op


# Run complete. Total time: 00:01:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest    100000000           get    ss    8  5478,883 ± 61,538  ms/op
tests.maptests.primitive.GsMutableMapTest (100000000) = 5478.883379125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4185,747 ms/op
# Warmup Iteration   2: 4146,785 ms/op
# Warmup Iteration   3: 4073,820 ms/op
# Warmup Iteration   4: 4248,044 ms/op
# Warmup Iteration   5: 4087,823 ms/op
# Warmup Iteration   6: 4088,701 ms/op
# Warmup Iteration   7: 4170,185 ms/op
# Warmup Iteration   8: 4292,160 ms/op
# Warmup Iteration   9: 4108,418 ms/op
# Warmup Iteration  10: 4181,454 ms/op
Iteration   1: 4178,617 ms/op
Iteration   2: 4296,881 ms/op
Iteration   3: 4198,192 ms/op
Iteration   4: 4184,448 ms/op
Iteration   5: 4115,742 ms/op
Iteration   6: 4102,182 ms/op
Iteration   7: 4181,946 ms/op
Iteration   8: 4175,929 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4179,242 ±(99.9%) 112,453 ms/op

  Histogram, ms/op:
    [4100,000, 4112,500) = 1
    [4112,500, 4125,000) = 1
    [4125,000, 4137,500) = 0
    [4137,500, 4150,000) = 0
    [4150,000, 4162,500) = 0
    [4162,500, 4175,000) = 0
    [4175,000, 4187,500) = 4
    [4187,500, 4200,000) = 1
    [4200,000, 4212,500) = 0
    [4212,500, 4225,000) = 0
    [4225,000, 4237,500) = 0
    [4237,500, 4250,000) = 0
    [4250,000, 4262,500) = 0
    [4262,500, 4275,000) = 0
    [4275,000, 4287,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4102,182 ms/op
     p(50,0000) =   4180,282 ms/op
     p(90,0000) =   4296,881 ms/op
     p(95,0000) =   4296,881 ms/op
     p(99,0000) =   4296,881 ms/op
     p(99,9000) =   4296,881 ms/op
     p(99,9900) =   4296,881 ms/op
     p(99,9990) =   4296,881 ms/op
     p(99,9999) =   4296,881 ms/op
    p(100,0000) =   4296,881 ms/op


# Run complete. Total time: 00:01:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest    100000000           get    ss    8  4179,242 ± 112,453  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (100000000) = 4179.242193
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6235,819 ms/op
# Warmup Iteration   2: 6004,840 ms/op
# Warmup Iteration   3: 5923,168 ms/op
# Warmup Iteration   4: 5937,201 ms/op
# Warmup Iteration   5: 5862,984 ms/op
# Warmup Iteration   6: 5933,783 ms/op
# Warmup Iteration   7: 5900,818 ms/op
# Warmup Iteration   8: 5881,548 ms/op
# Warmup Iteration   9: 5934,246 ms/op
# Warmup Iteration  10: 5920,416 ms/op
Iteration   1: 5866,193 ms/op
Iteration   2: 5863,786 ms/op
Iteration   3: 5912,934 ms/op
Iteration   4: 5907,675 ms/op
Iteration   5: 5836,853 ms/op
Iteration   6: 5874,929 ms/op
Iteration   7: 5884,313 ms/op
Iteration   8: 5886,491 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5879,147 ±(99.9%) 47,091 ms/op

  Histogram, ms/op:
    [5830,000, 5835,000) = 0
    [5835,000, 5840,000) = 1
    [5840,000, 5845,000) = 0
    [5845,000, 5850,000) = 0
    [5850,000, 5855,000) = 0
    [5855,000, 5860,000) = 0
    [5860,000, 5865,000) = 1
    [5865,000, 5870,000) = 1
    [5870,000, 5875,000) = 1
    [5875,000, 5880,000) = 0
    [5880,000, 5885,000) = 1
    [5885,000, 5890,000) = 1
    [5890,000, 5895,000) = 0
    [5895,000, 5900,000) = 0
    [5900,000, 5905,000) = 0
    [5905,000, 5910,000) = 1
    [5910,000, 5915,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   5836,853 ms/op
     p(50,0000) =   5879,621 ms/op
     p(90,0000) =   5912,934 ms/op
     p(95,0000) =   5912,934 ms/op
     p(99,0000) =   5912,934 ms/op
     p(99,9000) =   5912,934 ms/op
     p(99,9900) =   5912,934 ms/op
     p(99,9990) =   5912,934 ms/op
     p(99,9999) =   5912,934 ms/op
    p(100,0000) =   5912,934 ms/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest    100000000           get    ss    8  5879,147 ± 47,091  ms/op
tests.maptests.primitive.HppcMapTest (100000000) = 5879.146722625001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13510,881 ms/op
# Warmup Iteration   2: 13506,501 ms/op
# Warmup Iteration   3: 13031,196 ms/op
# Warmup Iteration   4: 13040,387 ms/op
# Warmup Iteration   5: 13073,070 ms/op
# Warmup Iteration   6: 13117,363 ms/op
# Warmup Iteration   7: 13201,986 ms/op
# Warmup Iteration   8: 13073,874 ms/op
# Warmup Iteration   9: 13007,622 ms/op
# Warmup Iteration  10: 13045,540 ms/op
Iteration   1: 13201,096 ms/op
Iteration   2: 12952,275 ms/op
Iteration   3: 13094,805 ms/op
Iteration   4: 13136,315 ms/op
Iteration   5: 13006,437 ms/op
Iteration   6: 13037,628 ms/op
Iteration   7: 13120,708 ms/op
Iteration   8: 13053,846 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13075,389 ±(99.9%) 151,149 ms/op

  Histogram, ms/op:
    [12900,000, 12925,000) = 0
    [12925,000, 12950,000) = 0
    [12950,000, 12975,000) = 1
    [12975,000, 13000,000) = 0
    [13000,000, 13025,000) = 1
    [13025,000, 13050,000) = 1
    [13050,000, 13075,000) = 1
    [13075,000, 13100,000) = 1
    [13100,000, 13125,000) = 1
    [13125,000, 13150,000) = 1
    [13150,000, 13175,000) = 0
    [13175,000, 13200,000) = 0
    [13200,000, 13225,000) = 1
    [13225,000, 13250,000) = 0
    [13250,000, 13275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  12952,275 ms/op
     p(50,0000) =  13074,325 ms/op
     p(90,0000) =  13201,096 ms/op
     p(95,0000) =  13201,096 ms/op
     p(99,0000) =  13201,096 ms/op
     p(99,9000) =  13201,096 ms/op
     p(99,9900) =  13201,096 ms/op
     p(99,9990) =  13201,096 ms/op
     p(99,9999) =  13201,096 ms/op
    p(100,0000) =  13201,096 ms/op


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest    100000000           get    ss    8  13075,389 ± 151,149  ms/op
tests.maptests.primitive.TroveJbMapTest (100000000) = 13075.38873675
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12926,945 ms/op
# Warmup Iteration   2: 12853,670 ms/op
# Warmup Iteration   3: 12685,373 ms/op
# Warmup Iteration   4: 12622,565 ms/op
# Warmup Iteration   5: 12649,244 ms/op
# Warmup Iteration   6: 12644,763 ms/op
# Warmup Iteration   7: 12581,767 ms/op
# Warmup Iteration   8: 12621,091 ms/op
# Warmup Iteration   9: 12608,421 ms/op
# Warmup Iteration  10: 12619,288 ms/op
Iteration   1: 12665,247 ms/op
Iteration   2: 12655,196 ms/op
Iteration   3: 12639,146 ms/op
Iteration   4: 12576,819 ms/op
Iteration   5: 12668,820 ms/op
Iteration   6: 12708,416 ms/op
Iteration   7: 12664,162 ms/op
Iteration   8: 12673,424 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12656,404 ±(99.9%) 71,978 ms/op

  Histogram, ms/op:
    [12500,000, 12525,000) = 0
    [12525,000, 12550,000) = 0
    [12550,000, 12575,000) = 0
    [12575,000, 12600,000) = 1
    [12600,000, 12625,000) = 0
    [12625,000, 12650,000) = 1
    [12650,000, 12675,000) = 5
    [12675,000, 12700,000) = 0
    [12700,000, 12725,000) = 1
    [12725,000, 12750,000) = 0
    [12750,000, 12775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  12576,819 ms/op
     p(50,0000) =  12664,705 ms/op
     p(90,0000) =  12708,416 ms/op
     p(95,0000) =  12708,416 ms/op
     p(99,0000) =  12708,416 ms/op
     p(99,9000) =  12708,416 ms/op
     p(99,9900) =  12708,416 ms/op
     p(99,9990) =  12708,416 ms/op
     p(99,9999) =  12708,416 ms/op
    p(100,0000) =  12708,416 ms/op


# Run complete. Total time: 00:04:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest    100000000           get    ss    8  12656,404 ± 71,978  ms/op
tests.maptests.primitive.TroveMapTest (100000000) = 12656.403711875002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10906,294 ms/op
# Warmup Iteration   2: 10400,898 ms/op
# Warmup Iteration   3: 10494,206 ms/op
# Warmup Iteration   4: 10576,914 ms/op
# Warmup Iteration   5: 10580,816 ms/op
# Warmup Iteration   6: 10630,909 ms/op
# Warmup Iteration   7: 10645,797 ms/op
# Warmup Iteration   8: 10552,373 ms/op
# Warmup Iteration   9: 10750,001 ms/op
# Warmup Iteration  10: 10603,699 ms/op
Iteration   1: 10554,063 ms/op
Iteration   2: 10619,309 ms/op
Iteration   3: 10645,368 ms/op
Iteration   4: 10586,821 ms/op
Iteration   5: 10543,012 ms/op
Iteration   6: 10558,189 ms/op
Iteration   7: 10582,114 ms/op
Iteration   8: 10472,091 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10570,121 ±(99.9%) 100,263 ms/op

  Histogram, ms/op:
    [10400,000, 10425,000) = 0
    [10425,000, 10450,000) = 0
    [10450,000, 10475,000) = 1
    [10475,000, 10500,000) = 0
    [10500,000, 10525,000) = 0
    [10525,000, 10550,000) = 1
    [10550,000, 10575,000) = 2
    [10575,000, 10600,000) = 2
    [10600,000, 10625,000) = 1
    [10625,000, 10650,000) = 1
    [10650,000, 10675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  10472,091 ms/op
     p(50,0000) =  10570,151 ms/op
     p(90,0000) =  10645,368 ms/op
     p(95,0000) =  10645,368 ms/op
     p(99,0000) =  10645,368 ms/op
     p(99,9000) =  10645,368 ms/op
     p(99,9900) =  10645,368 ms/op
     p(99,9990) =  10645,368 ms/op
     p(99,9999) =  10645,368 ms/op
    p(100,0000) =  10645,368 ms/op


# Run complete. Total time: 00:04:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest    100000000           get    ss    8  10570,121 ± 100,263  ms/op
tests.maptests.object.FastUtilObjMapTest (100000000) = 10570.120760124999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12382,755 ms/op
# Warmup Iteration   2: 12301,567 ms/op
# Warmup Iteration   3: 11820,022 ms/op
# Warmup Iteration   4: 11884,708 ms/op
# Warmup Iteration   5: 11926,174 ms/op
# Warmup Iteration   6: 11904,789 ms/op
# Warmup Iteration   7: 11882,961 ms/op
# Warmup Iteration   8: 12102,097 ms/op
# Warmup Iteration   9: 11975,316 ms/op
# Warmup Iteration  10: 12043,445 ms/op
Iteration   1: 12138,572 ms/op
Iteration   2: 11996,619 ms/op
Iteration   3: 11887,605 ms/op
Iteration   4: 12043,097 ms/op
Iteration   5: 12048,980 ms/op
Iteration   6: 11895,213 ms/op
Iteration   7: 11851,582 ms/op
Iteration   8: 12096,001 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11994,709 ±(99.9%) 201,961 ms/op

  Histogram, ms/op:
    [11800,000, 11825,000) = 0
    [11825,000, 11850,000) = 0
    [11850,000, 11875,000) = 1
    [11875,000, 11900,000) = 2
    [11900,000, 11925,000) = 0
    [11925,000, 11950,000) = 0
    [11950,000, 11975,000) = 0
    [11975,000, 12000,000) = 1
    [12000,000, 12025,000) = 0
    [12025,000, 12050,000) = 2
    [12050,000, 12075,000) = 0
    [12075,000, 12100,000) = 1
    [12100,000, 12125,000) = 0
    [12125,000, 12150,000) = 1
    [12150,000, 12175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11851,582 ms/op
     p(50,0000) =  12019,858 ms/op
     p(90,0000) =  12138,572 ms/op
     p(95,0000) =  12138,572 ms/op
     p(99,0000) =  12138,572 ms/op
     p(99,9000) =  12138,572 ms/op
     p(99,9900) =  12138,572 ms/op
     p(99,9990) =  12138,572 ms/op
     p(99,9999) =  12138,572 ms/op
    p(100,0000) =  12138,572 ms/op


# Run complete. Total time: 00:04:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest    100000000           get    ss    8  11994,709 ± 201,961  ms/op
tests.maptests.object.KolobokeMutableObjTest (100000000) = 11994.708703749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12713,072 ms/op
# Warmup Iteration   2: 12510,570 ms/op
# Warmup Iteration   3: 12059,681 ms/op
# Warmup Iteration   4: 12146,227 ms/op
# Warmup Iteration   5: 12247,382 ms/op
# Warmup Iteration   6: 12118,208 ms/op
# Warmup Iteration   7: 12241,830 ms/op
# Warmup Iteration   8: 12107,617 ms/op
# Warmup Iteration   9: 12087,164 ms/op
# Warmup Iteration  10: 12053,119 ms/op
Iteration   1: 11977,462 ms/op
Iteration   2: 12239,514 ms/op
Iteration   3: 12222,033 ms/op
Iteration   4: 12055,836 ms/op
Iteration   5: 12099,329 ms/op
Iteration   6: 12218,615 ms/op
Iteration   7: 12095,965 ms/op
Iteration   8: 12069,118 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12122,234 ±(99.9%) 180,531 ms/op

  Histogram, ms/op:
    [11900,000, 11925,000) = 0
    [11925,000, 11950,000) = 0
    [11950,000, 11975,000) = 0
    [11975,000, 12000,000) = 1
    [12000,000, 12025,000) = 0
    [12025,000, 12050,000) = 0
    [12050,000, 12075,000) = 2
    [12075,000, 12100,000) = 2
    [12100,000, 12125,000) = 0
    [12125,000, 12150,000) = 0
    [12150,000, 12175,000) = 0
    [12175,000, 12200,000) = 0
    [12200,000, 12225,000) = 2
    [12225,000, 12250,000) = 1
    [12250,000, 12275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11977,462 ms/op
     p(50,0000) =  12097,647 ms/op
     p(90,0000) =  12239,514 ms/op
     p(95,0000) =  12239,514 ms/op
     p(99,0000) =  12239,514 ms/op
     p(99,9000) =  12239,514 ms/op
     p(99,9900) =  12239,514 ms/op
     p(99,9990) =  12239,514 ms/op
     p(99,9999) =  12239,514 ms/op
    p(100,0000) =  12239,514 ms/op


# Run complete. Total time: 00:04:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest    100000000           get    ss    8  12122,234 ± 180,531  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (100000000) = 12122.234043125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9314,363 ms/op
# Warmup Iteration   2: 9092,226 ms/op
# Warmup Iteration   3: 8898,736 ms/op
# Warmup Iteration   4: 9089,195 ms/op
# Warmup Iteration   5: 9305,460 ms/op
# Warmup Iteration   6: 9115,094 ms/op
# Warmup Iteration   7: 8912,237 ms/op
# Warmup Iteration   8: 9044,118 ms/op
# Warmup Iteration   9: 9185,731 ms/op
# Warmup Iteration  10: 9040,516 ms/op
Iteration   1: 9222,491 ms/op
Iteration   2: 9208,955 ms/op
Iteration   3: 9047,288 ms/op
Iteration   4: 9076,794 ms/op
Iteration   5: 9169,223 ms/op
Iteration   6: 9163,902 ms/op
Iteration   7: 9084,493 ms/op
Iteration   8: 9080,972 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9131,765 ±(99.9%) 128,459 ms/op

  Histogram, ms/op:
    [9000,000, 9025,000) = 0
    [9025,000, 9050,000) = 1
    [9050,000, 9075,000) = 0
    [9075,000, 9100,000) = 3
    [9100,000, 9125,000) = 0
    [9125,000, 9150,000) = 0
    [9150,000, 9175,000) = 2
    [9175,000, 9200,000) = 0
    [9200,000, 9225,000) = 2
    [9225,000, 9250,000) = 0
    [9250,000, 9275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9047,288 ms/op
     p(50,0000) =   9124,198 ms/op
     p(90,0000) =   9222,491 ms/op
     p(95,0000) =   9222,491 ms/op
     p(99,0000) =   9222,491 ms/op
     p(99,9000) =   9222,491 ms/op
     p(99,9900) =   9222,491 ms/op
     p(99,9990) =   9222,491 ms/op
     p(99,9999) =   9222,491 ms/op
    p(100,0000) =   9222,491 ms/op


# Run complete. Total time: 00:03:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest    100000000           get    ss    8  9131,765 ± 128,459  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (100000000) = 9131.764807
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11810,418 ms/op
# Warmup Iteration   2: 12252,580 ms/op
# Warmup Iteration   3: 11700,380 ms/op
# Warmup Iteration   4: 11973,980 ms/op
# Warmup Iteration   5: 11679,135 ms/op
# Warmup Iteration   6: 11889,426 ms/op
# Warmup Iteration   7: 11828,734 ms/op
# Warmup Iteration   8: 11792,032 ms/op
# Warmup Iteration   9: 11956,984 ms/op
# Warmup Iteration  10: 11628,246 ms/op
Iteration   1: 11729,039 ms/op
Iteration   2: 11833,922 ms/op
Iteration   3: 11766,894 ms/op
Iteration   4: 11865,863 ms/op
Iteration   5: 11882,404 ms/op
Iteration   6: 11894,528 ms/op
Iteration   7: 11926,803 ms/op
Iteration   8: 12028,471 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11865,991 ±(99.9%) 178,170 ms/op

  Histogram, ms/op:
    [11700,000, 11725,000) = 0
    [11725,000, 11750,000) = 1
    [11750,000, 11775,000) = 1
    [11775,000, 11800,000) = 0
    [11800,000, 11825,000) = 0
    [11825,000, 11850,000) = 1
    [11850,000, 11875,000) = 1
    [11875,000, 11900,000) = 2
    [11900,000, 11925,000) = 0
    [11925,000, 11950,000) = 1
    [11950,000, 11975,000) = 0
    [11975,000, 12000,000) = 0
    [12000,000, 12025,000) = 0
    [12025,000, 12050,000) = 1
    [12050,000, 12075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11729,039 ms/op
     p(50,0000) =  11874,133 ms/op
     p(90,0000) =  12028,471 ms/op
     p(95,0000) =  12028,471 ms/op
     p(99,0000) =  12028,471 ms/op
     p(99,9000) =  12028,471 ms/op
     p(99,9900) =  12028,471 ms/op
     p(99,9990) =  12028,471 ms/op
     p(99,9999) =  12028,471 ms/op
    p(100,0000) =  12028,471 ms/op


# Run complete. Total time: 00:04:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest    100000000           get    ss    8  11865,991 ± 178,170  ms/op
tests.maptests.object.HppcObjMapTest (100000000) = 11865.990511375003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10418,844 ms/op
# Warmup Iteration   2: 10347,874 ms/op
# Warmup Iteration   3: 10265,043 ms/op
# Warmup Iteration   4: 10158,207 ms/op
# Warmup Iteration   5: 9929,164 ms/op
# Warmup Iteration   6: 10021,646 ms/op
# Warmup Iteration   7: 10008,589 ms/op
# Warmup Iteration   8: 9923,049 ms/op
# Warmup Iteration   9: 10057,379 ms/op
# Warmup Iteration  10: 10107,832 ms/op
Iteration   1: 9897,044 ms/op
Iteration   2: 10001,501 ms/op
Iteration   3: 9949,141 ms/op
Iteration   4: 9946,610 ms/op
Iteration   5: 10036,087 ms/op
Iteration   6: 9947,714 ms/op
Iteration   7: 10003,256 ms/op
Iteration   8: 10022,220 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9975,447 ±(99.9%) 90,713 ms/op

  Histogram, ms/op:
    [ 9800,000,  9825,000) = 0
    [ 9825,000,  9850,000) = 0
    [ 9850,000,  9875,000) = 0
    [ 9875,000,  9900,000) = 1
    [ 9900,000,  9925,000) = 0
    [ 9925,000,  9950,000) = 3
    [ 9950,000,  9975,000) = 0
    [ 9975,000, 10000,000) = 0
    [10000,000, 10025,000) = 3
    [10025,000, 10050,000) = 1
    [10050,000, 10075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9897,044 ms/op
     p(50,0000) =   9975,321 ms/op
     p(90,0000) =  10036,087 ms/op
     p(95,0000) =  10036,087 ms/op
     p(99,0000) =  10036,087 ms/op
     p(99,9000) =  10036,087 ms/op
     p(99,9900) =  10036,087 ms/op
     p(99,9990) =  10036,087 ms/op
     p(99,9999) =  10036,087 ms/op
    p(100,0000) =  10036,087 ms/op


# Run complete. Total time: 00:03:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest    100000000           get    ss    8  9975,447 ± 90,713  ms/op
tests.maptests.object.GsObjMapTest (100000000) = 9975.446670250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8628,611 ms/op
# Warmup Iteration   2: 8571,808 ms/op
# Warmup Iteration   3: 8282,005 ms/op
# Warmup Iteration   4: 8379,680 ms/op
# Warmup Iteration   5: 8322,404 ms/op
# Warmup Iteration   6: 8392,846 ms/op
# Warmup Iteration   7: 8565,323 ms/op
# Warmup Iteration   8: 8405,867 ms/op
# Warmup Iteration   9: 8303,045 ms/op
# Warmup Iteration  10: 8610,868 ms/op
Iteration   1: 8244,116 ms/op
Iteration   2: 8265,882 ms/op
Iteration   3: 8419,082 ms/op
Iteration   4: 8227,911 ms/op
Iteration   5: 8469,926 ms/op
Iteration   6: 8481,398 ms/op
Iteration   7: 8436,248 ms/op
Iteration   8: 8485,076 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8378,705 ±(99.9%) 215,233 ms/op

  Histogram, ms/op:
    [8200,000, 8225,000) = 0
    [8225,000, 8250,000) = 2
    [8250,000, 8275,000) = 1
    [8275,000, 8300,000) = 0
    [8300,000, 8325,000) = 0
    [8325,000, 8350,000) = 0
    [8350,000, 8375,000) = 0
    [8375,000, 8400,000) = 0
    [8400,000, 8425,000) = 1
    [8425,000, 8450,000) = 1
    [8450,000, 8475,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8227,911 ms/op
     p(50,0000) =   8427,665 ms/op
     p(90,0000) =   8485,076 ms/op
     p(95,0000) =   8485,076 ms/op
     p(99,0000) =   8485,076 ms/op
     p(99,9000) =   8485,076 ms/op
     p(99,9900) =   8485,076 ms/op
     p(99,9990) =   8485,076 ms/op
     p(99,9999) =   8485,076 ms/op
    p(100,0000) =   8485,076 ms/op


# Run complete. Total time: 00:03:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest    100000000           get    ss    8  8378,705 ± 215,233  ms/op
tests.maptests.object.JdkMapTest (100000000) = 8378.704801875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8218,782 ms/op
# Warmup Iteration   2: 8361,225 ms/op
# Warmup Iteration   3: 8131,931 ms/op
# Warmup Iteration   4: 8277,139 ms/op
# Warmup Iteration   5: 8187,691 ms/op
# Warmup Iteration   6: 8239,785 ms/op
# Warmup Iteration   7: 8250,143 ms/op
# Warmup Iteration   8: 8317,542 ms/op
# Warmup Iteration   9: 8479,743 ms/op
# Warmup Iteration  10: 8165,625 ms/op
Iteration   1: 8110,192 ms/op
Iteration   2: 8141,882 ms/op
Iteration   3: 8153,487 ms/op
Iteration   4: 8316,791 ms/op
Iteration   5: 8176,979 ms/op
Iteration   6: 8162,888 ms/op
Iteration   7: 8332,156 ms/op
Iteration   8: 8174,082 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8196,057 ±(99.9%) 156,946 ms/op

  Histogram, ms/op:
    [8100,000, 8125,000) = 1
    [8125,000, 8150,000) = 1
    [8150,000, 8175,000) = 3
    [8175,000, 8200,000) = 1
    [8200,000, 8225,000) = 0
    [8225,000, 8250,000) = 0
    [8250,000, 8275,000) = 0
    [8275,000, 8300,000) = 0
    [8300,000, 8325,000) = 1
    [8325,000, 8350,000) = 1
    [8350,000, 8375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8110,192 ms/op
     p(50,0000) =   8168,485 ms/op
     p(90,0000) =   8332,156 ms/op
     p(95,0000) =   8332,156 ms/op
     p(99,0000) =   8332,156 ms/op
     p(99,9000) =   8332,156 ms/op
     p(99,9900) =   8332,156 ms/op
     p(99,9990) =   8332,156 ms/op
     p(99,9999) =   8332,156 ms/op
    p(100,0000) =   8332,156 ms/op


# Run complete. Total time: 00:03:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity    100000000           get    ss    8  8196,057 ± 156,946  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (100000000) = 8196.056989499999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18003,055 ms/op
# Warmup Iteration   2: 17276,347 ms/op
# Warmup Iteration   3: 17208,906 ms/op
# Warmup Iteration   4: 17861,896 ms/op
# Warmup Iteration   5: 17456,937 ms/op
# Warmup Iteration   6: 17824,273 ms/op
# Warmup Iteration   7: 17469,022 ms/op
# Warmup Iteration   8: 17441,272 ms/op
# Warmup Iteration   9: 17551,620 ms/op
# Warmup Iteration  10: 17069,933 ms/op
Iteration   1: 17254,705 ms/op
Iteration   2: 17184,486 ms/op
Iteration   3: 17798,520 ms/op
Iteration   4: 17252,648 ms/op
Iteration   5: 17730,990 ms/op
Iteration   6: 17554,574 ms/op
Iteration   7: 17329,591 ms/op
Iteration   8: 17395,053 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  17437,571 ±(99.9%) 442,669 ms/op

  Histogram, ms/op:
    [17100,000, 17150,000) = 0
    [17150,000, 17200,000) = 1
    [17200,000, 17250,000) = 0
    [17250,000, 17300,000) = 2
    [17300,000, 17350,000) = 1
    [17350,000, 17400,000) = 1
    [17400,000, 17450,000) = 0
    [17450,000, 17500,000) = 0
    [17500,000, 17550,000) = 0
    [17550,000, 17600,000) = 1
    [17600,000, 17650,000) = 0
    [17650,000, 17700,000) = 0
    [17700,000, 17750,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  17184,486 ms/op
     p(50,0000) =  17362,322 ms/op
     p(90,0000) =  17798,520 ms/op
     p(95,0000) =  17798,520 ms/op
     p(99,0000) =  17798,520 ms/op
     p(99,9000) =  17798,520 ms/op
     p(99,9900) =  17798,520 ms/op
     p(99,9990) =  17798,520 ms/op
     p(99,9999) =  17798,520 ms/op
    p(100,0000) =  17798,520 ms/op


# Run complete. Total time: 00:06:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest    100000000           get    ss    8  17437,571 ± 442,669  ms/op
tests.maptests.object.TroveJbObjMapTest (100000000) = 17437.570527375003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 17268,308 ms/op
# Warmup Iteration   2: 18140,819 ms/op
# Warmup Iteration   3: 18314,617 ms/op
# Warmup Iteration   4: 18295,351 ms/op
# Warmup Iteration   5: 18523,365 ms/op
# Warmup Iteration   6: 18408,767 ms/op
# Warmup Iteration   7: 18566,479 ms/op
# Warmup Iteration   8: 18299,657 ms/op
# Warmup Iteration   9: 18445,772 ms/op
# Warmup Iteration  10: 18400,165 ms/op
Iteration   1: 18311,984 ms/op
Iteration   2: 18371,240 ms/op
Iteration   3: 18373,711 ms/op
Iteration   4: 18342,966 ms/op
Iteration   5: 18542,713 ms/op
Iteration   6: 18388,013 ms/op
Iteration   7: 18297,664 ms/op
Iteration   8: 18365,316 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18374,201 ±(99.9%) 143,407 ms/op

  Histogram, ms/op:
    [18200,000, 18225,000) = 0
    [18225,000, 18250,000) = 0
    [18250,000, 18275,000) = 0
    [18275,000, 18300,000) = 1
    [18300,000, 18325,000) = 1
    [18325,000, 18350,000) = 1
    [18350,000, 18375,000) = 3
    [18375,000, 18400,000) = 1
    [18400,000, 18425,000) = 0
    [18425,000, 18450,000) = 0
    [18450,000, 18475,000) = 0
    [18475,000, 18500,000) = 0
    [18500,000, 18525,000) = 0
    [18525,000, 18550,000) = 1
    [18550,000, 18575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  18297,664 ms/op
     p(50,0000) =  18368,278 ms/op
     p(90,0000) =  18542,713 ms/op
     p(95,0000) =  18542,713 ms/op
     p(99,0000) =  18542,713 ms/op
     p(99,9000) =  18542,713 ms/op
     p(99,9900) =  18542,713 ms/op
     p(99,9990) =  18542,713 ms/op
     p(99,9999) =  18542,713 ms/op
    p(100,0000) =  18542,713 ms/op


# Run complete. Total time: 00:06:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest    100000000           get    ss    8  18374,201 ± 143,407  ms/op
tests.maptests.object.TroveObjMapTest (100000000) = 18374.20081175
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8499,942 ms/op
# Warmup Iteration   2: 8631,010 ms/op
# Warmup Iteration   3: 8724,025 ms/op
# Warmup Iteration   4: 8608,302 ms/op
# Warmup Iteration   5: 8609,435 ms/op
# Warmup Iteration   6: 8655,687 ms/op
# Warmup Iteration   7: 8582,397 ms/op
# Warmup Iteration   8: 8649,772 ms/op
# Warmup Iteration   9: 8706,793 ms/op
# Warmup Iteration  10: 8596,080 ms/op
Iteration   1: 8674,621 ms/op
Iteration   2: 8608,402 ms/op
Iteration   3: 8594,638 ms/op
Iteration   4: 8579,285 ms/op
Iteration   5: 8924,644 ms/op
Iteration   6: 8784,227 ms/op
Iteration   7: 8613,289 ms/op
Iteration   8: 8600,097 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8672,400 ±(99.9%) 232,683 ms/op

  Histogram, ms/op:
    [8500,000, 8550,000) = 0
    [8550,000, 8600,000) = 2
    [8600,000, 8650,000) = 3
    [8650,000, 8700,000) = 1
    [8700,000, 8750,000) = 0
    [8750,000, 8800,000) = 1
    [8800,000, 8850,000) = 0
    [8850,000, 8900,000) = 0
    [8900,000, 8950,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8579,285 ms/op
     p(50,0000) =   8610,846 ms/op
     p(90,0000) =   8924,644 ms/op
     p(95,0000) =   8924,644 ms/op
     p(99,0000) =   8924,644 ms/op
     p(99,9000) =   8924,644 ms/op
     p(99,9900) =   8924,644 ms/op
     p(99,9990) =   8924,644 ms/op
     p(99,9999) =   8924,644 ms/op
    p(100,0000) =   8924,644 ms/op


# Run complete. Total time: 00:03:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest    100000000           get    ss    8  8672,400 ± 232,683  ms/op
tests.maptests.article_examples.ObjObjMapTest (100000000) = 8672.400468125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5642,598 ms/op
# Warmup Iteration   2: 5608,913 ms/op
# Warmup Iteration   3: 5552,231 ms/op
# Warmup Iteration   4: 5757,383 ms/op
# Warmup Iteration   5: 5601,520 ms/op
# Warmup Iteration   6: 5676,871 ms/op
# Warmup Iteration   7: 5701,954 ms/op
# Warmup Iteration   8: 5811,982 ms/op
# Warmup Iteration   9: 5609,453 ms/op
# Warmup Iteration  10: 5644,461 ms/op
Iteration   1: 5653,846 ms/op
Iteration   2: 5678,208 ms/op
Iteration   3: 5596,800 ms/op
Iteration   4: 5709,517 ms/op
Iteration   5: 5590,930 ms/op
Iteration   6: 5648,136 ms/op
Iteration   7: 5630,300 ms/op
Iteration   8: 5628,365 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5642,013 ±(99.9%) 75,867 ms/op

  Histogram, ms/op:
    [5500,000, 5525,000) = 0
    [5525,000, 5550,000) = 0
    [5550,000, 5575,000) = 0
    [5575,000, 5600,000) = 2
    [5600,000, 5625,000) = 0
    [5625,000, 5650,000) = 3
    [5650,000, 5675,000) = 1
    [5675,000, 5700,000) = 1
    [5700,000, 5725,000) = 1
    [5725,000, 5750,000) = 0
    [5750,000, 5775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5590,930 ms/op
     p(50,0000) =   5639,218 ms/op
     p(90,0000) =   5709,517 ms/op
     p(95,0000) =   5709,517 ms/op
     p(99,0000) =   5709,517 ms/op
     p(99,9000) =   5709,517 ms/op
     p(99,9900) =   5709,517 ms/op
     p(99,9990) =   5709,517 ms/op
     p(99,9999) =   5709,517 ms/op
    p(100,0000) =   5709,517 ms/op


# Run complete. Total time: 00:02:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest    100000000           get    ss    8  5642,013 ± 75,867  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (100000000) = 5642.0128728750005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6237,946 ms/op
# Warmup Iteration   2: 6078,179 ms/op
# Warmup Iteration   3: 6463,882 ms/op
# Warmup Iteration   4: 6479,644 ms/op
# Warmup Iteration   5: 6488,323 ms/op
# Warmup Iteration   6: 6408,002 ms/op
# Warmup Iteration   7: 6553,731 ms/op
# Warmup Iteration   8: 6441,656 ms/op
# Warmup Iteration   9: 6632,019 ms/op
# Warmup Iteration  10: 6494,771 ms/op
Iteration   1: 6362,111 ms/op
Iteration   2: 6466,023 ms/op
Iteration   3: 6543,859 ms/op
Iteration   4: 6531,422 ms/op
Iteration   5: 6486,823 ms/op
Iteration   6: 6453,603 ms/op
Iteration   7: 6471,858 ms/op
Iteration   8: 6454,675 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6471,297 ±(99.9%) 106,357 ms/op

  Histogram, ms/op:
    [6300,000, 6325,000) = 0
    [6325,000, 6350,000) = 0
    [6350,000, 6375,000) = 1
    [6375,000, 6400,000) = 0
    [6400,000, 6425,000) = 0
    [6425,000, 6450,000) = 0
    [6450,000, 6475,000) = 4
    [6475,000, 6500,000) = 1
    [6500,000, 6525,000) = 0
    [6525,000, 6550,000) = 2
    [6550,000, 6575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6362,111 ms/op
     p(50,0000) =   6468,941 ms/op
     p(90,0000) =   6543,859 ms/op
     p(95,0000) =   6543,859 ms/op
     p(99,0000) =   6543,859 ms/op
     p(99,9000) =   6543,859 ms/op
     p(99,9900) =   6543,859 ms/op
     p(99,9990) =   6543,859 ms/op
     p(99,9999) =   6543,859 ms/op
    p(100,0000) =   6543,859 ms/op


# Run complete. Total time: 00:02:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest    100000000           get    ss    8  6471,297 ± 106,357  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (100000000) = 6471.296792125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5622,083 ms/op
# Warmup Iteration   2: 5535,801 ms/op
# Warmup Iteration   3: 5368,967 ms/op
# Warmup Iteration   4: 5441,065 ms/op
# Warmup Iteration   5: 5392,749 ms/op
# Warmup Iteration   6: 5442,871 ms/op
# Warmup Iteration   7: 5403,967 ms/op
# Warmup Iteration   8: 5416,915 ms/op
# Warmup Iteration   9: 5379,167 ms/op
# Warmup Iteration  10: 5405,644 ms/op
Iteration   1: 5389,775 ms/op
Iteration   2: 5410,177 ms/op
Iteration   3: 5384,111 ms/op
Iteration   4: 5317,663 ms/op
Iteration   5: 5381,236 ms/op
Iteration   6: 5354,760 ms/op
Iteration   7: 5376,148 ms/op
Iteration   8: 5324,078 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5367,244 ±(99.9%) 62,114 ms/op

  Histogram, ms/op:
    [5310,000, 5320,000) = 1
    [5320,000, 5330,000) = 1
    [5330,000, 5340,000) = 0
    [5340,000, 5350,000) = 0
    [5350,000, 5360,000) = 1
    [5360,000, 5370,000) = 0
    [5370,000, 5380,000) = 1
    [5380,000, 5390,000) = 3
    [5390,000, 5400,000) = 0
    [5400,000, 5410,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5317,663 ms/op
     p(50,0000) =   5378,692 ms/op
     p(90,0000) =   5410,177 ms/op
     p(95,0000) =   5410,177 ms/op
     p(99,0000) =   5410,177 ms/op
     p(99,9000) =   5410,177 ms/op
     p(99,9900) =   5410,177 ms/op
     p(99,9990) =   5410,177 ms/op
     p(99,9999) =   5410,177 ms/op
    p(100,0000) =   5410,177 ms/op


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest    100000000           get    ss    8  5367,244 ± 62,114  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (100000000) = 5367.243754249999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6281,567 ms/op
# Warmup Iteration   2: 6598,351 ms/op
# Warmup Iteration   3: 6006,615 ms/op
# Warmup Iteration   4: 6072,024 ms/op
# Warmup Iteration   5: 5989,922 ms/op
# Warmup Iteration   6: 5997,236 ms/op
# Warmup Iteration   7: 5940,703 ms/op
# Warmup Iteration   8: 6054,554 ms/op
# Warmup Iteration   9: 6114,995 ms/op
# Warmup Iteration  10: 5956,219 ms/op
Iteration   1: 5992,430 ms/op
Iteration   2: 5979,987 ms/op
Iteration   3: 6013,376 ms/op
Iteration   4: 6069,820 ms/op
Iteration   5: 6040,760 ms/op
Iteration   6: 6002,158 ms/op
Iteration   7: 6036,420 ms/op
Iteration   8: 6012,388 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6018,417 ±(99.9%) 55,715 ms/op

  Histogram, ms/op:
    [5970,000, 5980,000) = 1
    [5980,000, 5990,000) = 0
    [5990,000, 6000,000) = 1
    [6000,000, 6010,000) = 1
    [6010,000, 6020,000) = 2
    [6020,000, 6030,000) = 0
    [6030,000, 6040,000) = 1
    [6040,000, 6050,000) = 1
    [6050,000, 6060,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5979,987 ms/op
     p(50,0000) =   6012,882 ms/op
     p(90,0000) =   6069,820 ms/op
     p(95,0000) =   6069,820 ms/op
     p(99,0000) =   6069,820 ms/op
     p(99,9000) =   6069,820 ms/op
     p(99,9900) =   6069,820 ms/op
     p(99,9990) =   6069,820 ms/op
     p(99,9999) =   6069,820 ms/op
    p(100,0000) =   6069,820 ms/op


# Run complete. Total time: 00:02:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest    100000000           get    ss    8  6018,417 ± 55,715  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (100000000) = 6018.4173496250005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11578,477 ms/op
# Warmup Iteration   2: 11916,201 ms/op
# Warmup Iteration   3: 11975,346 ms/op
# Warmup Iteration   4: 11990,752 ms/op
# Warmup Iteration   5: 11896,196 ms/op
# Warmup Iteration   6: 11903,531 ms/op
# Warmup Iteration   7: 11956,224 ms/op
# Warmup Iteration   8: 11920,326 ms/op
# Warmup Iteration   9: 11870,472 ms/op
# Warmup Iteration  10: 11899,152 ms/op
Iteration   1: 12017,833 ms/op
Iteration   2: 11960,261 ms/op
Iteration   3: 12015,688 ms/op
Iteration   4: 12022,364 ms/op
Iteration   5: 11954,462 ms/op
Iteration   6: 11925,601 ms/op
Iteration   7: 12013,695 ms/op
Iteration   8: 12054,505 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11995,551 ±(99.9%) 83,192 ms/op

  Histogram, ms/op:
    [11900,000, 11912,500) = 0
    [11912,500, 11925,000) = 0
    [11925,000, 11937,500) = 1
    [11937,500, 11950,000) = 0
    [11950,000, 11962,500) = 2
    [11962,500, 11975,000) = 0
    [11975,000, 11987,500) = 0
    [11987,500, 12000,000) = 0
    [12000,000, 12012,500) = 0
    [12012,500, 12025,000) = 4
    [12025,000, 12037,500) = 0
    [12037,500, 12050,000) = 0
    [12050,000, 12062,500) = 1
    [12062,500, 12075,000) = 0
    [12075,000, 12087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  11925,601 ms/op
     p(50,0000) =  12014,692 ms/op
     p(90,0000) =  12054,505 ms/op
     p(95,0000) =  12054,505 ms/op
     p(99,0000) =  12054,505 ms/op
     p(99,9000) =  12054,505 ms/op
     p(99,9900) =  12054,505 ms/op
     p(99,9990) =  12054,505 ms/op
     p(99,9999) =  12054,505 ms/op
    p(100,0000) =  12054,505 ms/op


# Run complete. Total time: 00:04:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest    100000000           get    ss    8  11995,551 ± 83,192  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (100000000) = 11995.551330625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12549,379 ms/op
# Warmup Iteration   2: 13051,452 ms/op
# Warmup Iteration   3: 12424,682 ms/op
# Warmup Iteration   4: 12517,595 ms/op
# Warmup Iteration   5: 12445,885 ms/op
# Warmup Iteration   6: 12441,920 ms/op
# Warmup Iteration   7: 12367,172 ms/op
# Warmup Iteration   8: 12410,783 ms/op
# Warmup Iteration   9: 12430,686 ms/op
# Warmup Iteration  10: 12364,957 ms/op
Iteration   1: 12408,513 ms/op
Iteration   2: 12410,193 ms/op
Iteration   3: 12387,752 ms/op
Iteration   4: 12425,685 ms/op
Iteration   5: 12551,293 ms/op
Iteration   6: 12518,018 ms/op
Iteration   7: 12517,628 ms/op
Iteration   8: 12375,779 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12449,358 ±(99.9%) 130,755 ms/op

  Histogram, ms/op:
    [12300,000, 12325,000) = 0
    [12325,000, 12350,000) = 0
    [12350,000, 12375,000) = 0
    [12375,000, 12400,000) = 2
    [12400,000, 12425,000) = 2
    [12425,000, 12450,000) = 1
    [12450,000, 12475,000) = 0
    [12475,000, 12500,000) = 0
    [12500,000, 12525,000) = 2
    [12525,000, 12550,000) = 0
    [12550,000, 12575,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  12375,779 ms/op
     p(50,0000) =  12417,939 ms/op
     p(90,0000) =  12551,293 ms/op
     p(95,0000) =  12551,293 ms/op
     p(99,0000) =  12551,293 ms/op
     p(99,9000) =  12551,293 ms/op
     p(99,9900) =  12551,293 ms/op
     p(99,9990) =  12551,293 ms/op
     p(99,9999) =  12551,293 ms/op
    p(100,0000) =  12551,293 ms/op


# Run complete. Total time: 00:04:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest    100000000           get    ss    8  12449,358 ± 130,755  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (100000000) = 12449.357565875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10996,746 ms/op
# Warmup Iteration   2: 10585,435 ms/op
# Warmup Iteration   3: 10902,685 ms/op
# Warmup Iteration   4: 10892,338 ms/op
# Warmup Iteration   5: 11069,766 ms/op
# Warmup Iteration   6: 11026,174 ms/op
# Warmup Iteration   7: 10914,824 ms/op
# Warmup Iteration   8: 10974,215 ms/op
# Warmup Iteration   9: 11086,736 ms/op
# Warmup Iteration  10: 11089,163 ms/op
Iteration   1: 11274,590 ms/op
Iteration   2: 11184,230 ms/op
Iteration   3: 11028,458 ms/op
Iteration   4: 10935,696 ms/op
Iteration   5: 11028,026 ms/op
Iteration   6: 11063,451 ms/op
Iteration   7: 11055,312 ms/op
Iteration   8: 11132,034 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11087,725 ±(99.9%) 201,859 ms/op

  Histogram, ms/op:
    [10900,000, 10925,000) = 0
    [10925,000, 10950,000) = 1
    [10950,000, 10975,000) = 0
    [10975,000, 11000,000) = 0
    [11000,000, 11025,000) = 0
    [11025,000, 11050,000) = 2
    [11050,000, 11075,000) = 2
    [11075,000, 11100,000) = 0
    [11100,000, 11125,000) = 0
    [11125,000, 11150,000) = 1
    [11150,000, 11175,000) = 0
    [11175,000, 11200,000) = 1
    [11200,000, 11225,000) = 0
    [11225,000, 11250,000) = 0
    [11250,000, 11275,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  10935,696 ms/op
     p(50,0000) =  11059,381 ms/op
     p(90,0000) =  11274,590 ms/op
     p(95,0000) =  11274,590 ms/op
     p(99,0000) =  11274,590 ms/op
     p(99,9000) =  11274,590 ms/op
     p(99,9900) =  11274,590 ms/op
     p(99,9990) =  11274,590 ms/op
     p(99,9999) =  11274,590 ms/op
    p(100,0000) =  11274,590 ms/op


# Run complete. Total time: 00:03:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest    100000000           get    ss    8  11087,725 ± 201,859  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (100000000) = 11087.724621375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14327,359 ms/op
# Warmup Iteration   2: 14204,559 ms/op
# Warmup Iteration   3: 14585,567 ms/op
# Warmup Iteration   4: 14750,473 ms/op
# Warmup Iteration   5: 14637,359 ms/op
# Warmup Iteration   6: 14641,269 ms/op
# Warmup Iteration   7: 14930,469 ms/op
# Warmup Iteration   8: 14731,395 ms/op
# Warmup Iteration   9: 14742,752 ms/op
# Warmup Iteration  10: 14962,444 ms/op
Iteration   1: 14946,703 ms/op
Iteration   2: 14567,137 ms/op
Iteration   3: 14768,356 ms/op
Iteration   4: 14744,825 ms/op
Iteration   5: 14748,986 ms/op
Iteration   6: 14787,350 ms/op
Iteration   7: 14842,836 ms/op
Iteration   8: 14571,060 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  14747,157 ±(99.9%) 244,494 ms/op

  Histogram, ms/op:
    [14500,000, 14550,000) = 0
    [14550,000, 14600,000) = 2
    [14600,000, 14650,000) = 0
    [14650,000, 14700,000) = 0
    [14700,000, 14750,000) = 2
    [14750,000, 14800,000) = 2
    [14800,000, 14850,000) = 1
    [14850,000, 14900,000) = 0
    [14900,000, 14950,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  14567,137 ms/op
     p(50,0000) =  14758,671 ms/op
     p(90,0000) =  14946,703 ms/op
     p(95,0000) =  14946,703 ms/op
     p(99,0000) =  14946,703 ms/op
     p(99,9000) =  14946,703 ms/op
     p(99,9900) =  14946,703 ms/op
     p(99,9990) =  14946,703 ms/op
     p(99,9999) =  14946,703 ms/op
    p(100,0000) =  14946,703 ms/op


# Run complete. Total time: 00:05:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest    100000000           get    ss    8  14747,157 ± 244,494  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (100000000) = 14747.156676125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12595,806 ms/op
# Warmup Iteration   2: 13646,151 ms/op
# Warmup Iteration   3: 13510,692 ms/op
# Warmup Iteration   4: 13475,690 ms/op
# Warmup Iteration   5: 13257,343 ms/op
# Warmup Iteration   6: 13456,090 ms/op
# Warmup Iteration   7: 13729,562 ms/op
# Warmup Iteration   8: 13473,125 ms/op
# Warmup Iteration   9: 13504,233 ms/op
# Warmup Iteration  10: 13476,316 ms/op
Iteration   1: 13667,261 ms/op
Iteration   2: 14104,157 ms/op
Iteration   3: 13972,423 ms/op
Iteration   4: 13809,689 ms/op
Iteration   5: 13760,412 ms/op
Iteration   6: 13557,705 ms/op
Iteration   7: 14186,378 ms/op
Iteration   8: 13620,262 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13834,786 ±(99.9%) 440,846 ms/op

  Histogram, ms/op:
    [13500,000, 13550,000) = 0
    [13550,000, 13600,000) = 1
    [13600,000, 13650,000) = 1
    [13650,000, 13700,000) = 1
    [13700,000, 13750,000) = 0
    [13750,000, 13800,000) = 1
    [13800,000, 13850,000) = 1
    [13850,000, 13900,000) = 0
    [13900,000, 13950,000) = 0
    [13950,000, 14000,000) = 1
    [14000,000, 14050,000) = 0
    [14050,000, 14100,000) = 0
    [14100,000, 14150,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  13557,705 ms/op
     p(50,0000) =  13785,050 ms/op
     p(90,0000) =  14186,378 ms/op
     p(95,0000) =  14186,378 ms/op
     p(99,0000) =  14186,378 ms/op
     p(99,9000) =  14186,378 ms/op
     p(99,9900) =  14186,378 ms/op
     p(99,9990) =  14186,378 ms/op
     p(99,9999) =  14186,378 ms/op
    p(100,0000) =  14186,378 ms/op


# Run complete. Total time: 00:04:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest    100000000           get    ss    8  13834,786 ± 440,846  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (100000000) = 13834.78594725
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11930,932 ms/op
# Warmup Iteration   2: 11678,678 ms/op
# Warmup Iteration   3: 11727,936 ms/op
# Warmup Iteration   4: 11749,712 ms/op
# Warmup Iteration   5: 11823,402 ms/op
# Warmup Iteration   6: 11582,384 ms/op
# Warmup Iteration   7: 11991,379 ms/op
# Warmup Iteration   8: 11845,870 ms/op
# Warmup Iteration   9: 11763,433 ms/op
# Warmup Iteration  10: 11718,410 ms/op
Iteration   1: 11771,525 ms/op
Iteration   2: 11734,474 ms/op
Iteration   3: 11941,189 ms/op
Iteration   4: 12004,589 ms/op
Iteration   5: 11792,513 ms/op
Iteration   6: 11682,622 ms/op
Iteration   7: 11830,760 ms/op
Iteration   8: 11816,024 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11821,712 ±(99.9%) 202,036 ms/op

  Histogram, ms/op:
    [11600,000, 11650,000) = 0
    [11650,000, 11700,000) = 1
    [11700,000, 11750,000) = 1
    [11750,000, 11800,000) = 2
    [11800,000, 11850,000) = 2
    [11850,000, 11900,000) = 0
    [11900,000, 11950,000) = 1
    [11950,000, 12000,000) = 0
    [12000,000, 12050,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  11682,622 ms/op
     p(50,0000) =  11804,268 ms/op
     p(90,0000) =  12004,589 ms/op
     p(95,0000) =  12004,589 ms/op
     p(99,0000) =  12004,589 ms/op
     p(99,9000) =  12004,589 ms/op
     p(99,9900) =  12004,589 ms/op
     p(99,9990) =  12004,589 ms/op
     p(99,9999) =  12004,589 ms/op
    p(100,0000) =  12004,589 ms/op


# Run complete. Total time: 00:04:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest    100000000           get    ss    8  11821,712 ± 202,036  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (100000000) = 11821.711982500003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 17263,808 ms/op
# Warmup Iteration   2: 16841,902 ms/op
# Warmup Iteration   3: 16988,373 ms/op
# Warmup Iteration   4: 17067,480 ms/op
# Warmup Iteration   5: 16883,699 ms/op
# Warmup Iteration   6: 17170,249 ms/op
# Warmup Iteration   7: 16884,711 ms/op
# Warmup Iteration   8: 16940,590 ms/op
# Warmup Iteration   9: 17056,877 ms/op
# Warmup Iteration  10: 17009,551 ms/op
Iteration   1: 17038,123 ms/op
Iteration   2: 17329,044 ms/op
Iteration   3: 17077,081 ms/op
Iteration   4: 17065,531 ms/op
Iteration   5: 17538,397 ms/op
Iteration   6: 17087,053 ms/op
Iteration   7: 16983,684 ms/op
Iteration   8: 17092,192 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  17151,388 ±(99.9%) 356,108 ms/op

  Histogram, ms/op:
    [16900,000, 16950,000) = 0
    [16950,000, 17000,000) = 1
    [17000,000, 17050,000) = 1
    [17050,000, 17100,000) = 4
    [17100,000, 17150,000) = 0
    [17150,000, 17200,000) = 0
    [17200,000, 17250,000) = 0
    [17250,000, 17300,000) = 0
    [17300,000, 17350,000) = 1
    [17350,000, 17400,000) = 0
    [17400,000, 17450,000) = 0
    [17450,000, 17500,000) = 0
    [17500,000, 17550,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  16983,684 ms/op
     p(50,0000) =  17082,067 ms/op
     p(90,0000) =  17538,397 ms/op
     p(95,0000) =  17538,397 ms/op
     p(99,0000) =  17538,397 ms/op
     p(99,9000) =  17538,397 ms/op
     p(99,9900) =  17538,397 ms/op
     p(99,9990) =  17538,397 ms/op
     p(99,9999) =  17538,397 ms/op
    p(100,0000) =  17538,397 ms/op


# Run complete. Total time: 00:05:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest    100000000           get    ss    8  17151,388 ± 356,108  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (100000000) = 17151.38826175
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 17125,593 ms/op
# Warmup Iteration   2: 17561,941 ms/op
# Warmup Iteration   3: 16370,415 ms/op
# Warmup Iteration   4: 16441,446 ms/op
# Warmup Iteration   5: 16433,566 ms/op
# Warmup Iteration   6: 16483,655 ms/op
# Warmup Iteration   7: 16486,345 ms/op
# Warmup Iteration   8: 16548,460 ms/op
# Warmup Iteration   9: 16624,763 ms/op
# Warmup Iteration  10: 16643,212 ms/op
Iteration   1: 16593,542 ms/op
Iteration   2: 16580,018 ms/op
Iteration   3: 16714,731 ms/op
Iteration   4: 16719,171 ms/op
Iteration   5: 16827,377 ms/op
Iteration   6: 16633,295 ms/op
Iteration   7: 16441,556 ms/op
Iteration   8: 16468,419 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  16622,264 ±(99.9%) 249,362 ms/op

  Histogram, ms/op:
    [16400,000, 16450,000) = 1
    [16450,000, 16500,000) = 1
    [16500,000, 16550,000) = 0
    [16550,000, 16600,000) = 2
    [16600,000, 16650,000) = 1
    [16650,000, 16700,000) = 0
    [16700,000, 16750,000) = 2
    [16750,000, 16800,000) = 0
    [16800,000, 16850,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  16441,556 ms/op
     p(50,0000) =  16613,419 ms/op
     p(90,0000) =  16827,377 ms/op
     p(95,0000) =  16827,377 ms/op
     p(99,0000) =  16827,377 ms/op
     p(99,9000) =  16827,377 ms/op
     p(99,9900) =  16827,377 ms/op
     p(99,9990) =  16827,377 ms/op
     p(99,9999) =  16827,377 ms/op
    p(100,0000) =  16827,377 ms/op


# Run complete. Total time: 00:05:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest    100000000           get    ss    8  16622,264 ± 249,362  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (100000000) = 16622.263591000003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23510,283 ms/op
# Warmup Iteration   2: 4647,743 ms/op
# Warmup Iteration   3: 4710,113 ms/op
# Warmup Iteration   4: 4633,200 ms/op
# Warmup Iteration   5: 4644,561 ms/op
# Warmup Iteration   6: 4619,753 ms/op
# Warmup Iteration   7: 4718,678 ms/op
# Warmup Iteration   8: 4657,632 ms/op
# Warmup Iteration   9: 4618,463 ms/op
# Warmup Iteration  10: 4639,713 ms/op
Iteration   1: 4672,645 ms/op
Iteration   2: 4698,279 ms/op
Iteration   3: 4613,247 ms/op
Iteration   4: 4692,840 ms/op
Iteration   5: 4618,134 ms/op
Iteration   6: 4664,078 ms/op
Iteration   7: 4638,496 ms/op
Iteration   8: 4629,164 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4653,360 ±(99.9%) 63,493 ms/op

  Histogram, ms/op:
    [4610,000, 4615,000) = 1
    [4615,000, 4620,000) = 1
    [4620,000, 4625,000) = 0
    [4625,000, 4630,000) = 1
    [4630,000, 4635,000) = 0
    [4635,000, 4640,000) = 1
    [4640,000, 4645,000) = 0
    [4645,000, 4650,000) = 0
    [4650,000, 4655,000) = 0
    [4655,000, 4660,000) = 0
    [4660,000, 4665,000) = 1
    [4665,000, 4670,000) = 0
    [4670,000, 4675,000) = 1
    [4675,000, 4680,000) = 0
    [4680,000, 4685,000) = 0
    [4685,000, 4690,000) = 0
    [4690,000, 4695,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   4613,247 ms/op
     p(50,0000) =   4651,287 ms/op
     p(90,0000) =   4698,279 ms/op
     p(95,0000) =   4698,279 ms/op
     p(99,0000) =   4698,279 ms/op
     p(99,9000) =   4698,279 ms/op
     p(99,9900) =   4698,279 ms/op
     p(99,9990) =   4698,279 ms/op
     p(99,9999) =   4698,279 ms/op
    p(100,0000) =   4698,279 ms/op


# Run complete. Total time: 00:02:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest    100000000           get    ss    8  4653,360 ± 63,493  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (100000000) = 4653.3602665
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25259,057 ms/op
# Warmup Iteration   2: 5852,690 ms/op
# Warmup Iteration   3: 5985,196 ms/op
# Warmup Iteration   4: 5898,188 ms/op
# Warmup Iteration   5: 5962,940 ms/op
# Warmup Iteration   6: 5957,159 ms/op
# Warmup Iteration   7: 5899,356 ms/op
# Warmup Iteration   8: 5905,067 ms/op
# Warmup Iteration   9: 5920,007 ms/op
# Warmup Iteration  10: 5914,462 ms/op
Iteration   1: 5883,458 ms/op
Iteration   2: 5922,695 ms/op
Iteration   3: 5814,619 ms/op
Iteration   4: 5928,376 ms/op
Iteration   5: 5943,409 ms/op
Iteration   6: 5946,773 ms/op
Iteration   7: 5898,121 ms/op
Iteration   8: 5951,327 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5911,097 ±(99.9%) 87,345 ms/op

  Histogram, ms/op:
    [5800,000, 5812,500) = 0
    [5812,500, 5825,000) = 1
    [5825,000, 5837,500) = 0
    [5837,500, 5850,000) = 0
    [5850,000, 5862,500) = 0
    [5862,500, 5875,000) = 0
    [5875,000, 5887,500) = 1
    [5887,500, 5900,000) = 1
    [5900,000, 5912,500) = 0
    [5912,500, 5925,000) = 1
    [5925,000, 5937,500) = 1
    [5937,500, 5950,000) = 2
    [5950,000, 5962,500) = 1
    [5962,500, 5975,000) = 0
    [5975,000, 5987,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5814,619 ms/op
     p(50,0000) =   5925,536 ms/op
     p(90,0000) =   5951,327 ms/op
     p(95,0000) =   5951,327 ms/op
     p(99,0000) =   5951,327 ms/op
     p(99,9000) =   5951,327 ms/op
     p(99,9900) =   5951,327 ms/op
     p(99,9990) =   5951,327 ms/op
     p(99,9999) =   5951,327 ms/op
    p(100,0000) =   5951,327 ms/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest    100000000           get    ss    8  5911,097 ± 87,345  ms/op
tests.maptests.identity_object.GsIdentityMapTest (100000000) = 5911.097325125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25184,195 ms/op
# Warmup Iteration   2: 5602,954 ms/op
# Warmup Iteration   3: 5471,773 ms/op
# Warmup Iteration   4: 5446,766 ms/op
# Warmup Iteration   5: 5468,388 ms/op
# Warmup Iteration   6: 5438,221 ms/op
# Warmup Iteration   7: 5440,832 ms/op
# Warmup Iteration   8: 5508,890 ms/op
# Warmup Iteration   9: 5457,518 ms/op
# Warmup Iteration  10: 5519,379 ms/op
Iteration   1: 5442,917 ms/op
Iteration   2: 5440,609 ms/op
Iteration   3: 5443,357 ms/op
Iteration   4: 5439,615 ms/op
Iteration   5: 5478,485 ms/op
Iteration   6: 5470,261 ms/op
Iteration   7: 5495,799 ms/op
Iteration   8: 5442,173 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5456,652 ±(99.9%) 41,621 ms/op

  Histogram, ms/op:
    [5430,000, 5435,000) = 0
    [5435,000, 5440,000) = 1
    [5440,000, 5445,000) = 4
    [5445,000, 5450,000) = 0
    [5450,000, 5455,000) = 0
    [5455,000, 5460,000) = 0
    [5460,000, 5465,000) = 0
    [5465,000, 5470,000) = 0
    [5470,000, 5475,000) = 1
    [5475,000, 5480,000) = 1
    [5480,000, 5485,000) = 0
    [5485,000, 5490,000) = 0
    [5490,000, 5495,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5439,615 ms/op
     p(50,0000) =   5443,137 ms/op
     p(90,0000) =   5495,799 ms/op
     p(95,0000) =   5495,799 ms/op
     p(99,0000) =   5495,799 ms/op
     p(99,9000) =   5495,799 ms/op
     p(99,9900) =   5495,799 ms/op
     p(99,9990) =   5495,799 ms/op
     p(99,9999) =   5495,799 ms/op
    p(100,0000) =   5495,799 ms/op


# Run complete. Total time: 00:02:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest    100000000           get    ss    8  5456,652 ± 41,621  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (100000000) = 5456.652192250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23892,064 ms/op
# Warmup Iteration   2: 5282,038 ms/op
# Warmup Iteration   3: 5133,851 ms/op
# Warmup Iteration   4: 5215,463 ms/op
# Warmup Iteration   5: 5127,490 ms/op
# Warmup Iteration   6: 5216,213 ms/op
# Warmup Iteration   7: 5167,288 ms/op
# Warmup Iteration   8: 5086,855 ms/op
# Warmup Iteration   9: 5173,585 ms/op
# Warmup Iteration  10: 5153,443 ms/op
Iteration   1: 5134,971 ms/op
Iteration   2: 5165,577 ms/op
Iteration   3: 5216,023 ms/op
Iteration   4: 5150,266 ms/op
Iteration   5: 5171,462 ms/op
Iteration   6: 5153,475 ms/op
Iteration   7: 5204,790 ms/op
Iteration   8: 5142,045 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5167,326 ±(99.9%) 55,809 ms/op

  Histogram, ms/op:
    [5130,000, 5135,000) = 1
    [5135,000, 5140,000) = 0
    [5140,000, 5145,000) = 1
    [5145,000, 5150,000) = 0
    [5150,000, 5155,000) = 2
    [5155,000, 5160,000) = 0
    [5160,000, 5165,000) = 0
    [5165,000, 5170,000) = 1
    [5170,000, 5175,000) = 1
    [5175,000, 5180,000) = 0
    [5180,000, 5185,000) = 0
    [5185,000, 5190,000) = 0
    [5190,000, 5195,000) = 0
    [5195,000, 5200,000) = 0
    [5200,000, 5205,000) = 1
    [5205,000, 5210,000) = 0
    [5210,000, 5215,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5134,971 ms/op
     p(50,0000) =   5159,526 ms/op
     p(90,0000) =   5216,023 ms/op
     p(95,0000) =   5216,023 ms/op
     p(99,0000) =   5216,023 ms/op
     p(99,9000) =   5216,023 ms/op
     p(99,9900) =   5216,023 ms/op
     p(99,9990) =   5216,023 ms/op
     p(99,9999) =   5216,023 ms/op
    p(100,0000) =   5216,023 ms/op


# Run complete. Total time: 00:02:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest    100000000           get    ss    8  5167,326 ± 55,809  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (100000000) = 5167.326260375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24995,445 ms/op
# Warmup Iteration   2: 4994,504 ms/op
# Warmup Iteration   3: 5210,011 ms/op
# Warmup Iteration   4: 5179,954 ms/op
# Warmup Iteration   5: 5197,640 ms/op
# Warmup Iteration   6: 5259,178 ms/op
# Warmup Iteration   7: 5194,565 ms/op
# Warmup Iteration   8: 5166,914 ms/op
# Warmup Iteration   9: 5191,541 ms/op
# Warmup Iteration  10: 5181,110 ms/op
Iteration   1: 5172,020 ms/op
Iteration   2: 5163,945 ms/op
Iteration   3: 5181,495 ms/op
Iteration   4: 5156,343 ms/op
Iteration   5: 5176,315 ms/op
Iteration   6: 5185,038 ms/op
Iteration   7: 5194,061 ms/op
Iteration   8: 5172,496 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5175,214 ±(99.9%) 22,773 ms/op

  Histogram, ms/op:
    [5150,000, 5155,000) = 0
    [5155,000, 5160,000) = 1
    [5160,000, 5165,000) = 1
    [5165,000, 5170,000) = 0
    [5170,000, 5175,000) = 2
    [5175,000, 5180,000) = 1
    [5180,000, 5185,000) = 1
    [5185,000, 5190,000) = 1
    [5190,000, 5195,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   5156,343 ms/op
     p(50,0000) =   5174,405 ms/op
     p(90,0000) =   5194,061 ms/op
     p(95,0000) =   5194,061 ms/op
     p(99,0000) =   5194,061 ms/op
     p(99,9000) =   5194,061 ms/op
     p(99,9900) =   5194,061 ms/op
     p(99,9990) =   5194,061 ms/op
     p(99,9999) =   5194,061 ms/op
    p(100,0000) =   5194,061 ms/op


# Run complete. Total time: 00:02:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest    100000000           get    ss    8  5175,214 ± 22,773  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (100000000) = 5175.214099999999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30818,720 ms/op
# Warmup Iteration   2: 11080,635 ms/op
# Warmup Iteration   3: 11401,952 ms/op
# Warmup Iteration   4: 11215,166 ms/op
# Warmup Iteration   5: 11309,618 ms/op
# Warmup Iteration   6: 11256,002 ms/op
# Warmup Iteration   7: 11285,200 ms/op
# Warmup Iteration   8: 11268,261 ms/op
# Warmup Iteration   9: 11315,233 ms/op
# Warmup Iteration  10: 11306,200 ms/op
Iteration   1: 11237,353 ms/op
Iteration   2: 11247,785 ms/op
Iteration   3: 11233,022 ms/op
Iteration   4: 11219,180 ms/op
Iteration   5: 11262,562 ms/op
Iteration   6: 11269,434 ms/op
Iteration   7: 11378,692 ms/op
Iteration   8: 11279,588 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11265,952 ±(99.9%) 95,160 ms/op

  Histogram, ms/op:
    [11200,000, 11212,500) = 0
    [11212,500, 11225,000) = 1
    [11225,000, 11237,500) = 2
    [11237,500, 11250,000) = 1
    [11250,000, 11262,500) = 0
    [11262,500, 11275,000) = 2
    [11275,000, 11287,500) = 1
    [11287,500, 11300,000) = 0
    [11300,000, 11312,500) = 0
    [11312,500, 11325,000) = 0
    [11325,000, 11337,500) = 0
    [11337,500, 11350,000) = 0
    [11350,000, 11362,500) = 0
    [11362,500, 11375,000) = 0
    [11375,000, 11387,500) = 1

  Percentiles, ms/op:
      p(0,0000) =  11219,180 ms/op
     p(50,0000) =  11255,174 ms/op
     p(90,0000) =  11378,692 ms/op
     p(95,0000) =  11378,692 ms/op
     p(99,0000) =  11378,692 ms/op
     p(99,9000) =  11378,692 ms/op
     p(99,9900) =  11378,692 ms/op
     p(99,9990) =  11378,692 ms/op
     p(99,9999) =  11378,692 ms/op
    p(100,0000) =  11378,692 ms/op


# Run complete. Total time: 00:04:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest    100000000           get    ss    8  11265,952 ± 95,160  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (100000000) = 11265.952037875002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 100000000, m_testType = get)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30425,472 ms/op
# Warmup Iteration   2: 11036,503 ms/op
# Warmup Iteration   3: 11056,405 ms/op
# Warmup Iteration   4: 11128,516 ms/op
# Warmup Iteration   5: 11015,632 ms/op
# Warmup Iteration   6: 11015,179 ms/op
# Warmup Iteration   7: 11034,762 ms/op
# Warmup Iteration   8: 11040,323 ms/op
# Warmup Iteration   9: 11117,290 ms/op
# Warmup Iteration  10: 10998,806 ms/op
Iteration   1: 11023,897 ms/op
Iteration   2: 11024,264 ms/op
Iteration   3: 10994,750 ms/op
Iteration   4: 11006,859 ms/op
Iteration   5: 11020,032 ms/op
Iteration   6: 11084,947 ms/op
Iteration   7: 11085,938 ms/op
Iteration   8: 11049,210 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11036,237 ±(99.9%) 65,254 ms/op

  Histogram, ms/op:
    [10990,000, 11000,000) = 1
    [11000,000, 11010,000) = 1
    [11010,000, 11020,000) = 0
    [11020,000, 11030,000) = 3
    [11030,000, 11040,000) = 0
    [11040,000, 11050,000) = 1
    [11050,000, 11060,000) = 0
    [11060,000, 11070,000) = 0
    [11070,000, 11080,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  10994,750 ms/op
     p(50,0000) =  11024,081 ms/op
     p(90,0000) =  11085,938 ms/op
     p(95,0000) =  11085,938 ms/op
     p(99,0000) =  11085,938 ms/op
     p(99,9000) =  11085,938 ms/op
     p(99,9900) =  11085,938 ms/op
     p(99,9990) =  11085,938 ms/op
     p(99,9999) =  11085,938 ms/op
    p(100,0000) =  11085,938 ms/op


# Run complete. Total time: 00:04:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest    100000000           get    ss    8  11036,237 ± 65,254  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (100000000) = 11036.2370935
Results for test type = get:
,10000,100000,1000000,10000000,100000000
tests.maptests.article_examples.IntIntMap1Test,"1802","1739","4940","7941","9313"
tests.maptests.article_examples.IntIntMap2Test,"1181","1577","3654","6099","8928"
tests.maptests.article_examples.IntIntMap3Test,"962","1271","3289","4287","5551"
tests.maptests.article_examples.IntIntMap4Test,"796","1441","3183","3426","4218"
tests.maptests.article_examples.IntIntMap4aTest,"739","1408","2735","3376","4293"
tests.maptests.primitive.FastUtilMapTest,"778","1188","2739","4065","5588"
tests.maptests.primitive.GsMutableMapTest,"1024","1565","2771","4285","5478"
tests.maptests.primitive.KolobokeMutableMapTest,"669","1336","2667","3177","4179"
tests.maptests.primitive.HppcMapTest,"838","1413","3172","4711","5879"
tests.maptests.primitive.TroveJbMapTest,"2225","2696","5490","9955","13075"
tests.maptests.primitive.TroveMapTest,"2068","2442","5196","9604","12656"
tests.maptests.object.FastUtilObjMapTest,"1097","1748","5872","6400","10570"
tests.maptests.object.KolobokeMutableObjTest,"1517","1999","7885","7563","11994"
tests.maptests.object.KolobokeNotNullKeyObjTest,"1515","2003","7874","7572","12122"
tests.maptests.object.KolobokeHashCodeMixingObjTest,"1219","1774","6280","6069","9131"
tests.maptests.object.HppcObjMapTest,"1336","2189","6761","7368","11865"
tests.maptests.object.GsObjMapTest,"1236","1884","6857","7226","9975"
tests.maptests.object.JdkMapTest,"954","1185","5123","6136","8378"
tests.maptests.object.JdkMapTestDifferentCapacity,"947","1138","5103","5126","8196"
tests.maptests.object.TroveJbObjMapTest,"2543","3105","8926","12625","17437"
tests.maptests.object.TroveObjMapTest,"2329","3020","9125","13025","18374"
tests.maptests.article_examples.ObjObjMapTest,"1038","1575","6259","6114","8672"
tests.maptests.prim_object.FastUtilIntObjectMapTest,"787","1118","3021","4298","5642"
tests.maptests.prim_object.GsIntObjectMapTest,"841","1711","3532","4756","6471"
tests.maptests.prim_object.KolobokeIntObjectMapTest,"926","1194","3097","4269","5367"
tests.maptests.prim_object.HppcIntObjectMapTest,"1028","1492","3294","4785","6018"
tests.maptests.prim_object.TroveJbIntObjectMapTest,"2159","2739","6165","10161","11995"
tests.maptests.prim_object.TroveIntObjectMapTest,"2038","2528","5132","9517","12449"
tests.maptests.object_prim.FastUtilObjectIntMapTest,"1217","1591","5983","6305","11087"
tests.maptests.object_prim.GsObjectIntMapTest,"1544","2067","7992","8341","14747"
tests.maptests.object_prim.KolobokeObjectIntMapTest,"1355","1731","7392","7210","13834"
tests.maptests.object_prim.HppcObjectIntMapTest,"1372","1947","6882","7000","11821"
tests.maptests.object_prim.TroveJbObjectIntMapTest,"2538","3097","9544","12659","17151"
tests.maptests.object_prim.TroveObjectIntMapTest,"2436","2911","9149","12165","16622"
tests.maptests.identity_object.FastUtilRef2ObjectMapTest,"651","1295","3321","3855","4653"
tests.maptests.identity_object.GsIdentityMapTest,"833","1171","4295","4551","5911"
tests.maptests.identity_object.KolobokeIdentityMapTest,"967","1524","4494","4319","5456"
tests.maptests.identity_object.HppcIdentityMapTest,"875","1464","3297","4334","5167"
tests.maptests.identity_object.JDKIdentityMapTest,"1534","1238","3749","6971","5175"
tests.maptests.identity_object.TroveJbIdentityMapTest,"2225","2752","5150","9730","11265"
tests.maptests.identity_object.TroveIdentityMapTest,"2489","2844","4851","9398","11036"

# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4837,420 ms/op
# Warmup Iteration   2: 4687,057 ms/op
# Warmup Iteration   3: 4656,475 ms/op
# Warmup Iteration   4: 4620,167 ms/op
# Warmup Iteration   5: 4639,531 ms/op
# Warmup Iteration   6: 4702,310 ms/op
# Warmup Iteration   7: 4663,084 ms/op
# Warmup Iteration   8: 4666,918 ms/op
# Warmup Iteration   9: 4634,548 ms/op
# Warmup Iteration  10: 4660,386 ms/op
Iteration   1: 4624,015 ms/op
Iteration   2: 4686,883 ms/op
Iteration   3: 4671,846 ms/op
Iteration   4: 4736,146 ms/op
Iteration   5: 4656,831 ms/op
Iteration   6: 4677,637 ms/op
Iteration   7: 4644,272 ms/op
Iteration   8: 4655,009 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4669,080 ±(99.9%) 64,191 ms/op

  Histogram, ms/op:
    [4600,000, 4612,500) = 0
    [4612,500, 4625,000) = 1
    [4625,000, 4637,500) = 0
    [4637,500, 4650,000) = 1
    [4650,000, 4662,500) = 2
    [4662,500, 4675,000) = 1
    [4675,000, 4687,500) = 2
    [4687,500, 4700,000) = 0
    [4700,000, 4712,500) = 0
    [4712,500, 4725,000) = 0
    [4725,000, 4737,500) = 1
    [4737,500, 4750,000) = 0
    [4750,000, 4762,500) = 0
    [4762,500, 4775,000) = 0
    [4775,000, 4787,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4624,015 ms/op
     p(50,0000) =   4664,338 ms/op
     p(90,0000) =   4736,146 ms/op
     p(95,0000) =   4736,146 ms/op
     p(99,0000) =   4736,146 ms/op
     p(99,9000) =   4736,146 ms/op
     p(99,9900) =   4736,146 ms/op
     p(99,9990) =   4736,146 ms/op
     p(99,9999) =   4736,146 ms/op
    p(100,0000) =   4736,146 ms/op


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test        10000           put    ss    8  4669,080 ± 64,191  ms/op
tests.maptests.article_examples.IntIntMap1Test (10000) = 4669.07978175
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1606,850 ms/op
# Warmup Iteration   2: 1470,759 ms/op
# Warmup Iteration   3: 1464,100 ms/op
# Warmup Iteration   4: 1522,245 ms/op
# Warmup Iteration   5: 1468,467 ms/op
# Warmup Iteration   6: 1513,293 ms/op
# Warmup Iteration   7: 1449,977 ms/op
# Warmup Iteration   8: 1468,558 ms/op
# Warmup Iteration   9: 1466,796 ms/op
# Warmup Iteration  10: 1517,486 ms/op
Iteration   1: 1471,542 ms/op
Iteration   2: 1491,504 ms/op
Iteration   3: 1513,682 ms/op
Iteration   4: 1481,676 ms/op
Iteration   5: 1483,030 ms/op
Iteration   6: 1474,015 ms/op
Iteration   7: 1456,686 ms/op
Iteration   8: 1457,708 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1478,730 ±(99.9%) 35,505 ms/op

  Histogram, ms/op:
    [1450,000, 1455,000) = 0
    [1455,000, 1460,000) = 2
    [1460,000, 1465,000) = 0
    [1465,000, 1470,000) = 0
    [1470,000, 1475,000) = 2
    [1475,000, 1480,000) = 0
    [1480,000, 1485,000) = 2
    [1485,000, 1490,000) = 0
    [1490,000, 1495,000) = 1
    [1495,000, 1500,000) = 0
    [1500,000, 1505,000) = 0
    [1505,000, 1510,000) = 0
    [1510,000, 1515,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1456,686 ms/op
     p(50,0000) =   1477,845 ms/op
     p(90,0000) =   1513,682 ms/op
     p(95,0000) =   1513,682 ms/op
     p(99,0000) =   1513,682 ms/op
     p(99,9000) =   1513,682 ms/op
     p(99,9900) =   1513,682 ms/op
     p(99,9990) =   1513,682 ms/op
     p(99,9999) =   1513,682 ms/op
    p(100,0000) =   1513,682 ms/op


# Run complete. Total time: 00:00:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test        10000           put    ss    8  1478,730 ± 35,505  ms/op
tests.maptests.article_examples.IntIntMap2Test (10000) = 1478.73042875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1265,329 ms/op
# Warmup Iteration   2: 1221,690 ms/op
# Warmup Iteration   3: 1138,181 ms/op
# Warmup Iteration   4: 1118,215 ms/op
# Warmup Iteration   5: 1148,597 ms/op
# Warmup Iteration   6: 1109,799 ms/op
# Warmup Iteration   7: 1106,848 ms/op
# Warmup Iteration   8: 1133,230 ms/op
# Warmup Iteration   9: 1121,201 ms/op
# Warmup Iteration  10: 1124,774 ms/op
Iteration   1: 1110,821 ms/op
Iteration   2: 1153,082 ms/op
Iteration   3: 1109,914 ms/op
Iteration   4: 1118,354 ms/op
Iteration   5: 1123,636 ms/op
Iteration   6: 1153,035 ms/op
Iteration   7: 1111,638 ms/op
Iteration   8: 1134,777 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1126,907 ±(99.9%) 34,614 ms/op

  Histogram, ms/op:
    [1100,000, 1105,000) = 0
    [1105,000, 1110,000) = 1
    [1110,000, 1115,000) = 2
    [1115,000, 1120,000) = 1
    [1120,000, 1125,000) = 1
    [1125,000, 1130,000) = 0
    [1130,000, 1135,000) = 1
    [1135,000, 1140,000) = 0
    [1140,000, 1145,000) = 0
    [1145,000, 1150,000) = 0
    [1150,000, 1155,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   1109,914 ms/op
     p(50,0000) =   1120,995 ms/op
     p(90,0000) =   1153,082 ms/op
     p(95,0000) =   1153,082 ms/op
     p(99,0000) =   1153,082 ms/op
     p(99,9000) =   1153,082 ms/op
     p(99,9900) =   1153,082 ms/op
     p(99,9990) =   1153,082 ms/op
     p(99,9999) =   1153,082 ms/op
    p(100,0000) =   1153,082 ms/op


# Run complete. Total time: 00:00:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test        10000           put    ss    8  1126,907 ± 34,614  ms/op
tests.maptests.article_examples.IntIntMap3Test (10000) = 1126.906958625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1145,224 ms/op
# Warmup Iteration   2: 1106,706 ms/op
# Warmup Iteration   3: 1105,243 ms/op
# Warmup Iteration   4: 1069,436 ms/op
# Warmup Iteration   5: 1084,525 ms/op
# Warmup Iteration   6: 1053,909 ms/op
# Warmup Iteration   7: 1071,228 ms/op
# Warmup Iteration   8: 977,810 ms/op
# Warmup Iteration   9: 1018,485 ms/op
# Warmup Iteration  10: 1013,351 ms/op
Iteration   1: 973,438 ms/op
Iteration   2: 1011,084 ms/op
Iteration   3: 1036,413 ms/op
Iteration   4: 1046,140 ms/op
Iteration   5: 1029,873 ms/op
Iteration   6: 1014,695 ms/op
Iteration   7: 1039,653 ms/op
Iteration   8: 1015,101 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1020,800 ±(99.9%) 44,141 ms/op

  Histogram, ms/op:
    [ 970,000,  975,000) = 1
    [ 975,000,  980,000) = 0
    [ 980,000,  985,000) = 0
    [ 985,000,  990,000) = 0
    [ 990,000,  995,000) = 0
    [ 995,000, 1000,000) = 0
    [1000,000, 1005,000) = 0
    [1005,000, 1010,000) = 0
    [1010,000, 1015,000) = 2
    [1015,000, 1020,000) = 1
    [1020,000, 1025,000) = 0
    [1025,000, 1030,000) = 1
    [1030,000, 1035,000) = 0
    [1035,000, 1040,000) = 2
    [1040,000, 1045,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    973,438 ms/op
     p(50,0000) =   1022,487 ms/op
     p(90,0000) =   1046,140 ms/op
     p(95,0000) =   1046,140 ms/op
     p(99,0000) =   1046,140 ms/op
     p(99,9000) =   1046,140 ms/op
     p(99,9900) =   1046,140 ms/op
     p(99,9990) =   1046,140 ms/op
     p(99,9999) =   1046,140 ms/op
    p(100,0000) =   1046,140 ms/op


# Run complete. Total time: 00:00:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test        10000           put    ss    8  1020,800 ± 44,141  ms/op
tests.maptests.article_examples.IntIntMap4Test (10000) = 1020.799831625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1082,049 ms/op
# Warmup Iteration   2: 1084,415 ms/op
# Warmup Iteration   3: 1011,446 ms/op
# Warmup Iteration   4: 1035,264 ms/op
# Warmup Iteration   5: 1037,474 ms/op
# Warmup Iteration   6: 1017,893 ms/op
# Warmup Iteration   7: 953,628 ms/op
# Warmup Iteration   8: 949,035 ms/op
# Warmup Iteration   9: 916,611 ms/op
# Warmup Iteration  10: 918,696 ms/op
Iteration   1: 923,283 ms/op
Iteration   2: 921,620 ms/op
Iteration   3: 1006,576 ms/op
Iteration   4: 914,585 ms/op
Iteration   5: 925,168 ms/op
Iteration   6: 947,753 ms/op
Iteration   7: 930,815 ms/op
Iteration   8: 922,226 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    936,503 ±(99.9%) 57,259 ms/op

  Histogram, ms/op:
    [ 910,000,  920,000) = 1
    [ 920,000,  930,000) = 4
    [ 930,000,  940,000) = 1
    [ 940,000,  950,000) = 1
    [ 950,000,  960,000) = 0
    [ 960,000,  970,000) = 0
    [ 970,000,  980,000) = 0
    [ 980,000,  990,000) = 0
    [ 990,000, 1000,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    914,585 ms/op
     p(50,0000) =    924,226 ms/op
     p(90,0000) =   1006,576 ms/op
     p(95,0000) =   1006,576 ms/op
     p(99,0000) =   1006,576 ms/op
     p(99,9000) =   1006,576 ms/op
     p(99,9900) =   1006,576 ms/op
     p(99,9990) =   1006,576 ms/op
     p(99,9999) =   1006,576 ms/op
    p(100,0000) =   1006,576 ms/op


# Run complete. Total time: 00:00:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest        10000           put    ss    8  936,503 ± 57,259  ms/op
tests.maptests.article_examples.IntIntMap4aTest (10000) = 936.50327675
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1135,663 ms/op
# Warmup Iteration   2: 1077,034 ms/op
# Warmup Iteration   3: 1040,213 ms/op
# Warmup Iteration   4: 1034,956 ms/op
# Warmup Iteration   5: 1030,289 ms/op
# Warmup Iteration   6: 1077,943 ms/op
# Warmup Iteration   7: 1044,098 ms/op
# Warmup Iteration   8: 1024,230 ms/op
# Warmup Iteration   9: 1025,054 ms/op
# Warmup Iteration  10: 1007,561 ms/op
Iteration   1: 1000,697 ms/op
Iteration   2: 1076,376 ms/op
Iteration   3: 1021,727 ms/op
Iteration   4: 1067,270 ms/op
Iteration   5: 1006,609 ms/op
Iteration   6: 1057,139 ms/op
Iteration   7: 1011,919 ms/op
Iteration   8: 1035,238 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1034,622 ±(99.9%) 55,668 ms/op

  Histogram, ms/op:
    [1000,000, 1005,000) = 1
    [1005,000, 1010,000) = 1
    [1010,000, 1015,000) = 1
    [1015,000, 1020,000) = 0
    [1020,000, 1025,000) = 1
    [1025,000, 1030,000) = 0
    [1030,000, 1035,000) = 0
    [1035,000, 1040,000) = 1
    [1040,000, 1045,000) = 0
    [1045,000, 1050,000) = 0
    [1050,000, 1055,000) = 0
    [1055,000, 1060,000) = 1
    [1060,000, 1065,000) = 0
    [1065,000, 1070,000) = 1
    [1070,000, 1075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1000,697 ms/op
     p(50,0000) =   1028,482 ms/op
     p(90,0000) =   1076,376 ms/op
     p(95,0000) =   1076,376 ms/op
     p(99,0000) =   1076,376 ms/op
     p(99,9000) =   1076,376 ms/op
     p(99,9900) =   1076,376 ms/op
     p(99,9990) =   1076,376 ms/op
     p(99,9999) =   1076,376 ms/op
    p(100,0000) =   1076,376 ms/op


# Run complete. Total time: 00:00:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest        10000           put    ss    8  1034,622 ± 55,668  ms/op
tests.maptests.primitive.FastUtilMapTest (10000) = 1034.62182575
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1492,492 ms/op
# Warmup Iteration   2: 1371,579 ms/op
# Warmup Iteration   3: 1379,322 ms/op
# Warmup Iteration   4: 1370,203 ms/op
# Warmup Iteration   5: 1417,079 ms/op
# Warmup Iteration   6: 1371,334 ms/op
# Warmup Iteration   7: 1347,015 ms/op
# Warmup Iteration   8: 1356,861 ms/op
# Warmup Iteration   9: 1377,382 ms/op
# Warmup Iteration  10: 1367,898 ms/op
Iteration   1: 1351,170 ms/op
Iteration   2: 1377,231 ms/op
Iteration   3: 1356,720 ms/op
Iteration   4: 1374,019 ms/op
Iteration   5: 1349,602 ms/op
Iteration   6: 1375,910 ms/op
Iteration   7: 1379,140 ms/op
Iteration   8: 1352,049 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1364,480 ±(99.9%) 25,163 ms/op

  Histogram, ms/op:
    [1340,000, 1342,500) = 0
    [1342,500, 1345,000) = 0
    [1345,000, 1347,500) = 0
    [1347,500, 1350,000) = 1
    [1350,000, 1352,500) = 2
    [1352,500, 1355,000) = 0
    [1355,000, 1357,500) = 1
    [1357,500, 1360,000) = 0
    [1360,000, 1362,500) = 0
    [1362,500, 1365,000) = 0
    [1365,000, 1367,500) = 0
    [1367,500, 1370,000) = 0
    [1370,000, 1372,500) = 0
    [1372,500, 1375,000) = 1
    [1375,000, 1377,500) = 2

  Percentiles, ms/op:
      p(0,0000) =   1349,602 ms/op
     p(50,0000) =   1365,370 ms/op
     p(90,0000) =   1379,140 ms/op
     p(95,0000) =   1379,140 ms/op
     p(99,0000) =   1379,140 ms/op
     p(99,9000) =   1379,140 ms/op
     p(99,9900) =   1379,140 ms/op
     p(99,9990) =   1379,140 ms/op
     p(99,9999) =   1379,140 ms/op
    p(100,0000) =   1379,140 ms/op


# Run complete. Total time: 00:00:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest        10000           put    ss    8  1364,480 ± 25,163  ms/op
tests.maptests.primitive.GsMutableMapTest (10000) = 1364.480148625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1164,296 ms/op
# Warmup Iteration   2: 1193,138 ms/op
# Warmup Iteration   3: 1133,671 ms/op
# Warmup Iteration   4: 1135,889 ms/op
# Warmup Iteration   5: 1167,327 ms/op
# Warmup Iteration   6: 1130,332 ms/op
# Warmup Iteration   7: 951,970 ms/op
# Warmup Iteration   8: 946,616 ms/op
# Warmup Iteration   9: 914,344 ms/op
# Warmup Iteration  10: 984,388 ms/op
Iteration   1: 960,401 ms/op
Iteration   2: 901,903 ms/op
Iteration   3: 906,478 ms/op
Iteration   4: 946,257 ms/op
Iteration   5: 951,239 ms/op
Iteration   6: 940,149 ms/op
Iteration   7: 925,791 ms/op
Iteration   8: 899,761 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    928,997 ±(99.9%) 45,759 ms/op

  Histogram, ms/op:
    [890,000, 895,000) = 0
    [895,000, 900,000) = 1
    [900,000, 905,000) = 1
    [905,000, 910,000) = 1
    [910,000, 915,000) = 0
    [915,000, 920,000) = 0
    [920,000, 925,000) = 0
    [925,000, 930,000) = 1
    [930,000, 935,000) = 0
    [935,000, 940,000) = 0
    [940,000, 945,000) = 1
    [945,000, 950,000) = 1
    [950,000, 955,000) = 1
    [955,000, 960,000) = 0
    [960,000, 965,000) = 1

  Percentiles, ms/op:
      p(0,0000) =    899,761 ms/op
     p(50,0000) =    932,970 ms/op
     p(90,0000) =    960,401 ms/op
     p(95,0000) =    960,401 ms/op
     p(99,0000) =    960,401 ms/op
     p(99,9000) =    960,401 ms/op
     p(99,9900) =    960,401 ms/op
     p(99,9990) =    960,401 ms/op
     p(99,9999) =    960,401 ms/op
    p(100,0000) =    960,401 ms/op


# Run complete. Total time: 00:00:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest        10000           put    ss    8  928,997 ± 45,759  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (10000) = 928.99738975
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1333,282 ms/op
# Warmup Iteration   2: 1364,362 ms/op
# Warmup Iteration   3: 1261,597 ms/op
# Warmup Iteration   4: 1278,070 ms/op
# Warmup Iteration   5: 1283,012 ms/op
# Warmup Iteration   6: 1240,783 ms/op
# Warmup Iteration   7: 1218,600 ms/op
# Warmup Iteration   8: 1176,941 ms/op
# Warmup Iteration   9: 1172,432 ms/op
# Warmup Iteration  10: 1208,266 ms/op
Iteration   1: 1245,561 ms/op
Iteration   2: 1190,125 ms/op
Iteration   3: 1202,461 ms/op
Iteration   4: 1220,813 ms/op
Iteration   5: 1208,416 ms/op
Iteration   6: 1218,340 ms/op
Iteration   7: 1235,708 ms/op
Iteration   8: 1192,895 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1214,290 ±(99.9%) 37,631 ms/op

  Histogram, ms/op:
    [1190,000, 1195,000) = 2
    [1195,000, 1200,000) = 0
    [1200,000, 1205,000) = 1
    [1205,000, 1210,000) = 1
    [1210,000, 1215,000) = 0
    [1215,000, 1220,000) = 1
    [1220,000, 1225,000) = 1
    [1225,000, 1230,000) = 0
    [1230,000, 1235,000) = 0
    [1235,000, 1240,000) = 1
    [1240,000, 1245,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1190,125 ms/op
     p(50,0000) =   1213,378 ms/op
     p(90,0000) =   1245,561 ms/op
     p(95,0000) =   1245,561 ms/op
     p(99,0000) =   1245,561 ms/op
     p(99,9000) =   1245,561 ms/op
     p(99,9900) =   1245,561 ms/op
     p(99,9990) =   1245,561 ms/op
     p(99,9999) =   1245,561 ms/op
    p(100,0000) =   1245,561 ms/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest        10000           put    ss    8  1214,290 ± 37,631  ms/op
tests.maptests.primitive.HppcMapTest (10000) = 1214.289786
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2684,235 ms/op
# Warmup Iteration   2: 2662,128 ms/op
# Warmup Iteration   3: 2570,738 ms/op
# Warmup Iteration   4: 2555,562 ms/op
# Warmup Iteration   5: 2560,085 ms/op
# Warmup Iteration   6: 2555,535 ms/op
# Warmup Iteration   7: 2523,107 ms/op
# Warmup Iteration   8: 2561,026 ms/op
# Warmup Iteration   9: 2547,839 ms/op
# Warmup Iteration  10: 2581,727 ms/op
Iteration   1: 2562,757 ms/op
Iteration   2: 2523,868 ms/op
Iteration   3: 2582,960 ms/op
Iteration   4: 2593,120 ms/op
Iteration   5: 2585,043 ms/op
Iteration   6: 2600,067 ms/op
Iteration   7: 2549,528 ms/op
Iteration   8: 2519,628 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2564,621 ±(99.9%) 59,322 ms/op

  Histogram, ms/op:
    [2510,000, 2520,000) = 1
    [2520,000, 2530,000) = 1
    [2530,000, 2540,000) = 0
    [2540,000, 2550,000) = 1
    [2550,000, 2560,000) = 0
    [2560,000, 2570,000) = 1
    [2570,000, 2580,000) = 0
    [2580,000, 2590,000) = 2
    [2590,000, 2600,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2519,628 ms/op
     p(50,0000) =   2572,858 ms/op
     p(90,0000) =   2600,067 ms/op
     p(95,0000) =   2600,067 ms/op
     p(99,0000) =   2600,067 ms/op
     p(99,9000) =   2600,067 ms/op
     p(99,9900) =   2600,067 ms/op
     p(99,9990) =   2600,067 ms/op
     p(99,9999) =   2600,067 ms/op
    p(100,0000) =   2600,067 ms/op


# Run complete. Total time: 00:00:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest        10000           put    ss    8  2564,621 ± 59,322  ms/op
tests.maptests.primitive.TroveJbMapTest (10000) = 2564.62148225
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2616,557 ms/op
# Warmup Iteration   2: 2490,885 ms/op
# Warmup Iteration   3: 2480,062 ms/op
# Warmup Iteration   4: 2487,202 ms/op
# Warmup Iteration   5: 2550,852 ms/op
# Warmup Iteration   6: 2506,968 ms/op
# Warmup Iteration   7: 2468,633 ms/op
# Warmup Iteration   8: 2437,526 ms/op
# Warmup Iteration   9: 2487,771 ms/op
# Warmup Iteration  10: 2524,279 ms/op
Iteration   1: 2516,830 ms/op
Iteration   2: 2490,024 ms/op
Iteration   3: 2516,987 ms/op
Iteration   4: 2524,366 ms/op
Iteration   5: 2489,104 ms/op
Iteration   6: 2483,858 ms/op
Iteration   7: 2530,035 ms/op
Iteration   8: 2528,627 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2509,979 ±(99.9%) 36,630 ms/op

  Histogram, ms/op:
    [2480,000, 2485,000) = 1
    [2485,000, 2490,000) = 1
    [2490,000, 2495,000) = 1
    [2495,000, 2500,000) = 0
    [2500,000, 2505,000) = 0
    [2505,000, 2510,000) = 0
    [2510,000, 2515,000) = 0
    [2515,000, 2520,000) = 2
    [2520,000, 2525,000) = 1
    [2525,000, 2530,000) = 1
    [2530,000, 2535,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2483,858 ms/op
     p(50,0000) =   2516,908 ms/op
     p(90,0000) =   2530,035 ms/op
     p(95,0000) =   2530,035 ms/op
     p(99,0000) =   2530,035 ms/op
     p(99,9000) =   2530,035 ms/op
     p(99,9900) =   2530,035 ms/op
     p(99,9990) =   2530,035 ms/op
     p(99,9999) =   2530,035 ms/op
    p(100,0000) =   2530,035 ms/op


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest        10000           put    ss    8  2509,979 ± 36,630  ms/op
tests.maptests.primitive.TroveMapTest (10000) = 2509.978809625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2188,262 ms/op
# Warmup Iteration   2: 2105,386 ms/op
# Warmup Iteration   3: 2082,900 ms/op
# Warmup Iteration   4: 2119,466 ms/op
# Warmup Iteration   5: 2117,195 ms/op
# Warmup Iteration   6: 2096,541 ms/op
# Warmup Iteration   7: 2056,545 ms/op
# Warmup Iteration   8: 2071,126 ms/op
# Warmup Iteration   9: 2096,027 ms/op
# Warmup Iteration  10: 2106,763 ms/op
Iteration   1: 2176,693 ms/op
Iteration   2: 2108,361 ms/op
Iteration   3: 2072,577 ms/op
Iteration   4: 2091,812 ms/op
Iteration   5: 2088,256 ms/op
Iteration   6: 2070,919 ms/op
Iteration   7: 2115,712 ms/op
Iteration   8: 2065,697 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2098,753 ±(99.9%) 69,185 ms/op

  Histogram, ms/op:
    [2000,000, 2012,500) = 0
    [2012,500, 2025,000) = 0
    [2025,000, 2037,500) = 0
    [2037,500, 2050,000) = 0
    [2050,000, 2062,500) = 0
    [2062,500, 2075,000) = 3
    [2075,000, 2087,500) = 0
    [2087,500, 2100,000) = 2
    [2100,000, 2112,500) = 1
    [2112,500, 2125,000) = 1
    [2125,000, 2137,500) = 0
    [2137,500, 2150,000) = 0
    [2150,000, 2162,500) = 0
    [2162,500, 2175,000) = 0
    [2175,000, 2187,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   2065,697 ms/op
     p(50,0000) =   2090,034 ms/op
     p(90,0000) =   2176,693 ms/op
     p(95,0000) =   2176,693 ms/op
     p(99,0000) =   2176,693 ms/op
     p(99,9000) =   2176,693 ms/op
     p(99,9900) =   2176,693 ms/op
     p(99,9990) =   2176,693 ms/op
     p(99,9999) =   2176,693 ms/op
    p(100,0000) =   2176,693 ms/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest        10000           put    ss    8  2098,753 ± 69,185  ms/op
tests.maptests.object.FastUtilObjMapTest (10000) = 2098.75339325
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2632,154 ms/op
# Warmup Iteration   2: 2476,019 ms/op
# Warmup Iteration   3: 2488,914 ms/op
# Warmup Iteration   4: 2544,683 ms/op
# Warmup Iteration   5: 2454,829 ms/op
# Warmup Iteration   6: 2472,453 ms/op
# Warmup Iteration   7: 2460,165 ms/op
# Warmup Iteration   8: 2503,262 ms/op
# Warmup Iteration   9: 2493,982 ms/op
# Warmup Iteration  10: 2480,389 ms/op
Iteration   1: 2476,368 ms/op
Iteration   2: 2500,375 ms/op
Iteration   3: 2516,143 ms/op
Iteration   4: 2490,643 ms/op
Iteration   5: 2507,825 ms/op
Iteration   6: 2522,825 ms/op
Iteration   7: 2451,449 ms/op
Iteration   8: 2451,535 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2489,645 ±(99.9%) 52,795 ms/op

  Histogram, ms/op:
    [2450,000, 2455,000) = 2
    [2455,000, 2460,000) = 0
    [2460,000, 2465,000) = 0
    [2465,000, 2470,000) = 0
    [2470,000, 2475,000) = 0
    [2475,000, 2480,000) = 1
    [2480,000, 2485,000) = 0
    [2485,000, 2490,000) = 0
    [2490,000, 2495,000) = 1
    [2495,000, 2500,000) = 0
    [2500,000, 2505,000) = 1
    [2505,000, 2510,000) = 1
    [2510,000, 2515,000) = 0
    [2515,000, 2520,000) = 1
    [2520,000, 2525,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2451,449 ms/op
     p(50,0000) =   2495,509 ms/op
     p(90,0000) =   2522,825 ms/op
     p(95,0000) =   2522,825 ms/op
     p(99,0000) =   2522,825 ms/op
     p(99,9000) =   2522,825 ms/op
     p(99,9900) =   2522,825 ms/op
     p(99,9990) =   2522,825 ms/op
     p(99,9999) =   2522,825 ms/op
    p(100,0000) =   2522,825 ms/op


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest        10000           put    ss    8  2489,645 ± 52,795  ms/op
tests.maptests.object.KolobokeMutableObjTest (10000) = 2489.645476625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2692,254 ms/op
# Warmup Iteration   2: 2546,187 ms/op
# Warmup Iteration   3: 2523,695 ms/op
# Warmup Iteration   4: 2553,438 ms/op
# Warmup Iteration   5: 2560,175 ms/op
# Warmup Iteration   6: 2515,819 ms/op
# Warmup Iteration   7: 2589,787 ms/op
# Warmup Iteration   8: 2636,426 ms/op
# Warmup Iteration   9: 2533,402 ms/op
# Warmup Iteration  10: 2574,977 ms/op
Iteration   1: 2543,452 ms/op
Iteration   2: 2566,373 ms/op
Iteration   3: 2584,408 ms/op
Iteration   4: 2575,619 ms/op
Iteration   5: 2573,765 ms/op
Iteration   6: 2588,549 ms/op
Iteration   7: 2560,175 ms/op
Iteration   8: 2537,083 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2566,178 ±(99.9%) 35,244 ms/op

  Histogram, ms/op:
    [2530,000, 2535,000) = 0
    [2535,000, 2540,000) = 1
    [2540,000, 2545,000) = 1
    [2545,000, 2550,000) = 0
    [2550,000, 2555,000) = 0
    [2555,000, 2560,000) = 0
    [2560,000, 2565,000) = 1
    [2565,000, 2570,000) = 1
    [2570,000, 2575,000) = 1
    [2575,000, 2580,000) = 1
    [2580,000, 2585,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2537,083 ms/op
     p(50,0000) =   2570,069 ms/op
     p(90,0000) =   2588,549 ms/op
     p(95,0000) =   2588,549 ms/op
     p(99,0000) =   2588,549 ms/op
     p(99,9000) =   2588,549 ms/op
     p(99,9900) =   2588,549 ms/op
     p(99,9990) =   2588,549 ms/op
     p(99,9999) =   2588,549 ms/op
    p(100,0000) =   2588,549 ms/op


# Run complete. Total time: 00:00:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest        10000           put    ss    8  2566,178 ± 35,244  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (10000) = 2566.178095125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3278,732 ms/op
# Warmup Iteration   2: 3060,384 ms/op
# Warmup Iteration   3: 3100,780 ms/op
# Warmup Iteration   4: 3018,264 ms/op
# Warmup Iteration   5: 3054,195 ms/op
# Warmup Iteration   6: 3061,083 ms/op
# Warmup Iteration   7: 3114,813 ms/op
# Warmup Iteration   8: 3115,259 ms/op
# Warmup Iteration   9: 3192,428 ms/op
# Warmup Iteration  10: 3112,901 ms/op
Iteration   1: 3141,901 ms/op
Iteration   2: 3060,749 ms/op
Iteration   3: 3115,054 ms/op
Iteration   4: 3054,991 ms/op
Iteration   5: 3060,278 ms/op
Iteration   6: 3063,942 ms/op
Iteration   7: 3072,552 ms/op
Iteration   8: 3038,457 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3075,990 ±(99.9%) 66,059 ms/op

  Histogram, ms/op:
    [3000,000, 3012,500) = 0
    [3012,500, 3025,000) = 0
    [3025,000, 3037,500) = 0
    [3037,500, 3050,000) = 1
    [3050,000, 3062,500) = 3
    [3062,500, 3075,000) = 2
    [3075,000, 3087,500) = 0
    [3087,500, 3100,000) = 0
    [3100,000, 3112,500) = 0
    [3112,500, 3125,000) = 1
    [3125,000, 3137,500) = 0
    [3137,500, 3150,000) = 1
    [3150,000, 3162,500) = 0
    [3162,500, 3175,000) = 0
    [3175,000, 3187,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   3038,457 ms/op
     p(50,0000) =   3062,345 ms/op
     p(90,0000) =   3141,901 ms/op
     p(95,0000) =   3141,901 ms/op
     p(99,0000) =   3141,901 ms/op
     p(99,9000) =   3141,901 ms/op
     p(99,9900) =   3141,901 ms/op
     p(99,9990) =   3141,901 ms/op
     p(99,9999) =   3141,901 ms/op
    p(100,0000) =   3141,901 ms/op


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest        10000           put    ss    8  3075,990 ± 66,059  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (10000) = 3075.9903437499997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2579,421 ms/op
# Warmup Iteration   2: 2545,770 ms/op
# Warmup Iteration   3: 2486,345 ms/op
# Warmup Iteration   4: 2498,905 ms/op
# Warmup Iteration   5: 2484,445 ms/op
# Warmup Iteration   6: 2511,409 ms/op
# Warmup Iteration   7: 2487,638 ms/op
# Warmup Iteration   8: 2504,027 ms/op
# Warmup Iteration   9: 2475,300 ms/op
# Warmup Iteration  10: 2521,233 ms/op
Iteration   1: 2554,895 ms/op
Iteration   2: 2517,142 ms/op
Iteration   3: 2486,383 ms/op
Iteration   4: 2474,106 ms/op
Iteration   5: 2490,673 ms/op
Iteration   6: 2529,919 ms/op
Iteration   7: 2466,571 ms/op
Iteration   8: 2508,951 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2503,580 ±(99.9%) 57,088 ms/op

  Histogram, ms/op:
    [2460,000, 2470,000) = 1
    [2470,000, 2480,000) = 1
    [2480,000, 2490,000) = 1
    [2490,000, 2500,000) = 1
    [2500,000, 2510,000) = 1
    [2510,000, 2520,000) = 1
    [2520,000, 2530,000) = 1
    [2530,000, 2540,000) = 0
    [2540,000, 2550,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2466,571 ms/op
     p(50,0000) =   2499,812 ms/op
     p(90,0000) =   2554,895 ms/op
     p(95,0000) =   2554,895 ms/op
     p(99,0000) =   2554,895 ms/op
     p(99,9000) =   2554,895 ms/op
     p(99,9900) =   2554,895 ms/op
     p(99,9990) =   2554,895 ms/op
     p(99,9999) =   2554,895 ms/op
    p(100,0000) =   2554,895 ms/op


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest        10000           put    ss    8  2503,580 ± 57,088  ms/op
tests.maptests.object.HppcObjMapTest (10000) = 2503.5800274999997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2949,552 ms/op
# Warmup Iteration   2: 2845,975 ms/op
# Warmup Iteration   3: 2782,164 ms/op
# Warmup Iteration   4: 2775,950 ms/op
# Warmup Iteration   5: 2768,752 ms/op
# Warmup Iteration   6: 2756,409 ms/op
# Warmup Iteration   7: 2804,314 ms/op
# Warmup Iteration   8: 2743,162 ms/op
# Warmup Iteration   9: 2801,774 ms/op
# Warmup Iteration  10: 2788,378 ms/op
Iteration   1: 2805,869 ms/op
Iteration   2: 2816,590 ms/op
Iteration   3: 2854,895 ms/op
Iteration   4: 2740,506 ms/op
Iteration   5: 2764,900 ms/op
Iteration   6: 2771,285 ms/op
Iteration   7: 2758,988 ms/op
Iteration   8: 2779,317 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2786,544 ±(99.9%) 70,734 ms/op

  Histogram, ms/op:
    [2700,000, 2712,500) = 0
    [2712,500, 2725,000) = 0
    [2725,000, 2737,500) = 0
    [2737,500, 2750,000) = 1
    [2750,000, 2762,500) = 1
    [2762,500, 2775,000) = 2
    [2775,000, 2787,500) = 1
    [2787,500, 2800,000) = 0
    [2800,000, 2812,500) = 1
    [2812,500, 2825,000) = 1
    [2825,000, 2837,500) = 0
    [2837,500, 2850,000) = 0
    [2850,000, 2862,500) = 1
    [2862,500, 2875,000) = 0
    [2875,000, 2887,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2740,506 ms/op
     p(50,0000) =   2775,301 ms/op
     p(90,0000) =   2854,895 ms/op
     p(95,0000) =   2854,895 ms/op
     p(99,0000) =   2854,895 ms/op
     p(99,9000) =   2854,895 ms/op
     p(99,9900) =   2854,895 ms/op
     p(99,9990) =   2854,895 ms/op
     p(99,9999) =   2854,895 ms/op
    p(100,0000) =   2854,895 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest        10000           put    ss    8  2786,544 ± 70,734  ms/op
tests.maptests.object.GsObjMapTest (10000) = 2786.5438773749997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4546,411 ms/op
# Warmup Iteration   2: 4642,654 ms/op
# Warmup Iteration   3: 4695,667 ms/op
# Warmup Iteration   4: 4642,981 ms/op
# Warmup Iteration   5: 4614,144 ms/op
# Warmup Iteration   6: 4629,287 ms/op
# Warmup Iteration   7: 4310,711 ms/op
# Warmup Iteration   8: 4276,457 ms/op
# Warmup Iteration   9: 4313,512 ms/op
# Warmup Iteration  10: 4255,167 ms/op
Iteration   1: 4280,233 ms/op
Iteration   2: 4706,777 ms/op
Iteration   3: 4690,273 ms/op
Iteration   4: 4695,974 ms/op
Iteration   5: 4689,100 ms/op
Iteration   6: 4737,322 ms/op
Iteration   7: 4597,658 ms/op
Iteration   8: 4697,223 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4636,820 ±(99.9%) 285,812 ms/op

  Histogram, ms/op:
    [4200,000, 4250,000) = 0
    [4250,000, 4300,000) = 1
    [4300,000, 4350,000) = 0
    [4350,000, 4400,000) = 0
    [4400,000, 4450,000) = 0
    [4450,000, 4500,000) = 0
    [4500,000, 4550,000) = 0
    [4550,000, 4600,000) = 1
    [4600,000, 4650,000) = 0
    [4650,000, 4700,000) = 4
    [4700,000, 4750,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   4280,233 ms/op
     p(50,0000) =   4693,124 ms/op
     p(90,0000) =   4737,322 ms/op
     p(95,0000) =   4737,322 ms/op
     p(99,0000) =   4737,322 ms/op
     p(99,9000) =   4737,322 ms/op
     p(99,9900) =   4737,322 ms/op
     p(99,9990) =   4737,322 ms/op
     p(99,9999) =   4737,322 ms/op
    p(100,0000) =   4737,322 ms/op


# Run complete. Total time: 00:01:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest        10000           put    ss    8  4636,820 ± 285,812  ms/op
tests.maptests.object.JdkMapTest (10000) = 4636.8201876250005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3357,375 ms/op
# Warmup Iteration   2: 3247,697 ms/op
# Warmup Iteration   3: 3216,699 ms/op
# Warmup Iteration   4: 3303,636 ms/op
# Warmup Iteration   5: 3230,316 ms/op
# Warmup Iteration   6: 3232,797 ms/op
# Warmup Iteration   7: 3185,497 ms/op
# Warmup Iteration   8: 3199,709 ms/op
# Warmup Iteration   9: 3217,171 ms/op
# Warmup Iteration  10: 3193,869 ms/op
Iteration   1: 3206,966 ms/op
Iteration   2: 3161,060 ms/op
Iteration   3: 3215,152 ms/op
Iteration   4: 3152,761 ms/op
Iteration   5: 3152,716 ms/op
Iteration   6: 3151,046 ms/op
Iteration   7: 3143,923 ms/op
Iteration   8: 3140,999 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3165,578 ±(99.9%) 55,060 ms/op

  Histogram, ms/op:
    [3140,000, 3145,000) = 2
    [3145,000, 3150,000) = 0
    [3150,000, 3155,000) = 3
    [3155,000, 3160,000) = 0
    [3160,000, 3165,000) = 1
    [3165,000, 3170,000) = 0
    [3170,000, 3175,000) = 0
    [3175,000, 3180,000) = 0
    [3180,000, 3185,000) = 0
    [3185,000, 3190,000) = 0
    [3190,000, 3195,000) = 0
    [3195,000, 3200,000) = 0
    [3200,000, 3205,000) = 0
    [3205,000, 3210,000) = 1
    [3210,000, 3215,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3140,999 ms/op
     p(50,0000) =   3152,739 ms/op
     p(90,0000) =   3215,152 ms/op
     p(95,0000) =   3215,152 ms/op
     p(99,0000) =   3215,152 ms/op
     p(99,9000) =   3215,152 ms/op
     p(99,9900) =   3215,152 ms/op
     p(99,9990) =   3215,152 ms/op
     p(99,9999) =   3215,152 ms/op
    p(100,0000) =   3215,152 ms/op


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity        10000           put    ss    8  3165,578 ± 55,060  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (10000) = 3165.5778920000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4729,102 ms/op
# Warmup Iteration   2: 4613,691 ms/op
# Warmup Iteration   3: 4588,636 ms/op
# Warmup Iteration   4: 4535,871 ms/op
# Warmup Iteration   5: 4572,400 ms/op
# Warmup Iteration   6: 4583,458 ms/op
# Warmup Iteration   7: 4627,368 ms/op
# Warmup Iteration   8: 4673,627 ms/op
# Warmup Iteration   9: 4624,367 ms/op
# Warmup Iteration  10: 4579,256 ms/op
Iteration   1: 4599,743 ms/op
Iteration   2: 4547,429 ms/op
Iteration   3: 4596,927 ms/op
Iteration   4: 4578,160 ms/op
Iteration   5: 4616,832 ms/op
Iteration   6: 4552,640 ms/op
Iteration   7: 4578,452 ms/op
Iteration   8: 4551,036 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4577,652 ±(99.9%) 49,241 ms/op

  Histogram, ms/op:
    [4540,000, 4545,000) = 0
    [4545,000, 4550,000) = 1
    [4550,000, 4555,000) = 2
    [4555,000, 4560,000) = 0
    [4560,000, 4565,000) = 0
    [4565,000, 4570,000) = 0
    [4570,000, 4575,000) = 0
    [4575,000, 4580,000) = 2
    [4580,000, 4585,000) = 0
    [4585,000, 4590,000) = 0
    [4590,000, 4595,000) = 0
    [4595,000, 4600,000) = 2
    [4600,000, 4605,000) = 0
    [4605,000, 4610,000) = 0
    [4610,000, 4615,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4547,429 ms/op
     p(50,0000) =   4578,306 ms/op
     p(90,0000) =   4616,832 ms/op
     p(95,0000) =   4616,832 ms/op
     p(99,0000) =   4616,832 ms/op
     p(99,9000) =   4616,832 ms/op
     p(99,9900) =   4616,832 ms/op
     p(99,9990) =   4616,832 ms/op
     p(99,9999) =   4616,832 ms/op
    p(100,0000) =   4616,832 ms/op


# Run complete. Total time: 00:01:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest        10000           put    ss    8  4577,652 ± 49,241  ms/op
tests.maptests.object.TroveJbObjMapTest (10000) = 4577.652281625001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4294,676 ms/op
# Warmup Iteration   2: 4202,193 ms/op
# Warmup Iteration   3: 4255,159 ms/op
# Warmup Iteration   4: 4217,146 ms/op
# Warmup Iteration   5: 4208,743 ms/op
# Warmup Iteration   6: 4182,656 ms/op
# Warmup Iteration   7: 4206,951 ms/op
# Warmup Iteration   8: 4201,689 ms/op
# Warmup Iteration   9: 4217,440 ms/op
# Warmup Iteration  10: 4258,732 ms/op
Iteration   1: 4216,139 ms/op
Iteration   2: 4188,915 ms/op
Iteration   3: 4269,430 ms/op
Iteration   4: 4254,590 ms/op
Iteration   5: 4185,674 ms/op
Iteration   6: 4213,500 ms/op
Iteration   7: 4277,921 ms/op
Iteration   8: 4184,603 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4223,846 ±(99.9%) 73,452 ms/op

  Histogram, ms/op:
    [4180,000, 4190,000) = 3
    [4190,000, 4200,000) = 0
    [4200,000, 4210,000) = 0
    [4210,000, 4220,000) = 2
    [4220,000, 4230,000) = 0
    [4230,000, 4240,000) = 0
    [4240,000, 4250,000) = 0
    [4250,000, 4260,000) = 1
    [4260,000, 4270,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   4184,603 ms/op
     p(50,0000) =   4214,820 ms/op
     p(90,0000) =   4277,921 ms/op
     p(95,0000) =   4277,921 ms/op
     p(99,0000) =   4277,921 ms/op
     p(99,9000) =   4277,921 ms/op
     p(99,9900) =   4277,921 ms/op
     p(99,9990) =   4277,921 ms/op
     p(99,9999) =   4277,921 ms/op
    p(100,0000) =   4277,921 ms/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest        10000           put    ss    8  4223,846 ± 73,452  ms/op
tests.maptests.object.TroveObjMapTest (10000) = 4223.846474625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2158,967 ms/op
# Warmup Iteration   2: 2087,636 ms/op
# Warmup Iteration   3: 2079,508 ms/op
# Warmup Iteration   4: 2081,504 ms/op
# Warmup Iteration   5: 2069,420 ms/op
# Warmup Iteration   6: 2110,504 ms/op
# Warmup Iteration   7: 2056,256 ms/op
# Warmup Iteration   8: 2053,342 ms/op
# Warmup Iteration   9: 2049,850 ms/op
# Warmup Iteration  10: 2187,072 ms/op
Iteration   1: 2086,373 ms/op
Iteration   2: 2132,941 ms/op
Iteration   3: 2103,127 ms/op
Iteration   4: 2108,009 ms/op
Iteration   5: 2103,208 ms/op
Iteration   6: 2094,609 ms/op
Iteration   7: 2047,463 ms/op
Iteration   8: 2077,297 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2094,128 ±(99.9%) 47,848 ms/op

  Histogram, ms/op:
    [2040,000, 2050,000) = 1
    [2050,000, 2060,000) = 0
    [2060,000, 2070,000) = 0
    [2070,000, 2080,000) = 1
    [2080,000, 2090,000) = 1
    [2090,000, 2100,000) = 1
    [2100,000, 2110,000) = 3
    [2110,000, 2120,000) = 0
    [2120,000, 2130,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2047,463 ms/op
     p(50,0000) =   2098,868 ms/op
     p(90,0000) =   2132,941 ms/op
     p(95,0000) =   2132,941 ms/op
     p(99,0000) =   2132,941 ms/op
     p(99,9000) =   2132,941 ms/op
     p(99,9900) =   2132,941 ms/op
     p(99,9990) =   2132,941 ms/op
     p(99,9999) =   2132,941 ms/op
    p(100,0000) =   2132,941 ms/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest        10000           put    ss    8  2094,128 ± 47,848  ms/op
tests.maptests.article_examples.ObjObjMapTest (10000) = 2094.1284055
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1234,225 ms/op
# Warmup Iteration   2: 1161,185 ms/op
# Warmup Iteration   3: 1103,061 ms/op
# Warmup Iteration   4: 1082,508 ms/op
# Warmup Iteration   5: 1137,397 ms/op
# Warmup Iteration   6: 1175,052 ms/op
# Warmup Iteration   7: 1110,074 ms/op
# Warmup Iteration   8: 1133,982 ms/op
# Warmup Iteration   9: 1113,943 ms/op
# Warmup Iteration  10: 1125,397 ms/op
Iteration   1: 1137,270 ms/op
Iteration   2: 1111,578 ms/op
Iteration   3: 1113,621 ms/op
Iteration   4: 1106,975 ms/op
Iteration   5: 1072,491 ms/op
Iteration   6: 1075,192 ms/op
Iteration   7: 1073,051 ms/op
Iteration   8: 1120,095 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1101,284 ±(99.9%) 47,091 ms/op

  Histogram, ms/op:
    [1070,000, 1075,000) = 2
    [1075,000, 1080,000) = 1
    [1080,000, 1085,000) = 0
    [1085,000, 1090,000) = 0
    [1090,000, 1095,000) = 0
    [1095,000, 1100,000) = 0
    [1100,000, 1105,000) = 0
    [1105,000, 1110,000) = 1
    [1110,000, 1115,000) = 2
    [1115,000, 1120,000) = 0
    [1120,000, 1125,000) = 1
    [1125,000, 1130,000) = 0
    [1130,000, 1135,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1072,491 ms/op
     p(50,0000) =   1109,277 ms/op
     p(90,0000) =   1137,270 ms/op
     p(95,0000) =   1137,270 ms/op
     p(99,0000) =   1137,270 ms/op
     p(99,9000) =   1137,270 ms/op
     p(99,9900) =   1137,270 ms/op
     p(99,9990) =   1137,270 ms/op
     p(99,9999) =   1137,270 ms/op
    p(100,0000) =   1137,270 ms/op


# Run complete. Total time: 00:00:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest        10000           put    ss    8  1101,284 ± 47,091  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (10000) = 1101.284176125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1466,069 ms/op
# Warmup Iteration   2: 1340,979 ms/op
# Warmup Iteration   3: 1319,869 ms/op
# Warmup Iteration   4: 1317,287 ms/op
# Warmup Iteration   5: 1314,833 ms/op
# Warmup Iteration   6: 1318,887 ms/op
# Warmup Iteration   7: 1292,362 ms/op
# Warmup Iteration   8: 1362,622 ms/op
# Warmup Iteration   9: 1310,289 ms/op
# Warmup Iteration  10: 1325,445 ms/op
Iteration   1: 1292,479 ms/op
Iteration   2: 1313,244 ms/op
Iteration   3: 1343,464 ms/op
Iteration   4: 1309,009 ms/op
Iteration   5: 1305,895 ms/op
Iteration   6: 1310,796 ms/op
Iteration   7: 1307,301 ms/op
Iteration   8: 1310,037 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1311,528 ±(99.9%) 27,465 ms/op

  Histogram, ms/op:
    [1290,000, 1295,000) = 1
    [1295,000, 1300,000) = 0
    [1300,000, 1305,000) = 0
    [1305,000, 1310,000) = 3
    [1310,000, 1315,000) = 3
    [1315,000, 1320,000) = 0
    [1320,000, 1325,000) = 0
    [1325,000, 1330,000) = 0
    [1330,000, 1335,000) = 0
    [1335,000, 1340,000) = 0
    [1340,000, 1345,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1292,479 ms/op
     p(50,0000) =   1309,523 ms/op
     p(90,0000) =   1343,464 ms/op
     p(95,0000) =   1343,464 ms/op
     p(99,0000) =   1343,464 ms/op
     p(99,9000) =   1343,464 ms/op
     p(99,9900) =   1343,464 ms/op
     p(99,9990) =   1343,464 ms/op
     p(99,9999) =   1343,464 ms/op
    p(100,0000) =   1343,464 ms/op


# Run complete. Total time: 00:00:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest        10000           put    ss    8  1311,528 ± 27,465  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (10000) = 1311.5281954999998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1321,824 ms/op
# Warmup Iteration   2: 1200,660 ms/op
# Warmup Iteration   3: 1180,844 ms/op
# Warmup Iteration   4: 1142,705 ms/op
# Warmup Iteration   5: 1173,489 ms/op
# Warmup Iteration   6: 1166,292 ms/op
# Warmup Iteration   7: 1158,002 ms/op
# Warmup Iteration   8: 1189,373 ms/op
# Warmup Iteration   9: 1170,723 ms/op
# Warmup Iteration  10: 1267,280 ms/op
Iteration   1: 1189,207 ms/op
Iteration   2: 1036,920 ms/op
Iteration   3: 1097,285 ms/op
Iteration   4: 1037,657 ms/op
Iteration   5: 1121,392 ms/op
Iteration   6: 1020,058 ms/op
Iteration   7: 1023,070 ms/op
Iteration   8: 1060,381 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1073,246 ±(99.9%) 112,978 ms/op

  Histogram, ms/op:
    [1000,000, 1012,500) = 0
    [1012,500, 1025,000) = 2
    [1025,000, 1037,500) = 1
    [1037,500, 1050,000) = 1
    [1050,000, 1062,500) = 1
    [1062,500, 1075,000) = 0
    [1075,000, 1087,500) = 0
    [1087,500, 1100,000) = 1
    [1100,000, 1112,500) = 0
    [1112,500, 1125,000) = 1
    [1125,000, 1137,500) = 0
    [1137,500, 1150,000) = 0
    [1150,000, 1162,500) = 0
    [1162,500, 1175,000) = 0
    [1175,000, 1187,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1020,058 ms/op
     p(50,0000) =   1049,019 ms/op
     p(90,0000) =   1189,207 ms/op
     p(95,0000) =   1189,207 ms/op
     p(99,0000) =   1189,207 ms/op
     p(99,9000) =   1189,207 ms/op
     p(99,9900) =   1189,207 ms/op
     p(99,9990) =   1189,207 ms/op
     p(99,9999) =   1189,207 ms/op
    p(100,0000) =   1189,207 ms/op


# Run complete. Total time: 00:00:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest        10000           put    ss    8  1073,246 ± 112,978  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (10000) = 1073.2461586250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1598,971 ms/op
# Warmup Iteration   2: 1449,359 ms/op
# Warmup Iteration   3: 1499,104 ms/op
# Warmup Iteration   4: 1463,585 ms/op
# Warmup Iteration   5: 1479,918 ms/op
# Warmup Iteration   6: 1474,906 ms/op
# Warmup Iteration   7: 1484,366 ms/op
# Warmup Iteration   8: 1456,021 ms/op
# Warmup Iteration   9: 1476,658 ms/op
# Warmup Iteration  10: 1472,220 ms/op
Iteration   1: 1584,767 ms/op
Iteration   2: 1462,359 ms/op
Iteration   3: 1444,767 ms/op
Iteration   4: 1495,649 ms/op
Iteration   5: 1477,367 ms/op
Iteration   6: 1475,689 ms/op
Iteration   7: 1488,403 ms/op
Iteration   8: 1499,898 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1491,112 ±(99.9%) 80,074 ms/op

  Histogram, ms/op:
    [1400,000, 1412,500) = 0
    [1412,500, 1425,000) = 0
    [1425,000, 1437,500) = 0
    [1437,500, 1450,000) = 1
    [1450,000, 1462,500) = 1
    [1462,500, 1475,000) = 0
    [1475,000, 1487,500) = 2
    [1487,500, 1500,000) = 3
    [1500,000, 1512,500) = 0
    [1512,500, 1525,000) = 0
    [1525,000, 1537,500) = 0
    [1537,500, 1550,000) = 0
    [1550,000, 1562,500) = 0
    [1562,500, 1575,000) = 0
    [1575,000, 1587,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   1444,767 ms/op
     p(50,0000) =   1482,885 ms/op
     p(90,0000) =   1584,767 ms/op
     p(95,0000) =   1584,767 ms/op
     p(99,0000) =   1584,767 ms/op
     p(99,9000) =   1584,767 ms/op
     p(99,9900) =   1584,767 ms/op
     p(99,9990) =   1584,767 ms/op
     p(99,9999) =   1584,767 ms/op
    p(100,0000) =   1584,767 ms/op


# Run complete. Total time: 00:00:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest        10000           put    ss    8  1491,112 ± 80,074  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (10000) = 1491.1123275
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3512,643 ms/op
# Warmup Iteration   2: 3451,623 ms/op
# Warmup Iteration   3: 3458,389 ms/op
# Warmup Iteration   4: 3475,608 ms/op
# Warmup Iteration   5: 3445,462 ms/op
# Warmup Iteration   6: 3423,292 ms/op
# Warmup Iteration   7: 3397,364 ms/op
# Warmup Iteration   8: 3403,605 ms/op
# Warmup Iteration   9: 3398,072 ms/op
# Warmup Iteration  10: 3411,844 ms/op
Iteration   1: 3410,947 ms/op
Iteration   2: 3409,642 ms/op
Iteration   3: 3462,619 ms/op
Iteration   4: 3426,737 ms/op
Iteration   5: 3415,871 ms/op
Iteration   6: 3462,866 ms/op
Iteration   7: 3422,723 ms/op
Iteration   8: 3477,874 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3436,160 ±(99.9%) 51,977 ms/op

  Histogram, ms/op:
    [3400,000, 3405,000) = 0
    [3405,000, 3410,000) = 1
    [3410,000, 3415,000) = 1
    [3415,000, 3420,000) = 1
    [3420,000, 3425,000) = 1
    [3425,000, 3430,000) = 1
    [3430,000, 3435,000) = 0
    [3435,000, 3440,000) = 0
    [3440,000, 3445,000) = 0
    [3445,000, 3450,000) = 0
    [3450,000, 3455,000) = 0
    [3455,000, 3460,000) = 0
    [3460,000, 3465,000) = 2
    [3465,000, 3470,000) = 0
    [3470,000, 3475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3409,642 ms/op
     p(50,0000) =   3424,730 ms/op
     p(90,0000) =   3477,874 ms/op
     p(95,0000) =   3477,874 ms/op
     p(99,0000) =   3477,874 ms/op
     p(99,9000) =   3477,874 ms/op
     p(99,9900) =   3477,874 ms/op
     p(99,9990) =   3477,874 ms/op
     p(99,9999) =   3477,874 ms/op
    p(100,0000) =   3477,874 ms/op


# Run complete. Total time: 00:01:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest        10000           put    ss    8  3436,160 ± 51,977  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (10000) = 3436.160066625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2990,091 ms/op
# Warmup Iteration   2: 2822,111 ms/op
# Warmup Iteration   3: 2923,395 ms/op
# Warmup Iteration   4: 2838,237 ms/op
# Warmup Iteration   5: 2841,036 ms/op
# Warmup Iteration   6: 2846,389 ms/op
# Warmup Iteration   7: 2855,169 ms/op
# Warmup Iteration   8: 2877,358 ms/op
# Warmup Iteration   9: 2840,517 ms/op
# Warmup Iteration  10: 2861,464 ms/op
Iteration   1: 2831,740 ms/op
Iteration   2: 2855,026 ms/op
Iteration   3: 2954,521 ms/op
Iteration   4: 2817,217 ms/op
Iteration   5: 2814,009 ms/op
Iteration   6: 2893,593 ms/op
Iteration   7: 2820,760 ms/op
Iteration   8: 2821,864 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2851,091 ±(99.9%) 94,751 ms/op

  Histogram, ms/op:
    [2800,000, 2812,500) = 0
    [2812,500, 2825,000) = 4
    [2825,000, 2837,500) = 1
    [2837,500, 2850,000) = 0
    [2850,000, 2862,500) = 1
    [2862,500, 2875,000) = 0
    [2875,000, 2887,500) = 0
    [2887,500, 2900,000) = 1
    [2900,000, 2912,500) = 0
    [2912,500, 2925,000) = 0
    [2925,000, 2937,500) = 0
    [2937,500, 2950,000) = 0
    [2950,000, 2962,500) = 1
    [2962,500, 2975,000) = 0
    [2975,000, 2987,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2814,009 ms/op
     p(50,0000) =   2826,802 ms/op
     p(90,0000) =   2954,521 ms/op
     p(95,0000) =   2954,521 ms/op
     p(99,0000) =   2954,521 ms/op
     p(99,9000) =   2954,521 ms/op
     p(99,9900) =   2954,521 ms/op
     p(99,9990) =   2954,521 ms/op
     p(99,9999) =   2954,521 ms/op
    p(100,0000) =   2954,521 ms/op


# Run complete. Total time: 00:00:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest        10000           put    ss    8  2851,091 ± 94,751  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (10000) = 2851.09117175
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1804,618 ms/op
# Warmup Iteration   2: 1723,897 ms/op
# Warmup Iteration   3: 1674,140 ms/op
# Warmup Iteration   4: 1706,209 ms/op
# Warmup Iteration   5: 1695,275 ms/op
# Warmup Iteration   6: 1773,792 ms/op
# Warmup Iteration   7: 1693,558 ms/op
# Warmup Iteration   8: 1702,782 ms/op
# Warmup Iteration   9: 1738,781 ms/op
# Warmup Iteration  10: 1722,221 ms/op
Iteration   1: 1731,919 ms/op
Iteration   2: 1729,885 ms/op
Iteration   3: 1718,372 ms/op
Iteration   4: 1687,531 ms/op
Iteration   5: 1743,348 ms/op
Iteration   6: 1767,603 ms/op
Iteration   7: 1712,907 ms/op
Iteration   8: 1706,418 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1724,748 ±(99.9%) 46,623 ms/op

  Histogram, ms/op:
    [1680,000, 1685,000) = 0
    [1685,000, 1690,000) = 1
    [1690,000, 1695,000) = 0
    [1695,000, 1700,000) = 0
    [1700,000, 1705,000) = 0
    [1705,000, 1710,000) = 1
    [1710,000, 1715,000) = 1
    [1715,000, 1720,000) = 1
    [1720,000, 1725,000) = 0
    [1725,000, 1730,000) = 1
    [1730,000, 1735,000) = 1
    [1735,000, 1740,000) = 0
    [1740,000, 1745,000) = 1
    [1745,000, 1750,000) = 0
    [1750,000, 1755,000) = 0
    [1755,000, 1760,000) = 0
    [1760,000, 1765,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1687,531 ms/op
     p(50,0000) =   1724,129 ms/op
     p(90,0000) =   1767,603 ms/op
     p(95,0000) =   1767,603 ms/op
     p(99,0000) =   1767,603 ms/op
     p(99,9000) =   1767,603 ms/op
     p(99,9900) =   1767,603 ms/op
     p(99,9990) =   1767,603 ms/op
     p(99,9999) =   1767,603 ms/op
    p(100,0000) =   1767,603 ms/op


# Run complete. Total time: 00:00:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest        10000           put    ss    8  1724,748 ± 46,623  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (10000) = 1724.7480168749996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2074,039 ms/op
# Warmup Iteration   2: 2010,052 ms/op
# Warmup Iteration   3: 1933,764 ms/op
# Warmup Iteration   4: 1921,135 ms/op
# Warmup Iteration   5: 1953,782 ms/op
# Warmup Iteration   6: 1956,859 ms/op
# Warmup Iteration   7: 1930,635 ms/op
# Warmup Iteration   8: 1922,844 ms/op
# Warmup Iteration   9: 1964,795 ms/op
# Warmup Iteration  10: 1976,816 ms/op
Iteration   1: 1943,991 ms/op
Iteration   2: 1950,266 ms/op
Iteration   3: 1965,967 ms/op
Iteration   4: 1964,692 ms/op
Iteration   5: 1909,465 ms/op
Iteration   6: 1970,976 ms/op
Iteration   7: 2023,847 ms/op
Iteration   8: 1985,555 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1964,345 ±(99.9%) 63,254 ms/op

  Histogram, ms/op:
    [1900,000, 1912,500) = 1
    [1912,500, 1925,000) = 0
    [1925,000, 1937,500) = 0
    [1937,500, 1950,000) = 1
    [1950,000, 1962,500) = 1
    [1962,500, 1975,000) = 3
    [1975,000, 1987,500) = 1
    [1987,500, 2000,000) = 0
    [2000,000, 2012,500) = 0
    [2012,500, 2025,000) = 1
    [2025,000, 2037,500) = 0
    [2037,500, 2050,000) = 0
    [2050,000, 2062,500) = 0
    [2062,500, 2075,000) = 0
    [2075,000, 2087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1909,465 ms/op
     p(50,0000) =   1965,330 ms/op
     p(90,0000) =   2023,847 ms/op
     p(95,0000) =   2023,847 ms/op
     p(99,0000) =   2023,847 ms/op
     p(99,9000) =   2023,847 ms/op
     p(99,9900) =   2023,847 ms/op
     p(99,9990) =   2023,847 ms/op
     p(99,9999) =   2023,847 ms/op
    p(100,0000) =   2023,847 ms/op


# Run complete. Total time: 00:00:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest        10000           put    ss    8  1964,345 ± 63,254  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (10000) = 1964.3447233749998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2299,463 ms/op
# Warmup Iteration   2: 2184,314 ms/op
# Warmup Iteration   3: 2216,255 ms/op
# Warmup Iteration   4: 2195,099 ms/op
# Warmup Iteration   5: 2209,771 ms/op
# Warmup Iteration   6: 2197,125 ms/op
# Warmup Iteration   7: 2199,077 ms/op
# Warmup Iteration   8: 2210,987 ms/op
# Warmup Iteration   9: 2203,705 ms/op
# Warmup Iteration  10: 2247,068 ms/op
Iteration   1: 2181,394 ms/op
Iteration   2: 2222,339 ms/op
Iteration   3: 2213,843 ms/op
Iteration   4: 2184,902 ms/op
Iteration   5: 2189,684 ms/op
Iteration   6: 2196,874 ms/op
Iteration   7: 2188,272 ms/op
Iteration   8: 2204,756 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2197,758 ±(99.9%) 27,997 ms/op

  Histogram, ms/op:
    [2180,000, 2185,000) = 2
    [2185,000, 2190,000) = 2
    [2190,000, 2195,000) = 0
    [2195,000, 2200,000) = 1
    [2200,000, 2205,000) = 1
    [2205,000, 2210,000) = 0
    [2210,000, 2215,000) = 1
    [2215,000, 2220,000) = 0
    [2220,000, 2225,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2181,394 ms/op
     p(50,0000) =   2193,279 ms/op
     p(90,0000) =   2222,339 ms/op
     p(95,0000) =   2222,339 ms/op
     p(99,0000) =   2222,339 ms/op
     p(99,9000) =   2222,339 ms/op
     p(99,9900) =   2222,339 ms/op
     p(99,9990) =   2222,339 ms/op
     p(99,9999) =   2222,339 ms/op
    p(100,0000) =   2222,339 ms/op


# Run complete. Total time: 00:00:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest        10000           put    ss    8  2197,758 ± 27,997  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (10000) = 2197.7579583750003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2244,135 ms/op
# Warmup Iteration   2: 2122,843 ms/op
# Warmup Iteration   3: 2196,146 ms/op
# Warmup Iteration   4: 2199,573 ms/op
# Warmup Iteration   5: 2139,422 ms/op
# Warmup Iteration   6: 2165,406 ms/op
# Warmup Iteration   7: 2116,393 ms/op
# Warmup Iteration   8: 2137,797 ms/op
# Warmup Iteration   9: 2121,741 ms/op
# Warmup Iteration  10: 2169,535 ms/op
Iteration   1: 2148,533 ms/op
Iteration   2: 2128,523 ms/op
Iteration   3: 2142,302 ms/op
Iteration   4: 2155,732 ms/op
Iteration   5: 2131,807 ms/op
Iteration   6: 2174,567 ms/op
Iteration   7: 2124,275 ms/op
Iteration   8: 2258,171 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2157,989 ±(99.9%) 83,473 ms/op

  Histogram, ms/op:
    [2100,000, 2112,500) = 0
    [2112,500, 2125,000) = 1
    [2125,000, 2137,500) = 2
    [2137,500, 2150,000) = 2
    [2150,000, 2162,500) = 1
    [2162,500, 2175,000) = 1
    [2175,000, 2187,500) = 0
    [2187,500, 2200,000) = 0
    [2200,000, 2212,500) = 0
    [2212,500, 2225,000) = 0
    [2225,000, 2237,500) = 0
    [2237,500, 2250,000) = 0
    [2250,000, 2262,500) = 1
    [2262,500, 2275,000) = 0
    [2275,000, 2287,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2124,275 ms/op
     p(50,0000) =   2145,418 ms/op
     p(90,0000) =   2258,171 ms/op
     p(95,0000) =   2258,171 ms/op
     p(99,0000) =   2258,171 ms/op
     p(99,9000) =   2258,171 ms/op
     p(99,9900) =   2258,171 ms/op
     p(99,9990) =   2258,171 ms/op
     p(99,9999) =   2258,171 ms/op
    p(100,0000) =   2258,171 ms/op


# Run complete. Total time: 00:00:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest        10000           put    ss    8  2157,989 ± 83,473  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (10000) = 2157.9887152499996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3897,314 ms/op
# Warmup Iteration   2: 3804,466 ms/op
# Warmup Iteration   3: 3814,603 ms/op
# Warmup Iteration   4: 3827,276 ms/op
# Warmup Iteration   5: 3875,797 ms/op
# Warmup Iteration   6: 3896,336 ms/op
# Warmup Iteration   7: 3878,151 ms/op
# Warmup Iteration   8: 3858,736 ms/op
# Warmup Iteration   9: 3857,710 ms/op
# Warmup Iteration  10: 3834,605 ms/op
Iteration   1: 3891,128 ms/op
Iteration   2: 3896,673 ms/op
Iteration   3: 3867,354 ms/op
Iteration   4: 3928,472 ms/op
Iteration   5: 3836,432 ms/op
Iteration   6: 3814,804 ms/op
Iteration   7: 3839,069 ms/op
Iteration   8: 3876,080 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3868,752 ±(99.9%) 71,314 ms/op

  Histogram, ms/op:
    [3800,000, 3812,500) = 0
    [3812,500, 3825,000) = 1
    [3825,000, 3837,500) = 1
    [3837,500, 3850,000) = 1
    [3850,000, 3862,500) = 0
    [3862,500, 3875,000) = 1
    [3875,000, 3887,500) = 1
    [3887,500, 3900,000) = 2
    [3900,000, 3912,500) = 0
    [3912,500, 3925,000) = 0
    [3925,000, 3937,500) = 1
    [3937,500, 3950,000) = 0
    [3950,000, 3962,500) = 0
    [3962,500, 3975,000) = 0
    [3975,000, 3987,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   3814,804 ms/op
     p(50,0000) =   3871,717 ms/op
     p(90,0000) =   3928,472 ms/op
     p(95,0000) =   3928,472 ms/op
     p(99,0000) =   3928,472 ms/op
     p(99,9000) =   3928,472 ms/op
     p(99,9900) =   3928,472 ms/op
     p(99,9990) =   3928,472 ms/op
     p(99,9999) =   3928,472 ms/op
    p(100,0000) =   3928,472 ms/op


# Run complete. Total time: 00:01:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest        10000           put    ss    8  3868,752 ± 71,314  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (10000) = 3868.751534875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4224,593 ms/op
# Warmup Iteration   2: 4208,271 ms/op
# Warmup Iteration   3: 4144,816 ms/op
# Warmup Iteration   4: 4233,828 ms/op
# Warmup Iteration   5: 4149,435 ms/op
# Warmup Iteration   6: 4189,960 ms/op
# Warmup Iteration   7: 4143,488 ms/op
# Warmup Iteration   8: 4135,917 ms/op
# Warmup Iteration   9: 4166,336 ms/op
# Warmup Iteration  10: 4208,833 ms/op
Iteration   1: 4181,769 ms/op
Iteration   2: 4274,617 ms/op
Iteration   3: 4235,818 ms/op
Iteration   4: 4269,508 ms/op
Iteration   5: 4242,422 ms/op
Iteration   6: 4273,106 ms/op
Iteration   7: 4284,165 ms/op
Iteration   8: 4232,271 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4249,210 ±(99.9%) 64,276 ms/op

  Histogram, ms/op:
    [4100,000, 4112,500) = 0
    [4112,500, 4125,000) = 0
    [4125,000, 4137,500) = 0
    [4137,500, 4150,000) = 0
    [4150,000, 4162,500) = 0
    [4162,500, 4175,000) = 0
    [4175,000, 4187,500) = 1
    [4187,500, 4200,000) = 0
    [4200,000, 4212,500) = 0
    [4212,500, 4225,000) = 0
    [4225,000, 4237,500) = 2
    [4237,500, 4250,000) = 1
    [4250,000, 4262,500) = 0
    [4262,500, 4275,000) = 3
    [4275,000, 4287,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   4181,769 ms/op
     p(50,0000) =   4255,965 ms/op
     p(90,0000) =   4284,165 ms/op
     p(95,0000) =   4284,165 ms/op
     p(99,0000) =   4284,165 ms/op
     p(99,9000) =   4284,165 ms/op
     p(99,9900) =   4284,165 ms/op
     p(99,9990) =   4284,165 ms/op
     p(99,9999) =   4284,165 ms/op
    p(100,0000) =   4284,165 ms/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest        10000           put    ss    8  4249,210 ± 64,276  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (10000) = 4249.20950525
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2032,635 ms/op
# Warmup Iteration   2: 1932,022 ms/op
# Warmup Iteration   3: 1924,725 ms/op
# Warmup Iteration   4: 1933,928 ms/op
# Warmup Iteration   5: 1879,145 ms/op
# Warmup Iteration   6: 1936,857 ms/op
# Warmup Iteration   7: 1922,044 ms/op
# Warmup Iteration   8: 1892,828 ms/op
# Warmup Iteration   9: 2001,183 ms/op
# Warmup Iteration  10: 1897,455 ms/op
Iteration   1: 1897,663 ms/op
Iteration   2: 1895,400 ms/op
Iteration   3: 1926,758 ms/op
Iteration   4: 1891,902 ms/op
Iteration   5: 1924,844 ms/op
Iteration   6: 1941,223 ms/op
Iteration   7: 1946,739 ms/op
Iteration   8: 1947,370 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1921,487 ±(99.9%) 44,895 ms/op

  Histogram, ms/op:
    [1890,000, 1895,000) = 1
    [1895,000, 1900,000) = 2
    [1900,000, 1905,000) = 0
    [1905,000, 1910,000) = 0
    [1910,000, 1915,000) = 0
    [1915,000, 1920,000) = 0
    [1920,000, 1925,000) = 1
    [1925,000, 1930,000) = 1
    [1930,000, 1935,000) = 0
    [1935,000, 1940,000) = 0
    [1940,000, 1945,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1891,902 ms/op
     p(50,0000) =   1925,801 ms/op
     p(90,0000) =   1947,370 ms/op
     p(95,0000) =   1947,370 ms/op
     p(99,0000) =   1947,370 ms/op
     p(99,9000) =   1947,370 ms/op
     p(99,9900) =   1947,370 ms/op
     p(99,9990) =   1947,370 ms/op
     p(99,9999) =   1947,370 ms/op
    p(100,0000) =   1947,370 ms/op


# Run complete. Total time: 00:00:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest        10000           put    ss    8  1921,487 ± 44,895  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (10000) = 1921.487323375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2996,105 ms/op
# Warmup Iteration   2: 2821,215 ms/op
# Warmup Iteration   3: 2880,306 ms/op
# Warmup Iteration   4: 2823,171 ms/op
# Warmup Iteration   5: 2836,901 ms/op
# Warmup Iteration   6: 2834,098 ms/op
# Warmup Iteration   7: 2809,034 ms/op
# Warmup Iteration   8: 2825,971 ms/op
# Warmup Iteration   9: 2809,787 ms/op
# Warmup Iteration  10: 2809,928 ms/op
Iteration   1: 2811,816 ms/op
Iteration   2: 2845,041 ms/op
Iteration   3: 2858,050 ms/op
Iteration   4: 2780,672 ms/op
Iteration   5: 2823,561 ms/op
Iteration   6: 2843,369 ms/op
Iteration   7: 2807,016 ms/op
Iteration   8: 2782,543 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2819,009 ±(99.9%) 55,089 ms/op

  Histogram, ms/op:
    [2780,000, 2785,000) = 2
    [2785,000, 2790,000) = 0
    [2790,000, 2795,000) = 0
    [2795,000, 2800,000) = 0
    [2800,000, 2805,000) = 0
    [2805,000, 2810,000) = 1
    [2810,000, 2815,000) = 1
    [2815,000, 2820,000) = 0
    [2820,000, 2825,000) = 1
    [2825,000, 2830,000) = 0
    [2830,000, 2835,000) = 0
    [2835,000, 2840,000) = 0
    [2840,000, 2845,000) = 1
    [2845,000, 2850,000) = 1
    [2850,000, 2855,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2780,672 ms/op
     p(50,0000) =   2817,689 ms/op
     p(90,0000) =   2858,050 ms/op
     p(95,0000) =   2858,050 ms/op
     p(99,0000) =   2858,050 ms/op
     p(99,9000) =   2858,050 ms/op
     p(99,9900) =   2858,050 ms/op
     p(99,9990) =   2858,050 ms/op
     p(99,9999) =   2858,050 ms/op
    p(100,0000) =   2858,050 ms/op


# Run complete. Total time: 00:00:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest        10000           put    ss    8  2819,009 ± 55,089  ms/op
tests.maptests.identity_object.GsIdentityMapTest (10000) = 2819.008574375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3063,756 ms/op
# Warmup Iteration   2: 2937,281 ms/op
# Warmup Iteration   3: 2943,439 ms/op
# Warmup Iteration   4: 3017,914 ms/op
# Warmup Iteration   5: 2932,135 ms/op
# Warmup Iteration   6: 2939,018 ms/op
# Warmup Iteration   7: 2935,185 ms/op
# Warmup Iteration   8: 2897,019 ms/op
# Warmup Iteration   9: 2919,811 ms/op
# Warmup Iteration  10: 2909,842 ms/op
Iteration   1: 2904,535 ms/op
Iteration   2: 2936,475 ms/op
Iteration   3: 2925,696 ms/op
Iteration   4: 3001,648 ms/op
Iteration   5: 2895,861 ms/op
Iteration   6: 2943,412 ms/op
Iteration   7: 2871,717 ms/op
Iteration   8: 2920,313 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2924,957 ±(99.9%) 73,962 ms/op

  Histogram, ms/op:
    [2800,000, 2825,000) = 0
    [2825,000, 2850,000) = 0
    [2850,000, 2875,000) = 1
    [2875,000, 2900,000) = 1
    [2900,000, 2925,000) = 2
    [2925,000, 2950,000) = 3
    [2950,000, 2975,000) = 0
    [2975,000, 3000,000) = 0
    [3000,000, 3025,000) = 1
    [3025,000, 3050,000) = 0
    [3050,000, 3075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2871,717 ms/op
     p(50,0000) =   2923,004 ms/op
     p(90,0000) =   3001,648 ms/op
     p(95,0000) =   3001,648 ms/op
     p(99,0000) =   3001,648 ms/op
     p(99,9000) =   3001,648 ms/op
     p(99,9900) =   3001,648 ms/op
     p(99,9990) =   3001,648 ms/op
     p(99,9999) =   3001,648 ms/op
    p(100,0000) =   3001,648 ms/op


# Run complete. Total time: 00:00:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest        10000           put    ss    8  2924,957 ± 73,962  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (10000) = 2924.9571920000003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2390,601 ms/op
# Warmup Iteration   2: 2272,218 ms/op
# Warmup Iteration   3: 2261,609 ms/op
# Warmup Iteration   4: 2262,063 ms/op
# Warmup Iteration   5: 2345,748 ms/op
# Warmup Iteration   6: 2315,544 ms/op
# Warmup Iteration   7: 2272,269 ms/op
# Warmup Iteration   8: 2250,661 ms/op
# Warmup Iteration   9: 2277,338 ms/op
# Warmup Iteration  10: 2284,114 ms/op
Iteration   1: 2302,154 ms/op
Iteration   2: 2281,009 ms/op
Iteration   3: 2280,547 ms/op
Iteration   4: 2333,279 ms/op
Iteration   5: 2274,204 ms/op
Iteration   6: 2271,702 ms/op
Iteration   7: 2271,600 ms/op
Iteration   8: 2275,385 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2286,235 ±(99.9%) 40,970 ms/op

  Histogram, ms/op:
    [2270,000, 2275,000) = 3
    [2275,000, 2280,000) = 1
    [2280,000, 2285,000) = 2
    [2285,000, 2290,000) = 0
    [2290,000, 2295,000) = 0
    [2295,000, 2300,000) = 0
    [2300,000, 2305,000) = 1
    [2305,000, 2310,000) = 0
    [2310,000, 2315,000) = 0
    [2315,000, 2320,000) = 0
    [2320,000, 2325,000) = 0
    [2325,000, 2330,000) = 0
    [2330,000, 2335,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2271,600 ms/op
     p(50,0000) =   2277,966 ms/op
     p(90,0000) =   2333,279 ms/op
     p(95,0000) =   2333,279 ms/op
     p(99,0000) =   2333,279 ms/op
     p(99,9000) =   2333,279 ms/op
     p(99,9900) =   2333,279 ms/op
     p(99,9990) =   2333,279 ms/op
     p(99,9999) =   2333,279 ms/op
    p(100,0000) =   2333,279 ms/op


# Run complete. Total time: 00:00:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest        10000           put    ss    8  2286,235 ± 40,970  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (10000) = 2286.2349663749997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2933,619 ms/op
# Warmup Iteration   2: 2844,777 ms/op
# Warmup Iteration   3: 2839,275 ms/op
# Warmup Iteration   4: 2835,162 ms/op
# Warmup Iteration   5: 2841,283 ms/op
# Warmup Iteration   6: 2808,460 ms/op
# Warmup Iteration   7: 2860,879 ms/op
# Warmup Iteration   8: 2843,406 ms/op
# Warmup Iteration   9: 2889,692 ms/op
# Warmup Iteration  10: 2794,614 ms/op
Iteration   1: 2829,527 ms/op
Iteration   2: 2820,312 ms/op
Iteration   3: 2829,232 ms/op
Iteration   4: 2832,706 ms/op
Iteration   5: 2814,120 ms/op
Iteration   6: 2826,166 ms/op
Iteration   7: 2811,569 ms/op
Iteration   8: 2812,436 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2822,009 ±(99.9%) 16,258 ms/op

  Histogram, ms/op:
    [2810,000, 2812,500) = 2
    [2812,500, 2815,000) = 1
    [2815,000, 2817,500) = 0
    [2817,500, 2820,000) = 0
    [2820,000, 2822,500) = 1
    [2822,500, 2825,000) = 0
    [2825,000, 2827,500) = 1
    [2827,500, 2830,000) = 2
    [2830,000, 2832,500) = 0
    [2832,500, 2835,000) = 1
    [2835,000, 2837,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2811,569 ms/op
     p(50,0000) =   2823,239 ms/op
     p(90,0000) =   2832,706 ms/op
     p(95,0000) =   2832,706 ms/op
     p(99,0000) =   2832,706 ms/op
     p(99,9000) =   2832,706 ms/op
     p(99,9900) =   2832,706 ms/op
     p(99,9990) =   2832,706 ms/op
     p(99,9999) =   2832,706 ms/op
    p(100,0000) =   2832,706 ms/op


# Run complete. Total time: 00:00:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest        10000           put    ss    8  2822,009 ± 16,258  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (10000) = 2822.008630375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4491,622 ms/op
# Warmup Iteration   2: 4412,894 ms/op
# Warmup Iteration   3: 4384,847 ms/op
# Warmup Iteration   4: 4412,390 ms/op
# Warmup Iteration   5: 4407,196 ms/op
# Warmup Iteration   6: 4405,052 ms/op
# Warmup Iteration   7: 4476,567 ms/op
# Warmup Iteration   8: 4369,292 ms/op
# Warmup Iteration   9: 4363,454 ms/op
# Warmup Iteration  10: 4371,831 ms/op
Iteration   1: 4390,375 ms/op
Iteration   2: 4382,779 ms/op
Iteration   3: 4344,029 ms/op
Iteration   4: 4452,830 ms/op
Iteration   5: 4345,291 ms/op
Iteration   6: 4381,019 ms/op
Iteration   7: 4360,313 ms/op
Iteration   8: 4344,446 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4375,135 ±(99.9%) 69,995 ms/op

  Histogram, ms/op:
    [4300,000, 4312,500) = 0
    [4312,500, 4325,000) = 0
    [4325,000, 4337,500) = 0
    [4337,500, 4350,000) = 3
    [4350,000, 4362,500) = 1
    [4362,500, 4375,000) = 0
    [4375,000, 4387,500) = 2
    [4387,500, 4400,000) = 1
    [4400,000, 4412,500) = 0
    [4412,500, 4425,000) = 0
    [4425,000, 4437,500) = 0
    [4437,500, 4450,000) = 0
    [4450,000, 4462,500) = 1
    [4462,500, 4475,000) = 0
    [4475,000, 4487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4344,029 ms/op
     p(50,0000) =   4370,666 ms/op
     p(90,0000) =   4452,830 ms/op
     p(95,0000) =   4452,830 ms/op
     p(99,0000) =   4452,830 ms/op
     p(99,9000) =   4452,830 ms/op
     p(99,9900) =   4452,830 ms/op
     p(99,9990) =   4452,830 ms/op
     p(99,9999) =   4452,830 ms/op
    p(100,0000) =   4452,830 ms/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest        10000           put    ss    8  4375,135 ± 69,995  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (10000) = 4375.135308875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 10000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4289,163 ms/op
# Warmup Iteration   2: 4114,790 ms/op
# Warmup Iteration   3: 4124,610 ms/op
# Warmup Iteration   4: 4090,636 ms/op
# Warmup Iteration   5: 4085,842 ms/op
# Warmup Iteration   6: 4159,136 ms/op
# Warmup Iteration   7: 4109,985 ms/op
# Warmup Iteration   8: 4113,631 ms/op
# Warmup Iteration   9: 4197,896 ms/op
# Warmup Iteration  10: 4099,142 ms/op
Iteration   1: 4108,618 ms/op
Iteration   2: 4110,402 ms/op
Iteration   3: 4169,363 ms/op
Iteration   4: 4099,974 ms/op
Iteration   5: 4111,171 ms/op
Iteration   6: 4169,751 ms/op
Iteration   7: 4125,394 ms/op
Iteration   8: 4100,464 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4124,392 ±(99.9%) 55,362 ms/op

  Histogram, ms/op:
    [4090,000, 4095,000) = 0
    [4095,000, 4100,000) = 1
    [4100,000, 4105,000) = 1
    [4105,000, 4110,000) = 1
    [4110,000, 4115,000) = 2
    [4115,000, 4120,000) = 0
    [4120,000, 4125,000) = 0
    [4125,000, 4130,000) = 1
    [4130,000, 4135,000) = 0
    [4135,000, 4140,000) = 0
    [4140,000, 4145,000) = 0
    [4145,000, 4150,000) = 0
    [4150,000, 4155,000) = 0
    [4155,000, 4160,000) = 0
    [4160,000, 4165,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4099,974 ms/op
     p(50,0000) =   4110,786 ms/op
     p(90,0000) =   4169,751 ms/op
     p(95,0000) =   4169,751 ms/op
     p(99,0000) =   4169,751 ms/op
     p(99,9000) =   4169,751 ms/op
     p(99,9900) =   4169,751 ms/op
     p(99,9990) =   4169,751 ms/op
     p(99,9999) =   4169,751 ms/op
    p(100,0000) =   4169,751 ms/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest        10000           put    ss    8  4124,392 ± 55,362  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (10000) = 4124.392033125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5541,933 ms/op
# Warmup Iteration   2: 5395,297 ms/op
# Warmup Iteration   3: 5450,683 ms/op
# Warmup Iteration   4: 5380,201 ms/op
# Warmup Iteration   5: 5368,037 ms/op
# Warmup Iteration   6: 5374,365 ms/op
# Warmup Iteration   7: 5353,121 ms/op
# Warmup Iteration   8: 5356,691 ms/op
# Warmup Iteration   9: 5524,523 ms/op
# Warmup Iteration  10: 5382,883 ms/op
Iteration   1: 5366,789 ms/op
Iteration   2: 5400,374 ms/op
Iteration   3: 5450,608 ms/op
Iteration   4: 5449,414 ms/op
Iteration   5: 5421,646 ms/op
Iteration   6: 5352,625 ms/op
Iteration   7: 5423,269 ms/op
Iteration   8: 5399,659 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5408,048 ±(99.9%) 67,954 ms/op

  Histogram, ms/op:
    [5350,000, 5360,000) = 1
    [5360,000, 5370,000) = 1
    [5370,000, 5380,000) = 0
    [5380,000, 5390,000) = 0
    [5390,000, 5400,000) = 1
    [5400,000, 5410,000) = 1
    [5410,000, 5420,000) = 0
    [5420,000, 5430,000) = 2
    [5430,000, 5440,000) = 0
    [5440,000, 5450,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   5352,625 ms/op
     p(50,0000) =   5411,010 ms/op
     p(90,0000) =   5450,608 ms/op
     p(95,0000) =   5450,608 ms/op
     p(99,0000) =   5450,608 ms/op
     p(99,9000) =   5450,608 ms/op
     p(99,9900) =   5450,608 ms/op
     p(99,9990) =   5450,608 ms/op
     p(99,9999) =   5450,608 ms/op
    p(100,0000) =   5450,608 ms/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test       100000           put    ss    8  5408,048 ± 67,954  ms/op
tests.maptests.article_examples.IntIntMap1Test (100000) = 5408.04785775
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2174,962 ms/op
# Warmup Iteration   2: 2046,529 ms/op
# Warmup Iteration   3: 2043,954 ms/op
# Warmup Iteration   4: 2051,429 ms/op
# Warmup Iteration   5: 2023,904 ms/op
# Warmup Iteration   6: 2059,245 ms/op
# Warmup Iteration   7: 2035,952 ms/op
# Warmup Iteration   8: 2051,006 ms/op
# Warmup Iteration   9: 2023,577 ms/op
# Warmup Iteration  10: 2026,407 ms/op
Iteration   1: 2010,117 ms/op
Iteration   2: 2026,372 ms/op
Iteration   3: 2057,599 ms/op
Iteration   4: 2062,061 ms/op
Iteration   5: 2047,391 ms/op
Iteration   6: 2099,157 ms/op
Iteration   7: 2003,762 ms/op
Iteration   8: 1999,739 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2038,275 ±(99.9%) 65,995 ms/op

  Histogram, ms/op:
    [1990,000, 2000,000) = 1
    [2000,000, 2010,000) = 1
    [2010,000, 2020,000) = 1
    [2020,000, 2030,000) = 1
    [2030,000, 2040,000) = 0
    [2040,000, 2050,000) = 1
    [2050,000, 2060,000) = 1
    [2060,000, 2070,000) = 1
    [2070,000, 2080,000) = 0
    [2080,000, 2090,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1999,739 ms/op
     p(50,0000) =   2036,882 ms/op
     p(90,0000) =   2099,157 ms/op
     p(95,0000) =   2099,157 ms/op
     p(99,0000) =   2099,157 ms/op
     p(99,9000) =   2099,157 ms/op
     p(99,9900) =   2099,157 ms/op
     p(99,9990) =   2099,157 ms/op
     p(99,9999) =   2099,157 ms/op
    p(100,0000) =   2099,157 ms/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test       100000           put    ss    8  2038,275 ± 65,995  ms/op
tests.maptests.article_examples.IntIntMap2Test (100000) = 2038.2748112499999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1826,805 ms/op
# Warmup Iteration   2: 1702,109 ms/op
# Warmup Iteration   3: 1701,127 ms/op
# Warmup Iteration   4: 1663,784 ms/op
# Warmup Iteration   5: 1699,209 ms/op
# Warmup Iteration   6: 1725,613 ms/op
# Warmup Iteration   7: 1713,682 ms/op
# Warmup Iteration   8: 1694,584 ms/op
# Warmup Iteration   9: 1683,442 ms/op
# Warmup Iteration  10: 1711,601 ms/op
Iteration   1: 1693,589 ms/op
Iteration   2: 1747,547 ms/op
Iteration   3: 1726,812 ms/op
Iteration   4: 1701,653 ms/op
Iteration   5: 1674,967 ms/op
Iteration   6: 1717,410 ms/op
Iteration   7: 1708,191 ms/op
Iteration   8: 1720,362 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1711,316 ±(99.9%) 42,203 ms/op

  Histogram, ms/op:
    [1670,000, 1675,000) = 1
    [1675,000, 1680,000) = 0
    [1680,000, 1685,000) = 0
    [1685,000, 1690,000) = 0
    [1690,000, 1695,000) = 1
    [1695,000, 1700,000) = 0
    [1700,000, 1705,000) = 1
    [1705,000, 1710,000) = 1
    [1710,000, 1715,000) = 0
    [1715,000, 1720,000) = 1
    [1720,000, 1725,000) = 1
    [1725,000, 1730,000) = 1
    [1730,000, 1735,000) = 0
    [1735,000, 1740,000) = 0
    [1740,000, 1745,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1674,967 ms/op
     p(50,0000) =   1712,801 ms/op
     p(90,0000) =   1747,547 ms/op
     p(95,0000) =   1747,547 ms/op
     p(99,0000) =   1747,547 ms/op
     p(99,9000) =   1747,547 ms/op
     p(99,9900) =   1747,547 ms/op
     p(99,9990) =   1747,547 ms/op
     p(99,9999) =   1747,547 ms/op
    p(100,0000) =   1747,547 ms/op


# Run complete. Total time: 00:00:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test       100000           put    ss    8  1711,316 ± 42,203  ms/op
tests.maptests.article_examples.IntIntMap3Test (100000) = 1711.3163333749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1606,242 ms/op
# Warmup Iteration   2: 1560,434 ms/op
# Warmup Iteration   3: 1545,524 ms/op
# Warmup Iteration   4: 1548,937 ms/op
# Warmup Iteration   5: 1536,768 ms/op
# Warmup Iteration   6: 1610,872 ms/op
# Warmup Iteration   7: 1662,505 ms/op
# Warmup Iteration   8: 1653,209 ms/op
# Warmup Iteration   9: 1717,816 ms/op
# Warmup Iteration  10: 1674,563 ms/op
Iteration   1: 1679,721 ms/op
Iteration   2: 1669,148 ms/op
Iteration   3: 1640,993 ms/op
Iteration   4: 1675,782 ms/op
Iteration   5: 1643,668 ms/op
Iteration   6: 1635,313 ms/op
Iteration   7: 1653,380 ms/op
Iteration   8: 1636,006 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1654,251 ±(99.9%) 34,765 ms/op

  Histogram, ms/op:
    [1630,000, 1635,000) = 0
    [1635,000, 1640,000) = 2
    [1640,000, 1645,000) = 2
    [1645,000, 1650,000) = 0
    [1650,000, 1655,000) = 1
    [1655,000, 1660,000) = 0
    [1660,000, 1665,000) = 0
    [1665,000, 1670,000) = 1
    [1670,000, 1675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1635,313 ms/op
     p(50,0000) =   1648,524 ms/op
     p(90,0000) =   1679,721 ms/op
     p(95,0000) =   1679,721 ms/op
     p(99,0000) =   1679,721 ms/op
     p(99,9000) =   1679,721 ms/op
     p(99,9900) =   1679,721 ms/op
     p(99,9990) =   1679,721 ms/op
     p(99,9999) =   1679,721 ms/op
    p(100,0000) =   1679,721 ms/op


# Run complete. Total time: 00:00:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test       100000           put    ss    8  1654,251 ± 34,765  ms/op
tests.maptests.article_examples.IntIntMap4Test (100000) = 1654.25130175
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1628,025 ms/op
# Warmup Iteration   2: 1545,475 ms/op
# Warmup Iteration   3: 1496,568 ms/op
# Warmup Iteration   4: 1515,115 ms/op
# Warmup Iteration   5: 1497,079 ms/op
# Warmup Iteration   6: 1630,982 ms/op
# Warmup Iteration   7: 1603,946 ms/op
# Warmup Iteration   8: 1606,040 ms/op
# Warmup Iteration   9: 1620,939 ms/op
# Warmup Iteration  10: 1581,401 ms/op
Iteration   1: 1604,242 ms/op
Iteration   2: 1614,806 ms/op
Iteration   3: 1604,462 ms/op
Iteration   4: 1608,427 ms/op
Iteration   5: 1665,503 ms/op
Iteration   6: 1586,676 ms/op
Iteration   7: 1604,596 ms/op
Iteration   8: 1599,013 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1610,966 ±(99.9%) 44,877 ms/op

  Histogram, ms/op:
    [1580,000, 1585,000) = 0
    [1585,000, 1590,000) = 1
    [1590,000, 1595,000) = 0
    [1595,000, 1600,000) = 1
    [1600,000, 1605,000) = 3
    [1605,000, 1610,000) = 1
    [1610,000, 1615,000) = 1
    [1615,000, 1620,000) = 0
    [1620,000, 1625,000) = 0
    [1625,000, 1630,000) = 0
    [1630,000, 1635,000) = 0
    [1635,000, 1640,000) = 0
    [1640,000, 1645,000) = 0
    [1645,000, 1650,000) = 0
    [1650,000, 1655,000) = 0
    [1655,000, 1660,000) = 0
    [1660,000, 1665,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1586,676 ms/op
     p(50,0000) =   1604,529 ms/op
     p(90,0000) =   1665,503 ms/op
     p(95,0000) =   1665,503 ms/op
     p(99,0000) =   1665,503 ms/op
     p(99,9000) =   1665,503 ms/op
     p(99,9900) =   1665,503 ms/op
     p(99,9990) =   1665,503 ms/op
     p(99,9999) =   1665,503 ms/op
    p(100,0000) =   1665,503 ms/op


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest       100000           put    ss    8  1610,966 ± 44,877  ms/op
tests.maptests.article_examples.IntIntMap4aTest (100000) = 1610.9655532499999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1651,522 ms/op
# Warmup Iteration   2: 1589,514 ms/op
# Warmup Iteration   3: 1620,146 ms/op
# Warmup Iteration   4: 1515,057 ms/op
# Warmup Iteration   5: 1493,093 ms/op
# Warmup Iteration   6: 1556,203 ms/op
# Warmup Iteration   7: 1520,955 ms/op
# Warmup Iteration   8: 1501,690 ms/op
# Warmup Iteration   9: 1529,682 ms/op
# Warmup Iteration  10: 1588,681 ms/op
Iteration   1: 1525,672 ms/op
Iteration   2: 1603,468 ms/op
Iteration   3: 1543,806 ms/op
Iteration   4: 1594,042 ms/op
Iteration   5: 1656,548 ms/op
Iteration   6: 1555,509 ms/op
Iteration   7: 1469,772 ms/op
Iteration   8: 1476,422 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1553,155 ±(99.9%) 122,175 ms/op

  Histogram, ms/op:
    [1400,000, 1425,000) = 0
    [1425,000, 1450,000) = 0
    [1450,000, 1475,000) = 1
    [1475,000, 1500,000) = 1
    [1500,000, 1525,000) = 0
    [1525,000, 1550,000) = 2
    [1550,000, 1575,000) = 1
    [1575,000, 1600,000) = 1
    [1600,000, 1625,000) = 1
    [1625,000, 1650,000) = 0
    [1650,000, 1675,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1469,772 ms/op
     p(50,0000) =   1549,658 ms/op
     p(90,0000) =   1656,548 ms/op
     p(95,0000) =   1656,548 ms/op
     p(99,0000) =   1656,548 ms/op
     p(99,9000) =   1656,548 ms/op
     p(99,9900) =   1656,548 ms/op
     p(99,9990) =   1656,548 ms/op
     p(99,9999) =   1656,548 ms/op
    p(100,0000) =   1656,548 ms/op


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest       100000           put    ss    8  1553,155 ± 122,175  ms/op
tests.maptests.primitive.FastUtilMapTest (100000) = 1553.1549234999998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2107,641 ms/op
# Warmup Iteration   2: 1932,797 ms/op
# Warmup Iteration   3: 1907,440 ms/op
# Warmup Iteration   4: 1917,932 ms/op
# Warmup Iteration   5: 1928,122 ms/op
# Warmup Iteration   6: 1960,332 ms/op
# Warmup Iteration   7: 1961,254 ms/op
# Warmup Iteration   8: 1929,395 ms/op
# Warmup Iteration   9: 1926,821 ms/op
# Warmup Iteration  10: 1933,831 ms/op
Iteration   1: 1930,403 ms/op
Iteration   2: 1936,868 ms/op
Iteration   3: 1957,951 ms/op
Iteration   4: 1938,495 ms/op
Iteration   5: 1970,978 ms/op
Iteration   6: 2018,630 ms/op
Iteration   7: 1912,969 ms/op
Iteration   8: 1920,391 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1948,336 ±(99.9%) 65,152 ms/op

  Histogram, ms/op:
    [1900,000, 1912,500) = 0
    [1912,500, 1925,000) = 2
    [1925,000, 1937,500) = 2
    [1937,500, 1950,000) = 1
    [1950,000, 1962,500) = 1
    [1962,500, 1975,000) = 1
    [1975,000, 1987,500) = 0
    [1987,500, 2000,000) = 0
    [2000,000, 2012,500) = 0
    [2012,500, 2025,000) = 1
    [2025,000, 2037,500) = 0
    [2037,500, 2050,000) = 0
    [2050,000, 2062,500) = 0
    [2062,500, 2075,000) = 0
    [2075,000, 2087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1912,969 ms/op
     p(50,0000) =   1937,681 ms/op
     p(90,0000) =   2018,630 ms/op
     p(95,0000) =   2018,630 ms/op
     p(99,0000) =   2018,630 ms/op
     p(99,9000) =   2018,630 ms/op
     p(99,9900) =   2018,630 ms/op
     p(99,9990) =   2018,630 ms/op
     p(99,9999) =   2018,630 ms/op
    p(100,0000) =   2018,630 ms/op


# Run complete. Total time: 00:00:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest       100000           put    ss    8  1948,336 ± 65,152  ms/op
tests.maptests.primitive.GsMutableMapTest (100000) = 1948.3355953750001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1639,967 ms/op
# Warmup Iteration   2: 1480,587 ms/op
# Warmup Iteration   3: 1463,974 ms/op
# Warmup Iteration   4: 1473,771 ms/op
# Warmup Iteration   5: 1490,529 ms/op
# Warmup Iteration   6: 1750,056 ms/op
# Warmup Iteration   7: 1913,441 ms/op
# Warmup Iteration   8: 1872,997 ms/op
# Warmup Iteration   9: 1909,544 ms/op
# Warmup Iteration  10: 1893,813 ms/op
Iteration   1: 1904,632 ms/op
Iteration   2: 1930,022 ms/op
Iteration   3: 1903,771 ms/op
Iteration   4: 1891,803 ms/op
Iteration   5: 1889,742 ms/op
Iteration   6: 1912,136 ms/op
Iteration   7: 1909,359 ms/op
Iteration   8: 1921,863 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1907,916 ±(99.9%) 26,265 ms/op

  Histogram, ms/op:
    [1880,000, 1885,000) = 0
    [1885,000, 1890,000) = 1
    [1890,000, 1895,000) = 1
    [1895,000, 1900,000) = 0
    [1900,000, 1905,000) = 2
    [1905,000, 1910,000) = 1
    [1910,000, 1915,000) = 1
    [1915,000, 1920,000) = 0
    [1920,000, 1925,000) = 1
    [1925,000, 1930,000) = 0
    [1930,000, 1935,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1889,742 ms/op
     p(50,0000) =   1906,996 ms/op
     p(90,0000) =   1930,022 ms/op
     p(95,0000) =   1930,022 ms/op
     p(99,0000) =   1930,022 ms/op
     p(99,9000) =   1930,022 ms/op
     p(99,9900) =   1930,022 ms/op
     p(99,9990) =   1930,022 ms/op
     p(99,9999) =   1930,022 ms/op
    p(100,0000) =   1930,022 ms/op


# Run complete. Total time: 00:00:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest       100000           put    ss    8  1907,916 ± 26,265  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (100000) = 1907.9160514999999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1792,890 ms/op
# Warmup Iteration   2: 1672,821 ms/op
# Warmup Iteration   3: 1689,039 ms/op
# Warmup Iteration   4: 1730,630 ms/op
# Warmup Iteration   5: 1686,950 ms/op
# Warmup Iteration   6: 1700,376 ms/op
# Warmup Iteration   7: 1735,915 ms/op
# Warmup Iteration   8: 1693,648 ms/op
# Warmup Iteration   9: 1693,435 ms/op
# Warmup Iteration  10: 1678,326 ms/op
Iteration   1: 1715,672 ms/op
Iteration   2: 1651,913 ms/op
Iteration   3: 1664,796 ms/op
Iteration   4: 1640,294 ms/op
Iteration   5: 1679,613 ms/op
Iteration   6: 1680,711 ms/op
Iteration   7: 1730,526 ms/op
Iteration   8: 1686,356 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1681,235 ±(99.9%) 58,042 ms/op

  Histogram, ms/op:
    [1640,000, 1650,000) = 1
    [1650,000, 1660,000) = 1
    [1660,000, 1670,000) = 1
    [1670,000, 1680,000) = 1
    [1680,000, 1690,000) = 2
    [1690,000, 1700,000) = 0
    [1700,000, 1710,000) = 0
    [1710,000, 1720,000) = 1
    [1720,000, 1730,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1640,294 ms/op
     p(50,0000) =   1680,162 ms/op
     p(90,0000) =   1730,526 ms/op
     p(95,0000) =   1730,526 ms/op
     p(99,0000) =   1730,526 ms/op
     p(99,9000) =   1730,526 ms/op
     p(99,9900) =   1730,526 ms/op
     p(99,9990) =   1730,526 ms/op
     p(99,9999) =   1730,526 ms/op
    p(100,0000) =   1730,526 ms/op


# Run complete. Total time: 00:00:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest       100000           put    ss    8  1681,235 ± 58,042  ms/op
tests.maptests.primitive.HppcMapTest (100000) = 1681.23513325
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3560,704 ms/op
# Warmup Iteration   2: 3557,383 ms/op
# Warmup Iteration   3: 3644,119 ms/op
# Warmup Iteration   4: 3478,697 ms/op
# Warmup Iteration   5: 3404,775 ms/op
# Warmup Iteration   6: 3420,624 ms/op
# Warmup Iteration   7: 3446,135 ms/op
# Warmup Iteration   8: 3495,992 ms/op
# Warmup Iteration   9: 3504,676 ms/op
# Warmup Iteration  10: 3482,364 ms/op
Iteration   1: 3660,578 ms/op
Iteration   2: 3445,734 ms/op
Iteration   3: 3431,960 ms/op
Iteration   4: 3497,620 ms/op
Iteration   5: 3505,534 ms/op
Iteration   6: 3572,148 ms/op
Iteration   7: 3540,011 ms/op
Iteration   8: 3450,010 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3512,949 ±(99.9%) 146,967 ms/op

  Histogram, ms/op:
    [3400,000, 3425,000) = 0
    [3425,000, 3450,000) = 2
    [3450,000, 3475,000) = 1
    [3475,000, 3500,000) = 1
    [3500,000, 3525,000) = 1
    [3525,000, 3550,000) = 1
    [3550,000, 3575,000) = 1
    [3575,000, 3600,000) = 0
    [3600,000, 3625,000) = 0
    [3625,000, 3650,000) = 0
    [3650,000, 3675,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3431,960 ms/op
     p(50,0000) =   3501,577 ms/op
     p(90,0000) =   3660,578 ms/op
     p(95,0000) =   3660,578 ms/op
     p(99,0000) =   3660,578 ms/op
     p(99,9000) =   3660,578 ms/op
     p(99,9900) =   3660,578 ms/op
     p(99,9990) =   3660,578 ms/op
     p(99,9999) =   3660,578 ms/op
    p(100,0000) =   3660,578 ms/op


# Run complete. Total time: 00:01:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest       100000           put    ss    8  3512,949 ± 146,967  ms/op
tests.maptests.primitive.TroveJbMapTest (100000) = 3512.9493326250004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3309,542 ms/op
# Warmup Iteration   2: 3249,919 ms/op
# Warmup Iteration   3: 3153,904 ms/op
# Warmup Iteration   4: 3180,049 ms/op
# Warmup Iteration   5: 3180,591 ms/op
# Warmup Iteration   6: 3294,386 ms/op
# Warmup Iteration   7: 3273,007 ms/op
# Warmup Iteration   8: 3164,064 ms/op
# Warmup Iteration   9: 3381,695 ms/op
# Warmup Iteration  10: 3233,896 ms/op
Iteration   1: 3302,674 ms/op
Iteration   2: 3198,202 ms/op
Iteration   3: 3255,194 ms/op
Iteration   4: 3177,137 ms/op
Iteration   5: 3193,184 ms/op
Iteration   6: 3116,813 ms/op
Iteration   7: 3352,270 ms/op
Iteration   8: 3231,421 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3228,362 ±(99.9%) 142,382 ms/op

  Histogram, ms/op:
    [3100,000, 3125,000) = 1
    [3125,000, 3150,000) = 0
    [3150,000, 3175,000) = 0
    [3175,000, 3200,000) = 3
    [3200,000, 3225,000) = 0
    [3225,000, 3250,000) = 1
    [3250,000, 3275,000) = 1
    [3275,000, 3300,000) = 0
    [3300,000, 3325,000) = 1
    [3325,000, 3350,000) = 0
    [3350,000, 3375,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3116,813 ms/op
     p(50,0000) =   3214,811 ms/op
     p(90,0000) =   3352,270 ms/op
     p(95,0000) =   3352,270 ms/op
     p(99,0000) =   3352,270 ms/op
     p(99,9000) =   3352,270 ms/op
     p(99,9900) =   3352,270 ms/op
     p(99,9990) =   3352,270 ms/op
     p(99,9999) =   3352,270 ms/op
    p(100,0000) =   3352,270 ms/op


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest       100000           put    ss    8  3228,362 ± 142,382  ms/op
tests.maptests.primitive.TroveMapTest (100000) = 3228.3616349999998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3109,493 ms/op
# Warmup Iteration   2: 2938,272 ms/op
# Warmup Iteration   3: 3197,158 ms/op
# Warmup Iteration   4: 3107,026 ms/op
# Warmup Iteration   5: 3164,191 ms/op
# Warmup Iteration   6: 3063,462 ms/op
# Warmup Iteration   7: 3019,291 ms/op
# Warmup Iteration   8: 3173,261 ms/op
# Warmup Iteration   9: 3275,364 ms/op
# Warmup Iteration  10: 2960,569 ms/op
Iteration   1: 3079,793 ms/op
Iteration   2: 3146,554 ms/op
Iteration   3: 3003,750 ms/op
Iteration   4: 3054,849 ms/op
Iteration   5: 3033,452 ms/op
Iteration   6: 3190,149 ms/op
Iteration   7: 2893,019 ms/op
Iteration   8: 3036,557 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3054,765 ±(99.9%) 172,427 ms/op

  Histogram, ms/op:
    [2800,000, 2825,000) = 0
    [2825,000, 2850,000) = 0
    [2850,000, 2875,000) = 0
    [2875,000, 2900,000) = 1
    [2900,000, 2925,000) = 0
    [2925,000, 2950,000) = 0
    [2950,000, 2975,000) = 0
    [2975,000, 3000,000) = 0
    [3000,000, 3025,000) = 1
    [3025,000, 3050,000) = 2
    [3050,000, 3075,000) = 1
    [3075,000, 3100,000) = 1
    [3100,000, 3125,000) = 0
    [3125,000, 3150,000) = 1
    [3150,000, 3175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2893,019 ms/op
     p(50,0000) =   3045,703 ms/op
     p(90,0000) =   3190,149 ms/op
     p(95,0000) =   3190,149 ms/op
     p(99,0000) =   3190,149 ms/op
     p(99,9000) =   3190,149 ms/op
     p(99,9900) =   3190,149 ms/op
     p(99,9990) =   3190,149 ms/op
     p(99,9999) =   3190,149 ms/op
    p(100,0000) =   3190,149 ms/op


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest       100000           put    ss    8  3054,765 ± 172,427  ms/op
tests.maptests.object.FastUtilObjMapTest (100000) = 3054.7653353749997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6096,398 ms/op
# Warmup Iteration   2: 5843,893 ms/op
# Warmup Iteration   3: 5733,938 ms/op
# Warmup Iteration   4: 5870,010 ms/op
# Warmup Iteration   5: 6144,230 ms/op
# Warmup Iteration   6: 5806,138 ms/op
# Warmup Iteration   7: 5712,738 ms/op
# Warmup Iteration   8: 5709,245 ms/op
# Warmup Iteration   9: 5783,056 ms/op
# Warmup Iteration  10: 5916,996 ms/op
Iteration   1: 5819,168 ms/op
Iteration   2: 5808,722 ms/op
Iteration   3: 5958,636 ms/op
Iteration   4: 5874,695 ms/op
Iteration   5: 6008,058 ms/op
Iteration   6: 5682,859 ms/op
Iteration   7: 5749,314 ms/op
Iteration   8: 5764,230 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5833,210 ±(99.9%) 208,476 ms/op

  Histogram, ms/op:
    [5600,000, 5650,000) = 0
    [5650,000, 5700,000) = 1
    [5700,000, 5750,000) = 1
    [5750,000, 5800,000) = 1
    [5800,000, 5850,000) = 2
    [5850,000, 5900,000) = 1
    [5900,000, 5950,000) = 0
    [5950,000, 6000,000) = 1
    [6000,000, 6050,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   5682,859 ms/op
     p(50,0000) =   5813,945 ms/op
     p(90,0000) =   6008,058 ms/op
     p(95,0000) =   6008,058 ms/op
     p(99,0000) =   6008,058 ms/op
     p(99,9000) =   6008,058 ms/op
     p(99,9900) =   6008,058 ms/op
     p(99,9990) =   6008,058 ms/op
     p(99,9999) =   6008,058 ms/op
    p(100,0000) =   6008,058 ms/op


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest       100000           put    ss    8  5833,210 ± 208,476  ms/op
tests.maptests.object.KolobokeMutableObjTest (100000) = 5833.2102511250005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6145,314 ms/op
# Warmup Iteration   2: 5785,808 ms/op
# Warmup Iteration   3: 5797,612 ms/op
# Warmup Iteration   4: 5808,617 ms/op
# Warmup Iteration   5: 5802,704 ms/op
# Warmup Iteration   6: 5815,046 ms/op
# Warmup Iteration   7: 5887,739 ms/op
# Warmup Iteration   8: 6009,543 ms/op
# Warmup Iteration   9: 5917,325 ms/op
# Warmup Iteration  10: 5842,637 ms/op
Iteration   1: 5884,801 ms/op
Iteration   2: 5781,068 ms/op
Iteration   3: 5839,611 ms/op
Iteration   4: 5700,885 ms/op
Iteration   5: 5737,438 ms/op
Iteration   6: 6262,324 ms/op
Iteration   7: 5929,044 ms/op
Iteration   8: 5820,392 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5869,445 ±(99.9%) 335,151 ms/op

  Histogram, ms/op:
    [5700,000, 5750,000) = 2
    [5750,000, 5800,000) = 1
    [5800,000, 5850,000) = 2
    [5850,000, 5900,000) = 1
    [5900,000, 5950,000) = 1
    [5950,000, 6000,000) = 0
    [6000,000, 6050,000) = 0
    [6050,000, 6100,000) = 0
    [6100,000, 6150,000) = 0
    [6150,000, 6200,000) = 0
    [6200,000, 6250,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5700,885 ms/op
     p(50,0000) =   5830,001 ms/op
     p(90,0000) =   6262,324 ms/op
     p(95,0000) =   6262,324 ms/op
     p(99,0000) =   6262,324 ms/op
     p(99,9000) =   6262,324 ms/op
     p(99,9900) =   6262,324 ms/op
     p(99,9990) =   6262,324 ms/op
     p(99,9999) =   6262,324 ms/op
    p(100,0000) =   6262,324 ms/op


# Run complete. Total time: 00:01:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest       100000           put    ss    8  5869,445 ± 335,151  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (100000) = 5869.44514375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7010,102 ms/op
# Warmup Iteration   2: 6683,797 ms/op
# Warmup Iteration   3: 6638,306 ms/op
# Warmup Iteration   4: 6607,148 ms/op
# Warmup Iteration   5: 6714,778 ms/op
# Warmup Iteration   6: 6606,469 ms/op
# Warmup Iteration   7: 6808,138 ms/op
# Warmup Iteration   8: 6528,963 ms/op
# Warmup Iteration   9: 6573,329 ms/op
# Warmup Iteration  10: 6496,164 ms/op
Iteration   1: 6679,837 ms/op
Iteration   2: 6577,030 ms/op
Iteration   3: 6486,362 ms/op
Iteration   4: 6609,078 ms/op
Iteration   5: 6517,275 ms/op
Iteration   6: 6670,785 ms/op
Iteration   7: 6583,314 ms/op
Iteration   8: 6606,101 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6591,223 ±(99.9%) 128,159 ms/op

  Histogram, ms/op:
    [6400,000, 6425,000) = 0
    [6425,000, 6450,000) = 0
    [6450,000, 6475,000) = 0
    [6475,000, 6500,000) = 1
    [6500,000, 6525,000) = 1
    [6525,000, 6550,000) = 0
    [6550,000, 6575,000) = 0
    [6575,000, 6600,000) = 2
    [6600,000, 6625,000) = 2
    [6625,000, 6650,000) = 0
    [6650,000, 6675,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   6486,362 ms/op
     p(50,0000) =   6594,707 ms/op
     p(90,0000) =   6679,837 ms/op
     p(95,0000) =   6679,837 ms/op
     p(99,0000) =   6679,837 ms/op
     p(99,9000) =   6679,837 ms/op
     p(99,9900) =   6679,837 ms/op
     p(99,9990) =   6679,837 ms/op
     p(99,9999) =   6679,837 ms/op
    p(100,0000) =   6679,837 ms/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest       100000           put    ss    8  6591,223 ± 128,159  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (100000) = 6591.222665625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3770,965 ms/op
# Warmup Iteration   2: 3448,141 ms/op
# Warmup Iteration   3: 3746,113 ms/op
# Warmup Iteration   4: 3605,105 ms/op
# Warmup Iteration   5: 3432,329 ms/op
# Warmup Iteration   6: 3548,867 ms/op
# Warmup Iteration   7: 3647,029 ms/op
# Warmup Iteration   8: 3672,599 ms/op
# Warmup Iteration   9: 3433,816 ms/op
# Warmup Iteration  10: 3359,157 ms/op
Iteration   1: 3564,962 ms/op
Iteration   2: 3557,237 ms/op
Iteration   3: 3396,736 ms/op
Iteration   4: 3476,876 ms/op
Iteration   5: 3624,326 ms/op
Iteration   6: 3470,046 ms/op
Iteration   7: 3540,037 ms/op
Iteration   8: 3570,776 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3525,124 ±(99.9%) 138,273 ms/op

  Histogram, ms/op:
    [3300,000, 3325,000) = 0
    [3325,000, 3350,000) = 0
    [3350,000, 3375,000) = 0
    [3375,000, 3400,000) = 1
    [3400,000, 3425,000) = 0
    [3425,000, 3450,000) = 0
    [3450,000, 3475,000) = 1
    [3475,000, 3500,000) = 1
    [3500,000, 3525,000) = 0
    [3525,000, 3550,000) = 1
    [3550,000, 3575,000) = 3
    [3575,000, 3600,000) = 0
    [3600,000, 3625,000) = 1
    [3625,000, 3650,000) = 0
    [3650,000, 3675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3396,736 ms/op
     p(50,0000) =   3548,637 ms/op
     p(90,0000) =   3624,326 ms/op
     p(95,0000) =   3624,326 ms/op
     p(99,0000) =   3624,326 ms/op
     p(99,9000) =   3624,326 ms/op
     p(99,9900) =   3624,326 ms/op
     p(99,9990) =   3624,326 ms/op
     p(99,9999) =   3624,326 ms/op
    p(100,0000) =   3624,326 ms/op


# Run complete. Total time: 00:01:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest       100000           put    ss    8  3525,124 ± 138,273  ms/op
tests.maptests.object.HppcObjMapTest (100000) = 3525.1244466249996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8853,375 ms/op
# Warmup Iteration   2: 8845,186 ms/op
# Warmup Iteration   3: 8485,433 ms/op
# Warmup Iteration   4: 9386,849 ms/op
# Warmup Iteration   5: 8544,228 ms/op
# Warmup Iteration   6: 8364,398 ms/op
# Warmup Iteration   7: 9119,688 ms/op
# Warmup Iteration   8: 8754,873 ms/op
# Warmup Iteration   9: 7688,119 ms/op
# Warmup Iteration  10: 8664,954 ms/op
Iteration   1: 8846,904 ms/op
Iteration   2: 8093,542 ms/op
Iteration   3: 9080,297 ms/op
Iteration   4: 8501,016 ms/op
Iteration   5: 8102,510 ms/op
Iteration   6: 8819,802 ms/op
Iteration   7: 7722,651 ms/op
Iteration   8: 9011,347 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8522,259 ±(99.9%) 954,443 ms/op

  Histogram, ms/op:
    [ 7000,000,  7250,000) = 0
    [ 7250,000,  7500,000) = 0
    [ 7500,000,  7750,000) = 1
    [ 7750,000,  8000,000) = 0
    [ 8000,000,  8250,000) = 2
    [ 8250,000,  8500,000) = 0
    [ 8500,000,  8750,000) = 1
    [ 8750,000,  9000,000) = 2
    [ 9000,000,  9250,000) = 2
    [ 9250,000,  9500,000) = 0
    [ 9500,000,  9750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   7722,651 ms/op
     p(50,0000) =   8660,409 ms/op
     p(90,0000) =   9080,297 ms/op
     p(95,0000) =   9080,297 ms/op
     p(99,0000) =   9080,297 ms/op
     p(99,9000) =   9080,297 ms/op
     p(99,9900) =   9080,297 ms/op
     p(99,9990) =   9080,297 ms/op
     p(99,9999) =   9080,297 ms/op
    p(100,0000) =   9080,297 ms/op


# Run complete. Total time: 00:02:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest       100000           put    ss    8  8522,259 ± 954,443  ms/op
tests.maptests.object.GsObjMapTest (100000) = 8522.258666124999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7703,690 ms/op
# Warmup Iteration   2: 7256,948 ms/op
# Warmup Iteration   3: 7420,861 ms/op
# Warmup Iteration   4: 7303,520 ms/op
# Warmup Iteration   5: 7300,393 ms/op
# Warmup Iteration   6: 7264,806 ms/op
# Warmup Iteration   7: 7375,000 ms/op
# Warmup Iteration   8: 7404,405 ms/op
# Warmup Iteration   9: 7428,049 ms/op
# Warmup Iteration  10: 7427,659 ms/op
Iteration   1: 7358,967 ms/op
Iteration   2: 7438,459 ms/op
Iteration   3: 7347,715 ms/op
Iteration   4: 7402,890 ms/op
Iteration   5: 7357,253 ms/op
Iteration   6: 7334,783 ms/op
Iteration   7: 7300,500 ms/op
Iteration   8: 7439,141 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7372,464 ±(99.9%) 95,193 ms/op

  Histogram, ms/op:
    [7300,000, 7312,500) = 1
    [7312,500, 7325,000) = 0
    [7325,000, 7337,500) = 1
    [7337,500, 7350,000) = 1
    [7350,000, 7362,500) = 2
    [7362,500, 7375,000) = 0
    [7375,000, 7387,500) = 0
    [7387,500, 7400,000) = 0
    [7400,000, 7412,500) = 1
    [7412,500, 7425,000) = 0
    [7425,000, 7437,500) = 0
    [7437,500, 7450,000) = 2
    [7450,000, 7462,500) = 0
    [7462,500, 7475,000) = 0
    [7475,000, 7487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   7300,500 ms/op
     p(50,0000) =   7358,110 ms/op
     p(90,0000) =   7439,141 ms/op
     p(95,0000) =   7439,141 ms/op
     p(99,0000) =   7439,141 ms/op
     p(99,9000) =   7439,141 ms/op
     p(99,9900) =   7439,141 ms/op
     p(99,9990) =   7439,141 ms/op
     p(99,9999) =   7439,141 ms/op
    p(100,0000) =   7439,141 ms/op


# Run complete. Total time: 00:02:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest       100000           put    ss    8  7372,464 ± 95,193  ms/op
tests.maptests.object.JdkMapTest (100000) = 7372.463615374999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5398,303 ms/op
# Warmup Iteration   2: 5246,748 ms/op
# Warmup Iteration   3: 5269,642 ms/op
# Warmup Iteration   4: 5366,462 ms/op
# Warmup Iteration   5: 5129,880 ms/op
# Warmup Iteration   6: 5325,469 ms/op
# Warmup Iteration   7: 5277,536 ms/op
# Warmup Iteration   8: 5287,220 ms/op
# Warmup Iteration   9: 5125,049 ms/op
# Warmup Iteration  10: 5155,503 ms/op
Iteration   1: 5136,173 ms/op
Iteration   2: 5020,037 ms/op
Iteration   3: 5166,918 ms/op
Iteration   4: 4969,468 ms/op
Iteration   5: 5221,364 ms/op
Iteration   6: 5068,772 ms/op
Iteration   7: 5098,839 ms/op
Iteration   8: 5190,670 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5109,030 ±(99.9%) 165,572 ms/op

  Histogram, ms/op:
    [4900,000, 4925,000) = 0
    [4925,000, 4950,000) = 0
    [4950,000, 4975,000) = 1
    [4975,000, 5000,000) = 0
    [5000,000, 5025,000) = 1
    [5025,000, 5050,000) = 0
    [5050,000, 5075,000) = 1
    [5075,000, 5100,000) = 1
    [5100,000, 5125,000) = 0
    [5125,000, 5150,000) = 1
    [5150,000, 5175,000) = 1
    [5175,000, 5200,000) = 1
    [5200,000, 5225,000) = 1
    [5225,000, 5250,000) = 0
    [5250,000, 5275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4969,468 ms/op
     p(50,0000) =   5117,506 ms/op
     p(90,0000) =   5221,364 ms/op
     p(95,0000) =   5221,364 ms/op
     p(99,0000) =   5221,364 ms/op
     p(99,9000) =   5221,364 ms/op
     p(99,9900) =   5221,364 ms/op
     p(99,9990) =   5221,364 ms/op
     p(99,9999) =   5221,364 ms/op
    p(100,0000) =   5221,364 ms/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity       100000           put    ss    8  5109,030 ± 165,572  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (100000) = 5109.030006375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6235,518 ms/op
# Warmup Iteration   2: 6090,418 ms/op
# Warmup Iteration   3: 6112,849 ms/op
# Warmup Iteration   4: 6188,383 ms/op
# Warmup Iteration   5: 6153,127 ms/op
# Warmup Iteration   6: 6100,995 ms/op
# Warmup Iteration   7: 6095,539 ms/op
# Warmup Iteration   8: 6075,899 ms/op
# Warmup Iteration   9: 6254,140 ms/op
# Warmup Iteration  10: 6185,796 ms/op
Iteration   1: 6086,550 ms/op
Iteration   2: 6063,082 ms/op
Iteration   3: 6137,253 ms/op
Iteration   4: 6180,500 ms/op
Iteration   5: 6068,649 ms/op
Iteration   6: 6146,859 ms/op
Iteration   7: 6140,652 ms/op
Iteration   8: 6064,010 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6110,945 ±(99.9%) 87,260 ms/op

  Histogram, ms/op:
    [6000,000, 6012,500) = 0
    [6012,500, 6025,000) = 0
    [6025,000, 6037,500) = 0
    [6037,500, 6050,000) = 0
    [6050,000, 6062,500) = 0
    [6062,500, 6075,000) = 3
    [6075,000, 6087,500) = 1
    [6087,500, 6100,000) = 0
    [6100,000, 6112,500) = 0
    [6112,500, 6125,000) = 0
    [6125,000, 6137,500) = 1
    [6137,500, 6150,000) = 2
    [6150,000, 6162,500) = 0
    [6162,500, 6175,000) = 0
    [6175,000, 6187,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   6063,082 ms/op
     p(50,0000) =   6111,902 ms/op
     p(90,0000) =   6180,500 ms/op
     p(95,0000) =   6180,500 ms/op
     p(99,0000) =   6180,500 ms/op
     p(99,9000) =   6180,500 ms/op
     p(99,9900) =   6180,500 ms/op
     p(99,9990) =   6180,500 ms/op
     p(99,9999) =   6180,500 ms/op
    p(100,0000) =   6180,500 ms/op


# Run complete. Total time: 00:01:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest       100000           put    ss    8  6110,945 ± 87,260  ms/op
tests.maptests.object.TroveJbObjMapTest (100000) = 6110.944572625001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6024,623 ms/op
# Warmup Iteration   2: 5969,644 ms/op
# Warmup Iteration   3: 5961,905 ms/op
# Warmup Iteration   4: 6019,588 ms/op
# Warmup Iteration   5: 5924,434 ms/op
# Warmup Iteration   6: 5902,024 ms/op
# Warmup Iteration   7: 5895,827 ms/op
# Warmup Iteration   8: 5888,103 ms/op
# Warmup Iteration   9: 5799,814 ms/op
# Warmup Iteration  10: 5976,363 ms/op
Iteration   1: 5904,325 ms/op
Iteration   2: 5950,789 ms/op
Iteration   3: 5908,069 ms/op
Iteration   4: 5827,300 ms/op
Iteration   5: 5920,893 ms/op
Iteration   6: 5933,595 ms/op
Iteration   7: 5790,735 ms/op
Iteration   8: 5950,550 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5898,282 ±(99.9%) 111,917 ms/op

  Histogram, ms/op:
    [5700,000, 5725,000) = 0
    [5725,000, 5750,000) = 0
    [5750,000, 5775,000) = 0
    [5775,000, 5800,000) = 1
    [5800,000, 5825,000) = 0
    [5825,000, 5850,000) = 1
    [5850,000, 5875,000) = 0
    [5875,000, 5900,000) = 0
    [5900,000, 5925,000) = 3
    [5925,000, 5950,000) = 1
    [5950,000, 5975,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   5790,735 ms/op
     p(50,0000) =   5914,481 ms/op
     p(90,0000) =   5950,789 ms/op
     p(95,0000) =   5950,789 ms/op
     p(99,0000) =   5950,789 ms/op
     p(99,9000) =   5950,789 ms/op
     p(99,9900) =   5950,789 ms/op
     p(99,9990) =   5950,789 ms/op
     p(99,9999) =   5950,789 ms/op
    p(100,0000) =   5950,789 ms/op


# Run complete. Total time: 00:01:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest       100000           put    ss    8  5898,282 ± 111,917  ms/op
tests.maptests.object.TroveObjMapTest (100000) = 5898.281881499999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3476,490 ms/op
# Warmup Iteration   2: 3203,513 ms/op
# Warmup Iteration   3: 3392,667 ms/op
# Warmup Iteration   4: 3125,386 ms/op
# Warmup Iteration   5: 3086,013 ms/op
# Warmup Iteration   6: 3195,119 ms/op
# Warmup Iteration   7: 3068,831 ms/op
# Warmup Iteration   8: 3269,849 ms/op
# Warmup Iteration   9: 3164,304 ms/op
# Warmup Iteration  10: 3309,401 ms/op
Iteration   1: 3222,764 ms/op
Iteration   2: 3031,599 ms/op
Iteration   3: 3221,188 ms/op
Iteration   4: 3289,272 ms/op
Iteration   5: 2951,037 ms/op
Iteration   6: 3166,610 ms/op
Iteration   7: 2929,040 ms/op
Iteration   8: 3183,935 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3124,431 ±(99.9%) 258,934 ms/op

  Histogram, ms/op:
    [2900,000, 2925,000) = 0
    [2925,000, 2950,000) = 1
    [2950,000, 2975,000) = 1
    [2975,000, 3000,000) = 0
    [3000,000, 3025,000) = 0
    [3025,000, 3050,000) = 1
    [3050,000, 3075,000) = 0
    [3075,000, 3100,000) = 0
    [3100,000, 3125,000) = 0
    [3125,000, 3150,000) = 0
    [3150,000, 3175,000) = 1
    [3175,000, 3200,000) = 1
    [3200,000, 3225,000) = 2
    [3225,000, 3250,000) = 0
    [3250,000, 3275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2929,040 ms/op
     p(50,0000) =   3175,272 ms/op
     p(90,0000) =   3289,272 ms/op
     p(95,0000) =   3289,272 ms/op
     p(99,0000) =   3289,272 ms/op
     p(99,9000) =   3289,272 ms/op
     p(99,9900) =   3289,272 ms/op
     p(99,9990) =   3289,272 ms/op
     p(99,9999) =   3289,272 ms/op
    p(100,0000) =   3289,272 ms/op


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest       100000           put    ss    8  3124,431 ± 258,934  ms/op
tests.maptests.article_examples.ObjObjMapTest (100000) = 3124.4306231250002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1834,174 ms/op
# Warmup Iteration   2: 1704,518 ms/op
# Warmup Iteration   3: 1605,208 ms/op
# Warmup Iteration   4: 1652,227 ms/op
# Warmup Iteration   5: 1643,238 ms/op
# Warmup Iteration   6: 1694,097 ms/op
# Warmup Iteration   7: 1627,888 ms/op
# Warmup Iteration   8: 1615,838 ms/op
# Warmup Iteration   9: 1633,333 ms/op
# Warmup Iteration  10: 1692,930 ms/op
Iteration   1: 1644,569 ms/op
Iteration   2: 1625,052 ms/op
Iteration   3: 1635,259 ms/op
Iteration   4: 1638,244 ms/op
Iteration   5: 1671,469 ms/op
Iteration   6: 1610,957 ms/op
Iteration   7: 1633,162 ms/op
Iteration   8: 1626,667 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1635,672 ±(99.9%) 33,729 ms/op

  Histogram, ms/op:
    [1610,000, 1615,000) = 1
    [1615,000, 1620,000) = 0
    [1620,000, 1625,000) = 0
    [1625,000, 1630,000) = 2
    [1630,000, 1635,000) = 1
    [1635,000, 1640,000) = 2
    [1640,000, 1645,000) = 1
    [1645,000, 1650,000) = 0
    [1650,000, 1655,000) = 0
    [1655,000, 1660,000) = 0
    [1660,000, 1665,000) = 0
    [1665,000, 1670,000) = 0
    [1670,000, 1675,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1610,957 ms/op
     p(50,0000) =   1634,210 ms/op
     p(90,0000) =   1671,469 ms/op
     p(95,0000) =   1671,469 ms/op
     p(99,0000) =   1671,469 ms/op
     p(99,9000) =   1671,469 ms/op
     p(99,9900) =   1671,469 ms/op
     p(99,9990) =   1671,469 ms/op
     p(99,9999) =   1671,469 ms/op
    p(100,0000) =   1671,469 ms/op


# Run complete. Total time: 00:00:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest       100000           put    ss    8  1635,672 ± 33,729  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (100000) = 1635.6722920000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2347,114 ms/op
# Warmup Iteration   2: 2179,788 ms/op
# Warmup Iteration   3: 2192,850 ms/op
# Warmup Iteration   4: 2217,979 ms/op
# Warmup Iteration   5: 2216,868 ms/op
# Warmup Iteration   6: 2250,262 ms/op
# Warmup Iteration   7: 2231,835 ms/op
# Warmup Iteration   8: 2192,084 ms/op
# Warmup Iteration   9: 2215,528 ms/op
# Warmup Iteration  10: 2202,965 ms/op
Iteration   1: 2237,357 ms/op
Iteration   2: 2250,532 ms/op
Iteration   3: 2196,183 ms/op
Iteration   4: 2143,231 ms/op
Iteration   5: 2246,252 ms/op
Iteration   6: 2244,166 ms/op
Iteration   7: 2194,160 ms/op
Iteration   8: 2299,872 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2226,469 ±(99.9%) 90,491 ms/op

  Histogram, ms/op:
    [2100,000, 2112,500) = 0
    [2112,500, 2125,000) = 0
    [2125,000, 2137,500) = 0
    [2137,500, 2150,000) = 1
    [2150,000, 2162,500) = 0
    [2162,500, 2175,000) = 0
    [2175,000, 2187,500) = 0
    [2187,500, 2200,000) = 2
    [2200,000, 2212,500) = 0
    [2212,500, 2225,000) = 0
    [2225,000, 2237,500) = 1
    [2237,500, 2250,000) = 2
    [2250,000, 2262,500) = 1
    [2262,500, 2275,000) = 0
    [2275,000, 2287,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2143,231 ms/op
     p(50,0000) =   2240,762 ms/op
     p(90,0000) =   2299,872 ms/op
     p(95,0000) =   2299,872 ms/op
     p(99,0000) =   2299,872 ms/op
     p(99,9000) =   2299,872 ms/op
     p(99,9900) =   2299,872 ms/op
     p(99,9990) =   2299,872 ms/op
     p(99,9999) =   2299,872 ms/op
    p(100,0000) =   2299,872 ms/op


# Run complete. Total time: 00:00:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest       100000           put    ss    8  2226,469 ± 90,491  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (100000) = 2226.469297375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1921,564 ms/op
# Warmup Iteration   2: 1867,349 ms/op
# Warmup Iteration   3: 1823,341 ms/op
# Warmup Iteration   4: 1809,962 ms/op
# Warmup Iteration   5: 1748,095 ms/op
# Warmup Iteration   6: 1916,187 ms/op
# Warmup Iteration   7: 1879,066 ms/op
# Warmup Iteration   8: 1783,748 ms/op
# Warmup Iteration   9: 1816,636 ms/op
# Warmup Iteration  10: 1946,396 ms/op
Iteration   1: 1804,563 ms/op
Iteration   2: 1776,975 ms/op
Iteration   3: 1874,176 ms/op
Iteration   4: 1926,392 ms/op
Iteration   5: 1830,152 ms/op
Iteration   6: 1884,636 ms/op
Iteration   7: 1882,847 ms/op
Iteration   8: 1726,824 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1838,321 ±(99.9%) 126,354 ms/op

  Histogram, ms/op:
    [1700,000, 1725,000) = 0
    [1725,000, 1750,000) = 1
    [1750,000, 1775,000) = 0
    [1775,000, 1800,000) = 1
    [1800,000, 1825,000) = 1
    [1825,000, 1850,000) = 1
    [1850,000, 1875,000) = 1
    [1875,000, 1900,000) = 2
    [1900,000, 1925,000) = 0
    [1925,000, 1950,000) = 1
    [1950,000, 1975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1726,824 ms/op
     p(50,0000) =   1852,164 ms/op
     p(90,0000) =   1926,392 ms/op
     p(95,0000) =   1926,392 ms/op
     p(99,0000) =   1926,392 ms/op
     p(99,9000) =   1926,392 ms/op
     p(99,9900) =   1926,392 ms/op
     p(99,9990) =   1926,392 ms/op
     p(99,9999) =   1926,392 ms/op
    p(100,0000) =   1926,392 ms/op


# Run complete. Total time: 00:00:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest       100000           put    ss    8  1838,321 ± 126,354  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (100000) = 1838.3208227499997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2190,658 ms/op
# Warmup Iteration   2: 2203,477 ms/op
# Warmup Iteration   3: 2104,664 ms/op
# Warmup Iteration   4: 2139,804 ms/op
# Warmup Iteration   5: 2111,638 ms/op
# Warmup Iteration   6: 2060,383 ms/op
# Warmup Iteration   7: 2125,583 ms/op
# Warmup Iteration   8: 2050,090 ms/op
# Warmup Iteration   9: 2108,466 ms/op
# Warmup Iteration  10: 2059,216 ms/op
Iteration   1: 2149,770 ms/op
Iteration   2: 2137,562 ms/op
Iteration   3: 2133,443 ms/op
Iteration   4: 2104,318 ms/op
Iteration   5: 2084,207 ms/op
Iteration   6: 2066,683 ms/op
Iteration   7: 2092,330 ms/op
Iteration   8: 2076,357 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2105,584 ±(99.9%) 59,385 ms/op

  Histogram, ms/op:
    [2060,000, 2065,000) = 0
    [2065,000, 2070,000) = 1
    [2070,000, 2075,000) = 0
    [2075,000, 2080,000) = 1
    [2080,000, 2085,000) = 1
    [2085,000, 2090,000) = 0
    [2090,000, 2095,000) = 1
    [2095,000, 2100,000) = 0
    [2100,000, 2105,000) = 1
    [2105,000, 2110,000) = 0
    [2110,000, 2115,000) = 0
    [2115,000, 2120,000) = 0
    [2120,000, 2125,000) = 0
    [2125,000, 2130,000) = 0
    [2130,000, 2135,000) = 1
    [2135,000, 2140,000) = 1
    [2140,000, 2145,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2066,683 ms/op
     p(50,0000) =   2098,324 ms/op
     p(90,0000) =   2149,770 ms/op
     p(95,0000) =   2149,770 ms/op
     p(99,0000) =   2149,770 ms/op
     p(99,9000) =   2149,770 ms/op
     p(99,9900) =   2149,770 ms/op
     p(99,9990) =   2149,770 ms/op
     p(99,9999) =   2149,770 ms/op
    p(100,0000) =   2149,770 ms/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest       100000           put    ss    8  2105,584 ± 59,385  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (100000) = 2105.58373625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4481,234 ms/op
# Warmup Iteration   2: 4395,483 ms/op
# Warmup Iteration   3: 4392,223 ms/op
# Warmup Iteration   4: 4473,963 ms/op
# Warmup Iteration   5: 4397,131 ms/op
# Warmup Iteration   6: 4396,464 ms/op
# Warmup Iteration   7: 4406,503 ms/op
# Warmup Iteration   8: 4369,007 ms/op
# Warmup Iteration   9: 4419,346 ms/op
# Warmup Iteration  10: 4414,593 ms/op
Iteration   1: 4435,905 ms/op
Iteration   2: 4409,795 ms/op
Iteration   3: 4400,756 ms/op
Iteration   4: 4415,564 ms/op
Iteration   5: 4391,478 ms/op
Iteration   6: 4382,372 ms/op
Iteration   7: 4452,647 ms/op
Iteration   8: 4437,999 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4415,815 ±(99.9%) 46,979 ms/op

  Histogram, ms/op:
    [4380,000, 4385,000) = 1
    [4385,000, 4390,000) = 0
    [4390,000, 4395,000) = 1
    [4395,000, 4400,000) = 0
    [4400,000, 4405,000) = 1
    [4405,000, 4410,000) = 1
    [4410,000, 4415,000) = 0
    [4415,000, 4420,000) = 1
    [4420,000, 4425,000) = 0
    [4425,000, 4430,000) = 0
    [4430,000, 4435,000) = 0
    [4435,000, 4440,000) = 2
    [4440,000, 4445,000) = 0
    [4445,000, 4450,000) = 0
    [4450,000, 4455,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   4382,372 ms/op
     p(50,0000) =   4412,680 ms/op
     p(90,0000) =   4452,647 ms/op
     p(95,0000) =   4452,647 ms/op
     p(99,0000) =   4452,647 ms/op
     p(99,9000) =   4452,647 ms/op
     p(99,9900) =   4452,647 ms/op
     p(99,9990) =   4452,647 ms/op
     p(99,9999) =   4452,647 ms/op
    p(100,0000) =   4452,647 ms/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest       100000           put    ss    8  4415,815 ± 46,979  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (100000) = 4415.8145695
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3734,448 ms/op
# Warmup Iteration   2: 3609,161 ms/op
# Warmup Iteration   3: 3802,188 ms/op
# Warmup Iteration   4: 3696,322 ms/op
# Warmup Iteration   5: 3706,289 ms/op
# Warmup Iteration   6: 3662,276 ms/op
# Warmup Iteration   7: 3701,415 ms/op
# Warmup Iteration   8: 3625,896 ms/op
# Warmup Iteration   9: 3766,716 ms/op
# Warmup Iteration  10: 3660,978 ms/op
Iteration   1: 3728,849 ms/op
Iteration   2: 3683,848 ms/op
Iteration   3: 3606,435 ms/op
Iteration   4: 3578,347 ms/op
Iteration   5: 3645,331 ms/op
Iteration   6: 3841,047 ms/op
Iteration   7: 3762,464 ms/op
Iteration   8: 3620,179 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3683,312 ±(99.9%) 170,363 ms/op

  Histogram, ms/op:
    [3500,000, 3525,000) = 0
    [3525,000, 3550,000) = 0
    [3550,000, 3575,000) = 0
    [3575,000, 3600,000) = 1
    [3600,000, 3625,000) = 2
    [3625,000, 3650,000) = 1
    [3650,000, 3675,000) = 0
    [3675,000, 3700,000) = 1
    [3700,000, 3725,000) = 0
    [3725,000, 3750,000) = 1
    [3750,000, 3775,000) = 1
    [3775,000, 3800,000) = 0
    [3800,000, 3825,000) = 0
    [3825,000, 3850,000) = 1
    [3850,000, 3875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3578,347 ms/op
     p(50,0000) =   3664,589 ms/op
     p(90,0000) =   3841,047 ms/op
     p(95,0000) =   3841,047 ms/op
     p(99,0000) =   3841,047 ms/op
     p(99,9000) =   3841,047 ms/op
     p(99,9900) =   3841,047 ms/op
     p(99,9990) =   3841,047 ms/op
     p(99,9999) =   3841,047 ms/op
    p(100,0000) =   3841,047 ms/op


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest       100000           put    ss    8  3683,312 ± 170,363  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (100000) = 3683.312490375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2695,938 ms/op
# Warmup Iteration   2: 2836,938 ms/op
# Warmup Iteration   3: 2603,073 ms/op
# Warmup Iteration   4: 2649,298 ms/op
# Warmup Iteration   5: 2716,009 ms/op
# Warmup Iteration   6: 2608,330 ms/op
# Warmup Iteration   7: 2568,209 ms/op
# Warmup Iteration   8: 2795,930 ms/op
# Warmup Iteration   9: 2683,820 ms/op
# Warmup Iteration  10: 2797,531 ms/op
Iteration   1: 2571,955 ms/op
Iteration   2: 2498,072 ms/op
Iteration   3: 2676,244 ms/op
Iteration   4: 2778,438 ms/op
Iteration   5: 2705,428 ms/op
Iteration   6: 2722,823 ms/op
Iteration   7: 2623,320 ms/op
Iteration   8: 2619,861 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2649,518 ±(99.9%) 171,549 ms/op

  Histogram, ms/op:
    [2400,000, 2425,000) = 0
    [2425,000, 2450,000) = 0
    [2450,000, 2475,000) = 0
    [2475,000, 2500,000) = 1
    [2500,000, 2525,000) = 0
    [2525,000, 2550,000) = 0
    [2550,000, 2575,000) = 1
    [2575,000, 2600,000) = 0
    [2600,000, 2625,000) = 2
    [2625,000, 2650,000) = 0
    [2650,000, 2675,000) = 0
    [2675,000, 2700,000) = 1
    [2700,000, 2725,000) = 2
    [2725,000, 2750,000) = 0
    [2750,000, 2775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2498,072 ms/op
     p(50,0000) =   2649,782 ms/op
     p(90,0000) =   2778,438 ms/op
     p(95,0000) =   2778,438 ms/op
     p(99,0000) =   2778,438 ms/op
     p(99,9000) =   2778,438 ms/op
     p(99,9900) =   2778,438 ms/op
     p(99,9990) =   2778,438 ms/op
     p(99,9999) =   2778,438 ms/op
    p(100,0000) =   2778,438 ms/op


# Run complete. Total time: 00:00:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest       100000           put    ss    8  2649,518 ± 171,549  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (100000) = 2649.5175485
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3064,243 ms/op
# Warmup Iteration   2: 3051,823 ms/op
# Warmup Iteration   3: 3278,020 ms/op
# Warmup Iteration   4: 2999,742 ms/op
# Warmup Iteration   5: 2971,735 ms/op
# Warmup Iteration   6: 3059,681 ms/op
# Warmup Iteration   7: 3090,505 ms/op
# Warmup Iteration   8: 3020,459 ms/op
# Warmup Iteration   9: 3281,770 ms/op
# Warmup Iteration  10: 2942,162 ms/op
Iteration   1: 3315,450 ms/op
Iteration   2: 2994,071 ms/op
Iteration   3: 3097,082 ms/op
Iteration   4: 2995,605 ms/op
Iteration   5: 2917,910 ms/op
Iteration   6: 2916,929 ms/op
Iteration   7: 3076,267 ms/op
Iteration   8: 2990,569 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3037,985 ±(99.9%) 247,177 ms/op

  Histogram, ms/op:
    [2900,000, 2950,000) = 2
    [2950,000, 3000,000) = 3
    [3000,000, 3050,000) = 0
    [3050,000, 3100,000) = 2
    [3100,000, 3150,000) = 0
    [3150,000, 3200,000) = 0
    [3200,000, 3250,000) = 0
    [3250,000, 3300,000) = 0
    [3300,000, 3350,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2916,929 ms/op
     p(50,0000) =   2994,838 ms/op
     p(90,0000) =   3315,450 ms/op
     p(95,0000) =   3315,450 ms/op
     p(99,0000) =   3315,450 ms/op
     p(99,9000) =   3315,450 ms/op
     p(99,9900) =   3315,450 ms/op
     p(99,9990) =   3315,450 ms/op
     p(99,9999) =   3315,450 ms/op
    p(100,0000) =   3315,450 ms/op


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest       100000           put    ss    8  3037,985 ± 247,177  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (100000) = 3037.9854112500007
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3060,652 ms/op
# Warmup Iteration   2: 2926,839 ms/op
# Warmup Iteration   3: 3010,406 ms/op
# Warmup Iteration   4: 3097,995 ms/op
# Warmup Iteration   5: 2922,967 ms/op
# Warmup Iteration   6: 3112,817 ms/op
# Warmup Iteration   7: 2891,880 ms/op
# Warmup Iteration   8: 3153,689 ms/op
# Warmup Iteration   9: 2896,077 ms/op
# Warmup Iteration  10: 2925,727 ms/op
Iteration   1: 2936,537 ms/op
Iteration   2: 3004,402 ms/op
Iteration   3: 2998,751 ms/op
Iteration   4: 2987,481 ms/op
Iteration   5: 3005,635 ms/op
Iteration   6: 3149,965 ms/op
Iteration   7: 3067,113 ms/op
Iteration   8: 2874,041 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3002,991 ±(99.9%) 156,710 ms/op

  Histogram, ms/op:
    [2800,000, 2825,000) = 0
    [2825,000, 2850,000) = 0
    [2850,000, 2875,000) = 1
    [2875,000, 2900,000) = 0
    [2900,000, 2925,000) = 0
    [2925,000, 2950,000) = 1
    [2950,000, 2975,000) = 0
    [2975,000, 3000,000) = 2
    [3000,000, 3025,000) = 2
    [3025,000, 3050,000) = 0
    [3050,000, 3075,000) = 1
    [3075,000, 3100,000) = 0
    [3100,000, 3125,000) = 0
    [3125,000, 3150,000) = 1
    [3150,000, 3175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2874,041 ms/op
     p(50,0000) =   3001,576 ms/op
     p(90,0000) =   3149,965 ms/op
     p(95,0000) =   3149,965 ms/op
     p(99,0000) =   3149,965 ms/op
     p(99,9000) =   3149,965 ms/op
     p(99,9900) =   3149,965 ms/op
     p(99,9990) =   3149,965 ms/op
     p(99,9999) =   3149,965 ms/op
    p(100,0000) =   3149,965 ms/op


# Run complete. Total time: 00:00:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest       100000           put    ss    8  3002,991 ± 156,710  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (100000) = 3002.990549375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3169,225 ms/op
# Warmup Iteration   2: 3228,412 ms/op
# Warmup Iteration   3: 3109,395 ms/op
# Warmup Iteration   4: 3048,130 ms/op
# Warmup Iteration   5: 3119,965 ms/op
# Warmup Iteration   6: 3086,279 ms/op
# Warmup Iteration   7: 3097,061 ms/op
# Warmup Iteration   8: 2927,881 ms/op
# Warmup Iteration   9: 3167,218 ms/op
# Warmup Iteration  10: 3045,206 ms/op
Iteration   1: 2943,378 ms/op
Iteration   2: 2888,303 ms/op
Iteration   3: 3135,879 ms/op
Iteration   4: 2942,417 ms/op
Iteration   5: 2966,036 ms/op
Iteration   6: 2918,141 ms/op
Iteration   7: 2998,589 ms/op
Iteration   8: 2938,322 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2966,383 ±(99.9%) 144,678 ms/op

  Histogram, ms/op:
    [2800,000, 2825,000) = 0
    [2825,000, 2850,000) = 0
    [2850,000, 2875,000) = 0
    [2875,000, 2900,000) = 1
    [2900,000, 2925,000) = 1
    [2925,000, 2950,000) = 3
    [2950,000, 2975,000) = 1
    [2975,000, 3000,000) = 1
    [3000,000, 3025,000) = 0
    [3025,000, 3050,000) = 0
    [3050,000, 3075,000) = 0
    [3075,000, 3100,000) = 0
    [3100,000, 3125,000) = 0
    [3125,000, 3150,000) = 1
    [3150,000, 3175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2888,303 ms/op
     p(50,0000) =   2942,897 ms/op
     p(90,0000) =   3135,879 ms/op
     p(95,0000) =   3135,879 ms/op
     p(99,0000) =   3135,879 ms/op
     p(99,9000) =   3135,879 ms/op
     p(99,9900) =   3135,879 ms/op
     p(99,9990) =   3135,879 ms/op
     p(99,9999) =   3135,879 ms/op
    p(100,0000) =   3135,879 ms/op


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest       100000           put    ss    8  2966,383 ± 144,678  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (100000) = 2966.383054
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5257,743 ms/op
# Warmup Iteration   2: 5140,811 ms/op
# Warmup Iteration   3: 5105,880 ms/op
# Warmup Iteration   4: 5164,478 ms/op
# Warmup Iteration   5: 5127,701 ms/op
# Warmup Iteration   6: 5268,835 ms/op
# Warmup Iteration   7: 5119,221 ms/op
# Warmup Iteration   8: 5124,867 ms/op
# Warmup Iteration   9: 5094,543 ms/op
# Warmup Iteration  10: 5273,920 ms/op
Iteration   1: 5192,970 ms/op
Iteration   2: 5222,002 ms/op
Iteration   3: 5154,768 ms/op
Iteration   4: 5130,228 ms/op
Iteration   5: 5226,820 ms/op
Iteration   6: 5206,590 ms/op
Iteration   7: 5147,177 ms/op
Iteration   8: 5154,287 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5179,355 ±(99.9%) 71,103 ms/op

  Histogram, ms/op:
    [5130,000, 5140,000) = 1
    [5140,000, 5150,000) = 1
    [5150,000, 5160,000) = 2
    [5160,000, 5170,000) = 0
    [5170,000, 5180,000) = 0
    [5180,000, 5190,000) = 0
    [5190,000, 5200,000) = 1
    [5200,000, 5210,000) = 1
    [5210,000, 5220,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5130,228 ms/op
     p(50,0000) =   5173,869 ms/op
     p(90,0000) =   5226,820 ms/op
     p(95,0000) =   5226,820 ms/op
     p(99,0000) =   5226,820 ms/op
     p(99,9000) =   5226,820 ms/op
     p(99,9900) =   5226,820 ms/op
     p(99,9990) =   5226,820 ms/op
     p(99,9999) =   5226,820 ms/op
    p(100,0000) =   5226,820 ms/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest       100000           put    ss    8  5179,355 ± 71,103  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (100000) = 5179.355066625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4969,495 ms/op
# Warmup Iteration   2: 4987,635 ms/op
# Warmup Iteration   3: 4951,540 ms/op
# Warmup Iteration   4: 4916,530 ms/op
# Warmup Iteration   5: 4949,278 ms/op
# Warmup Iteration   6: 4942,560 ms/op
# Warmup Iteration   7: 4988,199 ms/op
# Warmup Iteration   8: 5067,444 ms/op
# Warmup Iteration   9: 4981,357 ms/op
# Warmup Iteration  10: 5019,683 ms/op
Iteration   1: 4998,242 ms/op
Iteration   2: 4991,759 ms/op
Iteration   3: 4980,421 ms/op
Iteration   4: 5110,046 ms/op
Iteration   5: 4990,605 ms/op
Iteration   6: 4967,172 ms/op
Iteration   7: 4961,413 ms/op
Iteration   8: 4993,003 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4999,083 ±(99.9%) 89,276 ms/op

  Histogram, ms/op:
    [4900,000, 4925,000) = 0
    [4925,000, 4950,000) = 0
    [4950,000, 4975,000) = 2
    [4975,000, 5000,000) = 5
    [5000,000, 5025,000) = 0
    [5025,000, 5050,000) = 0
    [5050,000, 5075,000) = 0
    [5075,000, 5100,000) = 0
    [5100,000, 5125,000) = 1
    [5125,000, 5150,000) = 0
    [5150,000, 5175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4961,413 ms/op
     p(50,0000) =   4991,182 ms/op
     p(90,0000) =   5110,046 ms/op
     p(95,0000) =   5110,046 ms/op
     p(99,0000) =   5110,046 ms/op
     p(99,9000) =   5110,046 ms/op
     p(99,9900) =   5110,046 ms/op
     p(99,9990) =   5110,046 ms/op
     p(99,9999) =   5110,046 ms/op
    p(100,0000) =   5110,046 ms/op


# Run complete. Total time: 00:01:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest       100000           put    ss    8  4999,083 ± 89,276  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (100000) = 4999.082570250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2672,115 ms/op
# Warmup Iteration   2: 2737,457 ms/op
# Warmup Iteration   3: 2548,207 ms/op
# Warmup Iteration   4: 2603,056 ms/op
# Warmup Iteration   5: 2548,337 ms/op
# Warmup Iteration   6: 2553,628 ms/op
# Warmup Iteration   7: 2629,307 ms/op
# Warmup Iteration   8: 2557,023 ms/op
# Warmup Iteration   9: 2582,303 ms/op
# Warmup Iteration  10: 2610,187 ms/op
Iteration   1: 2562,304 ms/op
Iteration   2: 2527,262 ms/op
Iteration   3: 2524,385 ms/op
Iteration   4: 2646,375 ms/op
Iteration   5: 2556,917 ms/op
Iteration   6: 2554,079 ms/op
Iteration   7: 2545,157 ms/op
Iteration   8: 2578,193 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2561,834 ±(99.9%) 73,609 ms/op

  Histogram, ms/op:
    [2500,000, 2512,500) = 0
    [2512,500, 2525,000) = 1
    [2525,000, 2537,500) = 1
    [2537,500, 2550,000) = 1
    [2550,000, 2562,500) = 3
    [2562,500, 2575,000) = 0
    [2575,000, 2587,500) = 1
    [2587,500, 2600,000) = 0
    [2600,000, 2612,500) = 0
    [2612,500, 2625,000) = 0
    [2625,000, 2637,500) = 0
    [2637,500, 2650,000) = 1
    [2650,000, 2662,500) = 0
    [2662,500, 2675,000) = 0
    [2675,000, 2687,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2524,385 ms/op
     p(50,0000) =   2555,498 ms/op
     p(90,0000) =   2646,375 ms/op
     p(95,0000) =   2646,375 ms/op
     p(99,0000) =   2646,375 ms/op
     p(99,9000) =   2646,375 ms/op
     p(99,9900) =   2646,375 ms/op
     p(99,9990) =   2646,375 ms/op
     p(99,9999) =   2646,375 ms/op
    p(100,0000) =   2646,375 ms/op


# Run complete. Total time: 00:00:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest       100000           put    ss    8  2561,834 ± 73,609  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (100000) = 2561.8340209999997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6906,537 ms/op
# Warmup Iteration   2: 6704,406 ms/op
# Warmup Iteration   3: 6734,142 ms/op
# Warmup Iteration   4: 6356,041 ms/op
# Warmup Iteration   5: 6529,381 ms/op
# Warmup Iteration   6: 6734,941 ms/op
# Warmup Iteration   7: 6695,373 ms/op
# Warmup Iteration   8: 6485,100 ms/op
# Warmup Iteration   9: 6914,990 ms/op
# Warmup Iteration  10: 5802,863 ms/op
Iteration   1: 7001,988 ms/op
Iteration   2: 6827,642 ms/op
Iteration   3: 6344,634 ms/op
Iteration   4: 6505,670 ms/op
Iteration   5: 6212,539 ms/op
Iteration   6: 6581,515 ms/op
Iteration   7: 6040,039 ms/op
Iteration   8: 7056,462 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6571,311 ±(99.9%) 705,591 ms/op

  Histogram, ms/op:
    [6000,000, 6125,000) = 1
    [6125,000, 6250,000) = 1
    [6250,000, 6375,000) = 1
    [6375,000, 6500,000) = 0
    [6500,000, 6625,000) = 2
    [6625,000, 6750,000) = 0
    [6750,000, 6875,000) = 1
    [6875,000, 7000,000) = 0
    [7000,000, 7125,000) = 2
    [7125,000, 7250,000) = 0
    [7250,000, 7375,000) = 0
    [7375,000, 7500,000) = 0
    [7500,000, 7625,000) = 0
    [7625,000, 7750,000) = 0
    [7750,000, 7875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6040,039 ms/op
     p(50,0000) =   6543,593 ms/op
     p(90,0000) =   7056,462 ms/op
     p(95,0000) =   7056,462 ms/op
     p(99,0000) =   7056,462 ms/op
     p(99,9000) =   7056,462 ms/op
     p(99,9900) =   7056,462 ms/op
     p(99,9990) =   7056,462 ms/op
     p(99,9999) =   7056,462 ms/op
    p(100,0000) =   7056,462 ms/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest       100000           put    ss    8  6571,311 ± 705,591  ms/op
tests.maptests.identity_object.GsIdentityMapTest (100000) = 6571.3112465
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6210,025 ms/op
# Warmup Iteration   2: 5878,098 ms/op
# Warmup Iteration   3: 5761,127 ms/op
# Warmup Iteration   4: 5813,053 ms/op
# Warmup Iteration   5: 5843,386 ms/op
# Warmup Iteration   6: 5834,258 ms/op
# Warmup Iteration   7: 5863,112 ms/op
# Warmup Iteration   8: 5806,563 ms/op
# Warmup Iteration   9: 5756,172 ms/op
# Warmup Iteration  10: 5695,915 ms/op
Iteration   1: 5710,502 ms/op
Iteration   2: 5834,044 ms/op
Iteration   3: 5772,073 ms/op
Iteration   4: 5804,066 ms/op
Iteration   5: 5803,579 ms/op
Iteration   6: 5782,340 ms/op
Iteration   7: 5797,831 ms/op
Iteration   8: 5749,012 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5781,681 ±(99.9%) 73,020 ms/op

  Histogram, ms/op:
    [5700,000, 5712,500) = 1
    [5712,500, 5725,000) = 0
    [5725,000, 5737,500) = 0
    [5737,500, 5750,000) = 1
    [5750,000, 5762,500) = 0
    [5762,500, 5775,000) = 1
    [5775,000, 5787,500) = 1
    [5787,500, 5800,000) = 1
    [5800,000, 5812,500) = 2
    [5812,500, 5825,000) = 0
    [5825,000, 5837,500) = 1
    [5837,500, 5850,000) = 0
    [5850,000, 5862,500) = 0
    [5862,500, 5875,000) = 0
    [5875,000, 5887,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5710,502 ms/op
     p(50,0000) =   5790,085 ms/op
     p(90,0000) =   5834,044 ms/op
     p(95,0000) =   5834,044 ms/op
     p(99,0000) =   5834,044 ms/op
     p(99,9000) =   5834,044 ms/op
     p(99,9900) =   5834,044 ms/op
     p(99,9990) =   5834,044 ms/op
     p(99,9999) =   5834,044 ms/op
    p(100,0000) =   5834,044 ms/op


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest       100000           put    ss    8  5781,681 ± 73,020  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (100000) = 5781.68078825
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3116,874 ms/op
# Warmup Iteration   2: 2973,482 ms/op
# Warmup Iteration   3: 2977,500 ms/op
# Warmup Iteration   4: 2984,397 ms/op
# Warmup Iteration   5: 2961,968 ms/op
# Warmup Iteration   6: 3020,657 ms/op
# Warmup Iteration   7: 2975,062 ms/op
# Warmup Iteration   8: 2986,453 ms/op
# Warmup Iteration   9: 2967,322 ms/op
# Warmup Iteration  10: 2965,738 ms/op
Iteration   1: 2960,100 ms/op
Iteration   2: 2972,482 ms/op
Iteration   3: 3008,690 ms/op
Iteration   4: 2942,132 ms/op
Iteration   5: 2964,815 ms/op
Iteration   6: 3027,522 ms/op
Iteration   7: 2984,973 ms/op
Iteration   8: 3024,185 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2985,612 ±(99.9%) 60,131 ms/op

  Histogram, ms/op:
    [2940,000, 2945,000) = 1
    [2945,000, 2950,000) = 0
    [2950,000, 2955,000) = 0
    [2955,000, 2960,000) = 0
    [2960,000, 2965,000) = 2
    [2965,000, 2970,000) = 0
    [2970,000, 2975,000) = 1
    [2975,000, 2980,000) = 0
    [2980,000, 2985,000) = 1
    [2985,000, 2990,000) = 0
    [2990,000, 2995,000) = 0
    [2995,000, 3000,000) = 0
    [3000,000, 3005,000) = 0
    [3005,000, 3010,000) = 1
    [3010,000, 3015,000) = 0
    [3015,000, 3020,000) = 0
    [3020,000, 3025,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2942,132 ms/op
     p(50,0000) =   2978,728 ms/op
     p(90,0000) =   3027,522 ms/op
     p(95,0000) =   3027,522 ms/op
     p(99,0000) =   3027,522 ms/op
     p(99,9000) =   3027,522 ms/op
     p(99,9900) =   3027,522 ms/op
     p(99,9990) =   3027,522 ms/op
     p(99,9999) =   3027,522 ms/op
    p(100,0000) =   3027,522 ms/op


# Run complete. Total time: 00:00:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest       100000           put    ss    8  2985,612 ± 60,131  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (100000) = 2985.612417875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4565,753 ms/op
# Warmup Iteration   2: 4065,192 ms/op
# Warmup Iteration   3: 4113,398 ms/op
# Warmup Iteration   4: 4128,644 ms/op
# Warmup Iteration   5: 4210,642 ms/op
# Warmup Iteration   6: 4123,385 ms/op
# Warmup Iteration   7: 4161,402 ms/op
# Warmup Iteration   8: 4132,169 ms/op
# Warmup Iteration   9: 4143,695 ms/op
# Warmup Iteration  10: 4127,462 ms/op
Iteration   1: 4147,720 ms/op
Iteration   2: 4174,070 ms/op
Iteration   3: 4112,035 ms/op
Iteration   4: 4075,670 ms/op
Iteration   5: 4117,352 ms/op
Iteration   6: 4081,607 ms/op
Iteration   7: 4050,230 ms/op
Iteration   8: 4090,487 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4106,147 ±(99.9%) 77,176 ms/op

  Histogram, ms/op:
    [4000,000, 4012,500) = 0
    [4012,500, 4025,000) = 0
    [4025,000, 4037,500) = 0
    [4037,500, 4050,000) = 0
    [4050,000, 4062,500) = 1
    [4062,500, 4075,000) = 0
    [4075,000, 4087,500) = 2
    [4087,500, 4100,000) = 1
    [4100,000, 4112,500) = 1
    [4112,500, 4125,000) = 1
    [4125,000, 4137,500) = 0
    [4137,500, 4150,000) = 1
    [4150,000, 4162,500) = 0
    [4162,500, 4175,000) = 1
    [4175,000, 4187,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4050,230 ms/op
     p(50,0000) =   4101,261 ms/op
     p(90,0000) =   4174,070 ms/op
     p(95,0000) =   4174,070 ms/op
     p(99,0000) =   4174,070 ms/op
     p(99,9000) =   4174,070 ms/op
     p(99,9900) =   4174,070 ms/op
     p(99,9990) =   4174,070 ms/op
     p(99,9999) =   4174,070 ms/op
    p(100,0000) =   4174,070 ms/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest       100000           put    ss    8  4106,147 ± 77,176  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (100000) = 4106.146507
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5325,494 ms/op
# Warmup Iteration   2: 5239,559 ms/op
# Warmup Iteration   3: 5180,873 ms/op
# Warmup Iteration   4: 5195,172 ms/op
# Warmup Iteration   5: 5167,981 ms/op
# Warmup Iteration   6: 5260,261 ms/op
# Warmup Iteration   7: 5241,639 ms/op
# Warmup Iteration   8: 5176,441 ms/op
# Warmup Iteration   9: 5172,856 ms/op
# Warmup Iteration  10: 5143,704 ms/op
Iteration   1: 5185,113 ms/op
Iteration   2: 5320,263 ms/op
Iteration   3: 5207,967 ms/op
Iteration   4: 5192,295 ms/op
Iteration   5: 5209,305 ms/op
Iteration   6: 5141,111 ms/op
Iteration   7: 5229,738 ms/op
Iteration   8: 5165,309 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5206,388 ±(99.9%) 102,515 ms/op

  Histogram, ms/op:
    [5100,000, 5125,000) = 0
    [5125,000, 5150,000) = 1
    [5150,000, 5175,000) = 1
    [5175,000, 5200,000) = 2
    [5200,000, 5225,000) = 2
    [5225,000, 5250,000) = 1
    [5250,000, 5275,000) = 0
    [5275,000, 5300,000) = 0
    [5300,000, 5325,000) = 1
    [5325,000, 5350,000) = 0
    [5350,000, 5375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5141,111 ms/op
     p(50,0000) =   5200,131 ms/op
     p(90,0000) =   5320,263 ms/op
     p(95,0000) =   5320,263 ms/op
     p(99,0000) =   5320,263 ms/op
     p(99,9000) =   5320,263 ms/op
     p(99,9900) =   5320,263 ms/op
     p(99,9990) =   5320,263 ms/op
     p(99,9999) =   5320,263 ms/op
    p(100,0000) =   5320,263 ms/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest       100000           put    ss    8  5206,388 ± 102,515  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (100000) = 5206.387574625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 100000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5304,247 ms/op
# Warmup Iteration   2: 5168,121 ms/op
# Warmup Iteration   3: 5224,920 ms/op
# Warmup Iteration   4: 5167,022 ms/op
# Warmup Iteration   5: 5110,866 ms/op
# Warmup Iteration   6: 5242,832 ms/op
# Warmup Iteration   7: 5234,039 ms/op
# Warmup Iteration   8: 5234,745 ms/op
# Warmup Iteration   9: 5189,893 ms/op
# Warmup Iteration  10: 5326,200 ms/op
Iteration   1: 5212,489 ms/op
Iteration   2: 5248,836 ms/op
Iteration   3: 5225,289 ms/op
Iteration   4: 5243,373 ms/op
Iteration   5: 5261,358 ms/op
Iteration   6: 5363,353 ms/op
Iteration   7: 5248,861 ms/op
Iteration   8: 5271,255 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5259,352 ±(99.9%) 87,898 ms/op

  Histogram, ms/op:
    [5200,000, 5212,500) = 1
    [5212,500, 5225,000) = 0
    [5225,000, 5237,500) = 1
    [5237,500, 5250,000) = 3
    [5250,000, 5262,500) = 1
    [5262,500, 5275,000) = 1
    [5275,000, 5287,500) = 0
    [5287,500, 5300,000) = 0
    [5300,000, 5312,500) = 0
    [5312,500, 5325,000) = 0
    [5325,000, 5337,500) = 0
    [5337,500, 5350,000) = 0
    [5350,000, 5362,500) = 0
    [5362,500, 5375,000) = 1
    [5375,000, 5387,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5212,489 ms/op
     p(50,0000) =   5248,849 ms/op
     p(90,0000) =   5363,353 ms/op
     p(95,0000) =   5363,353 ms/op
     p(99,0000) =   5363,353 ms/op
     p(99,9000) =   5363,353 ms/op
     p(99,9900) =   5363,353 ms/op
     p(99,9990) =   5363,353 ms/op
     p(99,9999) =   5363,353 ms/op
    p(100,0000) =   5363,353 ms/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest       100000           put    ss    8  5259,352 ± 87,898  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (100000) = 5259.351878
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8243,984 ms/op
# Warmup Iteration   2: 8059,685 ms/op
# Warmup Iteration   3: 8122,725 ms/op
# Warmup Iteration   4: 8010,042 ms/op
# Warmup Iteration   5: 8118,957 ms/op
# Warmup Iteration   6: 8013,419 ms/op
# Warmup Iteration   7: 8014,550 ms/op
# Warmup Iteration   8: 8066,887 ms/op
# Warmup Iteration   9: 8018,003 ms/op
# Warmup Iteration  10: 7987,752 ms/op
Iteration   1: 8053,519 ms/op
Iteration   2: 7987,052 ms/op
Iteration   3: 8062,710 ms/op
Iteration   4: 8046,575 ms/op
Iteration   5: 7976,664 ms/op
Iteration   6: 8001,262 ms/op
Iteration   7: 8036,802 ms/op
Iteration   8: 8056,192 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8027,597 ±(99.9%) 65,035 ms/op

  Histogram, ms/op:
    [7970,000, 7980,000) = 1
    [7980,000, 7990,000) = 1
    [7990,000, 8000,000) = 0
    [8000,000, 8010,000) = 1
    [8010,000, 8020,000) = 0
    [8020,000, 8030,000) = 0
    [8030,000, 8040,000) = 1
    [8040,000, 8050,000) = 1
    [8050,000, 8060,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   7976,664 ms/op
     p(50,0000) =   8041,688 ms/op
     p(90,0000) =   8062,710 ms/op
     p(95,0000) =   8062,710 ms/op
     p(99,0000) =   8062,710 ms/op
     p(99,9000) =   8062,710 ms/op
     p(99,9900) =   8062,710 ms/op
     p(99,9990) =   8062,710 ms/op
     p(99,9999) =   8062,710 ms/op
    p(100,0000) =   8062,710 ms/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test      1000000           put    ss    8  8027,597 ± 65,035  ms/op
tests.maptests.article_examples.IntIntMap1Test (1000000) = 8027.5970611249995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7024,881 ms/op
# Warmup Iteration   2: 7056,669 ms/op
# Warmup Iteration   3: 6942,123 ms/op
# Warmup Iteration   4: 6939,496 ms/op
# Warmup Iteration   5: 6977,276 ms/op
# Warmup Iteration   6: 6983,362 ms/op
# Warmup Iteration   7: 6967,152 ms/op
# Warmup Iteration   8: 7007,952 ms/op
# Warmup Iteration   9: 6913,448 ms/op
# Warmup Iteration  10: 6991,515 ms/op
Iteration   1: 6955,411 ms/op
Iteration   2: 6969,765 ms/op
Iteration   3: 6972,803 ms/op
Iteration   4: 6942,339 ms/op
Iteration   5: 6910,578 ms/op
Iteration   6: 6954,813 ms/op
Iteration   7: 6979,737 ms/op
Iteration   8: 6911,101 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6949,568 ±(99.9%) 50,956 ms/op

  Histogram, ms/op:
    [6910,000, 6915,000) = 2
    [6915,000, 6920,000) = 0
    [6920,000, 6925,000) = 0
    [6925,000, 6930,000) = 0
    [6930,000, 6935,000) = 0
    [6935,000, 6940,000) = 0
    [6940,000, 6945,000) = 1
    [6945,000, 6950,000) = 0
    [6950,000, 6955,000) = 1
    [6955,000, 6960,000) = 1
    [6960,000, 6965,000) = 0
    [6965,000, 6970,000) = 1
    [6970,000, 6975,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   6910,578 ms/op
     p(50,0000) =   6955,112 ms/op
     p(90,0000) =   6979,737 ms/op
     p(95,0000) =   6979,737 ms/op
     p(99,0000) =   6979,737 ms/op
     p(99,9000) =   6979,737 ms/op
     p(99,9900) =   6979,737 ms/op
     p(99,9990) =   6979,737 ms/op
     p(99,9999) =   6979,737 ms/op
    p(100,0000) =   6979,737 ms/op


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test      1000000           put    ss    8  6949,568 ± 50,956  ms/op
tests.maptests.article_examples.IntIntMap2Test (1000000) = 6949.56831275
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6038,906 ms/op
# Warmup Iteration   2: 5961,781 ms/op
# Warmup Iteration   3: 5930,340 ms/op
# Warmup Iteration   4: 5965,089 ms/op
# Warmup Iteration   5: 5974,033 ms/op
# Warmup Iteration   6: 5953,164 ms/op
# Warmup Iteration   7: 5938,887 ms/op
# Warmup Iteration   8: 5953,374 ms/op
# Warmup Iteration   9: 5933,292 ms/op
# Warmup Iteration  10: 6021,320 ms/op
Iteration   1: 5951,980 ms/op
Iteration   2: 5927,658 ms/op
Iteration   3: 5930,431 ms/op
Iteration   4: 5957,091 ms/op
Iteration   5: 5944,687 ms/op
Iteration   6: 5928,551 ms/op
Iteration   7: 5940,372 ms/op
Iteration   8: 5934,026 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5939,349 ±(99.9%) 21,254 ms/op

  Histogram, ms/op:
    [5920,000, 5922,500) = 0
    [5922,500, 5925,000) = 0
    [5925,000, 5927,500) = 0
    [5927,500, 5930,000) = 2
    [5930,000, 5932,500) = 1
    [5932,500, 5935,000) = 1
    [5935,000, 5937,500) = 0
    [5937,500, 5940,000) = 0
    [5940,000, 5942,500) = 1
    [5942,500, 5945,000) = 1
    [5945,000, 5947,500) = 0
    [5947,500, 5950,000) = 0
    [5950,000, 5952,500) = 1
    [5952,500, 5955,000) = 0
    [5955,000, 5957,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   5927,658 ms/op
     p(50,0000) =   5937,199 ms/op
     p(90,0000) =   5957,091 ms/op
     p(95,0000) =   5957,091 ms/op
     p(99,0000) =   5957,091 ms/op
     p(99,9000) =   5957,091 ms/op
     p(99,9900) =   5957,091 ms/op
     p(99,9990) =   5957,091 ms/op
     p(99,9999) =   5957,091 ms/op
    p(100,0000) =   5957,091 ms/op


# Run complete. Total time: 00:01:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test      1000000           put    ss    8  5939,349 ± 21,254  ms/op
tests.maptests.article_examples.IntIntMap3Test (1000000) = 5939.349360375001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4514,386 ms/op
# Warmup Iteration   2: 4437,418 ms/op
# Warmup Iteration   3: 4362,407 ms/op
# Warmup Iteration   4: 4366,000 ms/op
# Warmup Iteration   5: 4390,840 ms/op
# Warmup Iteration   6: 4384,819 ms/op
# Warmup Iteration   7: 4363,983 ms/op
# Warmup Iteration   8: 4363,083 ms/op
# Warmup Iteration   9: 4423,485 ms/op
# Warmup Iteration  10: 4408,563 ms/op
Iteration   1: 4400,798 ms/op
Iteration   2: 4379,040 ms/op
Iteration   3: 4396,981 ms/op
Iteration   4: 4394,554 ms/op
Iteration   5: 4419,339 ms/op
Iteration   6: 4374,932 ms/op
Iteration   7: 4364,839 ms/op
Iteration   8: 4360,765 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4386,406 ±(99.9%) 38,092 ms/op

  Histogram, ms/op:
    [4360,000, 4365,000) = 2
    [4365,000, 4370,000) = 0
    [4370,000, 4375,000) = 1
    [4375,000, 4380,000) = 1
    [4380,000, 4385,000) = 0
    [4385,000, 4390,000) = 0
    [4390,000, 4395,000) = 1
    [4395,000, 4400,000) = 1
    [4400,000, 4405,000) = 1
    [4405,000, 4410,000) = 0
    [4410,000, 4415,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4360,765 ms/op
     p(50,0000) =   4386,797 ms/op
     p(90,0000) =   4419,339 ms/op
     p(95,0000) =   4419,339 ms/op
     p(99,0000) =   4419,339 ms/op
     p(99,9000) =   4419,339 ms/op
     p(99,9900) =   4419,339 ms/op
     p(99,9990) =   4419,339 ms/op
     p(99,9999) =   4419,339 ms/op
    p(100,0000) =   4419,339 ms/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test      1000000           put    ss    8  4386,406 ± 38,092  ms/op
tests.maptests.article_examples.IntIntMap4Test (1000000) = 4386.406050125001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4420,471 ms/op
# Warmup Iteration   2: 4305,633 ms/op
# Warmup Iteration   3: 4343,289 ms/op
# Warmup Iteration   4: 4263,194 ms/op
# Warmup Iteration   5: 4612,082 ms/op
# Warmup Iteration   6: 4310,094 ms/op
# Warmup Iteration   7: 4298,142 ms/op
# Warmup Iteration   8: 4288,157 ms/op
# Warmup Iteration   9: 4298,875 ms/op
# Warmup Iteration  10: 4336,023 ms/op
Iteration   1: 4298,132 ms/op
Iteration   2: 4279,605 ms/op
Iteration   3: 4309,331 ms/op
Iteration   4: 4345,627 ms/op
Iteration   5: 4291,320 ms/op
Iteration   6: 4282,432 ms/op
Iteration   7: 4323,142 ms/op
Iteration   8: 4297,778 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4303,421 ±(99.9%) 42,256 ms/op

  Histogram, ms/op:
    [4270,000, 4275,000) = 0
    [4275,000, 4280,000) = 1
    [4280,000, 4285,000) = 1
    [4285,000, 4290,000) = 0
    [4290,000, 4295,000) = 1
    [4295,000, 4300,000) = 2
    [4300,000, 4305,000) = 0
    [4305,000, 4310,000) = 1
    [4310,000, 4315,000) = 0
    [4315,000, 4320,000) = 0
    [4320,000, 4325,000) = 1
    [4325,000, 4330,000) = 0
    [4330,000, 4335,000) = 0
    [4335,000, 4340,000) = 0
    [4340,000, 4345,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4279,605 ms/op
     p(50,0000) =   4297,955 ms/op
     p(90,0000) =   4345,627 ms/op
     p(95,0000) =   4345,627 ms/op
     p(99,0000) =   4345,627 ms/op
     p(99,9000) =   4345,627 ms/op
     p(99,9900) =   4345,627 ms/op
     p(99,9990) =   4345,627 ms/op
     p(99,9999) =   4345,627 ms/op
    p(100,0000) =   4345,627 ms/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest      1000000           put    ss    8  4303,421 ± 42,256  ms/op
tests.maptests.article_examples.IntIntMap4aTest (1000000) = 4303.420622375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4601,681 ms/op
# Warmup Iteration   2: 4480,392 ms/op
# Warmup Iteration   3: 4491,459 ms/op
# Warmup Iteration   4: 4501,559 ms/op
# Warmup Iteration   5: 4556,048 ms/op
# Warmup Iteration   6: 4503,731 ms/op
# Warmup Iteration   7: 4471,275 ms/op
# Warmup Iteration   8: 4523,471 ms/op
# Warmup Iteration   9: 4559,054 ms/op
# Warmup Iteration  10: 4585,621 ms/op
Iteration   1: 4583,074 ms/op
Iteration   2: 4506,448 ms/op
Iteration   3: 4494,611 ms/op
Iteration   4: 4512,450 ms/op
Iteration   5: 4546,225 ms/op
Iteration   6: 4546,448 ms/op
Iteration   7: 4616,106 ms/op
Iteration   8: 4538,323 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4542,961 ±(99.9%) 77,851 ms/op

  Histogram, ms/op:
    [4400,000, 4425,000) = 0
    [4425,000, 4450,000) = 0
    [4450,000, 4475,000) = 0
    [4475,000, 4500,000) = 1
    [4500,000, 4525,000) = 2
    [4525,000, 4550,000) = 3
    [4550,000, 4575,000) = 0
    [4575,000, 4600,000) = 1
    [4600,000, 4625,000) = 1
    [4625,000, 4650,000) = 0
    [4650,000, 4675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4494,611 ms/op
     p(50,0000) =   4542,274 ms/op
     p(90,0000) =   4616,106 ms/op
     p(95,0000) =   4616,106 ms/op
     p(99,0000) =   4616,106 ms/op
     p(99,9000) =   4616,106 ms/op
     p(99,9900) =   4616,106 ms/op
     p(99,9990) =   4616,106 ms/op
     p(99,9999) =   4616,106 ms/op
    p(100,0000) =   4616,106 ms/op


# Run complete. Total time: 00:01:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest      1000000           put    ss    8  4542,961 ± 77,851  ms/op
tests.maptests.primitive.FastUtilMapTest (1000000) = 4542.960620875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6088,335 ms/op
# Warmup Iteration   2: 6077,737 ms/op
# Warmup Iteration   3: 5943,945 ms/op
# Warmup Iteration   4: 6038,777 ms/op
# Warmup Iteration   5: 5974,755 ms/op
# Warmup Iteration   6: 5951,582 ms/op
# Warmup Iteration   7: 5976,599 ms/op
# Warmup Iteration   8: 5961,291 ms/op
# Warmup Iteration   9: 6004,546 ms/op
# Warmup Iteration  10: 5994,838 ms/op
Iteration   1: 5983,730 ms/op
Iteration   2: 6018,983 ms/op
Iteration   3: 5952,925 ms/op
Iteration   4: 6026,679 ms/op
Iteration   5: 5945,004 ms/op
Iteration   6: 5996,614 ms/op
Iteration   7: 5969,135 ms/op
Iteration   8: 5963,247 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5982,040 ±(99.9%) 57,412 ms/op

  Histogram, ms/op:
    [5940,000, 5945,000) = 0
    [5945,000, 5950,000) = 1
    [5950,000, 5955,000) = 1
    [5955,000, 5960,000) = 0
    [5960,000, 5965,000) = 1
    [5965,000, 5970,000) = 1
    [5970,000, 5975,000) = 0
    [5975,000, 5980,000) = 0
    [5980,000, 5985,000) = 1
    [5985,000, 5990,000) = 0
    [5990,000, 5995,000) = 0
    [5995,000, 6000,000) = 1
    [6000,000, 6005,000) = 0
    [6005,000, 6010,000) = 0
    [6010,000, 6015,000) = 0
    [6015,000, 6020,000) = 1
    [6020,000, 6025,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5945,004 ms/op
     p(50,0000) =   5976,433 ms/op
     p(90,0000) =   6026,679 ms/op
     p(95,0000) =   6026,679 ms/op
     p(99,0000) =   6026,679 ms/op
     p(99,9000) =   6026,679 ms/op
     p(99,9900) =   6026,679 ms/op
     p(99,9990) =   6026,679 ms/op
     p(99,9999) =   6026,679 ms/op
    p(100,0000) =   6026,679 ms/op


# Run complete. Total time: 00:01:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest      1000000           put    ss    8  5982,040 ± 57,412  ms/op
tests.maptests.primitive.GsMutableMapTest (1000000) = 5982.039654
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4470,469 ms/op
# Warmup Iteration   2: 4344,941 ms/op
# Warmup Iteration   3: 4305,570 ms/op
# Warmup Iteration   4: 4316,753 ms/op
# Warmup Iteration   5: 4283,222 ms/op
# Warmup Iteration   6: 4307,936 ms/op
# Warmup Iteration   7: 4366,066 ms/op
# Warmup Iteration   8: 4289,707 ms/op
# Warmup Iteration   9: 4301,853 ms/op
# Warmup Iteration  10: 4308,492 ms/op
Iteration   1: 4301,027 ms/op
Iteration   2: 4297,843 ms/op
Iteration   3: 4308,929 ms/op
Iteration   4: 4353,525 ms/op
Iteration   5: 4311,702 ms/op
Iteration   6: 4297,375 ms/op
Iteration   7: 4313,878 ms/op
Iteration   8: 4300,167 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4310,556 ±(99.9%) 35,369 ms/op

  Histogram, ms/op:
    [4290,000, 4295,000) = 0
    [4295,000, 4300,000) = 2
    [4300,000, 4305,000) = 2
    [4305,000, 4310,000) = 1
    [4310,000, 4315,000) = 2
    [4315,000, 4320,000) = 0
    [4320,000, 4325,000) = 0
    [4325,000, 4330,000) = 0
    [4330,000, 4335,000) = 0
    [4335,000, 4340,000) = 0
    [4340,000, 4345,000) = 0
    [4345,000, 4350,000) = 0
    [4350,000, 4355,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   4297,375 ms/op
     p(50,0000) =   4304,978 ms/op
     p(90,0000) =   4353,525 ms/op
     p(95,0000) =   4353,525 ms/op
     p(99,0000) =   4353,525 ms/op
     p(99,9000) =   4353,525 ms/op
     p(99,9900) =   4353,525 ms/op
     p(99,9990) =   4353,525 ms/op
     p(99,9999) =   4353,525 ms/op
    p(100,0000) =   4353,525 ms/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest      1000000           put    ss    8  4310,556 ± 35,369  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (1000000) = 4310.555871250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4833,308 ms/op
# Warmup Iteration   2: 4724,343 ms/op
# Warmup Iteration   3: 4692,586 ms/op
# Warmup Iteration   4: 4650,482 ms/op
# Warmup Iteration   5: 4793,076 ms/op
# Warmup Iteration   6: 4657,278 ms/op
# Warmup Iteration   7: 4712,005 ms/op
# Warmup Iteration   8: 4689,640 ms/op
# Warmup Iteration   9: 4751,347 ms/op
# Warmup Iteration  10: 4693,028 ms/op
Iteration   1: 4635,378 ms/op
Iteration   2: 4690,367 ms/op
Iteration   3: 4721,371 ms/op
Iteration   4: 4699,254 ms/op
Iteration   5: 4728,267 ms/op
Iteration   6: 4679,918 ms/op
Iteration   7: 4659,725 ms/op
Iteration   8: 4643,284 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4682,196 ±(99.9%) 65,564 ms/op

  Histogram, ms/op:
    [4630,000, 4640,000) = 1
    [4640,000, 4650,000) = 1
    [4650,000, 4660,000) = 1
    [4660,000, 4670,000) = 0
    [4670,000, 4680,000) = 1
    [4680,000, 4690,000) = 0
    [4690,000, 4700,000) = 2
    [4700,000, 4710,000) = 0
    [4710,000, 4720,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4635,378 ms/op
     p(50,0000) =   4685,142 ms/op
     p(90,0000) =   4728,267 ms/op
     p(95,0000) =   4728,267 ms/op
     p(99,0000) =   4728,267 ms/op
     p(99,9000) =   4728,267 ms/op
     p(99,9900) =   4728,267 ms/op
     p(99,9990) =   4728,267 ms/op
     p(99,9999) =   4728,267 ms/op
    p(100,0000) =   4728,267 ms/op


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest      1000000           put    ss    8  4682,196 ± 65,564  ms/op
tests.maptests.primitive.HppcMapTest (1000000) = 4682.195634375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8444,113 ms/op
# Warmup Iteration   2: 8220,864 ms/op
# Warmup Iteration   3: 8159,433 ms/op
# Warmup Iteration   4: 8332,505 ms/op
# Warmup Iteration   5: 8391,879 ms/op
# Warmup Iteration   6: 8221,742 ms/op
# Warmup Iteration   7: 8372,701 ms/op
# Warmup Iteration   8: 8305,834 ms/op
# Warmup Iteration   9: 8233,866 ms/op
# Warmup Iteration  10: 8320,773 ms/op
Iteration   1: 8219,401 ms/op
Iteration   2: 8358,305 ms/op
Iteration   3: 8270,418 ms/op
Iteration   4: 8513,042 ms/op
Iteration   5: 8266,805 ms/op
Iteration   6: 8182,867 ms/op
Iteration   7: 8163,334 ms/op
Iteration   8: 8448,077 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8302,781 ±(99.9%) 241,332 ms/op

  Histogram, ms/op:
    [8100,000, 8150,000) = 0
    [8150,000, 8200,000) = 2
    [8200,000, 8250,000) = 1
    [8250,000, 8300,000) = 2
    [8300,000, 8350,000) = 0
    [8350,000, 8400,000) = 1
    [8400,000, 8450,000) = 1
    [8450,000, 8500,000) = 0
    [8500,000, 8550,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8163,334 ms/op
     p(50,0000) =   8268,612 ms/op
     p(90,0000) =   8513,042 ms/op
     p(95,0000) =   8513,042 ms/op
     p(99,0000) =   8513,042 ms/op
     p(99,9000) =   8513,042 ms/op
     p(99,9900) =   8513,042 ms/op
     p(99,9990) =   8513,042 ms/op
     p(99,9999) =   8513,042 ms/op
    p(100,0000) =   8513,042 ms/op


# Run complete. Total time: 00:02:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest      1000000           put    ss    8  8302,781 ± 241,332  ms/op
tests.maptests.primitive.TroveJbMapTest (1000000) = 8302.781262999999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8207,473 ms/op
# Warmup Iteration   2: 8037,739 ms/op
# Warmup Iteration   3: 8115,952 ms/op
# Warmup Iteration   4: 8022,818 ms/op
# Warmup Iteration   5: 7972,669 ms/op
# Warmup Iteration   6: 8054,695 ms/op
# Warmup Iteration   7: 8156,710 ms/op
# Warmup Iteration   8: 8186,946 ms/op
# Warmup Iteration   9: 8117,563 ms/op
# Warmup Iteration  10: 8073,243 ms/op
Iteration   1: 8121,226 ms/op
Iteration   2: 8141,776 ms/op
Iteration   3: 8086,662 ms/op
Iteration   4: 8226,568 ms/op
Iteration   5: 8278,883 ms/op
Iteration   6: 8052,885 ms/op
Iteration   7: 8208,576 ms/op
Iteration   8: 8126,573 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8155,394 ±(99.9%) 145,539 ms/op

  Histogram, ms/op:
    [8000,000, 8025,000) = 0
    [8025,000, 8050,000) = 0
    [8050,000, 8075,000) = 1
    [8075,000, 8100,000) = 1
    [8100,000, 8125,000) = 1
    [8125,000, 8150,000) = 2
    [8150,000, 8175,000) = 0
    [8175,000, 8200,000) = 0
    [8200,000, 8225,000) = 1
    [8225,000, 8250,000) = 1
    [8250,000, 8275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8052,885 ms/op
     p(50,0000) =   8134,174 ms/op
     p(90,0000) =   8278,883 ms/op
     p(95,0000) =   8278,883 ms/op
     p(99,0000) =   8278,883 ms/op
     p(99,9000) =   8278,883 ms/op
     p(99,9900) =   8278,883 ms/op
     p(99,9990) =   8278,883 ms/op
     p(99,9999) =   8278,883 ms/op
    p(100,0000) =   8278,883 ms/op


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest      1000000           put    ss    8  8155,394 ± 145,539  ms/op
tests.maptests.primitive.TroveMapTest (1000000) = 8155.3936029999995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24177,707 ms/op
# Warmup Iteration   2: 24218,899 ms/op
# Warmup Iteration   3: 25511,584 ms/op
# Warmup Iteration   4: 25574,563 ms/op
# Warmup Iteration   5: 25464,468 ms/op
# Warmup Iteration   6: 25736,727 ms/op
# Warmup Iteration   7: 25626,544 ms/op
# Warmup Iteration   8: 25733,024 ms/op
# Warmup Iteration   9: 25615,861 ms/op
# Warmup Iteration  10: 25659,478 ms/op
Iteration   1: 25351,992 ms/op
Iteration   2: 25293,196 ms/op
Iteration   3: 25385,866 ms/op
Iteration   4: 25753,141 ms/op
Iteration   5: 25538,887 ms/op
Iteration   6: 25525,382 ms/op
Iteration   7: 25650,353 ms/op
Iteration   8: 25568,570 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  25508,423 ±(99.9%) 298,553 ms/op

  Histogram, ms/op:
    [25200,000, 25250,000) = 0
    [25250,000, 25300,000) = 1
    [25300,000, 25350,000) = 0
    [25350,000, 25400,000) = 2
    [25400,000, 25450,000) = 0
    [25450,000, 25500,000) = 0
    [25500,000, 25550,000) = 2
    [25550,000, 25600,000) = 1
    [25600,000, 25650,000) = 0
    [25650,000, 25700,000) = 1
    [25700,000, 25750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  25293,196 ms/op
     p(50,0000) =  25532,135 ms/op
     p(90,0000) =  25753,141 ms/op
     p(95,0000) =  25753,141 ms/op
     p(99,0000) =  25753,141 ms/op
     p(99,9000) =  25753,141 ms/op
     p(99,9900) =  25753,141 ms/op
     p(99,9990) =  25753,141 ms/op
     p(99,9999) =  25753,141 ms/op
    p(100,0000) =  25753,141 ms/op


# Run complete. Total time: 00:07:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest      1000000           put    ss    8  25508,423 ± 298,553  ms/op
tests.maptests.object.FastUtilObjMapTest (1000000) = 25508.423463625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23787,268 ms/op
# Warmup Iteration   2: 22305,641 ms/op
# Warmup Iteration   3: 24690,780 ms/op
# Warmup Iteration   4: 27388,604 ms/op
# Warmup Iteration   5: 27378,908 ms/op
# Warmup Iteration   6: 27350,496 ms/op
# Warmup Iteration   7: 27300,944 ms/op
# Warmup Iteration   8: 27353,163 ms/op
# Warmup Iteration   9: 27334,279 ms/op
# Warmup Iteration  10: 27373,745 ms/op
Iteration   1: 27347,073 ms/op
Iteration   2: 27473,849 ms/op
Iteration   3: 27288,786 ms/op
Iteration   4: 27422,663 ms/op
Iteration   5: 27273,432 ms/op
Iteration   6: 27275,249 ms/op
Iteration   7: 27258,778 ms/op
Iteration   8: 27324,082 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  27332,989 ±(99.9%) 148,985 ms/op

  Histogram, ms/op:
    [27200,000, 27225,000) = 0
    [27225,000, 27250,000) = 0
    [27250,000, 27275,000) = 2
    [27275,000, 27300,000) = 2
    [27300,000, 27325,000) = 1
    [27325,000, 27350,000) = 1
    [27350,000, 27375,000) = 0
    [27375,000, 27400,000) = 0
    [27400,000, 27425,000) = 1
    [27425,000, 27450,000) = 0
    [27450,000, 27475,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  27258,778 ms/op
     p(50,0000) =  27306,434 ms/op
     p(90,0000) =  27473,849 ms/op
     p(95,0000) =  27473,849 ms/op
     p(99,0000) =  27473,849 ms/op
     p(99,9000) =  27473,849 ms/op
     p(99,9900) =  27473,849 ms/op
     p(99,9990) =  27473,849 ms/op
     p(99,9999) =  27473,849 ms/op
    p(100,0000) =  27473,849 ms/op


# Run complete. Total time: 00:08:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest      1000000           put    ss    8  27332,989 ± 148,985  ms/op
tests.maptests.object.KolobokeMutableObjTest (1000000) = 27332.989009250003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23787,914 ms/op
# Warmup Iteration   2: 22395,446 ms/op
# Warmup Iteration   3: 24998,752 ms/op
# Warmup Iteration   4: 27351,681 ms/op
# Warmup Iteration   5: 27491,354 ms/op
# Warmup Iteration   6: 27488,536 ms/op
# Warmup Iteration   7: 27404,785 ms/op
# Warmup Iteration   8: 27388,867 ms/op
# Warmup Iteration   9: 27330,814 ms/op
# Warmup Iteration  10: 27305,635 ms/op
Iteration   1: 27430,814 ms/op
Iteration   2: 27229,784 ms/op
Iteration   3: 27317,258 ms/op
Iteration   4: 27346,815 ms/op
Iteration   5: 27485,963 ms/op
Iteration   6: 27384,613 ms/op
Iteration   7: 28019,958 ms/op
Iteration   8: 27993,782 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  27526,123 ±(99.9%) 585,707 ms/op

  Histogram, ms/op:
    [27200,000, 27250,000) = 1
    [27250,000, 27300,000) = 0
    [27300,000, 27350,000) = 2
    [27350,000, 27400,000) = 1
    [27400,000, 27450,000) = 1
    [27450,000, 27500,000) = 1
    [27500,000, 27550,000) = 0
    [27550,000, 27600,000) = 0
    [27600,000, 27650,000) = 0
    [27650,000, 27700,000) = 0
    [27700,000, 27750,000) = 0
    [27750,000, 27800,000) = 0
    [27800,000, 27850,000) = 0
    [27850,000, 27900,000) = 0
    [27900,000, 27950,000) = 0
    [27950,000, 28000,000) = 1
    [28000,000, 28050,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  27229,784 ms/op
     p(50,0000) =  27407,713 ms/op
     p(90,0000) =  28019,958 ms/op
     p(95,0000) =  28019,958 ms/op
     p(99,0000) =  28019,958 ms/op
     p(99,9000) =  28019,958 ms/op
     p(99,9900) =  28019,958 ms/op
     p(99,9990) =  28019,958 ms/op
     p(99,9999) =  28019,958 ms/op
    p(100,0000) =  28019,958 ms/op


# Run complete. Total time: 00:08:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest      1000000           put    ss    8  27526,123 ± 585,707  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (1000000) = 27526.1232665
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 26047,757 ms/op
# Warmup Iteration   2: 24883,600 ms/op
# Warmup Iteration   3: 27157,529 ms/op
# Warmup Iteration   4: 29236,209 ms/op
# Warmup Iteration   5: 29334,999 ms/op
# Warmup Iteration   6: 29340,371 ms/op
# Warmup Iteration   7: 29248,744 ms/op
# Warmup Iteration   8: 29323,799 ms/op
# Warmup Iteration   9: 29288,149 ms/op
# Warmup Iteration  10: 29183,353 ms/op
Iteration   1: 29208,649 ms/op
Iteration   2: 29283,332 ms/op
Iteration   3: 29289,402 ms/op
Iteration   4: 29289,119 ms/op
Iteration   5: 29252,283 ms/op
Iteration   6: 29260,933 ms/op
Iteration   7: 29233,484 ms/op
Iteration   8: 29339,515 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  29269,590 ±(99.9%) 76,630 ms/op

  Histogram, ms/op:
    [29200,000, 29212,500) = 1
    [29212,500, 29225,000) = 0
    [29225,000, 29237,500) = 1
    [29237,500, 29250,000) = 0
    [29250,000, 29262,500) = 2
    [29262,500, 29275,000) = 0
    [29275,000, 29287,500) = 1
    [29287,500, 29300,000) = 2
    [29300,000, 29312,500) = 0
    [29312,500, 29325,000) = 0
    [29325,000, 29337,500) = 0
    [29337,500, 29350,000) = 1
    [29350,000, 29362,500) = 0
    [29362,500, 29375,000) = 0
    [29375,000, 29387,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  29208,649 ms/op
     p(50,0000) =  29272,133 ms/op
     p(90,0000) =  29339,515 ms/op
     p(95,0000) =  29339,515 ms/op
     p(99,0000) =  29339,515 ms/op
     p(99,9000) =  29339,515 ms/op
     p(99,9900) =  29339,515 ms/op
     p(99,9990) =  29339,515 ms/op
     p(99,9999) =  29339,515 ms/op
    p(100,0000) =  29339,515 ms/op


# Run complete. Total time: 00:08:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest      1000000           put    ss    8  29269,590 ± 76,630  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (1000000) = 29269.589633375002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25789,702 ms/op
# Warmup Iteration   2: 26109,603 ms/op
# Warmup Iteration   3: 27722,303 ms/op
# Warmup Iteration   4: 27832,843 ms/op
# Warmup Iteration   5: 27760,315 ms/op
# Warmup Iteration   6: 27741,517 ms/op
# Warmup Iteration   7: 27762,166 ms/op
# Warmup Iteration   8: 27755,359 ms/op
# Warmup Iteration   9: 27689,631 ms/op
# Warmup Iteration  10: 27822,392 ms/op
Iteration   1: 27777,643 ms/op
Iteration   2: 27941,076 ms/op
Iteration   3: 27778,556 ms/op
Iteration   4: 27765,666 ms/op
Iteration   5: 27745,941 ms/op
Iteration   6: 27794,965 ms/op
Iteration   7: 27778,677 ms/op
Iteration   8: 27654,744 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  27779,659 ±(99.9%) 150,258 ms/op

  Histogram, ms/op:
    [27600,000, 27625,000) = 0
    [27625,000, 27650,000) = 0
    [27650,000, 27675,000) = 1
    [27675,000, 27700,000) = 0
    [27700,000, 27725,000) = 0
    [27725,000, 27750,000) = 1
    [27750,000, 27775,000) = 1
    [27775,000, 27800,000) = 4
    [27800,000, 27825,000) = 0
    [27825,000, 27850,000) = 0
    [27850,000, 27875,000) = 0
    [27875,000, 27900,000) = 0
    [27900,000, 27925,000) = 0
    [27925,000, 27950,000) = 1
    [27950,000, 27975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  27654,744 ms/op
     p(50,0000) =  27778,100 ms/op
     p(90,0000) =  27941,076 ms/op
     p(95,0000) =  27941,076 ms/op
     p(99,0000) =  27941,076 ms/op
     p(99,9000) =  27941,076 ms/op
     p(99,9900) =  27941,076 ms/op
     p(99,9990) =  27941,076 ms/op
     p(99,9999) =  27941,076 ms/op
    p(100,0000) =  27941,076 ms/op


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest      1000000           put    ss    8  27779,659 ± 150,258  ms/op
tests.maptests.object.HppcObjMapTest (1000000) = 27779.6586315
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 17493,525 ms/op
# Warmup Iteration   2: 16861,602 ms/op
# Warmup Iteration   3: 16733,473 ms/op
# Warmup Iteration   4: 16769,281 ms/op
# Warmup Iteration   5: 18337,570 ms/op
# Warmup Iteration   6: 18049,140 ms/op
# Warmup Iteration   7: 18285,772 ms/op
# Warmup Iteration   8: 17727,103 ms/op
# Warmup Iteration   9: 17965,965 ms/op
# Warmup Iteration  10: 17856,978 ms/op
Iteration   1: 17849,176 ms/op
Iteration   2: 17953,485 ms/op
Iteration   3: 17786,715 ms/op
Iteration   4: 17902,103 ms/op
Iteration   5: 17490,357 ms/op
Iteration   6: 17908,476 ms/op
Iteration   7: 17935,315 ms/op
Iteration   8: 18051,166 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  17859,599 ±(99.9%) 320,914 ms/op

  Histogram, ms/op:
    [17400,000, 17450,000) = 0
    [17450,000, 17500,000) = 1
    [17500,000, 17550,000) = 0
    [17550,000, 17600,000) = 0
    [17600,000, 17650,000) = 0
    [17650,000, 17700,000) = 0
    [17700,000, 17750,000) = 0
    [17750,000, 17800,000) = 1
    [17800,000, 17850,000) = 1
    [17850,000, 17900,000) = 0
    [17900,000, 17950,000) = 3
    [17950,000, 18000,000) = 1
    [18000,000, 18050,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  17490,357 ms/op
     p(50,0000) =  17905,290 ms/op
     p(90,0000) =  18051,166 ms/op
     p(95,0000) =  18051,166 ms/op
     p(99,0000) =  18051,166 ms/op
     p(99,9000) =  18051,166 ms/op
     p(99,9900) =  18051,166 ms/op
     p(99,9990) =  18051,166 ms/op
     p(99,9999) =  18051,166 ms/op
    p(100,0000) =  18051,166 ms/op


# Run complete. Total time: 00:05:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest      1000000           put    ss    8  17859,599 ± 320,914  ms/op
tests.maptests.object.GsObjMapTest (1000000) = 17859.599095625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19855,881 ms/op
# Warmup Iteration   2: 19949,572 ms/op
# Warmup Iteration   3: 19193,808 ms/op
# Warmup Iteration   4: 19296,512 ms/op
# Warmup Iteration   5: 19498,634 ms/op
# Warmup Iteration   6: 18795,957 ms/op
# Warmup Iteration   7: 18995,311 ms/op
# Warmup Iteration   8: 19100,761 ms/op
# Warmup Iteration   9: 19092,909 ms/op
# Warmup Iteration  10: 19053,977 ms/op
Iteration   1: 19280,605 ms/op
Iteration   2: 19112,371 ms/op
Iteration   3: 19142,801 ms/op
Iteration   4: 18578,300 ms/op
Iteration   5: 19211,407 ms/op
Iteration   6: 18949,439 ms/op
Iteration   7: 19105,117 ms/op
Iteration   8: 18647,807 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  19003,481 ±(99.9%) 496,394 ms/op

  Histogram, ms/op:
    [18500,000, 18550,000) = 0
    [18550,000, 18600,000) = 1
    [18600,000, 18650,000) = 1
    [18650,000, 18700,000) = 0
    [18700,000, 18750,000) = 0
    [18750,000, 18800,000) = 0
    [18800,000, 18850,000) = 0
    [18850,000, 18900,000) = 0
    [18900,000, 18950,000) = 1
    [18950,000, 19000,000) = 0
    [19000,000, 19050,000) = 0
    [19050,000, 19100,000) = 0
    [19100,000, 19150,000) = 3
    [19150,000, 19200,000) = 0
    [19200,000, 19250,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  18578,300 ms/op
     p(50,0000) =  19108,744 ms/op
     p(90,0000) =  19280,605 ms/op
     p(95,0000) =  19280,605 ms/op
     p(99,0000) =  19280,605 ms/op
     p(99,9000) =  19280,605 ms/op
     p(99,9900) =  19280,605 ms/op
     p(99,9990) =  19280,605 ms/op
     p(99,9999) =  19280,605 ms/op
    p(100,0000) =  19280,605 ms/op


# Run complete. Total time: 00:05:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest      1000000           put    ss    8  19003,481 ± 496,394  ms/op
tests.maptests.object.JdkMapTest (1000000) = 19003.480797499997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 17258,367 ms/op
# Warmup Iteration   2: 17311,575 ms/op
# Warmup Iteration   3: 16903,748 ms/op
# Warmup Iteration   4: 16936,088 ms/op
# Warmup Iteration   5: 17142,814 ms/op
# Warmup Iteration   6: 16514,589 ms/op
# Warmup Iteration   7: 17355,370 ms/op
# Warmup Iteration   8: 16233,813 ms/op
# Warmup Iteration   9: 16469,788 ms/op
# Warmup Iteration  10: 16664,733 ms/op
Iteration   1: 16459,322 ms/op
Iteration   2: 16968,097 ms/op
Iteration   3: 16285,053 ms/op
Iteration   4: 16551,536 ms/op
Iteration   5: 16612,149 ms/op
Iteration   6: 16430,152 ms/op
Iteration   7: 16650,511 ms/op
Iteration   8: 16642,763 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  16574,948 ±(99.9%) 385,917 ms/op

  Histogram, ms/op:
    [16200,000, 16250,000) = 0
    [16250,000, 16300,000) = 1
    [16300,000, 16350,000) = 0
    [16350,000, 16400,000) = 0
    [16400,000, 16450,000) = 1
    [16450,000, 16500,000) = 1
    [16500,000, 16550,000) = 0
    [16550,000, 16600,000) = 1
    [16600,000, 16650,000) = 2
    [16650,000, 16700,000) = 1
    [16700,000, 16750,000) = 0
    [16750,000, 16800,000) = 0
    [16800,000, 16850,000) = 0
    [16850,000, 16900,000) = 0
    [16900,000, 16950,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  16285,053 ms/op
     p(50,0000) =  16581,842 ms/op
     p(90,0000) =  16968,097 ms/op
     p(95,0000) =  16968,097 ms/op
     p(99,0000) =  16968,097 ms/op
     p(99,9000) =  16968,097 ms/op
     p(99,9900) =  16968,097 ms/op
     p(99,9990) =  16968,097 ms/op
     p(99,9999) =  16968,097 ms/op
    p(100,0000) =  16968,097 ms/op


# Run complete. Total time: 00:05:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity      1000000           put    ss    8  16574,948 ± 385,917  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (1000000) = 16574.947922125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 31413,071 ms/op
# Warmup Iteration   2: 25457,265 ms/op
# Warmup Iteration   3: 26789,144 ms/op
# Warmup Iteration   4: 27210,649 ms/op
# Warmup Iteration   5: 27224,525 ms/op
# Warmup Iteration   6: 27242,492 ms/op
# Warmup Iteration   7: 27270,261 ms/op
# Warmup Iteration   8: 26925,819 ms/op
# Warmup Iteration   9: 27093,072 ms/op
# Warmup Iteration  10: 26946,630 ms/op
Iteration   1: 26996,262 ms/op
Iteration   2: 27026,202 ms/op
Iteration   3: 27099,222 ms/op
Iteration   4: 27055,713 ms/op
Iteration   5: 27260,031 ms/op
Iteration   6: 27025,536 ms/op
Iteration   7: 27112,838 ms/op
Iteration   8: 27054,047 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  27078,731 ±(99.9%) 158,297 ms/op

  Histogram, ms/op:
    [26900,000, 26925,000) = 0
    [26925,000, 26950,000) = 0
    [26950,000, 26975,000) = 0
    [26975,000, 27000,000) = 1
    [27000,000, 27025,000) = 0
    [27025,000, 27050,000) = 2
    [27050,000, 27075,000) = 2
    [27075,000, 27100,000) = 1
    [27100,000, 27125,000) = 1
    [27125,000, 27150,000) = 0
    [27150,000, 27175,000) = 0
    [27175,000, 27200,000) = 0
    [27200,000, 27225,000) = 0
    [27225,000, 27250,000) = 0
    [27250,000, 27275,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  26996,262 ms/op
     p(50,0000) =  27054,880 ms/op
     p(90,0000) =  27260,031 ms/op
     p(95,0000) =  27260,031 ms/op
     p(99,0000) =  27260,031 ms/op
     p(99,9000) =  27260,031 ms/op
     p(99,9900) =  27260,031 ms/op
     p(99,9990) =  27260,031 ms/op
     p(99,9999) =  27260,031 ms/op
    p(100,0000) =  27260,031 ms/op


# Run complete. Total time: 00:08:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest      1000000           put    ss    8  27078,731 ± 158,297  ms/op
tests.maptests.object.TroveJbObjMapTest (1000000) = 27078.73127475
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 33145,453 ms/op
# Warmup Iteration   2: 32453,028 ms/op
# Warmup Iteration   3: 33678,759 ms/op
# Warmup Iteration   4: 33834,953 ms/op
# Warmup Iteration   5: 33958,290 ms/op
# Warmup Iteration   6: 34019,223 ms/op
# Warmup Iteration   7: 33904,272 ms/op
# Warmup Iteration   8: 33759,023 ms/op
# Warmup Iteration   9: 33807,053 ms/op
# Warmup Iteration  10: 33841,103 ms/op
Iteration   1: 33852,056 ms/op
Iteration   2: 33827,390 ms/op
Iteration   3: 33786,266 ms/op
Iteration   4: 33830,126 ms/op
Iteration   5: 33821,671 ms/op
Iteration   6: 33908,011 ms/op
Iteration   7: 33749,570 ms/op
Iteration   8: 33693,475 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  33808,571 ±(99.9%) 125,158 ms/op

  Histogram, ms/op:
    [33600,000, 33625,000) = 0
    [33625,000, 33650,000) = 0
    [33650,000, 33675,000) = 0
    [33675,000, 33700,000) = 1
    [33700,000, 33725,000) = 0
    [33725,000, 33750,000) = 1
    [33750,000, 33775,000) = 0
    [33775,000, 33800,000) = 1
    [33800,000, 33825,000) = 1
    [33825,000, 33850,000) = 2
    [33850,000, 33875,000) = 1
    [33875,000, 33900,000) = 0
    [33900,000, 33925,000) = 1
    [33925,000, 33950,000) = 0
    [33950,000, 33975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  33693,475 ms/op
     p(50,0000) =  33824,531 ms/op
     p(90,0000) =  33908,011 ms/op
     p(95,0000) =  33908,011 ms/op
     p(99,0000) =  33908,011 ms/op
     p(99,9000) =  33908,011 ms/op
     p(99,9900) =  33908,011 ms/op
     p(99,9990) =  33908,011 ms/op
     p(99,9999) =  33908,011 ms/op
    p(100,0000) =  33908,011 ms/op


# Run complete. Total time: 00:10:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest      1000000           put    ss    8  33808,571 ± 125,158  ms/op
tests.maptests.object.TroveObjMapTest (1000000) = 33808.570710875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24090,204 ms/op
# Warmup Iteration   2: 24096,602 ms/op
# Warmup Iteration   3: 25341,794 ms/op
# Warmup Iteration   4: 25413,883 ms/op
# Warmup Iteration   5: 25506,587 ms/op
# Warmup Iteration   6: 25550,245 ms/op
# Warmup Iteration   7: 25173,977 ms/op
# Warmup Iteration   8: 25648,683 ms/op
# Warmup Iteration   9: 25622,436 ms/op
# Warmup Iteration  10: 25490,921 ms/op
Iteration   1: 25472,426 ms/op
Iteration   2: 25479,833 ms/op
Iteration   3: 25137,166 ms/op
Iteration   4: 25420,108 ms/op
Iteration   5: 25490,775 ms/op
Iteration   6: 25301,730 ms/op
Iteration   7: 25517,958 ms/op
Iteration   8: 25390,556 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  25401,319 ±(99.9%) 242,916 ms/op

  Histogram, ms/op:
    [25100,000, 25150,000) = 1
    [25150,000, 25200,000) = 0
    [25200,000, 25250,000) = 0
    [25250,000, 25300,000) = 0
    [25300,000, 25350,000) = 1
    [25350,000, 25400,000) = 1
    [25400,000, 25450,000) = 1
    [25450,000, 25500,000) = 3
    [25500,000, 25550,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  25137,166 ms/op
     p(50,0000) =  25446,267 ms/op
     p(90,0000) =  25517,958 ms/op
     p(95,0000) =  25517,958 ms/op
     p(99,0000) =  25517,958 ms/op
     p(99,9000) =  25517,958 ms/op
     p(99,9900) =  25517,958 ms/op
     p(99,9990) =  25517,958 ms/op
     p(99,9999) =  25517,958 ms/op
    p(100,0000) =  25517,958 ms/op


# Run complete. Total time: 00:07:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest      1000000           put    ss    8  25401,319 ± 242,916  ms/op
tests.maptests.article_examples.ObjObjMapTest (1000000) = 25401.31909175
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4765,866 ms/op
# Warmup Iteration   2: 4660,946 ms/op
# Warmup Iteration   3: 4628,219 ms/op
# Warmup Iteration   4: 4684,776 ms/op
# Warmup Iteration   5: 4796,469 ms/op
# Warmup Iteration   6: 4787,178 ms/op
# Warmup Iteration   7: 4822,646 ms/op
# Warmup Iteration   8: 4936,745 ms/op
# Warmup Iteration   9: 4762,555 ms/op
# Warmup Iteration  10: 4719,409 ms/op
Iteration   1: 4649,117 ms/op
Iteration   2: 4953,342 ms/op
Iteration   3: 4692,989 ms/op
Iteration   4: 4595,713 ms/op
Iteration   5: 4598,727 ms/op
Iteration   6: 4647,842 ms/op
Iteration   7: 4658,129 ms/op
Iteration   8: 4705,846 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4687,713 ±(99.9%) 218,301 ms/op

  Histogram, ms/op:
    [4500,000, 4550,000) = 0
    [4550,000, 4600,000) = 2
    [4600,000, 4650,000) = 2
    [4650,000, 4700,000) = 2
    [4700,000, 4750,000) = 1
    [4750,000, 4800,000) = 0
    [4800,000, 4850,000) = 0
    [4850,000, 4900,000) = 0
    [4900,000, 4950,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4595,713 ms/op
     p(50,0000) =   4653,623 ms/op
     p(90,0000) =   4953,342 ms/op
     p(95,0000) =   4953,342 ms/op
     p(99,0000) =   4953,342 ms/op
     p(99,9000) =   4953,342 ms/op
     p(99,9900) =   4953,342 ms/op
     p(99,9990) =   4953,342 ms/op
     p(99,9999) =   4953,342 ms/op
    p(100,0000) =   4953,342 ms/op


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest      1000000           put    ss    8  4687,713 ± 218,301  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (1000000) = 4687.7130285
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6445,789 ms/op
# Warmup Iteration   2: 6242,343 ms/op
# Warmup Iteration   3: 6241,385 ms/op
# Warmup Iteration   4: 6310,275 ms/op
# Warmup Iteration   5: 6359,697 ms/op
# Warmup Iteration   6: 6381,305 ms/op
# Warmup Iteration   7: 6366,790 ms/op
# Warmup Iteration   8: 6283,128 ms/op
# Warmup Iteration   9: 6439,362 ms/op
# Warmup Iteration  10: 6314,313 ms/op
Iteration   1: 6291,150 ms/op
Iteration   2: 6306,109 ms/op
Iteration   3: 6240,750 ms/op
Iteration   4: 6278,078 ms/op
Iteration   5: 6263,507 ms/op
Iteration   6: 6366,786 ms/op
Iteration   7: 6425,721 ms/op
Iteration   8: 6271,535 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6305,455 ±(99.9%) 117,144 ms/op

  Histogram, ms/op:
    [6200,000, 6225,000) = 0
    [6225,000, 6250,000) = 1
    [6250,000, 6275,000) = 2
    [6275,000, 6300,000) = 2
    [6300,000, 6325,000) = 1
    [6325,000, 6350,000) = 0
    [6350,000, 6375,000) = 1
    [6375,000, 6400,000) = 0
    [6400,000, 6425,000) = 0
    [6425,000, 6450,000) = 1
    [6450,000, 6475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6240,750 ms/op
     p(50,0000) =   6284,614 ms/op
     p(90,0000) =   6425,721 ms/op
     p(95,0000) =   6425,721 ms/op
     p(99,0000) =   6425,721 ms/op
     p(99,9000) =   6425,721 ms/op
     p(99,9900) =   6425,721 ms/op
     p(99,9990) =   6425,721 ms/op
     p(99,9999) =   6425,721 ms/op
    p(100,0000) =   6425,721 ms/op


# Run complete. Total time: 00:01:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest      1000000           put    ss    8  6305,455 ± 117,144  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (1000000) = 6305.454512
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5493,282 ms/op
# Warmup Iteration   2: 5311,261 ms/op
# Warmup Iteration   3: 5266,597 ms/op
# Warmup Iteration   4: 5298,239 ms/op
# Warmup Iteration   5: 5233,766 ms/op
# Warmup Iteration   6: 5292,261 ms/op
# Warmup Iteration   7: 5355,213 ms/op
# Warmup Iteration   8: 5218,774 ms/op
# Warmup Iteration   9: 5199,539 ms/op
# Warmup Iteration  10: 5290,092 ms/op
Iteration   1: 5316,482 ms/op
Iteration   2: 5188,860 ms/op
Iteration   3: 5299,997 ms/op
Iteration   4: 5330,249 ms/op
Iteration   5: 5318,224 ms/op
Iteration   6: 5288,838 ms/op
Iteration   7: 5413,973 ms/op
Iteration   8: 5269,827 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5303,306 ±(99.9%) 120,509 ms/op

  Histogram, ms/op:
    [5100,000, 5125,000) = 0
    [5125,000, 5150,000) = 0
    [5150,000, 5175,000) = 0
    [5175,000, 5200,000) = 1
    [5200,000, 5225,000) = 0
    [5225,000, 5250,000) = 0
    [5250,000, 5275,000) = 1
    [5275,000, 5300,000) = 2
    [5300,000, 5325,000) = 2
    [5325,000, 5350,000) = 1
    [5350,000, 5375,000) = 0
    [5375,000, 5400,000) = 0
    [5400,000, 5425,000) = 1
    [5425,000, 5450,000) = 0
    [5450,000, 5475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5188,860 ms/op
     p(50,0000) =   5308,239 ms/op
     p(90,0000) =   5413,973 ms/op
     p(95,0000) =   5413,973 ms/op
     p(99,0000) =   5413,973 ms/op
     p(99,9000) =   5413,973 ms/op
     p(99,9900) =   5413,973 ms/op
     p(99,9990) =   5413,973 ms/op
     p(99,9999) =   5413,973 ms/op
    p(100,0000) =   5413,973 ms/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest      1000000           put    ss    8  5303,306 ± 120,509  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (1000000) = 5303.306200125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5648,617 ms/op
# Warmup Iteration   2: 5620,594 ms/op
# Warmup Iteration   3: 5608,349 ms/op
# Warmup Iteration   4: 5526,108 ms/op
# Warmup Iteration   5: 5638,375 ms/op
# Warmup Iteration   6: 5556,246 ms/op
# Warmup Iteration   7: 5535,709 ms/op
# Warmup Iteration   8: 5549,350 ms/op
# Warmup Iteration   9: 5666,085 ms/op
# Warmup Iteration  10: 5535,164 ms/op
Iteration   1: 5582,649 ms/op
Iteration   2: 5679,841 ms/op
Iteration   3: 5534,550 ms/op
Iteration   4: 5679,987 ms/op
Iteration   5: 5560,930 ms/op
Iteration   6: 5541,216 ms/op
Iteration   7: 5629,764 ms/op
Iteration   8: 5543,071 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5594,001 ±(99.9%) 116,924 ms/op

  Histogram, ms/op:
    [5500,000, 5512,500) = 0
    [5512,500, 5525,000) = 0
    [5525,000, 5537,500) = 1
    [5537,500, 5550,000) = 2
    [5550,000, 5562,500) = 1
    [5562,500, 5575,000) = 0
    [5575,000, 5587,500) = 1
    [5587,500, 5600,000) = 0
    [5600,000, 5612,500) = 0
    [5612,500, 5625,000) = 0
    [5625,000, 5637,500) = 1
    [5637,500, 5650,000) = 0
    [5650,000, 5662,500) = 0
    [5662,500, 5675,000) = 0
    [5675,000, 5687,500) = 2

  Percentiles, ms/op:
      p(0,0000) =   5534,550 ms/op
     p(50,0000) =   5571,790 ms/op
     p(90,0000) =   5679,987 ms/op
     p(95,0000) =   5679,987 ms/op
     p(99,0000) =   5679,987 ms/op
     p(99,9000) =   5679,987 ms/op
     p(99,9900) =   5679,987 ms/op
     p(99,9990) =   5679,987 ms/op
     p(99,9999) =   5679,987 ms/op
    p(100,0000) =   5679,987 ms/op


# Run complete. Total time: 00:01:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest      1000000           put    ss    8  5594,001 ± 116,924  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (1000000) = 5594.000929375001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13776,663 ms/op
# Warmup Iteration   2: 13412,797 ms/op
# Warmup Iteration   3: 13488,537 ms/op
# Warmup Iteration   4: 13491,435 ms/op
# Warmup Iteration   5: 13602,238 ms/op
# Warmup Iteration   6: 13507,771 ms/op
# Warmup Iteration   7: 13457,042 ms/op
# Warmup Iteration   8: 13354,122 ms/op
# Warmup Iteration   9: 13465,376 ms/op
# Warmup Iteration  10: 13398,921 ms/op
Iteration   1: 13388,434 ms/op
Iteration   2: 13504,772 ms/op
Iteration   3: 13425,235 ms/op
Iteration   4: 13479,518 ms/op
Iteration   5: 13433,860 ms/op
Iteration   6: 13469,975 ms/op
Iteration   7: 13359,845 ms/op
Iteration   8: 13465,836 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13440,934 ±(99.9%) 93,264 ms/op

  Histogram, ms/op:
    [13300,000, 13325,000) = 0
    [13325,000, 13350,000) = 0
    [13350,000, 13375,000) = 1
    [13375,000, 13400,000) = 1
    [13400,000, 13425,000) = 0
    [13425,000, 13450,000) = 2
    [13450,000, 13475,000) = 2
    [13475,000, 13500,000) = 1
    [13500,000, 13525,000) = 1
    [13525,000, 13550,000) = 0
    [13550,000, 13575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13359,845 ms/op
     p(50,0000) =  13449,848 ms/op
     p(90,0000) =  13504,772 ms/op
     p(95,0000) =  13504,772 ms/op
     p(99,0000) =  13504,772 ms/op
     p(99,9000) =  13504,772 ms/op
     p(99,9900) =  13504,772 ms/op
     p(99,9990) =  13504,772 ms/op
     p(99,9999) =  13504,772 ms/op
    p(100,0000) =  13504,772 ms/op


# Run complete. Total time: 00:04:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest      1000000           put    ss    8  13440,934 ± 93,264  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (1000000) = 13440.9343575
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9204,231 ms/op
# Warmup Iteration   2: 9155,118 ms/op
# Warmup Iteration   3: 9196,369 ms/op
# Warmup Iteration   4: 9033,037 ms/op
# Warmup Iteration   5: 8988,932 ms/op
# Warmup Iteration   6: 9224,076 ms/op
# Warmup Iteration   7: 9017,564 ms/op
# Warmup Iteration   8: 9082,369 ms/op
# Warmup Iteration   9: 9342,534 ms/op
# Warmup Iteration  10: 9207,753 ms/op
Iteration   1: 9112,791 ms/op
Iteration   2: 9162,586 ms/op
Iteration   3: 9214,226 ms/op
Iteration   4: 9086,360 ms/op
Iteration   5: 9068,000 ms/op
Iteration   6: 9124,315 ms/op
Iteration   7: 9102,691 ms/op
Iteration   8: 9253,772 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9140,593 ±(99.9%) 123,911 ms/op

  Histogram, ms/op:
    [9000,000, 9025,000) = 0
    [9025,000, 9050,000) = 0
    [9050,000, 9075,000) = 1
    [9075,000, 9100,000) = 1
    [9100,000, 9125,000) = 3
    [9125,000, 9150,000) = 0
    [9150,000, 9175,000) = 1
    [9175,000, 9200,000) = 0
    [9200,000, 9225,000) = 1
    [9225,000, 9250,000) = 0
    [9250,000, 9275,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   9068,000 ms/op
     p(50,0000) =   9118,553 ms/op
     p(90,0000) =   9253,772 ms/op
     p(95,0000) =   9253,772 ms/op
     p(99,0000) =   9253,772 ms/op
     p(99,9000) =   9253,772 ms/op
     p(99,9900) =   9253,772 ms/op
     p(99,9990) =   9253,772 ms/op
     p(99,9999) =   9253,772 ms/op
    p(100,0000) =   9253,772 ms/op


# Run complete. Total time: 00:02:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest      1000000           put    ss    8  9140,593 ± 123,911  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (1000000) = 9140.5926205
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10950,379 ms/op
# Warmup Iteration   2: 10677,256 ms/op
# Warmup Iteration   3: 11134,448 ms/op
# Warmup Iteration   4: 11239,108 ms/op
# Warmup Iteration   5: 11329,368 ms/op
# Warmup Iteration   6: 11211,728 ms/op
# Warmup Iteration   7: 11113,114 ms/op
# Warmup Iteration   8: 11186,895 ms/op
# Warmup Iteration   9: 11126,246 ms/op
# Warmup Iteration  10: 11141,610 ms/op
Iteration   1: 11027,059 ms/op
Iteration   2: 11166,002 ms/op
Iteration   3: 11027,074 ms/op
Iteration   4: 11097,646 ms/op
Iteration   5: 10970,712 ms/op
Iteration   6: 11098,667 ms/op
Iteration   7: 11028,887 ms/op
Iteration   8: 11096,203 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11064,031 ±(99.9%) 117,505 ms/op

  Histogram, ms/op:
    [10900,000, 10925,000) = 0
    [10925,000, 10950,000) = 0
    [10950,000, 10975,000) = 1
    [10975,000, 11000,000) = 0
    [11000,000, 11025,000) = 0
    [11025,000, 11050,000) = 3
    [11050,000, 11075,000) = 0
    [11075,000, 11100,000) = 3
    [11100,000, 11125,000) = 0
    [11125,000, 11150,000) = 0
    [11150,000, 11175,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  10970,712 ms/op
     p(50,0000) =  11062,545 ms/op
     p(90,0000) =  11166,002 ms/op
     p(95,0000) =  11166,002 ms/op
     p(99,0000) =  11166,002 ms/op
     p(99,9000) =  11166,002 ms/op
     p(99,9900) =  11166,002 ms/op
     p(99,9990) =  11166,002 ms/op
     p(99,9999) =  11166,002 ms/op
    p(100,0000) =  11166,002 ms/op


# Run complete. Total time: 00:03:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest      1000000           put    ss    8  11064,031 ± 117,505  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (1000000) = 11064.031175875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12863,966 ms/op
# Warmup Iteration   2: 12466,239 ms/op
# Warmup Iteration   3: 12864,449 ms/op
# Warmup Iteration   4: 13006,422 ms/op
# Warmup Iteration   5: 12936,078 ms/op
# Warmup Iteration   6: 12901,908 ms/op
# Warmup Iteration   7: 12772,582 ms/op
# Warmup Iteration   8: 12883,885 ms/op
# Warmup Iteration   9: 12699,821 ms/op
# Warmup Iteration  10: 12878,287 ms/op
Iteration   1: 12952,260 ms/op
Iteration   2: 12819,798 ms/op
Iteration   3: 12812,244 ms/op
Iteration   4: 12806,799 ms/op
Iteration   5: 12906,547 ms/op
Iteration   6: 12830,110 ms/op
Iteration   7: 12803,109 ms/op
Iteration   8: 12889,090 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12852,495 ±(99.9%) 107,020 ms/op

  Histogram, ms/op:
    [12800,000, 12812,500) = 3
    [12812,500, 12825,000) = 1
    [12825,000, 12837,500) = 1
    [12837,500, 12850,000) = 0
    [12850,000, 12862,500) = 0
    [12862,500, 12875,000) = 0
    [12875,000, 12887,500) = 0
    [12887,500, 12900,000) = 1
    [12900,000, 12912,500) = 1
    [12912,500, 12925,000) = 0
    [12925,000, 12937,500) = 0
    [12937,500, 12950,000) = 0
    [12950,000, 12962,500) = 1
    [12962,500, 12975,000) = 0
    [12975,000, 12987,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  12803,109 ms/op
     p(50,0000) =  12824,954 ms/op
     p(90,0000) =  12952,260 ms/op
     p(95,0000) =  12952,260 ms/op
     p(99,0000) =  12952,260 ms/op
     p(99,9000) =  12952,260 ms/op
     p(99,9900) =  12952,260 ms/op
     p(99,9990) =  12952,260 ms/op
     p(99,9999) =  12952,260 ms/op
    p(100,0000) =  12952,260 ms/op


# Run complete. Total time: 00:03:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest      1000000           put    ss    8  12852,495 ± 107,020  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (1000000) = 12852.494653624999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13331,542 ms/op
# Warmup Iteration   2: 12758,608 ms/op
# Warmup Iteration   3: 13099,726 ms/op
# Warmup Iteration   4: 13148,420 ms/op
# Warmup Iteration   5: 13337,470 ms/op
# Warmup Iteration   6: 13326,552 ms/op
# Warmup Iteration   7: 13175,169 ms/op
# Warmup Iteration   8: 13175,462 ms/op
# Warmup Iteration   9: 13065,835 ms/op
# Warmup Iteration  10: 13112,053 ms/op
Iteration   1: 13096,872 ms/op
Iteration   2: 13181,110 ms/op
Iteration   3: 13173,550 ms/op
Iteration   4: 13239,375 ms/op
Iteration   5: 13164,113 ms/op
Iteration   6: 13158,103 ms/op
Iteration   7: 13157,602 ms/op
Iteration   8: 13086,470 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13157,149 ±(99.9%) 92,214 ms/op

  Histogram, ms/op:
    [13000,000, 13025,000) = 0
    [13025,000, 13050,000) = 0
    [13050,000, 13075,000) = 0
    [13075,000, 13100,000) = 2
    [13100,000, 13125,000) = 0
    [13125,000, 13150,000) = 0
    [13150,000, 13175,000) = 4
    [13175,000, 13200,000) = 1
    [13200,000, 13225,000) = 0
    [13225,000, 13250,000) = 1
    [13250,000, 13275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13086,470 ms/op
     p(50,0000) =  13161,108 ms/op
     p(90,0000) =  13239,375 ms/op
     p(95,0000) =  13239,375 ms/op
     p(99,0000) =  13239,375 ms/op
     p(99,9000) =  13239,375 ms/op
     p(99,9900) =  13239,375 ms/op
     p(99,9990) =  13239,375 ms/op
     p(99,9999) =  13239,375 ms/op
    p(100,0000) =  13239,375 ms/op


# Run complete. Total time: 00:04:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest      1000000           put    ss    8  13157,149 ± 92,214  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (1000000) = 13157.149461750003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12805,566 ms/op
# Warmup Iteration   2: 12644,423 ms/op
# Warmup Iteration   3: 13186,295 ms/op
# Warmup Iteration   4: 13153,826 ms/op
# Warmup Iteration   5: 13184,926 ms/op
# Warmup Iteration   6: 13345,970 ms/op
# Warmup Iteration   7: 13142,581 ms/op
# Warmup Iteration   8: 13073,572 ms/op
# Warmup Iteration   9: 13101,397 ms/op
# Warmup Iteration  10: 13180,016 ms/op
Iteration   1: 13048,557 ms/op
Iteration   2: 13207,267 ms/op
Iteration   3: 13346,798 ms/op
Iteration   4: 13188,665 ms/op
Iteration   5: 13220,694 ms/op
Iteration   6: 13218,597 ms/op
Iteration   7: 13202,701 ms/op
Iteration   8: 13095,177 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13191,057 ±(99.9%) 170,700 ms/op

  Histogram, ms/op:
    [13000,000, 13025,000) = 0
    [13025,000, 13050,000) = 1
    [13050,000, 13075,000) = 0
    [13075,000, 13100,000) = 1
    [13100,000, 13125,000) = 0
    [13125,000, 13150,000) = 0
    [13150,000, 13175,000) = 0
    [13175,000, 13200,000) = 1
    [13200,000, 13225,000) = 4
    [13225,000, 13250,000) = 0
    [13250,000, 13275,000) = 0
    [13275,000, 13300,000) = 0
    [13300,000, 13325,000) = 0
    [13325,000, 13350,000) = 1
    [13350,000, 13375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13048,557 ms/op
     p(50,0000) =  13204,984 ms/op
     p(90,0000) =  13346,798 ms/op
     p(95,0000) =  13346,798 ms/op
     p(99,0000) =  13346,798 ms/op
     p(99,9000) =  13346,798 ms/op
     p(99,9900) =  13346,798 ms/op
     p(99,9990) =  13346,798 ms/op
     p(99,9999) =  13346,798 ms/op
    p(100,0000) =  13346,798 ms/op


# Run complete. Total time: 00:04:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest      1000000           put    ss    8  13191,057 ± 170,700  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (1000000) = 13191.05678925
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23296,322 ms/op
# Warmup Iteration   2: 25292,547 ms/op
# Warmup Iteration   3: 27374,647 ms/op
# Warmup Iteration   4: 27426,000 ms/op
# Warmup Iteration   5: 27488,044 ms/op
# Warmup Iteration   6: 27480,245 ms/op
# Warmup Iteration   7: 27383,979 ms/op
# Warmup Iteration   8: 27347,849 ms/op
# Warmup Iteration   9: 27404,972 ms/op
# Warmup Iteration  10: 27352,843 ms/op
Iteration   1: 27354,465 ms/op
Iteration   2: 27325,671 ms/op
Iteration   3: 27428,715 ms/op
Iteration   4: 27397,725 ms/op
Iteration   5: 27410,146 ms/op
Iteration   6: 27434,831 ms/op
Iteration   7: 27621,830 ms/op
Iteration   8: 27426,679 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  27425,008 ±(99.9%) 168,956 ms/op

  Histogram, ms/op:
    [27300,000, 27325,000) = 0
    [27325,000, 27350,000) = 1
    [27350,000, 27375,000) = 1
    [27375,000, 27400,000) = 1
    [27400,000, 27425,000) = 1
    [27425,000, 27450,000) = 3
    [27450,000, 27475,000) = 0
    [27475,000, 27500,000) = 0
    [27500,000, 27525,000) = 0
    [27525,000, 27550,000) = 0
    [27550,000, 27575,000) = 0
    [27575,000, 27600,000) = 0
    [27600,000, 27625,000) = 1
    [27625,000, 27650,000) = 0
    [27650,000, 27675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  27325,671 ms/op
     p(50,0000) =  27418,413 ms/op
     p(90,0000) =  27621,830 ms/op
     p(95,0000) =  27621,830 ms/op
     p(99,0000) =  27621,830 ms/op
     p(99,9000) =  27621,830 ms/op
     p(99,9900) =  27621,830 ms/op
     p(99,9990) =  27621,830 ms/op
     p(99,9999) =  27621,830 ms/op
    p(100,0000) =  27621,830 ms/op


# Run complete. Total time: 00:08:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest      1000000           put    ss    8  27425,008 ± 168,956  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (1000000) = 27425.00763725
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21371,219 ms/op
# Warmup Iteration   2: 21045,842 ms/op
# Warmup Iteration   3: 21376,774 ms/op
# Warmup Iteration   4: 21394,293 ms/op
# Warmup Iteration   5: 21471,184 ms/op
# Warmup Iteration   6: 21446,616 ms/op
# Warmup Iteration   7: 21605,814 ms/op
# Warmup Iteration   8: 21380,591 ms/op
# Warmup Iteration   9: 21502,822 ms/op
# Warmup Iteration  10: 21349,817 ms/op
Iteration   1: 21447,744 ms/op
Iteration   2: 21489,708 ms/op
Iteration   3: 21375,339 ms/op
Iteration   4: 21401,678 ms/op
Iteration   5: 21365,236 ms/op
Iteration   6: 21453,045 ms/op
Iteration   7: 21482,097 ms/op
Iteration   8: 21328,756 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  21417,950 ±(99.9%) 112,415 ms/op

  Histogram, ms/op:
    [21300,000, 21312,500) = 0
    [21312,500, 21325,000) = 0
    [21325,000, 21337,500) = 1
    [21337,500, 21350,000) = 0
    [21350,000, 21362,500) = 0
    [21362,500, 21375,000) = 1
    [21375,000, 21387,500) = 1
    [21387,500, 21400,000) = 0
    [21400,000, 21412,500) = 1
    [21412,500, 21425,000) = 0
    [21425,000, 21437,500) = 0
    [21437,500, 21450,000) = 1
    [21450,000, 21462,500) = 1
    [21462,500, 21475,000) = 0
    [21475,000, 21487,500) = 1

  Percentiles, ms/op:
      p(0,0000) =  21328,756 ms/op
     p(50,0000) =  21424,711 ms/op
     p(90,0000) =  21489,708 ms/op
     p(95,0000) =  21489,708 ms/op
     p(99,0000) =  21489,708 ms/op
     p(99,9000) =  21489,708 ms/op
     p(99,9900) =  21489,708 ms/op
     p(99,9990) =  21489,708 ms/op
     p(99,9999) =  21489,708 ms/op
    p(100,0000) =  21489,708 ms/op


# Run complete. Total time: 00:06:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest      1000000           put    ss    8  21417,950 ± 112,415  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (1000000) = 21417.950314374997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27127,503 ms/op
# Warmup Iteration   2: 27596,309 ms/op
# Warmup Iteration   3: 31662,376 ms/op
# Warmup Iteration   4: 32620,279 ms/op
# Warmup Iteration   5: 32711,440 ms/op
# Warmup Iteration   6: 32856,759 ms/op
# Warmup Iteration   7: 32610,906 ms/op
# Warmup Iteration   8: 32615,756 ms/op
# Warmup Iteration   9: 32759,849 ms/op
# Warmup Iteration  10: 32733,779 ms/op
Iteration   1: 32612,353 ms/op
Iteration   2: 32837,826 ms/op
Iteration   3: 32721,778 ms/op
Iteration   4: 32832,092 ms/op
Iteration   5: 30703,179 ms/op
Iteration   6: 32708,420 ms/op
Iteration   7: 32641,065 ms/op
Iteration   8: 32860,218 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  32489,617 ±(99.9%) 1391,379 ms/op

  Histogram, ms/op:
    [30000,000, 30250,000) = 0
    [30250,000, 30500,000) = 0
    [30500,000, 30750,000) = 1
    [30750,000, 31000,000) = 0
    [31000,000, 31250,000) = 0
    [31250,000, 31500,000) = 0
    [31500,000, 31750,000) = 0
    [31750,000, 32000,000) = 0
    [32000,000, 32250,000) = 0
    [32250,000, 32500,000) = 0
    [32500,000, 32750,000) = 4

  Percentiles, ms/op:
      p(0,0000) =  30703,179 ms/op
     p(50,0000) =  32715,099 ms/op
     p(90,0000) =  32860,218 ms/op
     p(95,0000) =  32860,218 ms/op
     p(99,0000) =  32860,218 ms/op
     p(99,9000) =  32860,218 ms/op
     p(99,9900) =  32860,218 ms/op
     p(99,9990) =  32860,218 ms/op
     p(99,9999) =  32860,218 ms/op
    p(100,0000) =  32860,218 ms/op


# Run complete. Total time: 00:09:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest      1000000           put    ss    8  32489,617 ± 1391,379  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (1000000) = 32489.616511374996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 16227,103 ms/op
# Warmup Iteration   2: 15643,181 ms/op
# Warmup Iteration   3: 15286,477 ms/op
# Warmup Iteration   4: 14887,408 ms/op
# Warmup Iteration   5: 15886,968 ms/op
# Warmup Iteration   6: 15747,395 ms/op
# Warmup Iteration   7: 16013,682 ms/op
# Warmup Iteration   8: 15793,432 ms/op
# Warmup Iteration   9: 15758,646 ms/op
# Warmup Iteration  10: 15326,195 ms/op
Iteration   1: 15696,276 ms/op
Iteration   2: 15666,080 ms/op
Iteration   3: 15762,931 ms/op
Iteration   4: 15538,901 ms/op
Iteration   5: 15602,799 ms/op
Iteration   6: 15692,341 ms/op
Iteration   7: 15571,652 ms/op
Iteration   8: 15382,751 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  15614,216 ±(99.9%) 227,188 ms/op

  Histogram, ms/op:
    [15300,000, 15350,000) = 0
    [15350,000, 15400,000) = 1
    [15400,000, 15450,000) = 0
    [15450,000, 15500,000) = 0
    [15500,000, 15550,000) = 1
    [15550,000, 15600,000) = 1
    [15600,000, 15650,000) = 1
    [15650,000, 15700,000) = 3
    [15700,000, 15750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  15382,751 ms/op
     p(50,0000) =  15634,439 ms/op
     p(90,0000) =  15762,931 ms/op
     p(95,0000) =  15762,931 ms/op
     p(99,0000) =  15762,931 ms/op
     p(99,9000) =  15762,931 ms/op
     p(99,9900) =  15762,931 ms/op
     p(99,9990) =  15762,931 ms/op
     p(99,9999) =  15762,931 ms/op
    p(100,0000) =  15762,931 ms/op


# Run complete. Total time: 00:04:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest      1000000           put    ss    8  15614,216 ± 227,188  ms/op
tests.maptests.identity_object.GsIdentityMapTest (1000000) = 15614.21639625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18426,281 ms/op
# Warmup Iteration   2: 17420,688 ms/op
# Warmup Iteration   3: 15556,823 ms/op
# Warmup Iteration   4: 14381,407 ms/op
# Warmup Iteration   5: 14102,917 ms/op
# Warmup Iteration   6: 14077,719 ms/op
# Warmup Iteration   7: 14223,340 ms/op
# Warmup Iteration   8: 14273,253 ms/op
# Warmup Iteration   9: 14182,109 ms/op
# Warmup Iteration  10: 14118,352 ms/op
Iteration   1: 13962,066 ms/op
Iteration   2: 13954,016 ms/op
Iteration   3: 13902,695 ms/op
Iteration   4: 13883,989 ms/op
Iteration   5: 13878,037 ms/op
Iteration   6: 13797,862 ms/op
Iteration   7: 13845,147 ms/op
Iteration   8: 13759,108 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13872,865 ±(99.9%) 135,037 ms/op

  Histogram, ms/op:
    [13700,000, 13725,000) = 0
    [13725,000, 13750,000) = 0
    [13750,000, 13775,000) = 1
    [13775,000, 13800,000) = 1
    [13800,000, 13825,000) = 0
    [13825,000, 13850,000) = 1
    [13850,000, 13875,000) = 0
    [13875,000, 13900,000) = 2
    [13900,000, 13925,000) = 1
    [13925,000, 13950,000) = 0
    [13950,000, 13975,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  13759,108 ms/op
     p(50,0000) =  13881,013 ms/op
     p(90,0000) =  13962,066 ms/op
     p(95,0000) =  13962,066 ms/op
     p(99,0000) =  13962,066 ms/op
     p(99,9000) =  13962,066 ms/op
     p(99,9900) =  13962,066 ms/op
     p(99,9990) =  13962,066 ms/op
     p(99,9999) =  13962,066 ms/op
    p(100,0000) =  13962,066 ms/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest      1000000           put    ss    8  13872,865 ± 135,037  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (1000000) = 13872.864814375002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27944,710 ms/op
# Warmup Iteration   2: 28878,155 ms/op
# Warmup Iteration   3: 33147,952 ms/op
# Warmup Iteration   4: 34273,583 ms/op
# Warmup Iteration   5: 34405,369 ms/op
# Warmup Iteration   6: 34223,567 ms/op
# Warmup Iteration   7: 34308,510 ms/op
# Warmup Iteration   8: 34066,285 ms/op
# Warmup Iteration   9: 34331,493 ms/op
# Warmup Iteration  10: 34152,548 ms/op
Iteration   1: 34238,380 ms/op
Iteration   2: 34228,417 ms/op
Iteration   3: 34228,944 ms/op
Iteration   4: 34249,172 ms/op
Iteration   5: 34286,862 ms/op
Iteration   6: 34427,034 ms/op
Iteration   7: 34316,638 ms/op
Iteration   8: 34251,724 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  34278,396 ±(99.9%) 128,741 ms/op

  Histogram, ms/op:
    [34200,000, 34225,000) = 0
    [34225,000, 34250,000) = 4
    [34250,000, 34275,000) = 1
    [34275,000, 34300,000) = 1
    [34300,000, 34325,000) = 1
    [34325,000, 34350,000) = 0
    [34350,000, 34375,000) = 0
    [34375,000, 34400,000) = 0
    [34400,000, 34425,000) = 0
    [34425,000, 34450,000) = 1
    [34450,000, 34475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  34228,417 ms/op
     p(50,0000) =  34250,448 ms/op
     p(90,0000) =  34427,034 ms/op
     p(95,0000) =  34427,034 ms/op
     p(99,0000) =  34427,034 ms/op
     p(99,9000) =  34427,034 ms/op
     p(99,9900) =  34427,034 ms/op
     p(99,9990) =  34427,034 ms/op
     p(99,9999) =  34427,034 ms/op
    p(100,0000) =  34427,034 ms/op


# Run complete. Total time: 00:10:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest      1000000           put    ss    8  34278,396 ± 128,741  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (1000000) = 34278.396325875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25169,717 ms/op
# Warmup Iteration   2: 24816,725 ms/op
# Warmup Iteration   3: 25196,774 ms/op
# Warmup Iteration   4: 30598,217 ms/op
# Warmup Iteration   5: 30969,757 ms/op
# Warmup Iteration   6: 30928,418 ms/op
# Warmup Iteration   7: 31042,300 ms/op
# Warmup Iteration   8: 30933,187 ms/op
# Warmup Iteration   9: 30774,391 ms/op
# Warmup Iteration  10: 30892,184 ms/op
Iteration   1: 30847,890 ms/op
Iteration   2: 30882,577 ms/op
Iteration   3: 30910,339 ms/op
Iteration   4: 30870,860 ms/op
Iteration   5: 30857,140 ms/op
Iteration   6: 30958,284 ms/op
Iteration   7: 31016,672 ms/op
Iteration   8: 30992,104 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  30916,983 ±(99.9%) 123,058 ms/op

  Histogram, ms/op:
    [30800,000, 30825,000) = 0
    [30825,000, 30850,000) = 1
    [30850,000, 30875,000) = 2
    [30875,000, 30900,000) = 1
    [30900,000, 30925,000) = 1
    [30925,000, 30950,000) = 0
    [30950,000, 30975,000) = 1
    [30975,000, 31000,000) = 1
    [31000,000, 31025,000) = 1
    [31025,000, 31050,000) = 0
    [31050,000, 31075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  30847,890 ms/op
     p(50,0000) =  30896,458 ms/op
     p(90,0000) =  31016,672 ms/op
     p(95,0000) =  31016,672 ms/op
     p(99,0000) =  31016,672 ms/op
     p(99,9000) =  31016,672 ms/op
     p(99,9900) =  31016,672 ms/op
     p(99,9990) =  31016,672 ms/op
     p(99,9999) =  31016,672 ms/op
    p(100,0000) =  31016,672 ms/op


# Run complete. Total time: 00:09:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest      1000000           put    ss    8  30916,983 ± 123,058  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (1000000) = 30916.983166250004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 35669,797 ms/op
# Warmup Iteration   2: 31462,014 ms/op
# Warmup Iteration   3: 34885,274 ms/op
# Warmup Iteration   4: 37328,141 ms/op
# Warmup Iteration   5: 37368,629 ms/op
# Warmup Iteration   6: 37468,276 ms/op
# Warmup Iteration   7: 37428,636 ms/op
# Warmup Iteration   8: 37392,930 ms/op
# Warmup Iteration   9: 37258,143 ms/op
# Warmup Iteration  10: 37462,281 ms/op
Iteration   1: 37325,361 ms/op
Iteration   2: 37324,204 ms/op
Iteration   3: 37291,312 ms/op
Iteration   4: 37289,029 ms/op
Iteration   5: 37411,790 ms/op
Iteration   6: 37386,427 ms/op
Iteration   7: 37361,383 ms/op
Iteration   8: 37350,477 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  37342,498 ±(99.9%) 83,212 ms/op

  Histogram, ms/op:
    [37200,000, 37225,000) = 0
    [37225,000, 37250,000) = 0
    [37250,000, 37275,000) = 0
    [37275,000, 37300,000) = 2
    [37300,000, 37325,000) = 1
    [37325,000, 37350,000) = 1
    [37350,000, 37375,000) = 2
    [37375,000, 37400,000) = 1
    [37400,000, 37425,000) = 1
    [37425,000, 37450,000) = 0
    [37450,000, 37475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  37289,029 ms/op
     p(50,0000) =  37337,919 ms/op
     p(90,0000) =  37411,790 ms/op
     p(95,0000) =  37411,790 ms/op
     p(99,0000) =  37411,790 ms/op
     p(99,9000) =  37411,790 ms/op
     p(99,9900) =  37411,790 ms/op
     p(99,9990) =  37411,790 ms/op
     p(99,9999) =  37411,790 ms/op
    p(100,0000) =  37411,790 ms/op


# Run complete. Total time: 00:11:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest      1000000           put    ss    8  37342,498 ± 83,212  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (1000000) = 37342.497801
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 1000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 34521,302 ms/op
# Warmup Iteration   2: 34436,451 ms/op
# Warmup Iteration   3: 38169,641 ms/op
# Warmup Iteration   4: 39510,122 ms/op
# Warmup Iteration   5: 39646,806 ms/op
# Warmup Iteration   6: 39654,581 ms/op
# Warmup Iteration   7: 39566,892 ms/op
# Warmup Iteration   8: 39588,322 ms/op
# Warmup Iteration   9: 39687,961 ms/op
# Warmup Iteration  10: 39539,489 ms/op
Iteration   1: 39574,399 ms/op
Iteration   2: 39731,841 ms/op
Iteration   3: 39719,209 ms/op
Iteration   4: 39548,613 ms/op
Iteration   5: 39607,745 ms/op
Iteration   6: 39634,000 ms/op
Iteration   7: 39583,187 ms/op
Iteration   8: 39727,883 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  39640,860 ±(99.9%) 143,417 ms/op

  Histogram, ms/op:
    [39500,000, 39525,000) = 0
    [39525,000, 39550,000) = 1
    [39550,000, 39575,000) = 1
    [39575,000, 39600,000) = 1
    [39600,000, 39625,000) = 1
    [39625,000, 39650,000) = 1
    [39650,000, 39675,000) = 0
    [39675,000, 39700,000) = 0
    [39700,000, 39725,000) = 1
    [39725,000, 39750,000) = 2
    [39750,000, 39775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  39548,613 ms/op
     p(50,0000) =  39620,873 ms/op
     p(90,0000) =  39731,841 ms/op
     p(95,0000) =  39731,841 ms/op
     p(99,0000) =  39731,841 ms/op
     p(99,9000) =  39731,841 ms/op
     p(99,9900) =  39731,841 ms/op
     p(99,9990) =  39731,841 ms/op
     p(99,9999) =  39731,841 ms/op
    p(100,0000) =  39731,841 ms/op


# Run complete. Total time: 00:11:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest      1000000           put    ss    8  39640,860 ± 143,417  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (1000000) = 39640.859702249996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13757,656 ms/op
# Warmup Iteration   2: 13888,138 ms/op
# Warmup Iteration   3: 13910,903 ms/op
# Warmup Iteration   4: 13926,607 ms/op
# Warmup Iteration   5: 13889,857 ms/op
# Warmup Iteration   6: 13796,477 ms/op
# Warmup Iteration   7: 13859,434 ms/op
# Warmup Iteration   8: 13779,318 ms/op
# Warmup Iteration   9: 13738,272 ms/op
# Warmup Iteration  10: 13814,799 ms/op
Iteration   1: 13783,469 ms/op
Iteration   2: 13772,982 ms/op
Iteration   3: 13870,929 ms/op
Iteration   4: 13838,291 ms/op
Iteration   5: 13812,919 ms/op
Iteration   6: 13790,151 ms/op
Iteration   7: 13729,346 ms/op
Iteration   8: 13795,676 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13799,220 ±(99.9%) 81,664 ms/op

  Histogram, ms/op:
    [13700,000, 13712,500) = 0
    [13712,500, 13725,000) = 0
    [13725,000, 13737,500) = 1
    [13737,500, 13750,000) = 0
    [13750,000, 13762,500) = 0
    [13762,500, 13775,000) = 1
    [13775,000, 13787,500) = 1
    [13787,500, 13800,000) = 2
    [13800,000, 13812,500) = 0
    [13812,500, 13825,000) = 1
    [13825,000, 13837,500) = 0
    [13837,500, 13850,000) = 1
    [13850,000, 13862,500) = 0
    [13862,500, 13875,000) = 1
    [13875,000, 13887,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  13729,346 ms/op
     p(50,0000) =  13792,914 ms/op
     p(90,0000) =  13870,929 ms/op
     p(95,0000) =  13870,929 ms/op
     p(99,0000) =  13870,929 ms/op
     p(99,9000) =  13870,929 ms/op
     p(99,9900) =  13870,929 ms/op
     p(99,9990) =  13870,929 ms/op
     p(99,9999) =  13870,929 ms/op
    p(100,0000) =  13870,929 ms/op


# Run complete. Total time: 00:04:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test     10000000           put    ss    8  13799,220 ± 81,664  ms/op
tests.maptests.article_examples.IntIntMap1Test (10000000) = 13799.220276749998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 16953,515 ms/op
# Warmup Iteration   2: 16867,798 ms/op
# Warmup Iteration   3: 16995,601 ms/op
# Warmup Iteration   4: 16742,141 ms/op
# Warmup Iteration   5: 17177,511 ms/op
# Warmup Iteration   6: 16753,943 ms/op
# Warmup Iteration   7: 16815,604 ms/op
# Warmup Iteration   8: 16827,553 ms/op
# Warmup Iteration   9: 16892,382 ms/op
# Warmup Iteration  10: 16870,395 ms/op
Iteration   1: 16734,017 ms/op
Iteration   2: 16642,950 ms/op
Iteration   3: 16807,355 ms/op
Iteration   4: 16972,186 ms/op
Iteration   5: 16779,481 ms/op
Iteration   6: 16932,852 ms/op
Iteration   7: 16939,351 ms/op
Iteration   8: 16778,321 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  16823,314 ±(99.9%) 219,588 ms/op

  Histogram, ms/op:
    [16600,000, 16625,000) = 0
    [16625,000, 16650,000) = 1
    [16650,000, 16675,000) = 0
    [16675,000, 16700,000) = 0
    [16700,000, 16725,000) = 0
    [16725,000, 16750,000) = 1
    [16750,000, 16775,000) = 0
    [16775,000, 16800,000) = 2
    [16800,000, 16825,000) = 1
    [16825,000, 16850,000) = 0
    [16850,000, 16875,000) = 0
    [16875,000, 16900,000) = 0
    [16900,000, 16925,000) = 0
    [16925,000, 16950,000) = 2
    [16950,000, 16975,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  16642,950 ms/op
     p(50,0000) =  16793,418 ms/op
     p(90,0000) =  16972,186 ms/op
     p(95,0000) =  16972,186 ms/op
     p(99,0000) =  16972,186 ms/op
     p(99,9000) =  16972,186 ms/op
     p(99,9900) =  16972,186 ms/op
     p(99,9990) =  16972,186 ms/op
     p(99,9999) =  16972,186 ms/op
    p(100,0000) =  16972,186 ms/op


# Run complete. Total time: 00:05:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test     10000000           put    ss    8  16823,314 ± 219,588  ms/op
tests.maptests.article_examples.IntIntMap2Test (10000000) = 16823.314159375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10595,825 ms/op
# Warmup Iteration   2: 10428,093 ms/op
# Warmup Iteration   3: 10449,042 ms/op
# Warmup Iteration   4: 10351,304 ms/op
# Warmup Iteration   5: 10522,550 ms/op
# Warmup Iteration   6: 10495,139 ms/op
# Warmup Iteration   7: 10460,088 ms/op
# Warmup Iteration   8: 10627,763 ms/op
# Warmup Iteration   9: 10481,323 ms/op
# Warmup Iteration  10: 10459,733 ms/op
Iteration   1: 10324,626 ms/op
Iteration   2: 10409,509 ms/op
Iteration   3: 10439,439 ms/op
Iteration   4: 10499,565 ms/op
Iteration   5: 10362,376 ms/op
Iteration   6: 9993,264 ms/op
Iteration   7: 10396,866 ms/op
Iteration   8: 10497,519 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10365,395 ±(99.9%) 310,011 ms/op

  Histogram, ms/op:
    [ 9900,000,  9950,000) = 0
    [ 9950,000, 10000,000) = 1
    [10000,000, 10050,000) = 0
    [10050,000, 10100,000) = 0
    [10100,000, 10150,000) = 0
    [10150,000, 10200,000) = 0
    [10200,000, 10250,000) = 0
    [10250,000, 10300,000) = 0
    [10300,000, 10350,000) = 1
    [10350,000, 10400,000) = 2
    [10400,000, 10450,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   9993,264 ms/op
     p(50,0000) =  10403,187 ms/op
     p(90,0000) =  10499,565 ms/op
     p(95,0000) =  10499,565 ms/op
     p(99,0000) =  10499,565 ms/op
     p(99,9000) =  10499,565 ms/op
     p(99,9900) =  10499,565 ms/op
     p(99,9990) =  10499,565 ms/op
     p(99,9999) =  10499,565 ms/op
    p(100,0000) =  10499,565 ms/op


# Run complete. Total time: 00:03:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test     10000000           put    ss    8  10365,395 ± 310,011  ms/op
tests.maptests.article_examples.IntIntMap3Test (10000000) = 10365.395447750001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7822,845 ms/op
# Warmup Iteration   2: 7854,501 ms/op
# Warmup Iteration   3: 7900,219 ms/op
# Warmup Iteration   4: 7895,017 ms/op
# Warmup Iteration   5: 7831,682 ms/op
# Warmup Iteration   6: 7896,593 ms/op
# Warmup Iteration   7: 7891,163 ms/op
# Warmup Iteration   8: 7957,511 ms/op
# Warmup Iteration   9: 7887,910 ms/op
# Warmup Iteration  10: 7956,275 ms/op
Iteration   1: 7902,968 ms/op
Iteration   2: 7921,915 ms/op
Iteration   3: 7939,000 ms/op
Iteration   4: 7879,319 ms/op
Iteration   5: 7879,078 ms/op
Iteration   6: 7843,247 ms/op
Iteration   7: 8156,552 ms/op
Iteration   8: 8118,231 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7955,039 ±(99.9%) 223,097 ms/op

  Histogram, ms/op:
    [7800,000, 7825,000) = 0
    [7825,000, 7850,000) = 1
    [7850,000, 7875,000) = 0
    [7875,000, 7900,000) = 2
    [7900,000, 7925,000) = 2
    [7925,000, 7950,000) = 1
    [7950,000, 7975,000) = 0
    [7975,000, 8000,000) = 0
    [8000,000, 8025,000) = 0
    [8025,000, 8050,000) = 0
    [8050,000, 8075,000) = 0
    [8075,000, 8100,000) = 0
    [8100,000, 8125,000) = 1
    [8125,000, 8150,000) = 0
    [8150,000, 8175,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   7843,247 ms/op
     p(50,0000) =   7912,442 ms/op
     p(90,0000) =   8156,552 ms/op
     p(95,0000) =   8156,552 ms/op
     p(99,0000) =   8156,552 ms/op
     p(99,9000) =   8156,552 ms/op
     p(99,9900) =   8156,552 ms/op
     p(99,9990) =   8156,552 ms/op
     p(99,9999) =   8156,552 ms/op
    p(100,0000) =   8156,552 ms/op


# Run complete. Total time: 00:02:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test     10000000           put    ss    8  7955,039 ± 223,097  ms/op
tests.maptests.article_examples.IntIntMap4Test (10000000) = 7955.038920625001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7092,065 ms/op
# Warmup Iteration   2: 7080,279 ms/op
# Warmup Iteration   3: 7029,667 ms/op
# Warmup Iteration   4: 7088,712 ms/op
# Warmup Iteration   5: 7064,479 ms/op
# Warmup Iteration   6: 7134,158 ms/op
# Warmup Iteration   7: 7100,523 ms/op
# Warmup Iteration   8: 7018,640 ms/op
# Warmup Iteration   9: 6996,487 ms/op
# Warmup Iteration  10: 7059,370 ms/op
Iteration   1: 7050,300 ms/op
Iteration   2: 7073,150 ms/op
Iteration   3: 7095,052 ms/op
Iteration   4: 7081,107 ms/op
Iteration   5: 7107,217 ms/op
Iteration   6: 7043,874 ms/op
Iteration   7: 7080,794 ms/op
Iteration   8: 7038,681 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7071,272 ±(99.9%) 47,394 ms/op

  Histogram, ms/op:
    [7030,000, 7035,000) = 0
    [7035,000, 7040,000) = 1
    [7040,000, 7045,000) = 1
    [7045,000, 7050,000) = 0
    [7050,000, 7055,000) = 1
    [7055,000, 7060,000) = 0
    [7060,000, 7065,000) = 0
    [7065,000, 7070,000) = 0
    [7070,000, 7075,000) = 1
    [7075,000, 7080,000) = 0
    [7080,000, 7085,000) = 2
    [7085,000, 7090,000) = 0
    [7090,000, 7095,000) = 0
    [7095,000, 7100,000) = 1
    [7100,000, 7105,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   7038,681 ms/op
     p(50,0000) =   7076,972 ms/op
     p(90,0000) =   7107,217 ms/op
     p(95,0000) =   7107,217 ms/op
     p(99,0000) =   7107,217 ms/op
     p(99,9000) =   7107,217 ms/op
     p(99,9900) =   7107,217 ms/op
     p(99,9990) =   7107,217 ms/op
     p(99,9999) =   7107,217 ms/op
    p(100,0000) =   7107,217 ms/op


# Run complete. Total time: 00:02:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest     10000000           put    ss    8  7071,272 ± 47,394  ms/op
tests.maptests.article_examples.IntIntMap4aTest (10000000) = 7071.271900125001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9125,048 ms/op
# Warmup Iteration   2: 9168,550 ms/op
# Warmup Iteration   3: 9140,003 ms/op
# Warmup Iteration   4: 9220,833 ms/op
# Warmup Iteration   5: 9217,475 ms/op
# Warmup Iteration   6: 9163,745 ms/op
# Warmup Iteration   7: 9144,453 ms/op
# Warmup Iteration   8: 9144,635 ms/op
# Warmup Iteration   9: 9218,669 ms/op
# Warmup Iteration  10: 9195,065 ms/op
Iteration   1: 9138,693 ms/op
Iteration   2: 9130,291 ms/op
Iteration   3: 9081,313 ms/op
Iteration   4: 9209,242 ms/op
Iteration   5: 9247,874 ms/op
Iteration   6: 9242,123 ms/op
Iteration   7: 9106,802 ms/op
Iteration   8: 9117,237 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9159,197 ±(99.9%) 123,218 ms/op

  Histogram, ms/op:
    [9000,000, 9025,000) = 0
    [9025,000, 9050,000) = 0
    [9050,000, 9075,000) = 0
    [9075,000, 9100,000) = 1
    [9100,000, 9125,000) = 2
    [9125,000, 9150,000) = 2
    [9150,000, 9175,000) = 0
    [9175,000, 9200,000) = 0
    [9200,000, 9225,000) = 1
    [9225,000, 9250,000) = 2
    [9250,000, 9275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9081,313 ms/op
     p(50,0000) =   9134,492 ms/op
     p(90,0000) =   9247,874 ms/op
     p(95,0000) =   9247,874 ms/op
     p(99,0000) =   9247,874 ms/op
     p(99,9000) =   9247,874 ms/op
     p(99,9900) =   9247,874 ms/op
     p(99,9990) =   9247,874 ms/op
     p(99,9999) =   9247,874 ms/op
    p(100,0000) =   9247,874 ms/op


# Run complete. Total time: 00:02:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest     10000000           put    ss    8  9159,197 ± 123,218  ms/op
tests.maptests.primitive.FastUtilMapTest (10000000) = 9159.196875500002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7783,846 ms/op
# Warmup Iteration   2: 7895,105 ms/op
# Warmup Iteration   3: 7777,978 ms/op
# Warmup Iteration   4: 7783,589 ms/op
# Warmup Iteration   5: 7822,554 ms/op
# Warmup Iteration   6: 7823,701 ms/op
# Warmup Iteration   7: 7793,912 ms/op
# Warmup Iteration   8: 7817,313 ms/op
# Warmup Iteration   9: 7827,226 ms/op
# Warmup Iteration  10: 7848,181 ms/op
Iteration   1: 7839,313 ms/op
Iteration   2: 7843,424 ms/op
Iteration   3: 7867,592 ms/op
Iteration   4: 7805,051 ms/op
Iteration   5: 7622,573 ms/op
Iteration   6: 7816,800 ms/op
Iteration   7: 7857,564 ms/op
Iteration   8: 7837,526 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7811,231 ±(99.9%) 150,724 ms/op

  Histogram, ms/op:
    [7600,000, 7625,000) = 1
    [7625,000, 7650,000) = 0
    [7650,000, 7675,000) = 0
    [7675,000, 7700,000) = 0
    [7700,000, 7725,000) = 0
    [7725,000, 7750,000) = 0
    [7750,000, 7775,000) = 0
    [7775,000, 7800,000) = 0
    [7800,000, 7825,000) = 2
    [7825,000, 7850,000) = 3
    [7850,000, 7875,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   7622,573 ms/op
     p(50,0000) =   7838,419 ms/op
     p(90,0000) =   7867,592 ms/op
     p(95,0000) =   7867,592 ms/op
     p(99,0000) =   7867,592 ms/op
     p(99,9000) =   7867,592 ms/op
     p(99,9900) =   7867,592 ms/op
     p(99,9990) =   7867,592 ms/op
     p(99,9999) =   7867,592 ms/op
    p(100,0000) =   7867,592 ms/op


# Run complete. Total time: 00:02:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest     10000000           put    ss    8  7811,231 ± 150,724  ms/op
tests.maptests.primitive.GsMutableMapTest (10000000) = 7811.230503125001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5995,008 ms/op
# Warmup Iteration   2: 5605,200 ms/op
# Warmup Iteration   3: 5691,736 ms/op
# Warmup Iteration   4: 5721,397 ms/op
# Warmup Iteration   5: 5617,174 ms/op
# Warmup Iteration   6: 5634,105 ms/op
# Warmup Iteration   7: 5655,102 ms/op
# Warmup Iteration   8: 5655,133 ms/op
# Warmup Iteration   9: 5689,423 ms/op
# Warmup Iteration  10: 5697,328 ms/op
Iteration   1: 5693,201 ms/op
Iteration   2: 5711,010 ms/op
Iteration   3: 5677,087 ms/op
Iteration   4: 5636,390 ms/op
Iteration   5: 5663,950 ms/op
Iteration   6: 5638,522 ms/op
Iteration   7: 5658,528 ms/op
Iteration   8: 5738,795 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5677,185 ±(99.9%) 68,094 ms/op

  Histogram, ms/op:
    [5600,000, 5612,500) = 0
    [5612,500, 5625,000) = 0
    [5625,000, 5637,500) = 1
    [5637,500, 5650,000) = 1
    [5650,000, 5662,500) = 1
    [5662,500, 5675,000) = 1
    [5675,000, 5687,500) = 1
    [5687,500, 5700,000) = 1
    [5700,000, 5712,500) = 1
    [5712,500, 5725,000) = 0
    [5725,000, 5737,500) = 0
    [5737,500, 5750,000) = 1
    [5750,000, 5762,500) = 0
    [5762,500, 5775,000) = 0
    [5775,000, 5787,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5636,390 ms/op
     p(50,0000) =   5670,518 ms/op
     p(90,0000) =   5738,795 ms/op
     p(95,0000) =   5738,795 ms/op
     p(99,0000) =   5738,795 ms/op
     p(99,9000) =   5738,795 ms/op
     p(99,9900) =   5738,795 ms/op
     p(99,9990) =   5738,795 ms/op
     p(99,9999) =   5738,795 ms/op
    p(100,0000) =   5738,795 ms/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest     10000000           put    ss    8  5677,185 ± 68,094  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (10000000) = 5677.185328875001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8931,028 ms/op
# Warmup Iteration   2: 8764,697 ms/op
# Warmup Iteration   3: 8894,560 ms/op
# Warmup Iteration   4: 8803,838 ms/op
# Warmup Iteration   5: 8745,009 ms/op
# Warmup Iteration   6: 8778,987 ms/op
# Warmup Iteration   7: 8813,425 ms/op
# Warmup Iteration   8: 8856,102 ms/op
# Warmup Iteration   9: 8793,510 ms/op
# Warmup Iteration  10: 8814,006 ms/op
Iteration   1: 8726,619 ms/op
Iteration   2: 8773,304 ms/op
Iteration   3: 8815,208 ms/op
Iteration   4: 8761,096 ms/op
Iteration   5: 8772,437 ms/op
Iteration   6: 8806,285 ms/op
Iteration   7: 8851,714 ms/op
Iteration   8: 8901,141 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8800,976 ±(99.9%) 106,055 ms/op

  Histogram, ms/op:
    [8700,000, 8725,000) = 0
    [8725,000, 8750,000) = 1
    [8750,000, 8775,000) = 3
    [8775,000, 8800,000) = 0
    [8800,000, 8825,000) = 2
    [8825,000, 8850,000) = 0
    [8850,000, 8875,000) = 1
    [8875,000, 8900,000) = 0
    [8900,000, 8925,000) = 1
    [8925,000, 8950,000) = 0
    [8950,000, 8975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8726,619 ms/op
     p(50,0000) =   8789,795 ms/op
     p(90,0000) =   8901,141 ms/op
     p(95,0000) =   8901,141 ms/op
     p(99,0000) =   8901,141 ms/op
     p(99,9000) =   8901,141 ms/op
     p(99,9900) =   8901,141 ms/op
     p(99,9990) =   8901,141 ms/op
     p(99,9999) =   8901,141 ms/op
    p(100,0000) =   8901,141 ms/op


# Run complete. Total time: 00:02:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest     10000000           put    ss    8  8800,976 ± 106,055  ms/op
tests.maptests.primitive.HppcMapTest (10000000) = 8800.975626875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 16442,122 ms/op
# Warmup Iteration   2: 16002,240 ms/op
# Warmup Iteration   3: 15873,844 ms/op
# Warmup Iteration   4: 16269,876 ms/op
# Warmup Iteration   5: 16363,927 ms/op
# Warmup Iteration   6: 16069,982 ms/op
# Warmup Iteration   7: 16177,768 ms/op
# Warmup Iteration   8: 16119,275 ms/op
# Warmup Iteration   9: 16082,968 ms/op
# Warmup Iteration  10: 15992,852 ms/op
Iteration   1: 16191,472 ms/op
Iteration   2: 16184,567 ms/op
Iteration   3: 16082,858 ms/op
Iteration   4: 16078,607 ms/op
Iteration   5: 16064,657 ms/op
Iteration   6: 16069,185 ms/op
Iteration   7: 16135,243 ms/op
Iteration   8: 15991,861 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  16099,806 ±(99.9%) 128,065 ms/op

  Histogram, ms/op:
    [15900,000, 15925,000) = 0
    [15925,000, 15950,000) = 0
    [15950,000, 15975,000) = 0
    [15975,000, 16000,000) = 1
    [16000,000, 16025,000) = 0
    [16025,000, 16050,000) = 0
    [16050,000, 16075,000) = 2
    [16075,000, 16100,000) = 2
    [16100,000, 16125,000) = 0
    [16125,000, 16150,000) = 1
    [16150,000, 16175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  15991,861 ms/op
     p(50,0000) =  16080,732 ms/op
     p(90,0000) =  16191,472 ms/op
     p(95,0000) =  16191,472 ms/op
     p(99,0000) =  16191,472 ms/op
     p(99,9000) =  16191,472 ms/op
     p(99,9900) =  16191,472 ms/op
     p(99,9990) =  16191,472 ms/op
     p(99,9999) =  16191,472 ms/op
    p(100,0000) =  16191,472 ms/op


# Run complete. Total time: 00:04:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest     10000000           put    ss    8  16099,806 ± 128,065  ms/op
tests.maptests.primitive.TroveJbMapTest (10000000) = 16099.806485500001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18699,232 ms/op
# Warmup Iteration   2: 18847,272 ms/op
# Warmup Iteration   3: 18838,412 ms/op
# Warmup Iteration   4: 18870,213 ms/op
# Warmup Iteration   5: 18890,506 ms/op
# Warmup Iteration   6: 18817,361 ms/op
# Warmup Iteration   7: 18795,900 ms/op
# Warmup Iteration   8: 18852,396 ms/op
# Warmup Iteration   9: 18849,645 ms/op
# Warmup Iteration  10: 18778,498 ms/op
Iteration   1: 18831,336 ms/op
Iteration   2: 18832,625 ms/op
Iteration   3: 18855,704 ms/op
Iteration   4: 18954,484 ms/op
Iteration   5: 18730,012 ms/op
Iteration   6: 18835,040 ms/op
Iteration   7: 18855,270 ms/op
Iteration   8: 18862,196 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18844,583 ±(99.9%) 116,888 ms/op

  Histogram, ms/op:
    [18700,000, 18725,000) = 0
    [18725,000, 18750,000) = 1
    [18750,000, 18775,000) = 0
    [18775,000, 18800,000) = 0
    [18800,000, 18825,000) = 0
    [18825,000, 18850,000) = 3
    [18850,000, 18875,000) = 3
    [18875,000, 18900,000) = 0
    [18900,000, 18925,000) = 0
    [18925,000, 18950,000) = 0
    [18950,000, 18975,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  18730,012 ms/op
     p(50,0000) =  18845,155 ms/op
     p(90,0000) =  18954,484 ms/op
     p(95,0000) =  18954,484 ms/op
     p(99,0000) =  18954,484 ms/op
     p(99,9000) =  18954,484 ms/op
     p(99,9900) =  18954,484 ms/op
     p(99,9990) =  18954,484 ms/op
     p(99,9999) =  18954,484 ms/op
    p(100,0000) =  18954,484 ms/op


# Run complete. Total time: 00:05:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest     10000000           put    ss    8  18844,583 ± 116,888  ms/op
tests.maptests.primitive.TroveMapTest (10000000) = 18844.583488375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 31442,575 ms/op
# Warmup Iteration   2: 29784,291 ms/op
# Warmup Iteration   3: 26635,178 ms/op
# Warmup Iteration   4: 22505,208 ms/op
# Warmup Iteration   5: 22049,101 ms/op
# Warmup Iteration   6: 22066,930 ms/op
# Warmup Iteration   7: 22005,362 ms/op
# Warmup Iteration   8: 22020,971 ms/op
# Warmup Iteration   9: 22066,757 ms/op
# Warmup Iteration  10: 21963,957 ms/op
Iteration   1: 22190,539 ms/op
Iteration   2: 21960,488 ms/op
Iteration   3: 22059,964 ms/op
Iteration   4: 22091,776 ms/op
Iteration   5: 21985,073 ms/op
Iteration   6: 22072,975 ms/op
Iteration   7: 22060,199 ms/op
Iteration   8: 21924,039 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22043,132 ±(99.9%) 161,502 ms/op

  Histogram, ms/op:
    [21900,000, 21925,000) = 1
    [21925,000, 21950,000) = 0
    [21950,000, 21975,000) = 1
    [21975,000, 22000,000) = 1
    [22000,000, 22025,000) = 0
    [22025,000, 22050,000) = 0
    [22050,000, 22075,000) = 3
    [22075,000, 22100,000) = 1
    [22100,000, 22125,000) = 0
    [22125,000, 22150,000) = 0
    [22150,000, 22175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  21924,039 ms/op
     p(50,0000) =  22060,081 ms/op
     p(90,0000) =  22190,539 ms/op
     p(95,0000) =  22190,539 ms/op
     p(99,0000) =  22190,539 ms/op
     p(99,9000) =  22190,539 ms/op
     p(99,9900) =  22190,539 ms/op
     p(99,9990) =  22190,539 ms/op
     p(99,9999) =  22190,539 ms/op
    p(100,0000) =  22190,539 ms/op


# Run complete. Total time: 00:07:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest     10000000           put    ss    8  22043,132 ± 161,502  ms/op
tests.maptests.object.FastUtilObjMapTest (10000000) = 22043.13160575
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 26042,132 ms/op
# Warmup Iteration   2: 24212,725 ms/op
# Warmup Iteration   3: 23702,208 ms/op
# Warmup Iteration   4: 23103,424 ms/op
# Warmup Iteration   5: 22266,555 ms/op
# Warmup Iteration   6: 21138,353 ms/op
# Warmup Iteration   7: 19885,894 ms/op
# Warmup Iteration   8: 19253,023 ms/op
# Warmup Iteration   9: 19078,578 ms/op
# Warmup Iteration  10: 19055,489 ms/op
Iteration   1: 19153,444 ms/op
Iteration   2: 19247,439 ms/op
Iteration   3: 19111,071 ms/op
Iteration   4: 19460,238 ms/op
Iteration   5: 19072,239 ms/op
Iteration   6: 19139,659 ms/op
Iteration   7: 19367,893 ms/op
Iteration   8: 19017,048 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  19196,129 ±(99.9%) 290,464 ms/op

  Histogram, ms/op:
    [19000,000, 19050,000) = 1
    [19050,000, 19100,000) = 1
    [19100,000, 19150,000) = 2
    [19150,000, 19200,000) = 1
    [19200,000, 19250,000) = 1
    [19250,000, 19300,000) = 0
    [19300,000, 19350,000) = 0
    [19350,000, 19400,000) = 1
    [19400,000, 19450,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  19017,048 ms/op
     p(50,0000) =  19146,551 ms/op
     p(90,0000) =  19460,238 ms/op
     p(95,0000) =  19460,238 ms/op
     p(99,0000) =  19460,238 ms/op
     p(99,9000) =  19460,238 ms/op
     p(99,9900) =  19460,238 ms/op
     p(99,9990) =  19460,238 ms/op
     p(99,9999) =  19460,238 ms/op
    p(100,0000) =  19460,238 ms/op


# Run complete. Total time: 00:06:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest     10000000           put    ss    8  19196,129 ± 290,464  ms/op
tests.maptests.object.KolobokeMutableObjTest (10000000) = 19196.128777374997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27165,945 ms/op
# Warmup Iteration   2: 24699,081 ms/op
# Warmup Iteration   3: 24283,041 ms/op
# Warmup Iteration   4: 23513,095 ms/op
# Warmup Iteration   5: 22651,235 ms/op
# Warmup Iteration   6: 21431,125 ms/op
# Warmup Iteration   7: 20091,341 ms/op
# Warmup Iteration   8: 19883,744 ms/op
# Warmup Iteration   9: 19745,773 ms/op
# Warmup Iteration  10: 19692,125 ms/op
Iteration   1: 19665,765 ms/op
Iteration   2: 19899,984 ms/op
Iteration   3: 19756,810 ms/op
Iteration   4: 19738,952 ms/op
Iteration   5: 19707,196 ms/op
Iteration   6: 19684,900 ms/op
Iteration   7: 19783,150 ms/op
Iteration   8: 19384,153 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  19702,614 ±(99.9%) 282,493 ms/op

  Histogram, ms/op:
    [19300,000, 19350,000) = 0
    [19350,000, 19400,000) = 1
    [19400,000, 19450,000) = 0
    [19450,000, 19500,000) = 0
    [19500,000, 19550,000) = 0
    [19550,000, 19600,000) = 0
    [19600,000, 19650,000) = 0
    [19650,000, 19700,000) = 2
    [19700,000, 19750,000) = 2
    [19750,000, 19800,000) = 2
    [19800,000, 19850,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  19384,153 ms/op
     p(50,0000) =  19723,074 ms/op
     p(90,0000) =  19899,984 ms/op
     p(95,0000) =  19899,984 ms/op
     p(99,0000) =  19899,984 ms/op
     p(99,9000) =  19899,984 ms/op
     p(99,9900) =  19899,984 ms/op
     p(99,9990) =  19899,984 ms/op
     p(99,9999) =  19899,984 ms/op
    p(100,0000) =  19899,984 ms/op


# Run complete. Total time: 00:06:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest     10000000           put    ss    8  19702,614 ± 282,493  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (10000000) = 19702.613770624997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 28578,461 ms/op
# Warmup Iteration   2: 26705,764 ms/op
# Warmup Iteration   3: 26654,148 ms/op
# Warmup Iteration   4: 26203,618 ms/op
# Warmup Iteration   5: 25314,571 ms/op
# Warmup Iteration   6: 24142,115 ms/op
# Warmup Iteration   7: 22615,627 ms/op
# Warmup Iteration   8: 22374,498 ms/op
# Warmup Iteration   9: 22310,153 ms/op
# Warmup Iteration  10: 22355,300 ms/op
Iteration   1: 22253,183 ms/op
Iteration   2: 22224,362 ms/op
Iteration   3: 22274,654 ms/op
Iteration   4: 22387,785 ms/op
Iteration   5: 22260,408 ms/op
Iteration   6: 22359,229 ms/op
Iteration   7: 22260,136 ms/op
Iteration   8: 22222,330 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22280,261 ±(99.9%) 116,171 ms/op

  Histogram, ms/op:
    [22200,000, 22212,500) = 0
    [22212,500, 22225,000) = 2
    [22225,000, 22237,500) = 0
    [22237,500, 22250,000) = 0
    [22250,000, 22262,500) = 3
    [22262,500, 22275,000) = 1
    [22275,000, 22287,500) = 0
    [22287,500, 22300,000) = 0
    [22300,000, 22312,500) = 0
    [22312,500, 22325,000) = 0
    [22325,000, 22337,500) = 0
    [22337,500, 22350,000) = 0
    [22350,000, 22362,500) = 1
    [22362,500, 22375,000) = 0
    [22375,000, 22387,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  22222,330 ms/op
     p(50,0000) =  22260,272 ms/op
     p(90,0000) =  22387,785 ms/op
     p(95,0000) =  22387,785 ms/op
     p(99,0000) =  22387,785 ms/op
     p(99,9000) =  22387,785 ms/op
     p(99,9900) =  22387,785 ms/op
     p(99,9990) =  22387,785 ms/op
     p(99,9999) =  22387,785 ms/op
    p(100,0000) =  22387,785 ms/op


# Run complete. Total time: 00:07:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest     10000000           put    ss    8  22280,261 ± 116,171  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (10000000) = 22280.260789875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 31943,695 ms/op
# Warmup Iteration   2: 30588,091 ms/op
# Warmup Iteration   3: 27022,485 ms/op
# Warmup Iteration   4: 23070,055 ms/op
# Warmup Iteration   5: 22804,982 ms/op
# Warmup Iteration   6: 22364,535 ms/op
# Warmup Iteration   7: 22627,611 ms/op
# Warmup Iteration   8: 22738,437 ms/op
# Warmup Iteration   9: 22495,496 ms/op
# Warmup Iteration  10: 22785,704 ms/op
Iteration   1: 22793,889 ms/op
Iteration   2: 22677,075 ms/op
Iteration   3: 22910,419 ms/op
Iteration   4: 22610,559 ms/op
Iteration   5: 22808,915 ms/op
Iteration   6: 22828,526 ms/op
Iteration   7: 22700,194 ms/op
Iteration   8: 22846,142 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22771,965 ±(99.9%) 191,094 ms/op

  Histogram, ms/op:
    [22600,000, 22625,000) = 1
    [22625,000, 22650,000) = 0
    [22650,000, 22675,000) = 0
    [22675,000, 22700,000) = 1
    [22700,000, 22725,000) = 1
    [22725,000, 22750,000) = 0
    [22750,000, 22775,000) = 0
    [22775,000, 22800,000) = 1
    [22800,000, 22825,000) = 1
    [22825,000, 22850,000) = 2
    [22850,000, 22875,000) = 0
    [22875,000, 22900,000) = 0
    [22900,000, 22925,000) = 1
    [22925,000, 22950,000) = 0
    [22950,000, 22975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  22610,559 ms/op
     p(50,0000) =  22801,402 ms/op
     p(90,0000) =  22910,419 ms/op
     p(95,0000) =  22910,419 ms/op
     p(99,0000) =  22910,419 ms/op
     p(99,9000) =  22910,419 ms/op
     p(99,9900) =  22910,419 ms/op
     p(99,9990) =  22910,419 ms/op
     p(99,9999) =  22910,419 ms/op
    p(100,0000) =  22910,419 ms/op


# Run complete. Total time: 00:07:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest     10000000           put    ss    8  22771,965 ± 191,094  ms/op
tests.maptests.object.HppcObjMapTest (10000000) = 22771.96486975
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24662,631 ms/op
# Warmup Iteration   2: 22745,971 ms/op
# Warmup Iteration   3: 21826,664 ms/op
# Warmup Iteration   4: 22602,917 ms/op
# Warmup Iteration   5: 21939,651 ms/op
# Warmup Iteration   6: 21679,497 ms/op
# Warmup Iteration   7: 21687,625 ms/op
# Warmup Iteration   8: 21546,765 ms/op
# Warmup Iteration   9: 21170,328 ms/op
# Warmup Iteration  10: 20328,703 ms/op
Iteration   1: 20443,505 ms/op
Iteration   2: 19764,033 ms/op
Iteration   3: 19931,078 ms/op
Iteration   4: 19812,123 ms/op
Iteration   5: 18648,884 ms/op
Iteration   6: 18147,705 ms/op
Iteration   7: 19055,079 ms/op
Iteration   8: 19116,035 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  19364,805 ±(99.9%) 1444,491 ms/op

  Histogram, ms/op:
    [18000,000, 18250,000) = 1
    [18250,000, 18500,000) = 0
    [18500,000, 18750,000) = 1
    [18750,000, 19000,000) = 0
    [19000,000, 19250,000) = 2
    [19250,000, 19500,000) = 0
    [19500,000, 19750,000) = 0
    [19750,000, 20000,000) = 3
    [20000,000, 20250,000) = 0
    [20250,000, 20500,000) = 1
    [20500,000, 20750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  18147,705 ms/op
     p(50,0000) =  19440,034 ms/op
     p(90,0000) =  20443,505 ms/op
     p(95,0000) =  20443,505 ms/op
     p(99,0000) =  20443,505 ms/op
     p(99,9000) =  20443,505 ms/op
     p(99,9900) =  20443,505 ms/op
     p(99,9990) =  20443,505 ms/op
     p(99,9999) =  20443,505 ms/op
    p(100,0000) =  20443,505 ms/op


# Run complete. Total time: 00:06:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest     10000000           put    ss    8  19364,805 ± 1444,491  ms/op
tests.maptests.object.GsObjMapTest (10000000) = 19364.805113000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 37747,720 ms/op
# Warmup Iteration   2: 37633,134 ms/op
# Warmup Iteration   3: 35660,980 ms/op
# Warmup Iteration   4: 34500,546 ms/op
# Warmup Iteration   5: 33727,704 ms/op
# Warmup Iteration   6: 33169,016 ms/op
# Warmup Iteration   7: 32938,591 ms/op
# Warmup Iteration   8: 33766,186 ms/op
# Warmup Iteration   9: 32767,039 ms/op
# Warmup Iteration  10: 33794,682 ms/op
Iteration   1: 34230,687 ms/op
Iteration   2: 32925,694 ms/op
Iteration   3: 33250,406 ms/op
Iteration   4: 33789,517 ms/op
Iteration   5: 32265,070 ms/op
Iteration   6: 32880,144 ms/op
Iteration   7: 34269,022 ms/op
Iteration   8: 33258,488 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  33358,629 ±(99.9%) 1334,271 ms/op

  Histogram, ms/op:
    [32000,000, 32250,000) = 0
    [32250,000, 32500,000) = 1
    [32500,000, 32750,000) = 0
    [32750,000, 33000,000) = 2
    [33000,000, 33250,000) = 0
    [33250,000, 33500,000) = 2
    [33500,000, 33750,000) = 0
    [33750,000, 34000,000) = 1
    [34000,000, 34250,000) = 1
    [34250,000, 34500,000) = 1
    [34500,000, 34750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  32265,070 ms/op
     p(50,0000) =  33254,447 ms/op
     p(90,0000) =  34269,022 ms/op
     p(95,0000) =  34269,022 ms/op
     p(99,0000) =  34269,022 ms/op
     p(99,9000) =  34269,022 ms/op
     p(99,9900) =  34269,022 ms/op
     p(99,9990) =  34269,022 ms/op
     p(99,9999) =  34269,022 ms/op
    p(100,0000) =  34269,022 ms/op


# Run complete. Total time: 00:10:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest     10000000           put    ss    8  33358,629 ± 1334,271  ms/op
tests.maptests.object.JdkMapTest (10000000) = 33358.628542375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 33316,977 ms/op
# Warmup Iteration   2: 30936,998 ms/op
# Warmup Iteration   3: 28434,432 ms/op
# Warmup Iteration   4: 29013,058 ms/op
# Warmup Iteration   5: 27647,531 ms/op
# Warmup Iteration   6: 26443,546 ms/op
# Warmup Iteration   7: 26324,923 ms/op
# Warmup Iteration   8: 26652,571 ms/op
# Warmup Iteration   9: 25645,414 ms/op
# Warmup Iteration  10: 27234,893 ms/op
Iteration   1: 25383,571 ms/op
Iteration   2: 25661,695 ms/op
Iteration   3: 26613,957 ms/op
Iteration   4: 26462,896 ms/op
Iteration   5: 26563,826 ms/op
Iteration   6: 25539,927 ms/op
Iteration   7: 26310,435 ms/op
Iteration   8: 25392,349 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  25991,082 ±(99.9%) 1042,281 ms/op

  Histogram, ms/op:
    [25000,000, 25125,000) = 0
    [25125,000, 25250,000) = 0
    [25250,000, 25375,000) = 0
    [25375,000, 25500,000) = 2
    [25500,000, 25625,000) = 1
    [25625,000, 25750,000) = 1
    [25750,000, 25875,000) = 0
    [25875,000, 26000,000) = 0
    [26000,000, 26125,000) = 0
    [26125,000, 26250,000) = 0
    [26250,000, 26375,000) = 1
    [26375,000, 26500,000) = 1
    [26500,000, 26625,000) = 2
    [26625,000, 26750,000) = 0
    [26750,000, 26875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  25383,571 ms/op
     p(50,0000) =  25986,065 ms/op
     p(90,0000) =  26613,957 ms/op
     p(95,0000) =  26613,957 ms/op
     p(99,0000) =  26613,957 ms/op
     p(99,9000) =  26613,957 ms/op
     p(99,9900) =  26613,957 ms/op
     p(99,9990) =  26613,957 ms/op
     p(99,9999) =  26613,957 ms/op
    p(100,0000) =  26613,957 ms/op


# Run complete. Total time: 00:08:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity     10000000           put    ss    8  25991,082 ± 1042,281  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (10000000) = 25991.082128125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 47752,499 ms/op
# Warmup Iteration   2: 45275,889 ms/op
# Warmup Iteration   3: 38797,257 ms/op
# Warmup Iteration   4: 33889,548 ms/op
# Warmup Iteration   5: 33611,235 ms/op
# Warmup Iteration   6: 33840,189 ms/op
# Warmup Iteration   7: 33286,904 ms/op
# Warmup Iteration   8: 33445,798 ms/op
# Warmup Iteration   9: 33230,440 ms/op
# Warmup Iteration  10: 33609,440 ms/op
Iteration   1: 33151,127 ms/op
Iteration   2: 33536,933 ms/op
Iteration   3: 33890,844 ms/op
Iteration   4: 33524,467 ms/op
Iteration   5: 33154,654 ms/op
Iteration   6: 33303,619 ms/op
Iteration   7: 33455,917 ms/op
Iteration   8: 33672,580 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  33461,268 ±(99.9%) 486,918 ms/op

  Histogram, ms/op:
    [33100,000, 33150,000) = 0
    [33150,000, 33200,000) = 2
    [33200,000, 33250,000) = 0
    [33250,000, 33300,000) = 0
    [33300,000, 33350,000) = 1
    [33350,000, 33400,000) = 0
    [33400,000, 33450,000) = 0
    [33450,000, 33500,000) = 1
    [33500,000, 33550,000) = 2
    [33550,000, 33600,000) = 0
    [33600,000, 33650,000) = 0
    [33650,000, 33700,000) = 1
    [33700,000, 33750,000) = 0
    [33750,000, 33800,000) = 0
    [33800,000, 33850,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  33151,127 ms/op
     p(50,0000) =  33490,192 ms/op
     p(90,0000) =  33890,844 ms/op
     p(95,0000) =  33890,844 ms/op
     p(99,0000) =  33890,844 ms/op
     p(99,9000) =  33890,844 ms/op
     p(99,9900) =  33890,844 ms/op
     p(99,9990) =  33890,844 ms/op
     p(99,9999) =  33890,844 ms/op
    p(100,0000) =  33890,844 ms/op


# Run complete. Total time: 00:10:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest     10000000           put    ss    8  33461,268 ± 486,918  ms/op
tests.maptests.object.TroveJbObjMapTest (10000000) = 33461.267645375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 39773,663 ms/op
# Warmup Iteration   2: 37936,107 ms/op
# Warmup Iteration   3: 33936,469 ms/op
# Warmup Iteration   4: 29981,756 ms/op
# Warmup Iteration   5: 29319,126 ms/op
# Warmup Iteration   6: 29387,993 ms/op
# Warmup Iteration   7: 29387,123 ms/op
# Warmup Iteration   8: 29379,724 ms/op
# Warmup Iteration   9: 29403,561 ms/op
# Warmup Iteration  10: 29367,303 ms/op
Iteration   1: 29488,498 ms/op
Iteration   2: 29405,761 ms/op
Iteration   3: 29447,561 ms/op
Iteration   4: 29489,745 ms/op
Iteration   5: 29469,928 ms/op
Iteration   6: 29579,740 ms/op
Iteration   7: 29445,031 ms/op
Iteration   8: 29579,330 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  29488,199 ±(99.9%) 119,472 ms/op

  Histogram, ms/op:
    [29400,000, 29412,500) = 1
    [29412,500, 29425,000) = 0
    [29425,000, 29437,500) = 0
    [29437,500, 29450,000) = 2
    [29450,000, 29462,500) = 0
    [29462,500, 29475,000) = 1
    [29475,000, 29487,500) = 0
    [29487,500, 29500,000) = 2
    [29500,000, 29512,500) = 0
    [29512,500, 29525,000) = 0
    [29525,000, 29537,500) = 0
    [29537,500, 29550,000) = 0
    [29550,000, 29562,500) = 0
    [29562,500, 29575,000) = 0
    [29575,000, 29587,500) = 2

  Percentiles, ms/op:
      p(0,0000) =  29405,761 ms/op
     p(50,0000) =  29479,213 ms/op
     p(90,0000) =  29579,740 ms/op
     p(95,0000) =  29579,740 ms/op
     p(99,0000) =  29579,740 ms/op
     p(99,9000) =  29579,740 ms/op
     p(99,9900) =  29579,740 ms/op
     p(99,9990) =  29579,740 ms/op
     p(99,9999) =  29579,740 ms/op
    p(100,0000) =  29579,740 ms/op


# Run complete. Total time: 00:09:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest     10000000           put    ss    8  29488,199 ± 119,472  ms/op
tests.maptests.object.TroveObjMapTest (10000000) = 29488.1991605
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 32063,995 ms/op
# Warmup Iteration   2: 30845,734 ms/op
# Warmup Iteration   3: 27111,611 ms/op
# Warmup Iteration   4: 22539,678 ms/op
# Warmup Iteration   5: 22051,086 ms/op
# Warmup Iteration   6: 22089,849 ms/op
# Warmup Iteration   7: 22087,647 ms/op
# Warmup Iteration   8: 22072,643 ms/op
# Warmup Iteration   9: 22121,701 ms/op
# Warmup Iteration  10: 22014,028 ms/op
Iteration   1: 22171,744 ms/op
Iteration   2: 21994,411 ms/op
Iteration   3: 22676,642 ms/op
Iteration   4: 23325,755 ms/op
Iteration   5: 22289,877 ms/op
Iteration   6: 22401,181 ms/op
Iteration   7: 22288,609 ms/op
Iteration   8: 22275,821 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22428,005 ±(99.9%) 786,285 ms/op

  Histogram, ms/op:
    [21000,000, 21250,000) = 0
    [21250,000, 21500,000) = 0
    [21500,000, 21750,000) = 0
    [21750,000, 22000,000) = 1
    [22000,000, 22250,000) = 1
    [22250,000, 22500,000) = 4
    [22500,000, 22750,000) = 1
    [22750,000, 23000,000) = 0
    [23000,000, 23250,000) = 0
    [23250,000, 23500,000) = 1
    [23500,000, 23750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  21994,411 ms/op
     p(50,0000) =  22289,243 ms/op
     p(90,0000) =  23325,755 ms/op
     p(95,0000) =  23325,755 ms/op
     p(99,0000) =  23325,755 ms/op
     p(99,9000) =  23325,755 ms/op
     p(99,9900) =  23325,755 ms/op
     p(99,9990) =  23325,755 ms/op
     p(99,9999) =  23325,755 ms/op
    p(100,0000) =  23325,755 ms/op


# Run complete. Total time: 00:07:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest     10000000           put    ss    8  22428,005 ± 786,285  ms/op
tests.maptests.article_examples.ObjObjMapTest (10000000) = 22428.005025499995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8804,363 ms/op
# Warmup Iteration   2: 8667,277 ms/op
# Warmup Iteration   3: 8578,136 ms/op
# Warmup Iteration   4: 8637,199 ms/op
# Warmup Iteration   5: 8419,269 ms/op
# Warmup Iteration   6: 8524,287 ms/op
# Warmup Iteration   7: 8752,101 ms/op
# Warmup Iteration   8: 8460,474 ms/op
# Warmup Iteration   9: 8593,722 ms/op
# Warmup Iteration  10: 8595,011 ms/op
Iteration   1: 8553,528 ms/op
Iteration   2: 8381,265 ms/op
Iteration   3: 8531,463 ms/op
Iteration   4: 8712,577 ms/op
Iteration   5: 8586,874 ms/op
Iteration   6: 8465,135 ms/op
Iteration   7: 8561,772 ms/op
Iteration   8: 8532,994 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8540,701 ±(99.9%) 182,185 ms/op

  Histogram, ms/op:
    [8300,000, 8350,000) = 0
    [8350,000, 8400,000) = 1
    [8400,000, 8450,000) = 0
    [8450,000, 8500,000) = 1
    [8500,000, 8550,000) = 2
    [8550,000, 8600,000) = 3
    [8600,000, 8650,000) = 0
    [8650,000, 8700,000) = 0
    [8700,000, 8750,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8381,265 ms/op
     p(50,0000) =   8543,261 ms/op
     p(90,0000) =   8712,577 ms/op
     p(95,0000) =   8712,577 ms/op
     p(99,0000) =   8712,577 ms/op
     p(99,9000) =   8712,577 ms/op
     p(99,9900) =   8712,577 ms/op
     p(99,9990) =   8712,577 ms/op
     p(99,9999) =   8712,577 ms/op
    p(100,0000) =   8712,577 ms/op


# Run complete. Total time: 00:02:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest     10000000           put    ss    8  8540,701 ± 182,185  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (10000000) = 8540.70086875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9672,698 ms/op
# Warmup Iteration   2: 9553,625 ms/op
# Warmup Iteration   3: 9489,809 ms/op
# Warmup Iteration   4: 9396,686 ms/op
# Warmup Iteration   5: 9571,468 ms/op
# Warmup Iteration   6: 9576,456 ms/op
# Warmup Iteration   7: 9486,508 ms/op
# Warmup Iteration   8: 9542,474 ms/op
# Warmup Iteration   9: 9588,314 ms/op
# Warmup Iteration  10: 9517,969 ms/op
Iteration   1: 9396,846 ms/op
Iteration   2: 9420,123 ms/op
Iteration   3: 9466,321 ms/op
Iteration   4: 9441,566 ms/op
Iteration   5: 9436,422 ms/op
Iteration   6: 9449,671 ms/op
Iteration   7: 9401,229 ms/op
Iteration   8: 9472,686 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9435,608 ±(99.9%) 53,477 ms/op

  Histogram, ms/op:
    [9390,000, 9395,000) = 0
    [9395,000, 9400,000) = 1
    [9400,000, 9405,000) = 1
    [9405,000, 9410,000) = 0
    [9410,000, 9415,000) = 0
    [9415,000, 9420,000) = 0
    [9420,000, 9425,000) = 1
    [9425,000, 9430,000) = 0
    [9430,000, 9435,000) = 0
    [9435,000, 9440,000) = 1
    [9440,000, 9445,000) = 1
    [9445,000, 9450,000) = 1
    [9450,000, 9455,000) = 0
    [9455,000, 9460,000) = 0
    [9460,000, 9465,000) = 0
    [9465,000, 9470,000) = 1
    [9470,000, 9475,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   9396,846 ms/op
     p(50,0000) =   9438,994 ms/op
     p(90,0000) =   9472,686 ms/op
     p(95,0000) =   9472,686 ms/op
     p(99,0000) =   9472,686 ms/op
     p(99,9000) =   9472,686 ms/op
     p(99,9900) =   9472,686 ms/op
     p(99,9990) =   9472,686 ms/op
     p(99,9999) =   9472,686 ms/op
    p(100,0000) =   9472,686 ms/op


# Run complete. Total time: 00:02:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest     10000000           put    ss    8  9435,608 ± 53,477  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (10000000) = 9435.608055749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8887,816 ms/op
# Warmup Iteration   2: 8660,783 ms/op
# Warmup Iteration   3: 8576,095 ms/op
# Warmup Iteration   4: 8612,707 ms/op
# Warmup Iteration   5: 8771,377 ms/op
# Warmup Iteration   6: 8711,426 ms/op
# Warmup Iteration   7: 8630,049 ms/op
# Warmup Iteration   8: 8769,607 ms/op
# Warmup Iteration   9: 8717,009 ms/op
# Warmup Iteration  10: 8751,275 ms/op
Iteration   1: 8558,584 ms/op
Iteration   2: 8767,156 ms/op
Iteration   3: 8742,551 ms/op
Iteration   4: 8743,266 ms/op
Iteration   5: 8635,585 ms/op
Iteration   6: 8420,390 ms/op
Iteration   7: 8586,536 ms/op
Iteration   8: 8326,971 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8597,630 ±(99.9%) 305,497 ms/op

  Histogram, ms/op:
    [8300,000, 8350,000) = 1
    [8350,000, 8400,000) = 0
    [8400,000, 8450,000) = 1
    [8450,000, 8500,000) = 0
    [8500,000, 8550,000) = 0
    [8550,000, 8600,000) = 2
    [8600,000, 8650,000) = 1
    [8650,000, 8700,000) = 0
    [8700,000, 8750,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   8326,971 ms/op
     p(50,0000) =   8611,061 ms/op
     p(90,0000) =   8767,156 ms/op
     p(95,0000) =   8767,156 ms/op
     p(99,0000) =   8767,156 ms/op
     p(99,9000) =   8767,156 ms/op
     p(99,9900) =   8767,156 ms/op
     p(99,9990) =   8767,156 ms/op
     p(99,9999) =   8767,156 ms/op
    p(100,0000) =   8767,156 ms/op


# Run complete. Total time: 00:02:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest     10000000           put    ss    8  8597,630 ± 305,497  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (10000000) = 8597.629947124999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8920,871 ms/op
# Warmup Iteration   2: 8762,015 ms/op
# Warmup Iteration   3: 8574,479 ms/op
# Warmup Iteration   4: 8796,496 ms/op
# Warmup Iteration   5: 8788,884 ms/op
# Warmup Iteration   6: 8813,560 ms/op
# Warmup Iteration   7: 8816,519 ms/op
# Warmup Iteration   8: 8888,605 ms/op
# Warmup Iteration   9: 8827,663 ms/op
# Warmup Iteration  10: 8808,659 ms/op
Iteration   1: 8855,868 ms/op
Iteration   2: 8862,069 ms/op
Iteration   3: 8754,385 ms/op
Iteration   4: 8580,733 ms/op
Iteration   5: 8682,209 ms/op
Iteration   6: 8798,601 ms/op
Iteration   7: 8821,960 ms/op
Iteration   8: 8867,213 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8777,880 ±(99.9%) 194,037 ms/op

  Histogram, ms/op:
    [8500,000, 8525,000) = 0
    [8525,000, 8550,000) = 0
    [8550,000, 8575,000) = 0
    [8575,000, 8600,000) = 1
    [8600,000, 8625,000) = 0
    [8625,000, 8650,000) = 0
    [8650,000, 8675,000) = 0
    [8675,000, 8700,000) = 1
    [8700,000, 8725,000) = 0
    [8725,000, 8750,000) = 0
    [8750,000, 8775,000) = 1
    [8775,000, 8800,000) = 1
    [8800,000, 8825,000) = 1
    [8825,000, 8850,000) = 0
    [8850,000, 8875,000) = 3

  Percentiles, ms/op:
      p(0,0000) =   8580,733 ms/op
     p(50,0000) =   8810,281 ms/op
     p(90,0000) =   8867,213 ms/op
     p(95,0000) =   8867,213 ms/op
     p(99,0000) =   8867,213 ms/op
     p(99,9000) =   8867,213 ms/op
     p(99,9900) =   8867,213 ms/op
     p(99,9990) =   8867,213 ms/op
     p(99,9999) =   8867,213 ms/op
    p(100,0000) =   8867,213 ms/op


# Run complete. Total time: 00:02:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest     10000000           put    ss    8  8777,880 ± 194,037  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (10000000) = 8777.879755625001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25505,025 ms/op
# Warmup Iteration   2: 23914,594 ms/op
# Warmup Iteration   3: 22144,088 ms/op
# Warmup Iteration   4: 19397,856 ms/op
# Warmup Iteration   5: 18887,802 ms/op
# Warmup Iteration   6: 18712,596 ms/op
# Warmup Iteration   7: 18817,711 ms/op
# Warmup Iteration   8: 18812,058 ms/op
# Warmup Iteration   9: 18694,407 ms/op
# Warmup Iteration  10: 18685,251 ms/op
Iteration   1: 18733,173 ms/op
Iteration   2: 18730,472 ms/op
Iteration   3: 18635,869 ms/op
Iteration   4: 18665,812 ms/op
Iteration   5: 18733,088 ms/op
Iteration   6: 18769,789 ms/op
Iteration   7: 18983,899 ms/op
Iteration   8: 19161,255 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18801,670 ±(99.9%) 341,977 ms/op

  Histogram, ms/op:
    [18600,000, 18650,000) = 1
    [18650,000, 18700,000) = 1
    [18700,000, 18750,000) = 3
    [18750,000, 18800,000) = 1
    [18800,000, 18850,000) = 0
    [18850,000, 18900,000) = 0
    [18900,000, 18950,000) = 0
    [18950,000, 19000,000) = 1
    [19000,000, 19050,000) = 0
    [19050,000, 19100,000) = 0
    [19100,000, 19150,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  18635,869 ms/op
     p(50,0000) =  18733,130 ms/op
     p(90,0000) =  19161,255 ms/op
     p(95,0000) =  19161,255 ms/op
     p(99,0000) =  19161,255 ms/op
     p(99,9000) =  19161,255 ms/op
     p(99,9900) =  19161,255 ms/op
     p(99,9990) =  19161,255 ms/op
     p(99,9999) =  19161,255 ms/op
    p(100,0000) =  19161,255 ms/op


# Run complete. Total time: 00:05:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest     10000000           put    ss    8  18801,670 ± 341,977  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (10000000) = 18801.669636249997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18529,379 ms/op
# Warmup Iteration   2: 18631,488 ms/op
# Warmup Iteration   3: 18501,937 ms/op
# Warmup Iteration   4: 18693,241 ms/op
# Warmup Iteration   5: 18649,201 ms/op
# Warmup Iteration   6: 18643,532 ms/op
# Warmup Iteration   7: 18725,426 ms/op
# Warmup Iteration   8: 18662,887 ms/op
# Warmup Iteration   9: 18705,475 ms/op
# Warmup Iteration  10: 18721,098 ms/op
Iteration   1: 18735,061 ms/op
Iteration   2: 18765,409 ms/op
Iteration   3: 18743,237 ms/op
Iteration   4: 18866,142 ms/op
Iteration   5: 18723,650 ms/op
Iteration   6: 18714,678 ms/op
Iteration   7: 18588,207 ms/op
Iteration   8: 18593,801 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18716,273 ±(99.9%) 173,155 ms/op

  Histogram, ms/op:
    [18500,000, 18525,000) = 0
    [18525,000, 18550,000) = 0
    [18550,000, 18575,000) = 0
    [18575,000, 18600,000) = 2
    [18600,000, 18625,000) = 0
    [18625,000, 18650,000) = 0
    [18650,000, 18675,000) = 0
    [18675,000, 18700,000) = 0
    [18700,000, 18725,000) = 2
    [18725,000, 18750,000) = 2
    [18750,000, 18775,000) = 1
    [18775,000, 18800,000) = 0
    [18800,000, 18825,000) = 0
    [18825,000, 18850,000) = 0
    [18850,000, 18875,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  18588,207 ms/op
     p(50,0000) =  18729,356 ms/op
     p(90,0000) =  18866,142 ms/op
     p(95,0000) =  18866,142 ms/op
     p(99,0000) =  18866,142 ms/op
     p(99,9000) =  18866,142 ms/op
     p(99,9900) =  18866,142 ms/op
     p(99,9990) =  18866,142 ms/op
     p(99,9999) =  18866,142 ms/op
    p(100,0000) =  18866,142 ms/op


# Run complete. Total time: 00:05:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest     10000000           put    ss    8  18716,273 ± 173,155  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (10000000) = 18716.273077874997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 17579,447 ms/op
# Warmup Iteration   2: 16759,578 ms/op
# Warmup Iteration   3: 15192,030 ms/op
# Warmup Iteration   4: 12893,195 ms/op
# Warmup Iteration   5: 12680,752 ms/op
# Warmup Iteration   6: 13410,269 ms/op
# Warmup Iteration   7: 12625,755 ms/op
# Warmup Iteration   8: 12221,240 ms/op
# Warmup Iteration   9: 11591,771 ms/op
# Warmup Iteration  10: 11714,663 ms/op
Iteration   1: 11805,888 ms/op
Iteration   2: 11457,997 ms/op
Iteration   3: 11542,284 ms/op
Iteration   4: 11689,542 ms/op
Iteration   5: 11632,174 ms/op
Iteration   6: 11609,434 ms/op
Iteration   7: 11842,065 ms/op
Iteration   8: 11650,972 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11653,794 ±(99.9%) 243,001 ms/op

  Histogram, ms/op:
    [11400,000, 11450,000) = 0
    [11450,000, 11500,000) = 1
    [11500,000, 11550,000) = 1
    [11550,000, 11600,000) = 0
    [11600,000, 11650,000) = 2
    [11650,000, 11700,000) = 2
    [11700,000, 11750,000) = 0
    [11750,000, 11800,000) = 0
    [11800,000, 11850,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  11457,997 ms/op
     p(50,0000) =  11641,573 ms/op
     p(90,0000) =  11842,065 ms/op
     p(95,0000) =  11842,065 ms/op
     p(99,0000) =  11842,065 ms/op
     p(99,9000) =  11842,065 ms/op
     p(99,9900) =  11842,065 ms/op
     p(99,9990) =  11842,065 ms/op
     p(99,9999) =  11842,065 ms/op
    p(100,0000) =  11842,065 ms/op


# Run complete. Total time: 00:03:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest     10000000           put    ss    8  11653,794 ± 243,001  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (10000000) = 11653.794499374999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19308,658 ms/op
# Warmup Iteration   2: 18868,669 ms/op
# Warmup Iteration   3: 16955,424 ms/op
# Warmup Iteration   4: 14609,863 ms/op
# Warmup Iteration   5: 14009,198 ms/op
# Warmup Iteration   6: 13784,234 ms/op
# Warmup Iteration   7: 13685,417 ms/op
# Warmup Iteration   8: 13810,865 ms/op
# Warmup Iteration   9: 13764,544 ms/op
# Warmup Iteration  10: 13576,311 ms/op
Iteration   1: 13634,392 ms/op
Iteration   2: 13758,645 ms/op
Iteration   3: 13564,062 ms/op
Iteration   4: 13734,703 ms/op
Iteration   5: 13721,956 ms/op
Iteration   6: 13687,323 ms/op
Iteration   7: 13396,674 ms/op
Iteration   8: 13616,575 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13639,291 ±(99.9%) 225,710 ms/op

  Histogram, ms/op:
    [13300,000, 13350,000) = 0
    [13350,000, 13400,000) = 1
    [13400,000, 13450,000) = 0
    [13450,000, 13500,000) = 0
    [13500,000, 13550,000) = 0
    [13550,000, 13600,000) = 1
    [13600,000, 13650,000) = 2
    [13650,000, 13700,000) = 1
    [13700,000, 13750,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  13396,674 ms/op
     p(50,0000) =  13660,857 ms/op
     p(90,0000) =  13758,645 ms/op
     p(95,0000) =  13758,645 ms/op
     p(99,0000) =  13758,645 ms/op
     p(99,9000) =  13758,645 ms/op
     p(99,9900) =  13758,645 ms/op
     p(99,9990) =  13758,645 ms/op
     p(99,9999) =  13758,645 ms/op
    p(100,0000) =  13758,645 ms/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest     10000000           put    ss    8  13639,291 ± 225,710  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (10000000) = 13639.2911305
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 22753,975 ms/op
# Warmup Iteration   2: 22061,735 ms/op
# Warmup Iteration   3: 18276,084 ms/op
# Warmup Iteration   4: 14900,488 ms/op
# Warmup Iteration   5: 13909,827 ms/op
# Warmup Iteration   6: 13980,376 ms/op
# Warmup Iteration   7: 14085,030 ms/op
# Warmup Iteration   8: 13936,887 ms/op
# Warmup Iteration   9: 13979,208 ms/op
# Warmup Iteration  10: 14161,500 ms/op
Iteration   1: 13921,320 ms/op
Iteration   2: 14146,932 ms/op
Iteration   3: 13929,086 ms/op
Iteration   4: 14111,660 ms/op
Iteration   5: 14112,286 ms/op
Iteration   6: 13916,522 ms/op
Iteration   7: 14097,179 ms/op
Iteration   8: 13973,633 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  14026,077 ±(99.9%) 190,584 ms/op

  Histogram, ms/op:
    [13900,000, 13925,000) = 2
    [13925,000, 13950,000) = 1
    [13950,000, 13975,000) = 1
    [13975,000, 14000,000) = 0
    [14000,000, 14025,000) = 0
    [14025,000, 14050,000) = 0
    [14050,000, 14075,000) = 0
    [14075,000, 14100,000) = 1
    [14100,000, 14125,000) = 2
    [14125,000, 14150,000) = 1
    [14150,000, 14175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13916,522 ms/op
     p(50,0000) =  14035,406 ms/op
     p(90,0000) =  14146,932 ms/op
     p(95,0000) =  14146,932 ms/op
     p(99,0000) =  14146,932 ms/op
     p(99,9000) =  14146,932 ms/op
     p(99,9900) =  14146,932 ms/op
     p(99,9990) =  14146,932 ms/op
     p(99,9999) =  14146,932 ms/op
    p(100,0000) =  14146,932 ms/op


# Run complete. Total time: 00:04:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest     10000000           put    ss    8  14026,077 ± 190,584  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (10000000) = 14026.077293375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18797,977 ms/op
# Warmup Iteration   2: 18504,953 ms/op
# Warmup Iteration   3: 17293,958 ms/op
# Warmup Iteration   4: 14596,485 ms/op
# Warmup Iteration   5: 14033,173 ms/op
# Warmup Iteration   6: 13927,621 ms/op
# Warmup Iteration   7: 13962,912 ms/op
# Warmup Iteration   8: 13784,958 ms/op
# Warmup Iteration   9: 13899,137 ms/op
# Warmup Iteration  10: 13951,699 ms/op
Iteration   1: 13971,324 ms/op
Iteration   2: 13711,459 ms/op
Iteration   3: 13727,170 ms/op
Iteration   4: 13740,513 ms/op
Iteration   5: 13845,607 ms/op
Iteration   6: 13898,844 ms/op
Iteration   7: 13710,557 ms/op
Iteration   8: 13660,660 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13783,267 ±(99.9%) 208,272 ms/op

  Histogram, ms/op:
    [13600,000, 13625,000) = 0
    [13625,000, 13650,000) = 0
    [13650,000, 13675,000) = 1
    [13675,000, 13700,000) = 0
    [13700,000, 13725,000) = 2
    [13725,000, 13750,000) = 2
    [13750,000, 13775,000) = 0
    [13775,000, 13800,000) = 0
    [13800,000, 13825,000) = 0
    [13825,000, 13850,000) = 1
    [13850,000, 13875,000) = 0
    [13875,000, 13900,000) = 1
    [13900,000, 13925,000) = 0
    [13925,000, 13950,000) = 0
    [13950,000, 13975,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  13660,660 ms/op
     p(50,0000) =  13733,841 ms/op
     p(90,0000) =  13971,324 ms/op
     p(95,0000) =  13971,324 ms/op
     p(99,0000) =  13971,324 ms/op
     p(99,9000) =  13971,324 ms/op
     p(99,9900) =  13971,324 ms/op
     p(99,9990) =  13971,324 ms/op
     p(99,9999) =  13971,324 ms/op
    p(100,0000) =  13971,324 ms/op


# Run complete. Total time: 00:04:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest     10000000           put    ss    8  13783,267 ± 208,272  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (10000000) = 13783.266615249999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30838,296 ms/op
# Warmup Iteration   2: 29514,539 ms/op
# Warmup Iteration   3: 27048,394 ms/op
# Warmup Iteration   4: 25014,593 ms/op
# Warmup Iteration   5: 24891,483 ms/op
# Warmup Iteration   6: 24853,440 ms/op
# Warmup Iteration   7: 24989,139 ms/op
# Warmup Iteration   8: 24942,385 ms/op
# Warmup Iteration   9: 24912,015 ms/op
# Warmup Iteration  10: 24854,201 ms/op
Iteration   1: 24811,070 ms/op
Iteration   2: 24930,137 ms/op
Iteration   3: 25014,262 ms/op
Iteration   4: 25046,850 ms/op
Iteration   5: 24998,503 ms/op
Iteration   6: 24875,141 ms/op
Iteration   7: 24916,515 ms/op
Iteration   8: 24953,579 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  24943,257 ±(99.9%) 147,982 ms/op

  Histogram, ms/op:
    [24800,000, 24825,000) = 1
    [24825,000, 24850,000) = 0
    [24850,000, 24875,000) = 0
    [24875,000, 24900,000) = 1
    [24900,000, 24925,000) = 1
    [24925,000, 24950,000) = 1
    [24950,000, 24975,000) = 1
    [24975,000, 25000,000) = 1
    [25000,000, 25025,000) = 1
    [25025,000, 25050,000) = 1
    [25050,000, 25075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  24811,070 ms/op
     p(50,0000) =  24941,858 ms/op
     p(90,0000) =  25046,850 ms/op
     p(95,0000) =  25046,850 ms/op
     p(99,0000) =  25046,850 ms/op
     p(99,9000) =  25046,850 ms/op
     p(99,9900) =  25046,850 ms/op
     p(99,9990) =  25046,850 ms/op
     p(99,9999) =  25046,850 ms/op
    p(100,0000) =  25046,850 ms/op


# Run complete. Total time: 00:07:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest     10000000           put    ss    8  24943,257 ± 147,982  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (10000000) = 24943.257022375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 29370,633 ms/op
# Warmup Iteration   2: 27772,094 ms/op
# Warmup Iteration   3: 26313,920 ms/op
# Warmup Iteration   4: 24767,488 ms/op
# Warmup Iteration   5: 24999,591 ms/op
# Warmup Iteration   6: 24843,718 ms/op
# Warmup Iteration   7: 25005,114 ms/op
# Warmup Iteration   8: 24767,845 ms/op
# Warmup Iteration   9: 24710,690 ms/op
# Warmup Iteration  10: 24836,610 ms/op
Iteration   1: 24623,498 ms/op
Iteration   2: 24979,963 ms/op
Iteration   3: 24816,909 ms/op
Iteration   4: 25483,480 ms/op
Iteration   5: 25062,624 ms/op
Iteration   6: 25034,217 ms/op
Iteration   7: 25173,127 ms/op
Iteration   8: 24867,555 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  25005,172 ±(99.9%) 491,102 ms/op

  Histogram, ms/op:
    [24600,000, 24650,000) = 1
    [24650,000, 24700,000) = 0
    [24700,000, 24750,000) = 0
    [24750,000, 24800,000) = 0
    [24800,000, 24850,000) = 1
    [24850,000, 24900,000) = 1
    [24900,000, 24950,000) = 0
    [24950,000, 25000,000) = 1
    [25000,000, 25050,000) = 1
    [25050,000, 25100,000) = 1
    [25100,000, 25150,000) = 0
    [25150,000, 25200,000) = 1
    [25200,000, 25250,000) = 0
    [25250,000, 25300,000) = 0
    [25300,000, 25350,000) = 0
    [25350,000, 25400,000) = 0
    [25400,000, 25450,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  24623,498 ms/op
     p(50,0000) =  25007,090 ms/op
     p(90,0000) =  25483,480 ms/op
     p(95,0000) =  25483,480 ms/op
     p(99,0000) =  25483,480 ms/op
     p(99,9000) =  25483,480 ms/op
     p(99,9900) =  25483,480 ms/op
     p(99,9990) =  25483,480 ms/op
     p(99,9999) =  25483,480 ms/op
    p(100,0000) =  25483,480 ms/op


# Run complete. Total time: 00:07:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest     10000000           put    ss    8  25005,172 ± 491,102  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (10000000) = 25005.171611125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 29782,953 ms/op
# Warmup Iteration   2: 26665,731 ms/op
# Warmup Iteration   3: 23283,601 ms/op
# Warmup Iteration   4: 18757,485 ms/op
# Warmup Iteration   5: 16925,159 ms/op
# Warmup Iteration   6: 18578,677 ms/op
# Warmup Iteration   7: 19911,369 ms/op
# Warmup Iteration   8: 21662,666 ms/op
# Warmup Iteration   9: 22792,797 ms/op
# Warmup Iteration  10: 24624,035 ms/op
Iteration   1: 26371,752 ms/op
Iteration   2: 27102,877 ms/op
Iteration   3: 27571,812 ms/op
Iteration   4: 29403,430 ms/op
Iteration   5: 28638,184 ms/op
Iteration   6: 28642,671 ms/op
Iteration   7: 28934,771 ms/op
Iteration   8: 28689,641 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  28169,392 ±(99.9%) 1985,555 ms/op

  Histogram, ms/op:
    [26000,000, 26250,000) = 0
    [26250,000, 26500,000) = 1
    [26500,000, 26750,000) = 0
    [26750,000, 27000,000) = 0
    [27000,000, 27250,000) = 1
    [27250,000, 27500,000) = 0
    [27500,000, 27750,000) = 1
    [27750,000, 28000,000) = 0
    [28000,000, 28250,000) = 0
    [28250,000, 28500,000) = 0
    [28500,000, 28750,000) = 3
    [28750,000, 29000,000) = 1
    [29000,000, 29250,000) = 0
    [29250,000, 29500,000) = 1
    [29500,000, 29750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  26371,752 ms/op
     p(50,0000) =  28640,428 ms/op
     p(90,0000) =  29403,430 ms/op
     p(95,0000) =  29403,430 ms/op
     p(99,0000) =  29403,430 ms/op
     p(99,9000) =  29403,430 ms/op
     p(99,9900) =  29403,430 ms/op
     p(99,9990) =  29403,430 ms/op
     p(99,9999) =  29403,430 ms/op
    p(100,0000) =  29403,430 ms/op


# Run complete. Total time: 00:07:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest     10000000           put    ss    8  28169,392 ± 1985,555  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (10000000) = 28169.39234125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24942,191 ms/op
# Warmup Iteration   2: 22083,785 ms/op
# Warmup Iteration   3: 21997,861 ms/op
# Warmup Iteration   4: 21756,293 ms/op
# Warmup Iteration   5: 21234,794 ms/op
# Warmup Iteration   6: 20629,885 ms/op
# Warmup Iteration   7: 20153,884 ms/op
# Warmup Iteration   8: 19783,369 ms/op
# Warmup Iteration   9: 19338,053 ms/op
# Warmup Iteration  10: 19104,923 ms/op
Iteration   1: 18024,323 ms/op
Iteration   2: 18017,139 ms/op
Iteration   3: 17093,413 ms/op
Iteration   4: 17760,465 ms/op
Iteration   5: 17943,490 ms/op
Iteration   6: 17118,368 ms/op
Iteration   7: 17027,476 ms/op
Iteration   8: 17960,374 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  17618,131 ±(99.9%) 867,616 ms/op

  Histogram, ms/op:
    [17000,000, 17100,000) = 2
    [17100,000, 17200,000) = 1
    [17200,000, 17300,000) = 0
    [17300,000, 17400,000) = 0
    [17400,000, 17500,000) = 0
    [17500,000, 17600,000) = 0
    [17600,000, 17700,000) = 0
    [17700,000, 17800,000) = 1
    [17800,000, 17900,000) = 0
    [17900,000, 18000,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  17027,476 ms/op
     p(50,0000) =  17851,978 ms/op
     p(90,0000) =  18024,323 ms/op
     p(95,0000) =  18024,323 ms/op
     p(99,0000) =  18024,323 ms/op
     p(99,9000) =  18024,323 ms/op
     p(99,9900) =  18024,323 ms/op
     p(99,9990) =  18024,323 ms/op
     p(99,9999) =  18024,323 ms/op
    p(100,0000) =  18024,323 ms/op


# Run complete. Total time: 00:05:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest     10000000           put    ss    8  17618,131 ± 867,616  ms/op
tests.maptests.identity_object.GsIdentityMapTest (10000000) = 17618.130935375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 34936,653 ms/op
# Warmup Iteration   2: 33237,904 ms/op
# Warmup Iteration   3: 30203,818 ms/op
# Warmup Iteration   4: 31855,654 ms/op
# Warmup Iteration   5: 31356,296 ms/op
# Warmup Iteration   6: 31202,718 ms/op
# Warmup Iteration   7: 31169,371 ms/op
# Warmup Iteration   8: 28496,626 ms/op
# Warmup Iteration   9: 32449,301 ms/op
# Warmup Iteration  10: 27767,761 ms/op
Iteration   1: 28069,608 ms/op
Iteration   2: 22772,978 ms/op
Iteration   3: 22805,629 ms/op
Iteration   4: 22826,611 ms/op
Iteration   5: 22833,494 ms/op
Iteration   6: 22560,971 ms/op
Iteration   7: 23116,690 ms/op
Iteration   8: 23005,362 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  23498,918 ±(99.9%) 3544,939 ms/op

  Histogram, ms/op:
    [22000,000, 22500,000) = 0
    [22500,000, 23000,000) = 5
    [23000,000, 23500,000) = 2
    [23500,000, 24000,000) = 0
    [24000,000, 24500,000) = 0
    [24500,000, 25000,000) = 0
    [25000,000, 25500,000) = 0
    [25500,000, 26000,000) = 0
    [26000,000, 26500,000) = 0
    [26500,000, 27000,000) = 0
    [27000,000, 27500,000) = 0
    [27500,000, 28000,000) = 0
    [28000,000, 28500,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  22560,971 ms/op
     p(50,0000) =  22830,053 ms/op
     p(90,0000) =  28069,608 ms/op
     p(95,0000) =  28069,608 ms/op
     p(99,0000) =  28069,608 ms/op
     p(99,9000) =  28069,608 ms/op
     p(99,9900) =  28069,608 ms/op
     p(99,9990) =  28069,608 ms/op
     p(99,9999) =  28069,608 ms/op
    p(100,0000) =  28069,608 ms/op


# Run complete. Total time: 00:08:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest     10000000           put    ss    8  23498,918 ± 3544,939  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (10000000) = 23498.917773999998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30034,096 ms/op
# Warmup Iteration   2: 27306,793 ms/op
# Warmup Iteration   3: 24135,514 ms/op
# Warmup Iteration   4: 19995,543 ms/op
# Warmup Iteration   5: 18528,121 ms/op
# Warmup Iteration   6: 18097,789 ms/op
# Warmup Iteration   7: 17932,129 ms/op
# Warmup Iteration   8: 17946,937 ms/op
# Warmup Iteration   9: 17803,867 ms/op
# Warmup Iteration  10: 17853,267 ms/op
Iteration   1: 17915,866 ms/op
Iteration   2: 17493,483 ms/op
Iteration   3: 18108,032 ms/op
Iteration   4: 17750,291 ms/op
Iteration   5: 17758,466 ms/op
Iteration   6: 17579,279 ms/op
Iteration   7: 18214,277 ms/op
Iteration   8: 17551,863 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  17796,445 ±(99.9%) 504,968 ms/op

  Histogram, ms/op:
    [17400,000, 17450,000) = 0
    [17450,000, 17500,000) = 1
    [17500,000, 17550,000) = 0
    [17550,000, 17600,000) = 2
    [17600,000, 17650,000) = 0
    [17650,000, 17700,000) = 0
    [17700,000, 17750,000) = 0
    [17750,000, 17800,000) = 2
    [17800,000, 17850,000) = 0
    [17850,000, 17900,000) = 0
    [17900,000, 17950,000) = 1
    [17950,000, 18000,000) = 0
    [18000,000, 18050,000) = 0
    [18050,000, 18100,000) = 0
    [18100,000, 18150,000) = 1
    [18150,000, 18200,000) = 0
    [18200,000, 18250,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  17493,483 ms/op
     p(50,0000) =  17754,379 ms/op
     p(90,0000) =  18214,277 ms/op
     p(95,0000) =  18214,277 ms/op
     p(99,0000) =  18214,277 ms/op
     p(99,9000) =  18214,277 ms/op
     p(99,9900) =  18214,277 ms/op
     p(99,9990) =  18214,277 ms/op
     p(99,9999) =  18214,277 ms/op
    p(100,0000) =  18214,277 ms/op


# Run complete. Total time: 00:05:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest     10000000           put    ss    8  17796,445 ± 504,968  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (10000000) = 17796.444720875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23580,521 ms/op
# Warmup Iteration   2: 21080,291 ms/op
# Warmup Iteration   3: 19429,538 ms/op
# Warmup Iteration   4: 16235,235 ms/op
# Warmup Iteration   5: 15405,320 ms/op
# Warmup Iteration   6: 15536,031 ms/op
# Warmup Iteration   7: 16500,233 ms/op
# Warmup Iteration   8: 17968,003 ms/op
# Warmup Iteration   9: 18862,810 ms/op
# Warmup Iteration  10: 19586,078 ms/op
Iteration   1: 20292,837 ms/op
Iteration   2: 20568,604 ms/op
Iteration   3: 21090,918 ms/op
Iteration   4: 21429,336 ms/op
Iteration   5: 21604,626 ms/op
Iteration   6: 21474,360 ms/op
Iteration   7: 21731,334 ms/op
Iteration   8: 21542,565 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  21216,823 ±(99.9%) 1001,996 ms/op

  Histogram, ms/op:
    [20000,000, 20125,000) = 0
    [20125,000, 20250,000) = 0
    [20250,000, 20375,000) = 1
    [20375,000, 20500,000) = 0
    [20500,000, 20625,000) = 1
    [20625,000, 20750,000) = 0
    [20750,000, 20875,000) = 0
    [20875,000, 21000,000) = 0
    [21000,000, 21125,000) = 1
    [21125,000, 21250,000) = 0
    [21250,000, 21375,000) = 0
    [21375,000, 21500,000) = 2
    [21500,000, 21625,000) = 2
    [21625,000, 21750,000) = 1
    [21750,000, 21875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  20292,837 ms/op
     p(50,0000) =  21451,848 ms/op
     p(90,0000) =  21731,334 ms/op
     p(95,0000) =  21731,334 ms/op
     p(99,0000) =  21731,334 ms/op
     p(99,9000) =  21731,334 ms/op
     p(99,9900) =  21731,334 ms/op
     p(99,9990) =  21731,334 ms/op
     p(99,9999) =  21731,334 ms/op
    p(100,0000) =  21731,334 ms/op


# Run complete. Total time: 00:05:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest     10000000           put    ss    8  21216,823 ± 1001,996  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (10000000) = 21216.822525375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 45030,701 ms/op
# Warmup Iteration   2: 41796,163 ms/op
# Warmup Iteration   3: 37075,967 ms/op
# Warmup Iteration   4: 31103,358 ms/op
# Warmup Iteration   5: 29649,389 ms/op
# Warmup Iteration   6: 29480,678 ms/op
# Warmup Iteration   7: 29630,081 ms/op
# Warmup Iteration   8: 30417,058 ms/op
# Warmup Iteration   9: 29930,352 ms/op
# Warmup Iteration  10: 29916,376 ms/op
Iteration   1: 30359,470 ms/op
Iteration   2: 29313,719 ms/op
Iteration   3: 29685,510 ms/op
Iteration   4: 29179,619 ms/op
Iteration   5: 29717,829 ms/op
Iteration   6: 30663,558 ms/op
Iteration   7: 29133,340 ms/op
Iteration   8: 29335,451 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  29673,562 ±(99.9%) 1079,713 ms/op

  Histogram, ms/op:
    [29000,000, 29125,000) = 0
    [29125,000, 29250,000) = 2
    [29250,000, 29375,000) = 2
    [29375,000, 29500,000) = 0
    [29500,000, 29625,000) = 0
    [29625,000, 29750,000) = 2
    [29750,000, 29875,000) = 0
    [29875,000, 30000,000) = 0
    [30000,000, 30125,000) = 0
    [30125,000, 30250,000) = 0
    [30250,000, 30375,000) = 1
    [30375,000, 30500,000) = 0
    [30500,000, 30625,000) = 0
    [30625,000, 30750,000) = 1
    [30750,000, 30875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  29133,340 ms/op
     p(50,0000) =  29510,481 ms/op
     p(90,0000) =  30663,558 ms/op
     p(95,0000) =  30663,558 ms/op
     p(99,0000) =  30663,558 ms/op
     p(99,9000) =  30663,558 ms/op
     p(99,9900) =  30663,558 ms/op
     p(99,9990) =  30663,558 ms/op
     p(99,9999) =  30663,558 ms/op
    p(100,0000) =  30663,558 ms/op


# Run complete. Total time: 00:09:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest     10000000           put    ss    8  29673,562 ± 1079,713  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (10000000) = 29673.562007249995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 10000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 37590,470 ms/op
# Warmup Iteration   2: 35000,882 ms/op
# Warmup Iteration   3: 31839,426 ms/op
# Warmup Iteration   4: 27417,265 ms/op
# Warmup Iteration   5: 26196,741 ms/op
# Warmup Iteration   6: 26465,467 ms/op
# Warmup Iteration   7: 26322,729 ms/op
# Warmup Iteration   8: 26317,745 ms/op
# Warmup Iteration   9: 26536,832 ms/op
# Warmup Iteration  10: 26282,613 ms/op
Iteration   1: 26692,779 ms/op
Iteration   2: 26276,920 ms/op
Iteration   3: 26587,598 ms/op
Iteration   4: 26720,800 ms/op
Iteration   5: 26511,945 ms/op
Iteration   6: 26642,739 ms/op
Iteration   7: 26832,646 ms/op
Iteration   8: 26747,849 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  26626,660 ±(99.9%) 329,276 ms/op

  Histogram, ms/op:
    [26200,000, 26250,000) = 0
    [26250,000, 26300,000) = 1
    [26300,000, 26350,000) = 0
    [26350,000, 26400,000) = 0
    [26400,000, 26450,000) = 0
    [26450,000, 26500,000) = 0
    [26500,000, 26550,000) = 1
    [26550,000, 26600,000) = 1
    [26600,000, 26650,000) = 1
    [26650,000, 26700,000) = 1
    [26700,000, 26750,000) = 2
    [26750,000, 26800,000) = 0
    [26800,000, 26850,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  26276,920 ms/op
     p(50,0000) =  26667,759 ms/op
     p(90,0000) =  26832,646 ms/op
     p(95,0000) =  26832,646 ms/op
     p(99,0000) =  26832,646 ms/op
     p(99,9000) =  26832,646 ms/op
     p(99,9900) =  26832,646 ms/op
     p(99,9990) =  26832,646 ms/op
     p(99,9999) =  26832,646 ms/op
    p(100,0000) =  26832,646 ms/op


# Run complete. Total time: 00:08:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest     10000000           put    ss    8  26626,660 ± 329,276  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (10000000) = 26626.659696250004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18798,195 ms/op
# Warmup Iteration   2: 18734,607 ms/op
# Warmup Iteration   3: 18447,883 ms/op
# Warmup Iteration   4: 17879,088 ms/op
# Warmup Iteration   5: 18333,752 ms/op
# Warmup Iteration   6: 18172,778 ms/op
# Warmup Iteration   7: 18465,289 ms/op
# Warmup Iteration   8: 18294,311 ms/op
# Warmup Iteration   9: 18214,858 ms/op
# Warmup Iteration  10: 17859,968 ms/op
Iteration   1: 18145,957 ms/op
Iteration   2: 18377,901 ms/op
Iteration   3: 18399,209 ms/op
Iteration   4: 18249,944 ms/op
Iteration   5: 18055,818 ms/op
Iteration   6: 18512,407 ms/op
Iteration   7: 17982,838 ms/op
Iteration   8: 18918,044 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18330,265 ±(99.9%) 569,999 ms/op

  Histogram, ms/op:
    [17900,000, 18000,000) = 1
    [18000,000, 18100,000) = 1
    [18100,000, 18200,000) = 1
    [18200,000, 18300,000) = 1
    [18300,000, 18400,000) = 2
    [18400,000, 18500,000) = 0
    [18500,000, 18600,000) = 1
    [18600,000, 18700,000) = 0
    [18700,000, 18800,000) = 0
    [18800,000, 18900,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  17982,838 ms/op
     p(50,0000) =  18313,923 ms/op
     p(90,0000) =  18918,044 ms/op
     p(95,0000) =  18918,044 ms/op
     p(99,0000) =  18918,044 ms/op
     p(99,9000) =  18918,044 ms/op
     p(99,9900) =  18918,044 ms/op
     p(99,9990) =  18918,044 ms/op
     p(99,9999) =  18918,044 ms/op
    p(100,0000) =  18918,044 ms/op


# Run complete. Total time: 00:05:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test    100000000           put    ss    8  18330,265 ± 569,999  ms/op
tests.maptests.article_examples.IntIntMap1Test (100000000) = 18330.264825125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24418,435 ms/op
# Warmup Iteration   2: 25124,821 ms/op
# Warmup Iteration   3: 25328,049 ms/op
# Warmup Iteration   4: 24650,995 ms/op
# Warmup Iteration   5: 25008,093 ms/op
# Warmup Iteration   6: 25167,473 ms/op
# Warmup Iteration   7: 25092,724 ms/op
# Warmup Iteration   8: 25421,800 ms/op
# Warmup Iteration   9: 25091,153 ms/op
# Warmup Iteration  10: 24929,798 ms/op
Iteration   1: 24263,832 ms/op
Iteration   2: 24996,679 ms/op
Iteration   3: 25081,766 ms/op
Iteration   4: 24812,834 ms/op
Iteration   5: 25135,969 ms/op
Iteration   6: 25323,090 ms/op
Iteration   7: 25087,789 ms/op
Iteration   8: 25081,974 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  24972,992 ±(99.9%) 611,122 ms/op

  Histogram, ms/op:
    [24000,000, 24125,000) = 0
    [24125,000, 24250,000) = 0
    [24250,000, 24375,000) = 1
    [24375,000, 24500,000) = 0
    [24500,000, 24625,000) = 0
    [24625,000, 24750,000) = 0
    [24750,000, 24875,000) = 1
    [24875,000, 25000,000) = 1
    [25000,000, 25125,000) = 3
    [25125,000, 25250,000) = 1
    [25250,000, 25375,000) = 1
    [25375,000, 25500,000) = 0
    [25500,000, 25625,000) = 0
    [25625,000, 25750,000) = 0
    [25750,000, 25875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  24263,832 ms/op
     p(50,0000) =  25081,870 ms/op
     p(90,0000) =  25323,090 ms/op
     p(95,0000) =  25323,090 ms/op
     p(99,0000) =  25323,090 ms/op
     p(99,9000) =  25323,090 ms/op
     p(99,9900) =  25323,090 ms/op
     p(99,9990) =  25323,090 ms/op
     p(99,9999) =  25323,090 ms/op
    p(100,0000) =  25323,090 ms/op


# Run complete. Total time: 00:07:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test    100000000           put    ss    8  24972,992 ± 611,122  ms/op
tests.maptests.article_examples.IntIntMap2Test (100000000) = 24972.991564250002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15381,253 ms/op
# Warmup Iteration   2: 15114,592 ms/op
# Warmup Iteration   3: 15103,444 ms/op
# Warmup Iteration   4: 15090,916 ms/op
# Warmup Iteration   5: 14856,195 ms/op
# Warmup Iteration   6: 15541,135 ms/op
# Warmup Iteration   7: 15810,093 ms/op
# Warmup Iteration   8: 15517,587 ms/op
# Warmup Iteration   9: 15086,967 ms/op
# Warmup Iteration  10: 14687,259 ms/op
Iteration   1: 14705,746 ms/op
Iteration   2: 14249,793 ms/op
Iteration   3: 14689,417 ms/op
Iteration   4: 14107,419 ms/op
Iteration   5: 13576,095 ms/op
Iteration   6: 14334,389 ms/op
Iteration   7: 14543,521 ms/op
Iteration   8: 14392,326 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  14324,838 ±(99.9%) 702,131 ms/op

  Histogram, ms/op:
    [13000,000, 13125,000) = 0
    [13125,000, 13250,000) = 0
    [13250,000, 13375,000) = 0
    [13375,000, 13500,000) = 0
    [13500,000, 13625,000) = 1
    [13625,000, 13750,000) = 0
    [13750,000, 13875,000) = 0
    [13875,000, 14000,000) = 0
    [14000,000, 14125,000) = 1
    [14125,000, 14250,000) = 1
    [14250,000, 14375,000) = 1
    [14375,000, 14500,000) = 1
    [14500,000, 14625,000) = 1
    [14625,000, 14750,000) = 2
    [14750,000, 14875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13576,095 ms/op
     p(50,0000) =  14363,358 ms/op
     p(90,0000) =  14705,746 ms/op
     p(95,0000) =  14705,746 ms/op
     p(99,0000) =  14705,746 ms/op
     p(99,9000) =  14705,746 ms/op
     p(99,9900) =  14705,746 ms/op
     p(99,9990) =  14705,746 ms/op
     p(99,9999) =  14705,746 ms/op
    p(100,0000) =  14705,746 ms/op


# Run complete. Total time: 00:04:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test    100000000           put    ss    8  14324,838 ± 702,131  ms/op
tests.maptests.article_examples.IntIntMap3Test (100000000) = 14324.838407125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8543,473 ms/op
# Warmup Iteration   2: 8497,579 ms/op
# Warmup Iteration   3: 9054,273 ms/op
# Warmup Iteration   4: 8943,318 ms/op
# Warmup Iteration   5: 8936,594 ms/op
# Warmup Iteration   6: 8959,808 ms/op
# Warmup Iteration   7: 8949,566 ms/op
# Warmup Iteration   8: 9062,834 ms/op
# Warmup Iteration   9: 9009,299 ms/op
# Warmup Iteration  10: 8888,474 ms/op
Iteration   1: 9015,045 ms/op
Iteration   2: 9004,929 ms/op
Iteration   3: 9041,991 ms/op
Iteration   4: 9172,837 ms/op
Iteration   5: 8907,395 ms/op
Iteration   6: 9061,704 ms/op
Iteration   7: 9025,109 ms/op
Iteration   8: 8891,292 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9015,038 ±(99.9%) 169,337 ms/op

  Histogram, ms/op:
    [8800,000, 8825,000) = 0
    [8825,000, 8850,000) = 0
    [8850,000, 8875,000) = 0
    [8875,000, 8900,000) = 1
    [8900,000, 8925,000) = 1
    [8925,000, 8950,000) = 0
    [8950,000, 8975,000) = 0
    [8975,000, 9000,000) = 0
    [9000,000, 9025,000) = 2
    [9025,000, 9050,000) = 2
    [9050,000, 9075,000) = 1
    [9075,000, 9100,000) = 0
    [9100,000, 9125,000) = 0
    [9125,000, 9150,000) = 0
    [9150,000, 9175,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8891,292 ms/op
     p(50,0000) =   9020,077 ms/op
     p(90,0000) =   9172,837 ms/op
     p(95,0000) =   9172,837 ms/op
     p(99,0000) =   9172,837 ms/op
     p(99,9000) =   9172,837 ms/op
     p(99,9900) =   9172,837 ms/op
     p(99,9990) =   9172,837 ms/op
     p(99,9999) =   9172,837 ms/op
    p(100,0000) =   9172,837 ms/op


# Run complete. Total time: 00:02:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test    100000000           put    ss    8  9015,038 ± 169,337  ms/op
tests.maptests.article_examples.IntIntMap4Test (100000000) = 9015.0375905
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8510,204 ms/op
# Warmup Iteration   2: 8204,629 ms/op
# Warmup Iteration   3: 8178,025 ms/op
# Warmup Iteration   4: 8138,217 ms/op
# Warmup Iteration   5: 8192,706 ms/op
# Warmup Iteration   6: 8150,973 ms/op
# Warmup Iteration   7: 8135,880 ms/op
# Warmup Iteration   8: 8084,590 ms/op
# Warmup Iteration   9: 8190,602 ms/op
# Warmup Iteration  10: 8220,794 ms/op
Iteration   1: 8227,181 ms/op
Iteration   2: 8072,727 ms/op
Iteration   3: 8088,022 ms/op
Iteration   4: 8196,668 ms/op
Iteration   5: 8140,645 ms/op
Iteration   6: 8194,561 ms/op
Iteration   7: 8183,855 ms/op
Iteration   8: 8160,757 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8158,052 ±(99.9%) 104,132 ms/op

  Histogram, ms/op:
    [8000,000, 8025,000) = 0
    [8025,000, 8050,000) = 0
    [8050,000, 8075,000) = 1
    [8075,000, 8100,000) = 1
    [8100,000, 8125,000) = 0
    [8125,000, 8150,000) = 1
    [8150,000, 8175,000) = 1
    [8175,000, 8200,000) = 3
    [8200,000, 8225,000) = 0
    [8225,000, 8250,000) = 1
    [8250,000, 8275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8072,727 ms/op
     p(50,0000) =   8172,306 ms/op
     p(90,0000) =   8227,181 ms/op
     p(95,0000) =   8227,181 ms/op
     p(99,0000) =   8227,181 ms/op
     p(99,9000) =   8227,181 ms/op
     p(99,9900) =   8227,181 ms/op
     p(99,9990) =   8227,181 ms/op
     p(99,9999) =   8227,181 ms/op
    p(100,0000) =   8227,181 ms/op


# Run complete. Total time: 00:02:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest    100000000           put    ss    8  8158,052 ± 104,132  ms/op
tests.maptests.article_examples.IntIntMap4aTest (100000000) = 8158.0521105
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12260,737 ms/op
# Warmup Iteration   2: 11365,180 ms/op
# Warmup Iteration   3: 11200,456 ms/op
# Warmup Iteration   4: 11616,622 ms/op
# Warmup Iteration   5: 11516,690 ms/op
# Warmup Iteration   6: 11191,494 ms/op
# Warmup Iteration   7: 11234,304 ms/op
# Warmup Iteration   8: 11451,295 ms/op
# Warmup Iteration   9: 11354,418 ms/op
# Warmup Iteration  10: 11248,823 ms/op
Iteration   1: 11390,797 ms/op
Iteration   2: 11399,352 ms/op
Iteration   3: 11476,240 ms/op
Iteration   4: 11181,516 ms/op
Iteration   5: 11514,482 ms/op
Iteration   6: 11691,072 ms/op
Iteration   7: 11696,044 ms/op
Iteration   8: 11568,566 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11489,759 ±(99.9%) 325,650 ms/op

  Histogram, ms/op:
    [11100,000, 11150,000) = 0
    [11150,000, 11200,000) = 1
    [11200,000, 11250,000) = 0
    [11250,000, 11300,000) = 0
    [11300,000, 11350,000) = 0
    [11350,000, 11400,000) = 2
    [11400,000, 11450,000) = 0
    [11450,000, 11500,000) = 1
    [11500,000, 11550,000) = 1
    [11550,000, 11600,000) = 1
    [11600,000, 11650,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11181,516 ms/op
     p(50,0000) =  11495,361 ms/op
     p(90,0000) =  11696,044 ms/op
     p(95,0000) =  11696,044 ms/op
     p(99,0000) =  11696,044 ms/op
     p(99,9000) =  11696,044 ms/op
     p(99,9900) =  11696,044 ms/op
     p(99,9990) =  11696,044 ms/op
     p(99,9999) =  11696,044 ms/op
    p(100,0000) =  11696,044 ms/op


# Run complete. Total time: 00:03:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest    100000000           put    ss    8  11489,759 ± 325,650  ms/op
tests.maptests.primitive.FastUtilMapTest (100000000) = 11489.75885475
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9643,506 ms/op
# Warmup Iteration   2: 9355,045 ms/op
# Warmup Iteration   3: 9830,465 ms/op
# Warmup Iteration   4: 9707,201 ms/op
# Warmup Iteration   5: 9700,211 ms/op
# Warmup Iteration   6: 9707,059 ms/op
# Warmup Iteration   7: 9446,054 ms/op
# Warmup Iteration   8: 9755,086 ms/op
# Warmup Iteration   9: 9350,565 ms/op
# Warmup Iteration  10: 9130,271 ms/op
Iteration   1: 9528,091 ms/op
Iteration   2: 9641,017 ms/op
Iteration   3: 9567,097 ms/op
Iteration   4: 9611,992 ms/op
Iteration   5: 9631,690 ms/op
Iteration   6: 9565,175 ms/op
Iteration   7: 9706,082 ms/op
Iteration   8: 9478,605 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9591,219 ±(99.9%) 136,485 ms/op

  Histogram, ms/op:
    [9400,000, 9425,000) = 0
    [9425,000, 9450,000) = 0
    [9450,000, 9475,000) = 0
    [9475,000, 9500,000) = 1
    [9500,000, 9525,000) = 0
    [9525,000, 9550,000) = 1
    [9550,000, 9575,000) = 2
    [9575,000, 9600,000) = 0
    [9600,000, 9625,000) = 1
    [9625,000, 9650,000) = 2
    [9650,000, 9675,000) = 0
    [9675,000, 9700,000) = 0
    [9700,000, 9725,000) = 1
    [9725,000, 9750,000) = 0
    [9750,000, 9775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9478,605 ms/op
     p(50,0000) =   9589,545 ms/op
     p(90,0000) =   9706,082 ms/op
     p(95,0000) =   9706,082 ms/op
     p(99,0000) =   9706,082 ms/op
     p(99,9000) =   9706,082 ms/op
     p(99,9900) =   9706,082 ms/op
     p(99,9990) =   9706,082 ms/op
     p(99,9999) =   9706,082 ms/op
    p(100,0000) =   9706,082 ms/op


# Run complete. Total time: 00:02:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest    100000000           put    ss    8  9591,219 ± 136,485  ms/op
tests.maptests.primitive.GsMutableMapTest (100000000) = 9591.218775624999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8713,793 ms/op
# Warmup Iteration   2: 8597,957 ms/op
# Warmup Iteration   3: 7953,497 ms/op
# Warmup Iteration   4: 8077,484 ms/op
# Warmup Iteration   5: 8120,033 ms/op
# Warmup Iteration   6: 8005,696 ms/op
# Warmup Iteration   7: 8171,525 ms/op
# Warmup Iteration   8: 7976,542 ms/op
# Warmup Iteration   9: 8210,681 ms/op
# Warmup Iteration  10: 8150,230 ms/op
Iteration   1: 8067,727 ms/op
Iteration   2: 8046,316 ms/op
Iteration   3: 8127,115 ms/op
Iteration   4: 8033,192 ms/op
Iteration   5: 8015,448 ms/op
Iteration   6: 8035,725 ms/op
Iteration   7: 8140,111 ms/op
Iteration   8: 8026,621 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8061,532 ±(99.9%) 90,137 ms/op

  Histogram, ms/op:
    [8000,000, 8012,500) = 0
    [8012,500, 8025,000) = 1
    [8025,000, 8037,500) = 3
    [8037,500, 8050,000) = 1
    [8050,000, 8062,500) = 0
    [8062,500, 8075,000) = 1
    [8075,000, 8087,500) = 0
    [8087,500, 8100,000) = 0
    [8100,000, 8112,500) = 0
    [8112,500, 8125,000) = 0
    [8125,000, 8137,500) = 1
    [8137,500, 8150,000) = 1
    [8150,000, 8162,500) = 0
    [8162,500, 8175,000) = 0
    [8175,000, 8187,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   8015,448 ms/op
     p(50,0000) =   8041,020 ms/op
     p(90,0000) =   8140,111 ms/op
     p(95,0000) =   8140,111 ms/op
     p(99,0000) =   8140,111 ms/op
     p(99,9000) =   8140,111 ms/op
     p(99,9900) =   8140,111 ms/op
     p(99,9990) =   8140,111 ms/op
     p(99,9999) =   8140,111 ms/op
    p(100,0000) =   8140,111 ms/op


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest    100000000           put    ss    8  8061,532 ± 90,137  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (100000000) = 8061.531778250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11759,048 ms/op
# Warmup Iteration   2: 11165,447 ms/op
# Warmup Iteration   3: 11539,186 ms/op
# Warmup Iteration   4: 10598,851 ms/op
# Warmup Iteration   5: 11263,762 ms/op
# Warmup Iteration   6: 11368,696 ms/op
# Warmup Iteration   7: 11309,926 ms/op
# Warmup Iteration   8: 11259,416 ms/op
# Warmup Iteration   9: 11358,001 ms/op
# Warmup Iteration  10: 11387,439 ms/op
Iteration   1: 11381,341 ms/op
Iteration   2: 11527,959 ms/op
Iteration   3: 11356,845 ms/op
Iteration   4: 11175,038 ms/op
Iteration   5: 10887,865 ms/op
Iteration   6: 11309,515 ms/op
Iteration   7: 11248,424 ms/op
Iteration   8: 11208,535 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11261,940 ±(99.9%) 359,018 ms/op

  Histogram, ms/op:
    [10800,000, 10850,000) = 0
    [10850,000, 10900,000) = 1
    [10900,000, 10950,000) = 0
    [10950,000, 11000,000) = 0
    [11000,000, 11050,000) = 0
    [11050,000, 11100,000) = 0
    [11100,000, 11150,000) = 0
    [11150,000, 11200,000) = 1
    [11200,000, 11250,000) = 2
    [11250,000, 11300,000) = 0
    [11300,000, 11350,000) = 1
    [11350,000, 11400,000) = 2
    [11400,000, 11450,000) = 0
    [11450,000, 11500,000) = 0
    [11500,000, 11550,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  10887,865 ms/op
     p(50,0000) =  11278,970 ms/op
     p(90,0000) =  11527,959 ms/op
     p(95,0000) =  11527,959 ms/op
     p(99,0000) =  11527,959 ms/op
     p(99,9000) =  11527,959 ms/op
     p(99,9900) =  11527,959 ms/op
     p(99,9990) =  11527,959 ms/op
     p(99,9999) =  11527,959 ms/op
    p(100,0000) =  11527,959 ms/op


# Run complete. Total time: 00:03:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest    100000000           put    ss    8  11261,940 ± 359,018  ms/op
tests.maptests.primitive.HppcMapTest (100000000) = 11261.940163750001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23588,285 ms/op
# Warmup Iteration   2: 18327,734 ms/op
# Warmup Iteration   3: 22910,998 ms/op
# Warmup Iteration   4: 22928,541 ms/op
# Warmup Iteration   5: 22951,378 ms/op
# Warmup Iteration   6: 23047,320 ms/op
# Warmup Iteration   7: 22446,712 ms/op
# Warmup Iteration   8: 23179,898 ms/op
# Warmup Iteration   9: 22746,602 ms/op
# Warmup Iteration  10: 21879,778 ms/op
Iteration   1: 21950,870 ms/op
Iteration   2: 22461,155 ms/op
Iteration   3: 22449,402 ms/op
Iteration   4: 22923,341 ms/op
Iteration   5: 22646,338 ms/op
Iteration   6: 22786,247 ms/op
Iteration   7: 22414,372 ms/op
Iteration   8: 22821,549 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22556,659 ±(99.9%) 592,944 ms/op

  Histogram, ms/op:
    [21900,000, 22000,000) = 1
    [22000,000, 22100,000) = 0
    [22100,000, 22200,000) = 0
    [22200,000, 22300,000) = 0
    [22300,000, 22400,000) = 0
    [22400,000, 22500,000) = 3
    [22500,000, 22600,000) = 0
    [22600,000, 22700,000) = 1
    [22700,000, 22800,000) = 1
    [22800,000, 22900,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  21950,870 ms/op
     p(50,0000) =  22553,746 ms/op
     p(90,0000) =  22923,341 ms/op
     p(95,0000) =  22923,341 ms/op
     p(99,0000) =  22923,341 ms/op
     p(99,9000) =  22923,341 ms/op
     p(99,9900) =  22923,341 ms/op
     p(99,9990) =  22923,341 ms/op
     p(99,9999) =  22923,341 ms/op
    p(100,0000) =  22923,341 ms/op


# Run complete. Total time: 00:06:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest    100000000           put    ss    8  22556,659 ± 592,944  ms/op
tests.maptests.primitive.TroveJbMapTest (100000000) = 22556.6592515
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 24137,399 ms/op
# Warmup Iteration   2: 23818,881 ms/op
# Warmup Iteration   3: 23676,223 ms/op
# Warmup Iteration   4: 23676,531 ms/op
# Warmup Iteration   5: 23885,998 ms/op
# Warmup Iteration   6: 24042,507 ms/op
# Warmup Iteration   7: 24215,054 ms/op
# Warmup Iteration   8: 23813,012 ms/op
# Warmup Iteration   9: 23886,562 ms/op
# Warmup Iteration  10: 24128,513 ms/op
Iteration   1: 23824,486 ms/op
Iteration   2: 23839,817 ms/op
Iteration   3: 23920,608 ms/op
Iteration   4: 24404,758 ms/op
Iteration   5: 24019,304 ms/op
Iteration   6: 24338,044 ms/op
Iteration   7: 24030,947 ms/op
Iteration   8: 24131,319 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  24063,660 ±(99.9%) 413,259 ms/op

  Histogram, ms/op:
    [23800,000, 23850,000) = 2
    [23850,000, 23900,000) = 0
    [23900,000, 23950,000) = 1
    [23950,000, 24000,000) = 0
    [24000,000, 24050,000) = 2
    [24050,000, 24100,000) = 0
    [24100,000, 24150,000) = 1
    [24150,000, 24200,000) = 0
    [24200,000, 24250,000) = 0
    [24250,000, 24300,000) = 0
    [24300,000, 24350,000) = 1
    [24350,000, 24400,000) = 0
    [24400,000, 24450,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  23824,486 ms/op
     p(50,0000) =  24025,125 ms/op
     p(90,0000) =  24404,758 ms/op
     p(95,0000) =  24404,758 ms/op
     p(99,0000) =  24404,758 ms/op
     p(99,9000) =  24404,758 ms/op
     p(99,9900) =  24404,758 ms/op
     p(99,9990) =  24404,758 ms/op
     p(99,9999) =  24404,758 ms/op
    p(100,0000) =  24404,758 ms/op


# Run complete. Total time: 00:07:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest    100000000           put    ss    8  24063,660 ± 413,259  ms/op
tests.maptests.primitive.TroveMapTest (100000000) = 24063.66034975
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 40832,296 ms/op
# Warmup Iteration   2: 47310,774 ms/op
# Warmup Iteration   3: 45543,722 ms/op
# Warmup Iteration   4: 39954,803 ms/op
# Warmup Iteration   5: 46086,225 ms/op
# Warmup Iteration   6: 39958,290 ms/op
# Warmup Iteration   7: 45854,311 ms/op
# Warmup Iteration   8: 40095,690 ms/op
# Warmup Iteration   9: 45938,867 ms/op
# Warmup Iteration  10: 40189,523 ms/op
Iteration   1: 45907,754 ms/op
Iteration   2: 40113,637 ms/op
Iteration   3: 45883,067 ms/op
Iteration   4: 40113,272 ms/op
Iteration   5: 45818,317 ms/op
Iteration   6: 40088,410 ms/op
Iteration   7: 45422,521 ms/op
Iteration   8: 39666,732 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  42876,714 ±(99.9%) 5902,372 ms/op

  Histogram, ms/op:
    [39000,000, 39500,000) = 0
    [39500,000, 40000,000) = 1
    [40000,000, 40500,000) = 3
    [40500,000, 41000,000) = 0
    [41000,000, 41500,000) = 0
    [41500,000, 42000,000) = 0
    [42000,000, 42500,000) = 0
    [42500,000, 43000,000) = 0
    [43000,000, 43500,000) = 0
    [43500,000, 44000,000) = 0
    [44000,000, 44500,000) = 0
    [44500,000, 45000,000) = 0
    [45000,000, 45500,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  39666,732 ms/op
     p(50,0000) =  42768,079 ms/op
     p(90,0000) =  45907,754 ms/op
     p(95,0000) =  45907,754 ms/op
     p(99,0000) =  45907,754 ms/op
     p(99,9000) =  45907,754 ms/op
     p(99,9900) =  45907,754 ms/op
     p(99,9990) =  45907,754 ms/op
     p(99,9999) =  45907,754 ms/op
    p(100,0000) =  45907,754 ms/op


# Run complete. Total time: 00:13:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest    100000000           put    ss    8  42876,714 ± 5902,372  ms/op
tests.maptests.object.FastUtilObjMapTest (100000000) = 42876.7138155
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 41876,624 ms/op
# Warmup Iteration   2: 47349,451 ms/op
# Warmup Iteration   3: 38177,460 ms/op
# Warmup Iteration   4: 32753,497 ms/op
# Warmup Iteration   5: 36709,376 ms/op
# Warmup Iteration   6: 32844,145 ms/op
# Warmup Iteration   7: 36957,887 ms/op
# Warmup Iteration   8: 32747,308 ms/op
# Warmup Iteration   9: 37037,299 ms/op
# Warmup Iteration  10: 32911,157 ms/op
Iteration   1: 36954,341 ms/op
Iteration   2: 33007,892 ms/op
Iteration   3: 36968,145 ms/op
Iteration   4: 32917,849 ms/op
Iteration   5: 36896,645 ms/op
Iteration   6: 32703,236 ms/op
Iteration   7: 36926,352 ms/op
Iteration   8: 32814,657 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  34898,640 ±(99.9%) 4168,534 ms/op

  Histogram, ms/op:
    [32000,000, 32500,000) = 0
    [32500,000, 33000,000) = 3
    [33000,000, 33500,000) = 1
    [33500,000, 34000,000) = 0
    [34000,000, 34500,000) = 0
    [34500,000, 35000,000) = 0
    [35000,000, 35500,000) = 0
    [35500,000, 36000,000) = 0
    [36000,000, 36500,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  32703,236 ms/op
     p(50,0000) =  34952,269 ms/op
     p(90,0000) =  36968,145 ms/op
     p(95,0000) =  36968,145 ms/op
     p(99,0000) =  36968,145 ms/op
     p(99,9000) =  36968,145 ms/op
     p(99,9900) =  36968,145 ms/op
     p(99,9990) =  36968,145 ms/op
     p(99,9999) =  36968,145 ms/op
    p(100,0000) =  36968,145 ms/op


# Run complete. Total time: 00:11:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest    100000000           put    ss    8  34898,640 ± 4168,534  ms/op
tests.maptests.object.KolobokeMutableObjTest (100000000) = 34898.639724625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 41574,570 ms/op
# Warmup Iteration   2: 46146,164 ms/op
# Warmup Iteration   3: 37431,365 ms/op
# Warmup Iteration   4: 31998,657 ms/op
# Warmup Iteration   5: 35949,185 ms/op
# Warmup Iteration   6: 32122,754 ms/op
# Warmup Iteration   7: 36369,071 ms/op
# Warmup Iteration   8: 32159,745 ms/op
# Warmup Iteration   9: 36414,422 ms/op
# Warmup Iteration  10: 32110,197 ms/op
Iteration   1: 36585,924 ms/op
Iteration   2: 32560,886 ms/op
Iteration   3: 36691,628 ms/op
Iteration   4: 32632,413 ms/op
Iteration   5: 36709,053 ms/op
Iteration   6: 32299,445 ms/op
Iteration   7: 36651,164 ms/op
Iteration   8: 32548,374 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  34584,861 ±(99.9%) 4244,871 ms/op

  Histogram, ms/op:
    [32000,000, 32500,000) = 1
    [32500,000, 33000,000) = 3
    [33000,000, 33500,000) = 0
    [33500,000, 34000,000) = 0
    [34000,000, 34500,000) = 0
    [34500,000, 35000,000) = 0
    [35000,000, 35500,000) = 0
    [35500,000, 36000,000) = 0
    [36000,000, 36500,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  32299,445 ms/op
     p(50,0000) =  34609,168 ms/op
     p(90,0000) =  36709,053 ms/op
     p(95,0000) =  36709,053 ms/op
     p(99,0000) =  36709,053 ms/op
     p(99,9000) =  36709,053 ms/op
     p(99,9900) =  36709,053 ms/op
     p(99,9990) =  36709,053 ms/op
     p(99,9999) =  36709,053 ms/op
    p(100,0000) =  36709,053 ms/op


# Run complete. Total time: 00:10:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest    100000000           put    ss    8  34584,861 ± 4244,871  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (100000000) = 34584.860943875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 48805,803 ms/op
# Warmup Iteration   2: 52568,904 ms/op
# Warmup Iteration   3: 45999,934 ms/op
# Warmup Iteration   4: 44402,708 ms/op
# Warmup Iteration   5: 38948,428 ms/op
# Warmup Iteration   6: 44643,683 ms/op
# Warmup Iteration   7: 38707,624 ms/op
# Warmup Iteration   8: 44699,767 ms/op
# Warmup Iteration   9: 39027,243 ms/op
# Warmup Iteration  10: 44779,769 ms/op
Iteration   1: 38789,187 ms/op
Iteration   2: 44780,932 ms/op
Iteration   3: 39123,428 ms/op
Iteration   4: 44862,690 ms/op
Iteration   5: 38934,437 ms/op
Iteration   6: 44841,908 ms/op
Iteration   7: 38728,602 ms/op
Iteration   8: 44805,902 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  41858,386 ±(99.9%) 6063,506 ms/op

  Histogram, ms/op:
    [38000,000, 38500,000) = 0
    [38500,000, 39000,000) = 3
    [39000,000, 39500,000) = 1
    [39500,000, 40000,000) = 0
    [40000,000, 40500,000) = 0
    [40500,000, 41000,000) = 0
    [41000,000, 41500,000) = 0
    [41500,000, 42000,000) = 0
    [42000,000, 42500,000) = 0
    [42500,000, 43000,000) = 0
    [43000,000, 43500,000) = 0
    [43500,000, 44000,000) = 0
    [44000,000, 44500,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  38728,602 ms/op
     p(50,0000) =  41952,180 ms/op
     p(90,0000) =  44862,690 ms/op
     p(95,0000) =  44862,690 ms/op
     p(99,0000) =  44862,690 ms/op
     p(99,9000) =  44862,690 ms/op
     p(99,9900) =  44862,690 ms/op
     p(99,9990) =  44862,690 ms/op
     p(99,9999) =  44862,690 ms/op
    p(100,0000) =  44862,690 ms/op


# Run complete. Total time: 00:13:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest    100000000           put    ss    8  41858,386 ± 6063,506  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (100000000) = 41858.385868749996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 45300,531 ms/op
# Warmup Iteration   2: 55157,450 ms/op
# Warmup Iteration   3: 53081,447 ms/op
# Warmup Iteration   4: 52325,609 ms/op
# Warmup Iteration   5: 51880,705 ms/op
# Warmup Iteration   6: 51887,540 ms/op
# Warmup Iteration   7: 51836,193 ms/op
# Warmup Iteration   8: 51868,301 ms/op
# Warmup Iteration   9: 51707,428 ms/op
# Warmup Iteration  10: 52387,046 ms/op
Iteration   1: 52159,511 ms/op
Iteration   2: 52064,686 ms/op
Iteration   3: 51932,258 ms/op
Iteration   4: 51836,588 ms/op
Iteration   5: 51706,540 ms/op
Iteration   6: 51664,108 ms/op
Iteration   7: 51592,076 ms/op
Iteration   8: 51407,649 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  51795,427 ±(99.9%) 480,632 ms/op

  Histogram, ms/op:
    [51400,000, 51450,000) = 1
    [51450,000, 51500,000) = 0
    [51500,000, 51550,000) = 0
    [51550,000, 51600,000) = 1
    [51600,000, 51650,000) = 0
    [51650,000, 51700,000) = 1
    [51700,000, 51750,000) = 1
    [51750,000, 51800,000) = 0
    [51800,000, 51850,000) = 1
    [51850,000, 51900,000) = 0
    [51900,000, 51950,000) = 1
    [51950,000, 52000,000) = 0
    [52000,000, 52050,000) = 0
    [52050,000, 52100,000) = 1
    [52100,000, 52150,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  51407,649 ms/op
     p(50,0000) =  51771,564 ms/op
     p(90,0000) =  52159,511 ms/op
     p(95,0000) =  52159,511 ms/op
     p(99,0000) =  52159,511 ms/op
     p(99,9000) =  52159,511 ms/op
     p(99,9900) =  52159,511 ms/op
     p(99,9990) =  52159,511 ms/op
     p(99,9999) =  52159,511 ms/op
    p(100,0000) =  52159,511 ms/op


# Run complete. Total time: 00:15:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest    100000000           put    ss    8  51795,427 ± 480,632  ms/op
tests.maptests.object.HppcObjMapTest (100000000) = 51795.427027
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 38039,103 ms/op
# Warmup Iteration   2: 45593,804 ms/op
# Warmup Iteration   3: 44455,147 ms/op
# Warmup Iteration   4: 38644,265 ms/op
# Warmup Iteration   5: 42880,389 ms/op
# Warmup Iteration   6: 37995,443 ms/op
# Warmup Iteration   7: 44919,917 ms/op
# Warmup Iteration   8: 38416,217 ms/op
# Warmup Iteration   9: 43324,312 ms/op
# Warmup Iteration  10: 38026,009 ms/op
Iteration   1: 44930,453 ms/op
Iteration   2: 38405,995 ms/op
Iteration   3: 43154,648 ms/op
Iteration   4: 37945,279 ms/op
Iteration   5: 44829,885 ms/op
Iteration   6: 38481,266 ms/op
Iteration   7: 43207,278 ms/op
Iteration   8: 38009,746 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  41120,569 ±(99.9%) 6083,249 ms/op

  Histogram, ms/op:
    [37000,000, 37500,000) = 0
    [37500,000, 38000,000) = 1
    [38000,000, 38500,000) = 3
    [38500,000, 39000,000) = 0
    [39000,000, 39500,000) = 0
    [39500,000, 40000,000) = 0
    [40000,000, 40500,000) = 0
    [40500,000, 41000,000) = 0
    [41000,000, 41500,000) = 0
    [41500,000, 42000,000) = 0
    [42000,000, 42500,000) = 0
    [42500,000, 43000,000) = 0
    [43000,000, 43500,000) = 2
    [43500,000, 44000,000) = 0
    [44000,000, 44500,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  37945,279 ms/op
     p(50,0000) =  40817,957 ms/op
     p(90,0000) =  44930,453 ms/op
     p(95,0000) =  44930,453 ms/op
     p(99,0000) =  44930,453 ms/op
     p(99,9000) =  44930,453 ms/op
     p(99,9900) =  44930,453 ms/op
     p(99,9990) =  44930,453 ms/op
     p(99,9999) =  44930,453 ms/op
    p(100,0000) =  44930,453 ms/op


# Run complete. Total time: 00:12:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest    100000000           put    ss    8  41120,569 ± 6083,249  ms/op
tests.maptests.object.GsObjMapTest (100000000) = 41120.568664624996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 51108,081 ms/op
# Warmup Iteration   2: 60130,443 ms/op
# Warmup Iteration   3: 64099,021 ms/op
# Warmup Iteration   4: 60054,225 ms/op
# Warmup Iteration   5: 61651,815 ms/op
# Warmup Iteration   6: 60129,110 ms/op
# Warmup Iteration   7: 61342,270 ms/op
# Warmup Iteration   8: 60489,471 ms/op
# Warmup Iteration   9: 61623,929 ms/op
# Warmup Iteration  10: 61089,360 ms/op
Iteration   1: 62297,366 ms/op
Iteration   2: 61395,040 ms/op
Iteration   3: 62292,602 ms/op
Iteration   4: 61256,346 ms/op
Iteration   5: 62357,664 ms/op
Iteration   6: 61305,188 ms/op
Iteration   7: 62459,426 ms/op
Iteration   8: 61257,792 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  61827,678 ±(99.9%) 1078,703 ms/op

  Histogram, ms/op:
    [61000,000, 61125,000) = 0
    [61125,000, 61250,000) = 0
    [61250,000, 61375,000) = 3
    [61375,000, 61500,000) = 1
    [61500,000, 61625,000) = 0
    [61625,000, 61750,000) = 0
    [61750,000, 61875,000) = 0
    [61875,000, 62000,000) = 0
    [62000,000, 62125,000) = 0
    [62125,000, 62250,000) = 0
    [62250,000, 62375,000) = 3
    [62375,000, 62500,000) = 1
    [62500,000, 62625,000) = 0
    [62625,000, 62750,000) = 0
    [62750,000, 62875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  61256,346 ms/op
     p(50,0000) =  61843,821 ms/op
     p(90,0000) =  62459,426 ms/op
     p(95,0000) =  62459,426 ms/op
     p(99,0000) =  62459,426 ms/op
     p(99,9000) =  62459,426 ms/op
     p(99,9900) =  62459,426 ms/op
     p(99,9990) =  62459,426 ms/op
     p(99,9999) =  62459,426 ms/op
    p(100,0000) =  62459,426 ms/op


# Run complete. Total time: 00:18:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest    100000000           put    ss    8  61827,678 ± 1078,703  ms/op
tests.maptests.object.JdkMapTest (100000000) = 61827.678082750004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 48258,478 ms/op
# Warmup Iteration   2: 61411,885 ms/op
# Warmup Iteration   3: 53946,152 ms/op
# Warmup Iteration   4: 56479,795 ms/op
# Warmup Iteration   5: 53614,911 ms/op
# Warmup Iteration   6: 56129,890 ms/op
# Warmup Iteration   7: 54519,705 ms/op
# Warmup Iteration   8: 57969,293 ms/op
# Warmup Iteration   9: 54391,978 ms/op
# Warmup Iteration  10: 56835,505 ms/op
Iteration   1: 54419,879 ms/op
Iteration   2: 56697,717 ms/op
Iteration   3: 54642,252 ms/op
Iteration   4: 58035,061 ms/op
Iteration   5: 54871,576 ms/op
Iteration   6: 57340,015 ms/op
Iteration   7: 54576,775 ms/op
Iteration   8: 56432,043 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  55876,915 ±(99.9%) 2716,328 ms/op

  Histogram, ms/op:
    [54000,000, 54500,000) = 1
    [54500,000, 55000,000) = 3
    [55000,000, 55500,000) = 0
    [55500,000, 56000,000) = 0
    [56000,000, 56500,000) = 1
    [56500,000, 57000,000) = 1
    [57000,000, 57500,000) = 1
    [57500,000, 58000,000) = 0
    [58000,000, 58500,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  54419,879 ms/op
     p(50,0000) =  55651,810 ms/op
     p(90,0000) =  58035,061 ms/op
     p(95,0000) =  58035,061 ms/op
     p(99,0000) =  58035,061 ms/op
     p(99,9000) =  58035,061 ms/op
     p(99,9900) =  58035,061 ms/op
     p(99,9990) =  58035,061 ms/op
     p(99,9999) =  58035,061 ms/op
    p(100,0000) =  58035,061 ms/op


# Run complete. Total time: 00:16:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity    100000000           put    ss    8  55876,915 ± 2716,328  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (100000000) = 55876.91480862499
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 65617,019 ms/op
# Warmup Iteration   2: 69546,866 ms/op
# Warmup Iteration   3: 67728,757 ms/op
# Warmup Iteration   4: 62255,499 ms/op
# Warmup Iteration   5: 62572,974 ms/op
# Warmup Iteration   6: 67441,097 ms/op
# Warmup Iteration   7: 61988,765 ms/op
# Warmup Iteration   8: 62085,696 ms/op
# Warmup Iteration   9: 67279,324 ms/op
# Warmup Iteration  10: 61939,622 ms/op
Iteration   1: 61978,187 ms/op
Iteration   2: 66952,903 ms/op
Iteration   3: 61985,928 ms/op
Iteration   4: 61968,579 ms/op
Iteration   5: 67255,697 ms/op
Iteration   6: 62312,071 ms/op
Iteration   7: 62860,709 ms/op
Iteration   8: 67729,491 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  64130,446 ±(99.9%) 5084,876 ms/op

  Histogram, ms/op:
    [61000,000, 61500,000) = 0
    [61500,000, 62000,000) = 3
    [62000,000, 62500,000) = 1
    [62500,000, 63000,000) = 1
    [63000,000, 63500,000) = 0
    [63500,000, 64000,000) = 0
    [64000,000, 64500,000) = 0
    [64500,000, 65000,000) = 0
    [65000,000, 65500,000) = 0
    [65500,000, 66000,000) = 0
    [66000,000, 66500,000) = 0
    [66500,000, 67000,000) = 1
    [67000,000, 67500,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  61968,579 ms/op
     p(50,0000) =  62586,390 ms/op
     p(90,0000) =  67729,491 ms/op
     p(95,0000) =  67729,491 ms/op
     p(99,0000) =  67729,491 ms/op
     p(99,9000) =  67729,491 ms/op
     p(99,9900) =  67729,491 ms/op
     p(99,9990) =  67729,491 ms/op
     p(99,9999) =  67729,491 ms/op
    p(100,0000) =  67729,491 ms/op


# Run complete. Total time: 00:19:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest    100000000           put    ss    8  64130,446 ± 5084,876  ms/op
tests.maptests.object.TroveJbObjMapTest (100000000) = 64130.44560874999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 61238,204 ms/op
# Warmup Iteration   2: 60441,897 ms/op
# Warmup Iteration   3: 68759,484 ms/op
# Warmup Iteration   4: 61412,439 ms/op
# Warmup Iteration   5: 59257,361 ms/op
# Warmup Iteration   6: 51158,291 ms/op
# Warmup Iteration   7: 51487,525 ms/op
# Warmup Iteration   8: 59025,704 ms/op
# Warmup Iteration   9: 50565,467 ms/op
# Warmup Iteration  10: 50551,643 ms/op
Iteration   1: 58222,839 ms/op
Iteration   2: 50757,115 ms/op
Iteration   3: 51018,022 ms/op
Iteration   4: 59025,384 ms/op
Iteration   5: 51114,854 ms/op
Iteration   6: 50929,282 ms/op
Iteration   7: 58984,104 ms/op
Iteration   8: 50938,016 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  53873,702 ±(99.9%) 7727,319 ms/op

  Histogram, ms/op:
    [50000,000, 51000,000) = 3
    [51000,000, 52000,000) = 2
    [52000,000, 53000,000) = 0
    [53000,000, 54000,000) = 0
    [54000,000, 55000,000) = 0
    [55000,000, 56000,000) = 0
    [56000,000, 57000,000) = 0
    [57000,000, 58000,000) = 0
    [58000,000, 59000,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  50757,115 ms/op
     p(50,0000) =  51066,438 ms/op
     p(90,0000) =  59025,384 ms/op
     p(95,0000) =  59025,384 ms/op
     p(99,0000) =  59025,384 ms/op
     p(99,9000) =  59025,384 ms/op
     p(99,9900) =  59025,384 ms/op
     p(99,9990) =  59025,384 ms/op
     p(99,9999) =  59025,384 ms/op
    p(100,0000) =  59025,384 ms/op


# Run complete. Total time: 00:16:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest    100000000           put    ss    8  53873,702 ± 7727,319  ms/op
tests.maptests.object.TroveObjMapTest (100000000) = 53873.70177625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 41477,686 ms/op
# Warmup Iteration   2: 47207,332 ms/op
# Warmup Iteration   3: 45680,701 ms/op
# Warmup Iteration   4: 39930,465 ms/op
# Warmup Iteration   5: 45984,362 ms/op
# Warmup Iteration   6: 40007,248 ms/op
# Warmup Iteration   7: 45726,720 ms/op
# Warmup Iteration   8: 39683,764 ms/op
# Warmup Iteration   9: 45262,912 ms/op
# Warmup Iteration  10: 39661,663 ms/op
Iteration   1: 45619,617 ms/op
Iteration   2: 39675,892 ms/op
Iteration   3: 45399,310 ms/op
Iteration   4: 39620,644 ms/op
Iteration   5: 45399,311 ms/op
Iteration   6: 39609,963 ms/op
Iteration   7: 45342,921 ms/op
Iteration   8: 39608,531 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  42534,524 ±(99.9%) 5941,462 ms/op

  Histogram, ms/op:
    [39000,000, 39500,000) = 0
    [39500,000, 40000,000) = 4
    [40000,000, 40500,000) = 0
    [40500,000, 41000,000) = 0
    [41000,000, 41500,000) = 0
    [41500,000, 42000,000) = 0
    [42000,000, 42500,000) = 0
    [42500,000, 43000,000) = 0
    [43000,000, 43500,000) = 0
    [43500,000, 44000,000) = 0
    [44000,000, 44500,000) = 0
    [44500,000, 45000,000) = 0
    [45000,000, 45500,000) = 3

  Percentiles, ms/op:
      p(0,0000) =  39608,531 ms/op
     p(50,0000) =  42509,407 ms/op
     p(90,0000) =  45619,617 ms/op
     p(95,0000) =  45619,617 ms/op
     p(99,0000) =  45619,617 ms/op
     p(99,9000) =  45619,617 ms/op
     p(99,9900) =  45619,617 ms/op
     p(99,9990) =  45619,617 ms/op
     p(99,9999) =  45619,617 ms/op
    p(100,0000) =  45619,617 ms/op


# Run complete. Total time: 00:13:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest    100000000           put    ss    8  42534,524 ± 5941,462  ms/op
tests.maptests.article_examples.ObjObjMapTest (100000000) = 42534.52383675
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11740,715 ms/op
# Warmup Iteration   2: 11375,543 ms/op
# Warmup Iteration   3: 11155,734 ms/op
# Warmup Iteration   4: 11413,429 ms/op
# Warmup Iteration   5: 11244,378 ms/op
# Warmup Iteration   6: 11582,691 ms/op
# Warmup Iteration   7: 11698,611 ms/op
# Warmup Iteration   8: 11750,873 ms/op
# Warmup Iteration   9: 11527,628 ms/op
# Warmup Iteration  10: 11501,034 ms/op
Iteration   1: 11728,887 ms/op
Iteration   2: 11513,980 ms/op
Iteration   3: 11480,893 ms/op
Iteration   4: 11636,709 ms/op
Iteration   5: 11657,620 ms/op
Iteration   6: 11440,244 ms/op
Iteration   7: 11580,527 ms/op
Iteration   8: 11776,744 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11601,950 ±(99.9%) 228,495 ms/op

  Histogram, ms/op:
    [11400,000, 11425,000) = 0
    [11425,000, 11450,000) = 1
    [11450,000, 11475,000) = 0
    [11475,000, 11500,000) = 1
    [11500,000, 11525,000) = 1
    [11525,000, 11550,000) = 0
    [11550,000, 11575,000) = 0
    [11575,000, 11600,000) = 1
    [11600,000, 11625,000) = 0
    [11625,000, 11650,000) = 1
    [11650,000, 11675,000) = 1
    [11675,000, 11700,000) = 0
    [11700,000, 11725,000) = 0
    [11725,000, 11750,000) = 1
    [11750,000, 11775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11440,244 ms/op
     p(50,0000) =  11608,618 ms/op
     p(90,0000) =  11776,744 ms/op
     p(95,0000) =  11776,744 ms/op
     p(99,0000) =  11776,744 ms/op
     p(99,9000) =  11776,744 ms/op
     p(99,9900) =  11776,744 ms/op
     p(99,9990) =  11776,744 ms/op
     p(99,9999) =  11776,744 ms/op
    p(100,0000) =  11776,744 ms/op


# Run complete. Total time: 00:03:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest    100000000           put    ss    8  11601,950 ± 228,495  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (100000000) = 11601.950491125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12874,345 ms/op
# Warmup Iteration   2: 12582,987 ms/op
# Warmup Iteration   3: 12607,561 ms/op
# Warmup Iteration   4: 12751,024 ms/op
# Warmup Iteration   5: 12516,492 ms/op
# Warmup Iteration   6: 12751,749 ms/op
# Warmup Iteration   7: 12666,490 ms/op
# Warmup Iteration   8: 12496,516 ms/op
# Warmup Iteration   9: 12620,345 ms/op
# Warmup Iteration  10: 12804,198 ms/op
Iteration   1: 12405,088 ms/op
Iteration   2: 12753,845 ms/op
Iteration   3: 12638,300 ms/op
Iteration   4: 12556,344 ms/op
Iteration   5: 12466,956 ms/op
Iteration   6: 12719,173 ms/op
Iteration   7: 12598,166 ms/op
Iteration   8: 12476,532 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12576,801 ±(99.9%) 237,354 ms/op

  Histogram, ms/op:
    [12400,000, 12425,000) = 1
    [12425,000, 12450,000) = 0
    [12450,000, 12475,000) = 1
    [12475,000, 12500,000) = 1
    [12500,000, 12525,000) = 0
    [12525,000, 12550,000) = 0
    [12550,000, 12575,000) = 1
    [12575,000, 12600,000) = 1
    [12600,000, 12625,000) = 0
    [12625,000, 12650,000) = 1
    [12650,000, 12675,000) = 0
    [12675,000, 12700,000) = 0
    [12700,000, 12725,000) = 1
    [12725,000, 12750,000) = 0
    [12750,000, 12775,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  12405,088 ms/op
     p(50,0000) =  12577,255 ms/op
     p(90,0000) =  12753,845 ms/op
     p(95,0000) =  12753,845 ms/op
     p(99,0000) =  12753,845 ms/op
     p(99,9000) =  12753,845 ms/op
     p(99,9900) =  12753,845 ms/op
     p(99,9990) =  12753,845 ms/op
     p(99,9999) =  12753,845 ms/op
    p(100,0000) =  12753,845 ms/op


# Run complete. Total time: 00:03:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest    100000000           put    ss    8  12576,801 ± 237,354  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (100000000) = 12576.800515
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12675,776 ms/op
# Warmup Iteration   2: 11625,574 ms/op
# Warmup Iteration   3: 11764,539 ms/op
# Warmup Iteration   4: 11535,834 ms/op
# Warmup Iteration   5: 11575,162 ms/op
# Warmup Iteration   6: 11495,594 ms/op
# Warmup Iteration   7: 11658,008 ms/op
# Warmup Iteration   8: 11159,244 ms/op
# Warmup Iteration   9: 11618,840 ms/op
# Warmup Iteration  10: 11701,323 ms/op
Iteration   1: 11511,820 ms/op
Iteration   2: 11649,048 ms/op
Iteration   3: 11837,222 ms/op
Iteration   4: 11721,217 ms/op
Iteration   5: 11736,777 ms/op
Iteration   6: 11703,572 ms/op
Iteration   7: 11593,762 ms/op
Iteration   8: 11470,146 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11652,946 ±(99.9%) 234,235 ms/op

  Histogram, ms/op:
    [11400,000, 11450,000) = 0
    [11450,000, 11500,000) = 1
    [11500,000, 11550,000) = 1
    [11550,000, 11600,000) = 1
    [11600,000, 11650,000) = 1
    [11650,000, 11700,000) = 0
    [11700,000, 11750,000) = 3
    [11750,000, 11800,000) = 0
    [11800,000, 11850,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  11470,146 ms/op
     p(50,0000) =  11676,310 ms/op
     p(90,0000) =  11837,222 ms/op
     p(95,0000) =  11837,222 ms/op
     p(99,0000) =  11837,222 ms/op
     p(99,9000) =  11837,222 ms/op
     p(99,9900) =  11837,222 ms/op
     p(99,9990) =  11837,222 ms/op
     p(99,9999) =  11837,222 ms/op
    p(100,0000) =  11837,222 ms/op


# Run complete. Total time: 00:03:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest    100000000           put    ss    8  11652,946 ± 234,235  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (100000000) = 11652.945638
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11762,401 ms/op
# Warmup Iteration   2: 11460,208 ms/op
# Warmup Iteration   3: 11072,108 ms/op
# Warmup Iteration   4: 11270,979 ms/op
# Warmup Iteration   5: 11044,245 ms/op
# Warmup Iteration   6: 11198,207 ms/op
# Warmup Iteration   7: 11088,376 ms/op
# Warmup Iteration   8: 11237,742 ms/op
# Warmup Iteration   9: 11230,319 ms/op
# Warmup Iteration  10: 11237,631 ms/op
Iteration   1: 11213,390 ms/op
Iteration   2: 10981,761 ms/op
Iteration   3: 10875,861 ms/op
Iteration   4: 11133,537 ms/op
Iteration   5: 11296,991 ms/op
Iteration   6: 11257,665 ms/op
Iteration   7: 10913,308 ms/op
Iteration   8: 11025,708 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11087,278 ±(99.9%) 307,400 ms/op

  Histogram, ms/op:
    [10800,000, 10850,000) = 0
    [10850,000, 10900,000) = 1
    [10900,000, 10950,000) = 1
    [10950,000, 11000,000) = 1
    [11000,000, 11050,000) = 1
    [11050,000, 11100,000) = 0
    [11100,000, 11150,000) = 1
    [11150,000, 11200,000) = 0
    [11200,000, 11250,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  10875,861 ms/op
     p(50,0000) =  11079,623 ms/op
     p(90,0000) =  11296,991 ms/op
     p(95,0000) =  11296,991 ms/op
     p(99,0000) =  11296,991 ms/op
     p(99,9000) =  11296,991 ms/op
     p(99,9900) =  11296,991 ms/op
     p(99,9990) =  11296,991 ms/op
     p(99,9999) =  11296,991 ms/op
    p(100,0000) =  11296,991 ms/op


# Run complete. Total time: 00:03:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest    100000000           put    ss    8  11087,278 ± 307,400  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (100000000) = 11087.27771925
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 36907,243 ms/op
# Warmup Iteration   2: 37461,427 ms/op
# Warmup Iteration   3: 37097,311 ms/op
# Warmup Iteration   4: 37230,352 ms/op
# Warmup Iteration   5: 37045,545 ms/op
# Warmup Iteration   6: 37286,571 ms/op
# Warmup Iteration   7: 37317,984 ms/op
# Warmup Iteration   8: 37255,037 ms/op
# Warmup Iteration   9: 37305,744 ms/op
# Warmup Iteration  10: 37181,189 ms/op
Iteration   1: 37454,882 ms/op
Iteration   2: 37223,427 ms/op
Iteration   3: 37310,179 ms/op
Iteration   4: 37287,487 ms/op
Iteration   5: 36879,421 ms/op
Iteration   6: 36688,893 ms/op
Iteration   7: 33277,692 ms/op
Iteration   8: 33037,579 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  36144,945 ±(99.9%) 3559,007 ms/op

  Histogram, ms/op:
    [33000,000, 33500,000) = 2
    [33500,000, 34000,000) = 0
    [34000,000, 34500,000) = 0
    [34500,000, 35000,000) = 0
    [35000,000, 35500,000) = 0
    [35500,000, 36000,000) = 0
    [36000,000, 36500,000) = 0
    [36500,000, 37000,000) = 2
    [37000,000, 37500,000) = 4

  Percentiles, ms/op:
      p(0,0000) =  33037,579 ms/op
     p(50,0000) =  37051,424 ms/op
     p(90,0000) =  37454,882 ms/op
     p(95,0000) =  37454,882 ms/op
     p(99,0000) =  37454,882 ms/op
     p(99,9000) =  37454,882 ms/op
     p(99,9900) =  37454,882 ms/op
     p(99,9990) =  37454,882 ms/op
     p(99,9999) =  37454,882 ms/op
    p(100,0000) =  37454,882 ms/op


# Run complete. Total time: 00:11:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest    100000000           put    ss    8  36144,945 ± 3559,007  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (100000000) = 36144.944979375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23854,712 ms/op
# Warmup Iteration   2: 23304,423 ms/op
# Warmup Iteration   3: 23946,399 ms/op
# Warmup Iteration   4: 23795,929 ms/op
# Warmup Iteration   5: 23491,035 ms/op
# Warmup Iteration   6: 24007,966 ms/op
# Warmup Iteration   7: 23852,963 ms/op
# Warmup Iteration   8: 23448,965 ms/op
# Warmup Iteration   9: 23797,675 ms/op
# Warmup Iteration  10: 23631,105 ms/op
Iteration   1: 23922,775 ms/op
Iteration   2: 23673,424 ms/op
Iteration   3: 23681,842 ms/op
Iteration   4: 23718,023 ms/op
Iteration   5: 23940,117 ms/op
Iteration   6: 23603,050 ms/op
Iteration   7: 23692,075 ms/op
Iteration   8: 24064,651 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  23786,995 ±(99.9%) 315,442 ms/op

  Histogram, ms/op:
    [23600,000, 23650,000) = 1
    [23650,000, 23700,000) = 3
    [23700,000, 23750,000) = 1
    [23750,000, 23800,000) = 0
    [23800,000, 23850,000) = 0
    [23850,000, 23900,000) = 0
    [23900,000, 23950,000) = 2
    [23950,000, 24000,000) = 0
    [24000,000, 24050,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  23603,050 ms/op
     p(50,0000) =  23705,049 ms/op
     p(90,0000) =  24064,651 ms/op
     p(95,0000) =  24064,651 ms/op
     p(99,0000) =  24064,651 ms/op
     p(99,9000) =  24064,651 ms/op
     p(99,9900) =  24064,651 ms/op
     p(99,9990) =  24064,651 ms/op
     p(99,9999) =  24064,651 ms/op
    p(100,0000) =  24064,651 ms/op


# Run complete. Total time: 00:07:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest    100000000           put    ss    8  23786,995 ± 315,442  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (100000000) = 23786.99467525
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25143,859 ms/op
# Warmup Iteration   2: 28792,525 ms/op
# Warmup Iteration   3: 27279,422 ms/op
# Warmup Iteration   4: 27139,146 ms/op
# Warmup Iteration   5: 26844,342 ms/op
# Warmup Iteration   6: 26974,678 ms/op
# Warmup Iteration   7: 26788,248 ms/op
# Warmup Iteration   8: 26821,810 ms/op
# Warmup Iteration   9: 27008,980 ms/op
# Warmup Iteration  10: 26818,381 ms/op
Iteration   1: 26789,857 ms/op
Iteration   2: 26788,792 ms/op
Iteration   3: 26522,319 ms/op
Iteration   4: 26568,973 ms/op
Iteration   5: 26935,064 ms/op
Iteration   6: 26568,435 ms/op
Iteration   7: 26504,255 ms/op
Iteration   8: 26819,548 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  26687,155 ±(99.9%) 313,795 ms/op

  Histogram, ms/op:
    [26500,000, 26550,000) = 2
    [26550,000, 26600,000) = 2
    [26600,000, 26650,000) = 0
    [26650,000, 26700,000) = 0
    [26700,000, 26750,000) = 0
    [26750,000, 26800,000) = 2
    [26800,000, 26850,000) = 1
    [26850,000, 26900,000) = 0
    [26900,000, 26950,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  26504,255 ms/op
     p(50,0000) =  26678,883 ms/op
     p(90,0000) =  26935,064 ms/op
     p(95,0000) =  26935,064 ms/op
     p(99,0000) =  26935,064 ms/op
     p(99,9000) =  26935,064 ms/op
     p(99,9900) =  26935,064 ms/op
     p(99,9990) =  26935,064 ms/op
     p(99,9999) =  26935,064 ms/op
    p(100,0000) =  26935,064 ms/op


# Run complete. Total time: 00:08:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest    100000000           put    ss    8  26687,155 ± 313,795  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (100000000) = 26687.155475
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27076,519 ms/op
# Warmup Iteration   2: 31656,536 ms/op
# Warmup Iteration   3: 29206,947 ms/op
# Warmup Iteration   4: 29020,441 ms/op
# Warmup Iteration   5: 29240,785 ms/op
# Warmup Iteration   6: 29025,016 ms/op
# Warmup Iteration   7: 28906,593 ms/op
# Warmup Iteration   8: 28929,706 ms/op
# Warmup Iteration   9: 29140,753 ms/op
# Warmup Iteration  10: 29186,994 ms/op
Iteration   1: 28950,969 ms/op
Iteration   2: 28860,038 ms/op
Iteration   3: 28723,048 ms/op
Iteration   4: 28640,060 ms/op
Iteration   5: 28592,586 ms/op
Iteration   6: 28535,329 ms/op
Iteration   7: 28407,097 ms/op
Iteration   8: 28629,821 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  28667,369 ±(99.9%) 333,971 ms/op

  Histogram, ms/op:
    [28400,000, 28450,000) = 1
    [28450,000, 28500,000) = 0
    [28500,000, 28550,000) = 1
    [28550,000, 28600,000) = 1
    [28600,000, 28650,000) = 2
    [28650,000, 28700,000) = 0
    [28700,000, 28750,000) = 1
    [28750,000, 28800,000) = 0
    [28800,000, 28850,000) = 0
    [28850,000, 28900,000) = 1
    [28900,000, 28950,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  28407,097 ms/op
     p(50,0000) =  28634,941 ms/op
     p(90,0000) =  28950,969 ms/op
     p(95,0000) =  28950,969 ms/op
     p(99,0000) =  28950,969 ms/op
     p(99,9000) =  28950,969 ms/op
     p(99,9900) =  28950,969 ms/op
     p(99,9990) =  28950,969 ms/op
     p(99,9999) =  28950,969 ms/op
    p(100,0000) =  28950,969 ms/op


# Run complete. Total time: 00:08:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest    100000000           put    ss    8  28667,369 ± 333,971  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (100000000) = 28667.368560000003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 34166,370 ms/op
# Warmup Iteration   2: 37507,351 ms/op
# Warmup Iteration   3: 29258,045 ms/op
# Warmup Iteration   4: 24416,662 ms/op
# Warmup Iteration   5: 31463,889 ms/op
# Warmup Iteration   6: 24084,992 ms/op
# Warmup Iteration   7: 31144,756 ms/op
# Warmup Iteration   8: 24216,476 ms/op
# Warmup Iteration   9: 31190,222 ms/op
# Warmup Iteration  10: 24280,058 ms/op
Iteration   1: 31138,015 ms/op
Iteration   2: 24061,543 ms/op
Iteration   3: 30864,988 ms/op
Iteration   4: 24173,976 ms/op
Iteration   5: 31176,175 ms/op
Iteration   6: 23708,082 ms/op
Iteration   7: 31052,987 ms/op
Iteration   8: 23970,797 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  27518,321 ±(99.9%) 7241,492 ms/op

  Histogram, ms/op:
    [23000,000, 23500,000) = 0
    [23500,000, 24000,000) = 2
    [24000,000, 24500,000) = 2
    [24500,000, 25000,000) = 0
    [25000,000, 25500,000) = 0
    [25500,000, 26000,000) = 0
    [26000,000, 26500,000) = 0
    [26500,000, 27000,000) = 0
    [27000,000, 27500,000) = 0
    [27500,000, 28000,000) = 0
    [28000,000, 28500,000) = 0
    [28500,000, 29000,000) = 0
    [29000,000, 29500,000) = 0
    [29500,000, 30000,000) = 0
    [30000,000, 30500,000) = 0
    [30500,000, 31000,000) = 1
    [31000,000, 31500,000) = 3

  Percentiles, ms/op:
      p(0,0000) =  23708,082 ms/op
     p(50,0000) =  27519,482 ms/op
     p(90,0000) =  31176,175 ms/op
     p(95,0000) =  31176,175 ms/op
     p(99,0000) =  31176,175 ms/op
     p(99,9000) =  31176,175 ms/op
     p(99,9900) =  31176,175 ms/op
     p(99,9990) =  31176,175 ms/op
     p(99,9999) =  31176,175 ms/op
    p(100,0000) =  31176,175 ms/op


# Run complete. Total time: 00:08:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest    100000000           put    ss    8  27518,321 ± 7241,492  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (100000000) = 27518.320559375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 25137,626 ms/op
# Warmup Iteration   2: 28089,602 ms/op
# Warmup Iteration   3: 28056,256 ms/op
# Warmup Iteration   4: 28112,952 ms/op
# Warmup Iteration   5: 28173,493 ms/op
# Warmup Iteration   6: 28066,817 ms/op
# Warmup Iteration   7: 28403,833 ms/op
# Warmup Iteration   8: 28240,417 ms/op
# Warmup Iteration   9: 28118,638 ms/op
# Warmup Iteration  10: 28190,705 ms/op
Iteration   1: 27843,085 ms/op
Iteration   2: 28036,959 ms/op
Iteration   3: 27956,787 ms/op
Iteration   4: 27916,354 ms/op
Iteration   5: 27824,449 ms/op
Iteration   6: 27818,906 ms/op
Iteration   7: 27616,792 ms/op
Iteration   8: 27940,838 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  27869,271 ±(99.9%) 241,950 ms/op

  Histogram, ms/op:
    [27600,000, 27650,000) = 1
    [27650,000, 27700,000) = 0
    [27700,000, 27750,000) = 0
    [27750,000, 27800,000) = 0
    [27800,000, 27850,000) = 3
    [27850,000, 27900,000) = 0
    [27900,000, 27950,000) = 2
    [27950,000, 28000,000) = 1
    [28000,000, 28050,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  27616,792 ms/op
     p(50,0000) =  27879,720 ms/op
     p(90,0000) =  28036,959 ms/op
     p(95,0000) =  28036,959 ms/op
     p(99,0000) =  28036,959 ms/op
     p(99,9000) =  28036,959 ms/op
     p(99,9900) =  28036,959 ms/op
     p(99,9990) =  28036,959 ms/op
     p(99,9999) =  28036,959 ms/op
    p(100,0000) =  28036,959 ms/op


# Run complete. Total time: 00:08:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest    100000000           put    ss    8  27869,271 ± 241,950  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (100000000) = 27869.271256
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 41200,846 ms/op
# Warmup Iteration   2: 45832,514 ms/op
# Warmup Iteration   3: 44865,154 ms/op
# Warmup Iteration   4: 39992,657 ms/op
# Warmup Iteration   5: 40466,528 ms/op
# Warmup Iteration   6: 44741,170 ms/op
# Warmup Iteration   7: 39715,062 ms/op
# Warmup Iteration   8: 40022,802 ms/op
# Warmup Iteration   9: 44457,330 ms/op
# Warmup Iteration  10: 39725,983 ms/op
Iteration   1: 40837,733 ms/op
Iteration   2: 45334,832 ms/op
Iteration   3: 40259,474 ms/op
Iteration   4: 40714,382 ms/op
Iteration   5: 44932,540 ms/op
Iteration   6: 40315,166 ms/op
Iteration   7: 40157,141 ms/op
Iteration   8: 45028,021 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  42197,411 ±(99.9%) 4618,572 ms/op

  Histogram, ms/op:
    [40000,000, 40500,000) = 3
    [40500,000, 41000,000) = 2
    [41000,000, 41500,000) = 0
    [41500,000, 42000,000) = 0
    [42000,000, 42500,000) = 0
    [42500,000, 43000,000) = 0
    [43000,000, 43500,000) = 0
    [43500,000, 44000,000) = 0
    [44000,000, 44500,000) = 0
    [44500,000, 45000,000) = 1
    [45000,000, 45500,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  40157,141 ms/op
     p(50,0000) =  40776,058 ms/op
     p(90,0000) =  45334,832 ms/op
     p(95,0000) =  45334,832 ms/op
     p(99,0000) =  45334,832 ms/op
     p(99,9000) =  45334,832 ms/op
     p(99,9900) =  45334,832 ms/op
     p(99,9990) =  45334,832 ms/op
     p(99,9999) =  45334,832 ms/op
    p(100,0000) =  45334,832 ms/op


# Run complete. Total time: 00:12:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest    100000000           put    ss    8  42197,411 ± 4618,572  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (100000000) = 42197.411081125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 41340,178 ms/op
# Warmup Iteration   2: 41544,862 ms/op
# Warmup Iteration   3: 40654,300 ms/op
# Warmup Iteration   4: 34122,140 ms/op
# Warmup Iteration   5: 34091,867 ms/op
# Warmup Iteration   6: 39765,149 ms/op
# Warmup Iteration   7: 33215,461 ms/op
# Warmup Iteration   8: 33847,313 ms/op
# Warmup Iteration   9: 38970,706 ms/op
# Warmup Iteration  10: 33119,512 ms/op
Iteration   1: 33112,037 ms/op
Iteration   2: 39122,837 ms/op
Iteration   3: 33203,250 ms/op
Iteration   4: 33110,402 ms/op
Iteration   5: 39029,535 ms/op
Iteration   6: 33429,165 ms/op
Iteration   7: 33059,753 ms/op
Iteration   8: 39116,024 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  35397,875 ±(99.9%) 5848,873 ms/op

  Histogram, ms/op:
    [33000,000, 33500,000) = 5
    [33500,000, 34000,000) = 0
    [34000,000, 34500,000) = 0
    [34500,000, 35000,000) = 0
    [35000,000, 35500,000) = 0
    [35500,000, 36000,000) = 0
    [36000,000, 36500,000) = 0
    [36500,000, 37000,000) = 0
    [37000,000, 37500,000) = 0
    [37500,000, 38000,000) = 0
    [38000,000, 38500,000) = 0
    [38500,000, 39000,000) = 0
    [39000,000, 39500,000) = 3

  Percentiles, ms/op:
      p(0,0000) =  33059,753 ms/op
     p(50,0000) =  33316,207 ms/op
     p(90,0000) =  39122,837 ms/op
     p(95,0000) =  39122,837 ms/op
     p(99,0000) =  39122,837 ms/op
     p(99,9000) =  39122,837 ms/op
     p(99,9900) =  39122,837 ms/op
     p(99,9990) =  39122,837 ms/op
     p(99,9999) =  39122,837 ms/op
    p(100,0000) =  39122,837 ms/op


# Run complete. Total time: 00:11:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest    100000000           put    ss    8  35397,875 ± 5848,873  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (100000000) = 35397.875301625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 51184,420 ms/op
# Warmup Iteration   2: 39788,829 ms/op
# Warmup Iteration   3: 36546,821 ms/op
# Warmup Iteration   4: 39268,706 ms/op
# Warmup Iteration   5: 36538,705 ms/op
# Warmup Iteration   6: 39340,410 ms/op
# Warmup Iteration   7: 36515,543 ms/op
# Warmup Iteration   8: 39130,598 ms/op
# Warmup Iteration   9: 36448,921 ms/op
# Warmup Iteration  10: 39271,549 ms/op
Iteration   1: 36568,777 ms/op
Iteration   2: 39240,767 ms/op
Iteration   3: 36389,036 ms/op
Iteration   4: 39234,163 ms/op
Iteration   5: 36342,487 ms/op
Iteration   6: 39033,389 ms/op
Iteration   7: 36312,946 ms/op
Iteration   8: 39119,394 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  37780,120 ±(99.9%) 2820,585 ms/op

  Histogram, ms/op:
    [36000,000, 36250,000) = 0
    [36250,000, 36500,000) = 3
    [36500,000, 36750,000) = 1
    [36750,000, 37000,000) = 0
    [37000,000, 37250,000) = 0
    [37250,000, 37500,000) = 0
    [37500,000, 37750,000) = 0
    [37750,000, 38000,000) = 0
    [38000,000, 38250,000) = 0
    [38250,000, 38500,000) = 0
    [38500,000, 38750,000) = 0
    [38750,000, 39000,000) = 0
    [39000,000, 39250,000) = 4
    [39250,000, 39500,000) = 0
    [39500,000, 39750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  36312,946 ms/op
     p(50,0000) =  37801,083 ms/op
     p(90,0000) =  39240,767 ms/op
     p(95,0000) =  39240,767 ms/op
     p(99,0000) =  39240,767 ms/op
     p(99,9000) =  39240,767 ms/op
     p(99,9900) =  39240,767 ms/op
     p(99,9990) =  39240,767 ms/op
     p(99,9999) =  39240,767 ms/op
    p(100,0000) =  39240,767 ms/op


# Run complete. Total time: 00:11:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest    100000000           put    ss    8  37780,120 ± 2820,585  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (100000000) = 37780.120058374996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 59839,527 ms/op
# Warmup Iteration   2: 37230,842 ms/op
# Warmup Iteration   3: 40729,724 ms/op
# Warmup Iteration   4: 36501,748 ms/op
# Warmup Iteration   5: 40026,009 ms/op
# Warmup Iteration   6: 36704,907 ms/op
# Warmup Iteration   7: 40426,949 ms/op
# Warmup Iteration   8: 36752,973 ms/op
# Warmup Iteration   9: 39999,314 ms/op
# Warmup Iteration  10: 36670,043 ms/op
Iteration   1: 40005,805 ms/op
Iteration   2: 36451,573 ms/op
Iteration   3: 39942,528 ms/op
Iteration   4: 36806,360 ms/op
Iteration   5: 40134,221 ms/op
Iteration   6: 36574,462 ms/op
Iteration   7: 39856,102 ms/op
Iteration   8: 36411,961 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  38272,877 ±(99.9%) 3508,984 ms/op

  Histogram, ms/op:
    [36000,000, 36500,000) = 2
    [36500,000, 37000,000) = 2
    [37000,000, 37500,000) = 0
    [37500,000, 38000,000) = 0
    [38000,000, 38500,000) = 0
    [38500,000, 39000,000) = 0
    [39000,000, 39500,000) = 0
    [39500,000, 40000,000) = 2
    [40000,000, 40500,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  36411,961 ms/op
     p(50,0000) =  38331,231 ms/op
     p(90,0000) =  40134,221 ms/op
     p(95,0000) =  40134,221 ms/op
     p(99,0000) =  40134,221 ms/op
     p(99,9000) =  40134,221 ms/op
     p(99,9900) =  40134,221 ms/op
     p(99,9990) =  40134,221 ms/op
     p(99,9999) =  40134,221 ms/op
    p(100,0000) =  40134,221 ms/op


# Run complete. Total time: 00:12:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest    100000000           put    ss    8  38272,877 ± 3508,984  ms/op
tests.maptests.identity_object.GsIdentityMapTest (100000000) = 38272.876561624995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 53788,424 ms/op
# Warmup Iteration   2: 41348,070 ms/op
# Warmup Iteration   3: 37583,477 ms/op
# Warmup Iteration   4: 42879,257 ms/op
# Warmup Iteration   5: 37421,714 ms/op
# Warmup Iteration   6: 41762,885 ms/op
# Warmup Iteration   7: 37636,980 ms/op
# Warmup Iteration   8: 42030,021 ms/op
# Warmup Iteration   9: 37261,018 ms/op
# Warmup Iteration  10: 41602,717 ms/op
Iteration   1: 36965,842 ms/op
Iteration   2: 41512,299 ms/op
Iteration   3: 36998,745 ms/op
Iteration   4: 41438,556 ms/op
Iteration   5: 36991,848 ms/op
Iteration   6: 41558,146 ms/op
Iteration   7: 36862,805 ms/op
Iteration   8: 41470,840 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  39224,885 ±(99.9%) 4641,127 ms/op

  Histogram, ms/op:
    [36000,000, 36500,000) = 0
    [36500,000, 37000,000) = 4
    [37000,000, 37500,000) = 0
    [37500,000, 38000,000) = 0
    [38000,000, 38500,000) = 0
    [38500,000, 39000,000) = 0
    [39000,000, 39500,000) = 0
    [39500,000, 40000,000) = 0
    [40000,000, 40500,000) = 0
    [40500,000, 41000,000) = 0
    [41000,000, 41500,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  36862,805 ms/op
     p(50,0000) =  39218,650 ms/op
     p(90,0000) =  41558,146 ms/op
     p(95,0000) =  41558,146 ms/op
     p(99,0000) =  41558,146 ms/op
     p(99,9000) =  41558,146 ms/op
     p(99,9900) =  41558,146 ms/op
     p(99,9990) =  41558,146 ms/op
     p(99,9999) =  41558,146 ms/op
    p(100,0000) =  41558,146 ms/op


# Run complete. Total time: 00:12:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest    100000000           put    ss    8  39224,885 ± 4641,127  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (100000000) = 39224.885110625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 58899,605 ms/op
# Warmup Iteration   2: 44141,930 ms/op
# Warmup Iteration   3: 42043,699 ms/op
# Warmup Iteration   4: 38726,319 ms/op
# Warmup Iteration   5: 41375,598 ms/op
# Warmup Iteration   6: 38542,885 ms/op
# Warmup Iteration   7: 41493,812 ms/op
# Warmup Iteration   8: 38535,880 ms/op
# Warmup Iteration   9: 41226,154 ms/op
# Warmup Iteration  10: 38514,260 ms/op
Iteration   1: 41259,295 ms/op
Iteration   2: 38588,111 ms/op
Iteration   3: 41164,281 ms/op
Iteration   4: 38421,765 ms/op
Iteration   5: 41086,215 ms/op
Iteration   6: 38401,895 ms/op
Iteration   7: 41033,223 ms/op
Iteration   8: 38379,487 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  39791,784 ±(99.9%) 2752,392 ms/op

  Histogram, ms/op:
    [38000,000, 38250,000) = 0
    [38250,000, 38500,000) = 3
    [38500,000, 38750,000) = 1
    [38750,000, 39000,000) = 0
    [39000,000, 39250,000) = 0
    [39250,000, 39500,000) = 0
    [39500,000, 39750,000) = 0
    [39750,000, 40000,000) = 0
    [40000,000, 40250,000) = 0
    [40250,000, 40500,000) = 0
    [40500,000, 40750,000) = 0
    [40750,000, 41000,000) = 0
    [41000,000, 41250,000) = 3
    [41250,000, 41500,000) = 1
    [41500,000, 41750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  38379,487 ms/op
     p(50,0000) =  39810,667 ms/op
     p(90,0000) =  41259,295 ms/op
     p(95,0000) =  41259,295 ms/op
     p(99,0000) =  41259,295 ms/op
     p(99,9000) =  41259,295 ms/op
     p(99,9900) =  41259,295 ms/op
     p(99,9990) =  41259,295 ms/op
     p(99,9999) =  41259,295 ms/op
    p(100,0000) =  41259,295 ms/op


# Run complete. Total time: 00:12:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest    100000000           put    ss    8  39791,784 ± 2752,392  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (100000000) = 39791.7839185
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 45273,446 ms/op
# Warmup Iteration   2: 27816,065 ms/op
# Warmup Iteration   3: 30434,118 ms/op
# Warmup Iteration   4: 26407,444 ms/op
# Warmup Iteration   5: 31121,736 ms/op
# Warmup Iteration   6: 27146,285 ms/op
# Warmup Iteration   7: 30764,408 ms/op
# Warmup Iteration   8: 27170,709 ms/op
# Warmup Iteration   9: 30647,313 ms/op
# Warmup Iteration  10: 27131,991 ms/op
Iteration   1: 30694,851 ms/op
Iteration   2: 27053,919 ms/op
Iteration   3: 30527,974 ms/op
Iteration   4: 27047,213 ms/op
Iteration   5: 30471,373 ms/op
Iteration   6: 26894,336 ms/op
Iteration   7: 30535,000 ms/op
Iteration   8: 27152,733 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  28797,175 ±(99.9%) 3602,155 ms/op

  Histogram, ms/op:
    [26000,000, 26500,000) = 0
    [26500,000, 27000,000) = 1
    [27000,000, 27500,000) = 3
    [27500,000, 28000,000) = 0
    [28000,000, 28500,000) = 0
    [28500,000, 29000,000) = 0
    [29000,000, 29500,000) = 0
    [29500,000, 30000,000) = 0
    [30000,000, 30500,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  26894,336 ms/op
     p(50,0000) =  28812,053 ms/op
     p(90,0000) =  30694,851 ms/op
     p(95,0000) =  30694,851 ms/op
     p(99,0000) =  30694,851 ms/op
     p(99,9000) =  30694,851 ms/op
     p(99,9900) =  30694,851 ms/op
     p(99,9990) =  30694,851 ms/op
     p(99,9999) =  30694,851 ms/op
    p(100,0000) =  30694,851 ms/op


# Run complete. Total time: 00:09:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest    100000000           put    ss    8  28797,175 ± 3602,155  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (100000000) = 28797.174961124998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 83784,952 ms/op
# Warmup Iteration   2: 61866,950 ms/op
# Warmup Iteration   3: 58308,246 ms/op
# Warmup Iteration   4: 55893,073 ms/op
# Warmup Iteration   5: 56192,399 ms/op
# Warmup Iteration   6: 57929,092 ms/op
# Warmup Iteration   7: 55835,964 ms/op
# Warmup Iteration   8: 55586,449 ms/op
# Warmup Iteration   9: 57881,993 ms/op
# Warmup Iteration  10: 55697,302 ms/op
Iteration   1: 55620,704 ms/op
Iteration   2: 57835,093 ms/op
Iteration   3: 55573,922 ms/op
Iteration   4: 55473,653 ms/op
Iteration   5: 57662,996 ms/op
Iteration   6: 55601,092 ms/op
Iteration   7: 55525,967 ms/op
Iteration   8: 58053,775 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  56418,400 ±(99.9%) 2278,029 ms/op

  Histogram, ms/op:
    [55000,000, 55250,000) = 0
    [55250,000, 55500,000) = 1
    [55500,000, 55750,000) = 4
    [55750,000, 56000,000) = 0
    [56000,000, 56250,000) = 0
    [56250,000, 56500,000) = 0
    [56500,000, 56750,000) = 0
    [56750,000, 57000,000) = 0
    [57000,000, 57250,000) = 0
    [57250,000, 57500,000) = 0
    [57500,000, 57750,000) = 1
    [57750,000, 58000,000) = 1
    [58000,000, 58250,000) = 1
    [58250,000, 58500,000) = 0
    [58500,000, 58750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  55473,653 ms/op
     p(50,0000) =  55610,898 ms/op
     p(90,0000) =  58053,775 ms/op
     p(95,0000) =  58053,775 ms/op
     p(99,0000) =  58053,775 ms/op
     p(99,9000) =  58053,775 ms/op
     p(99,9900) =  58053,775 ms/op
     p(99,9990) =  58053,775 ms/op
     p(99,9999) =  58053,775 ms/op
    p(100,0000) =  58053,775 ms/op


# Run complete. Total time: 00:17:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest    100000000           put    ss    8  56418,400 ± 2278,029  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (100000000) = 56418.400221125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 100000000, m_testType = put)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 64700,423 ms/op
# Warmup Iteration   2: 49373,569 ms/op
# Warmup Iteration   3: 44154,696 ms/op
# Warmup Iteration   4: 49871,750 ms/op
# Warmup Iteration   5: 44116,497 ms/op
# Warmup Iteration   6: 49712,690 ms/op
# Warmup Iteration   7: 44282,886 ms/op
# Warmup Iteration   8: 49633,728 ms/op
# Warmup Iteration   9: 44165,184 ms/op
# Warmup Iteration  10: 49685,157 ms/op
Iteration   1: 44188,474 ms/op
Iteration   2: 49636,517 ms/op
Iteration   3: 44096,919 ms/op
Iteration   4: 49734,263 ms/op
Iteration   5: 43858,134 ms/op
Iteration   6: 49688,657 ms/op
Iteration   7: 44159,052 ms/op
Iteration   8: 49778,722 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  46892,592 ±(99.9%) 5761,370 ms/op

  Histogram, ms/op:
    [43000,000, 43500,000) = 0
    [43500,000, 44000,000) = 1
    [44000,000, 44500,000) = 3
    [44500,000, 45000,000) = 0
    [45000,000, 45500,000) = 0
    [45500,000, 46000,000) = 0
    [46000,000, 46500,000) = 0
    [46500,000, 47000,000) = 0
    [47000,000, 47500,000) = 0
    [47500,000, 48000,000) = 0
    [48000,000, 48500,000) = 0
    [48500,000, 49000,000) = 0
    [49000,000, 49500,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  43858,134 ms/op
     p(50,0000) =  46912,496 ms/op
     p(90,0000) =  49778,722 ms/op
     p(95,0000) =  49778,722 ms/op
     p(99,0000) =  49778,722 ms/op
     p(99,9000) =  49778,722 ms/op
     p(99,9900) =  49778,722 ms/op
     p(99,9990) =  49778,722 ms/op
     p(99,9999) =  49778,722 ms/op
    p(100,0000) =  49778,722 ms/op


# Run complete. Total time: 00:14:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest    100000000           put    ss    8  46892,592 ± 5761,370  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (100000000) = 46892.592415625004
Results for test type = put:
,10000,100000,1000000,10000000,100000000
tests.maptests.article_examples.IntIntMap1Test,"4669","5408","8027","13799","18330"
tests.maptests.article_examples.IntIntMap2Test,"1478","2038","6949","16823","24972"
tests.maptests.article_examples.IntIntMap3Test,"1126","1711","5939","10365","14324"
tests.maptests.article_examples.IntIntMap4Test,"1020","1654","4386","7955","9015"
tests.maptests.article_examples.IntIntMap4aTest,"936","1610","4303","7071","8158"
tests.maptests.primitive.FastUtilMapTest,"1034","1553","4542","9159","11489"
tests.maptests.primitive.GsMutableMapTest,"1364","1948","5982","7811","9591"
tests.maptests.primitive.KolobokeMutableMapTest,"928","1907","4310","5677","8061"
tests.maptests.primitive.HppcMapTest,"1214","1681","4682","8800","11261"
tests.maptests.primitive.TroveJbMapTest,"2564","3512","8302","16099","22556"
tests.maptests.primitive.TroveMapTest,"2509","3228","8155","18844","24063"
tests.maptests.object.FastUtilObjMapTest,"2098","3054","25508","22043","42876"
tests.maptests.object.KolobokeMutableObjTest,"2489","5833","27332","19196","34898"
tests.maptests.object.KolobokeNotNullKeyObjTest,"2566","5869","27526","19702","34584"
tests.maptests.object.KolobokeHashCodeMixingObjTest,"3075","6591","29269","22280","41858"
tests.maptests.object.HppcObjMapTest,"2503","3525","27779","22771","51795"
tests.maptests.object.GsObjMapTest,"2786","8522","17859","19364","41120"
tests.maptests.object.JdkMapTest,"4636","7372","19003","33358","61827"
tests.maptests.object.JdkMapTestDifferentCapacity,"3165","5109","16574","25991","55876"
tests.maptests.object.TroveJbObjMapTest,"4577","6110","27078","33461","64130"
tests.maptests.object.TroveObjMapTest,"4223","5898","33808","29488","53873"
tests.maptests.article_examples.ObjObjMapTest,"2094","3124","25401","22428","42534"
tests.maptests.prim_object.FastUtilIntObjectMapTest,"1101","1635","4687","8540","11601"
tests.maptests.prim_object.GsIntObjectMapTest,"1311","2226","6305","9435","12576"
tests.maptests.prim_object.KolobokeIntObjectMapTest,"1073","1838","5303","8597","11652"
tests.maptests.prim_object.HppcIntObjectMapTest,"1491","2105","5594","8777","11087"
tests.maptests.prim_object.TroveJbIntObjectMapTest,"3436","4415","13440","18801","36144"
tests.maptests.prim_object.TroveIntObjectMapTest,"2851","3683","9140","18716","23786"
tests.maptests.object_prim.FastUtilObjectIntMapTest,"1724","2649","11064","11653","26687"
tests.maptests.object_prim.GsObjectIntMapTest,"1964","3037","12852","13639","28667"
tests.maptests.object_prim.KolobokeObjectIntMapTest,"2197","3002","13157","14026","27518"
tests.maptests.object_prim.HppcObjectIntMapTest,"2157","2966","13191","13783","27869"
tests.maptests.object_prim.TroveJbObjectIntMapTest,"3868","5179","27425","24943","42197"
tests.maptests.object_prim.TroveObjectIntMapTest,"4249","4999","21417","25005","35397"
tests.maptests.identity_object.FastUtilRef2ObjectMapTest,"1921","2561","32489","28169","37780"
tests.maptests.identity_object.GsIdentityMapTest,"2819","6571","15614","17618","38272"
tests.maptests.identity_object.KolobokeIdentityMapTest,"2924","5781","13872","23498","39224"
tests.maptests.identity_object.HppcIdentityMapTest,"2286","2985","34278","17796","39791"
tests.maptests.identity_object.JDKIdentityMapTest,"2822","4106","30916","21216","28797"
tests.maptests.identity_object.TroveJbIdentityMapTest,"4375","5206","37342","29673","56418"
tests.maptests.identity_object.TroveIdentityMapTest,"4124","5259","39640","26626","46892"

# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4083,182 ms/op
# Warmup Iteration   2: 3854,805 ms/op
# Warmup Iteration   3: 3914,265 ms/op
# Warmup Iteration   4: 3938,170 ms/op
# Warmup Iteration   5: 3859,834 ms/op
# Warmup Iteration   6: 3889,372 ms/op
# Warmup Iteration   7: 3786,598 ms/op
# Warmup Iteration   8: 3781,091 ms/op
# Warmup Iteration   9: 3809,278 ms/op
# Warmup Iteration  10: 3804,758 ms/op
Iteration   1: 3739,408 ms/op
Iteration   2: 3818,242 ms/op
Iteration   3: 3801,072 ms/op
Iteration   4: 3736,356 ms/op
Iteration   5: 3744,120 ms/op
Iteration   6: 3702,708 ms/op
Iteration   7: 3707,835 ms/op
Iteration   8: 3725,944 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3746,961 ±(99.9%) 79,550 ms/op

  Histogram, ms/op:
    [3700,000, 3712,500) = 2
    [3712,500, 3725,000) = 0
    [3725,000, 3737,500) = 2
    [3737,500, 3750,000) = 2
    [3750,000, 3762,500) = 0
    [3762,500, 3775,000) = 0
    [3775,000, 3787,500) = 0
    [3787,500, 3800,000) = 0
    [3800,000, 3812,500) = 1
    [3812,500, 3825,000) = 1
    [3825,000, 3837,500) = 0
    [3837,500, 3850,000) = 0
    [3850,000, 3862,500) = 0
    [3862,500, 3875,000) = 0
    [3875,000, 3887,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   3702,708 ms/op
     p(50,0000) =   3737,882 ms/op
     p(90,0000) =   3818,242 ms/op
     p(95,0000) =   3818,242 ms/op
     p(99,0000) =   3818,242 ms/op
     p(99,9000) =   3818,242 ms/op
     p(99,9900) =   3818,242 ms/op
     p(99,9990) =   3818,242 ms/op
     p(99,9999) =   3818,242 ms/op
    p(100,0000) =   3818,242 ms/op


# Run complete. Total time: 00:01:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test        10000        remove    ss    8  3746,961 ± 79,550  ms/op
tests.maptests.article_examples.IntIntMap1Test (10000) = 3746.9606875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1420,080 ms/op
# Warmup Iteration   2: 1219,766 ms/op
# Warmup Iteration   3: 1203,747 ms/op
# Warmup Iteration   4: 1222,726 ms/op
# Warmup Iteration   5: 1236,594 ms/op
# Warmup Iteration   6: 1192,293 ms/op
# Warmup Iteration   7: 1202,508 ms/op
# Warmup Iteration   8: 1206,997 ms/op
# Warmup Iteration   9: 1204,550 ms/op
# Warmup Iteration  10: 1194,244 ms/op
Iteration   1: 1202,548 ms/op
Iteration   2: 1209,666 ms/op
Iteration   3: 1219,277 ms/op
Iteration   4: 1239,927 ms/op
Iteration   5: 1206,694 ms/op
Iteration   6: 1218,534 ms/op
Iteration   7: 1231,048 ms/op
Iteration   8: 1205,556 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1216,656 ±(99.9%) 25,339 ms/op

  Histogram, ms/op:
    [1200,000, 1202,500) = 0
    [1202,500, 1205,000) = 1
    [1205,000, 1207,500) = 2
    [1207,500, 1210,000) = 1
    [1210,000, 1212,500) = 0
    [1212,500, 1215,000) = 0
    [1215,000, 1217,500) = 0
    [1217,500, 1220,000) = 2
    [1220,000, 1222,500) = 0
    [1222,500, 1225,000) = 0
    [1225,000, 1227,500) = 0
    [1227,500, 1230,000) = 0
    [1230,000, 1232,500) = 1
    [1232,500, 1235,000) = 0
    [1235,000, 1237,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1202,548 ms/op
     p(50,0000) =   1214,100 ms/op
     p(90,0000) =   1239,927 ms/op
     p(95,0000) =   1239,927 ms/op
     p(99,0000) =   1239,927 ms/op
     p(99,9000) =   1239,927 ms/op
     p(99,9900) =   1239,927 ms/op
     p(99,9990) =   1239,927 ms/op
     p(99,9999) =   1239,927 ms/op
    p(100,0000) =   1239,927 ms/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test        10000        remove    ss    8  1216,656 ± 25,339  ms/op
tests.maptests.article_examples.IntIntMap2Test (10000) = 1216.656376875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1115,871 ms/op
# Warmup Iteration   2: 984,762 ms/op
# Warmup Iteration   3: 990,199 ms/op
# Warmup Iteration   4: 1051,559 ms/op
# Warmup Iteration   5: 985,467 ms/op
# Warmup Iteration   6: 989,382 ms/op
# Warmup Iteration   7: 993,337 ms/op
# Warmup Iteration   8: 986,895 ms/op
# Warmup Iteration   9: 982,439 ms/op
# Warmup Iteration  10: 991,089 ms/op
Iteration   1: 987,767 ms/op
Iteration   2: 978,339 ms/op
Iteration   3: 972,468 ms/op
Iteration   4: 984,865 ms/op
Iteration   5: 986,225 ms/op
Iteration   6: 980,788 ms/op
Iteration   7: 986,487 ms/op
Iteration   8: 981,306 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    982,281 ±(99.9%) 9,830 ms/op

  Histogram, ms/op:
    [970,000, 971,250) = 0
    [971,250, 972,500) = 1
    [972,500, 973,750) = 0
    [973,750, 975,000) = 0
    [975,000, 976,250) = 0
    [976,250, 977,500) = 0
    [977,500, 978,750) = 1
    [978,750, 980,000) = 0
    [980,000, 981,250) = 1
    [981,250, 982,500) = 1
    [982,500, 983,750) = 0
    [983,750, 985,000) = 1
    [985,000, 986,250) = 1
    [986,250, 987,500) = 1
    [987,500, 988,750) = 1

  Percentiles, ms/op:
      p(0,0000) =    972,468 ms/op
     p(50,0000) =    983,086 ms/op
     p(90,0000) =    987,767 ms/op
     p(95,0000) =    987,767 ms/op
     p(99,0000) =    987,767 ms/op
     p(99,9000) =    987,767 ms/op
     p(99,9900) =    987,767 ms/op
     p(99,9990) =    987,767 ms/op
     p(99,9999) =    987,767 ms/op
    p(100,0000) =    987,767 ms/op


# Run complete. Total time: 00:00:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score   Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test        10000        remove    ss    8  982,281 ± 9,830  ms/op
tests.maptests.article_examples.IntIntMap3Test (10000) = 982.2805490000001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 843,200 ms/op
# Warmup Iteration   2: 715,890 ms/op
# Warmup Iteration   3: 731,237 ms/op
# Warmup Iteration   4: 724,891 ms/op
# Warmup Iteration   5: 726,939 ms/op
# Warmup Iteration   6: 717,630 ms/op
# Warmup Iteration   7: 735,861 ms/op
# Warmup Iteration   8: 711,347 ms/op
# Warmup Iteration   9: 712,396 ms/op
# Warmup Iteration  10: 702,650 ms/op
Iteration   1: 716,059 ms/op
Iteration   2: 706,053 ms/op
Iteration   3: 721,031 ms/op
Iteration   4: 766,869 ms/op
Iteration   5: 721,436 ms/op
Iteration   6: 719,095 ms/op
Iteration   7: 698,595 ms/op
Iteration   8: 698,481 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    718,452 ±(99.9%) 41,594 ms/op

  Histogram, ms/op:
    [690,000, 695,000) = 0
    [695,000, 700,000) = 2
    [700,000, 705,000) = 0
    [705,000, 710,000) = 1
    [710,000, 715,000) = 0
    [715,000, 720,000) = 2
    [720,000, 725,000) = 2
    [725,000, 730,000) = 0
    [730,000, 735,000) = 0
    [735,000, 740,000) = 0
    [740,000, 745,000) = 0
    [745,000, 750,000) = 0
    [750,000, 755,000) = 0
    [755,000, 760,000) = 0
    [760,000, 765,000) = 0

  Percentiles, ms/op:
      p(0,0000) =    698,481 ms/op
     p(50,0000) =    717,577 ms/op
     p(90,0000) =    766,869 ms/op
     p(95,0000) =    766,869 ms/op
     p(99,0000) =    766,869 ms/op
     p(99,9000) =    766,869 ms/op
     p(99,9900) =    766,869 ms/op
     p(99,9990) =    766,869 ms/op
     p(99,9999) =    766,869 ms/op
    p(100,0000) =    766,869 ms/op


# Run complete. Total time: 00:00:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test        10000        remove    ss    8  718,452 ± 41,594  ms/op
tests.maptests.article_examples.IntIntMap4Test (10000) = 718.4524618749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 760,962 ms/op
# Warmup Iteration   2: 643,018 ms/op
# Warmup Iteration   3: 634,806 ms/op
# Warmup Iteration   4: 629,992 ms/op
# Warmup Iteration   5: 620,504 ms/op
# Warmup Iteration   6: 631,988 ms/op
# Warmup Iteration   7: 647,565 ms/op
# Warmup Iteration   8: 623,900 ms/op
# Warmup Iteration   9: 631,965 ms/op
# Warmup Iteration  10: 622,111 ms/op
Iteration   1: 619,931 ms/op
Iteration   2: 627,758 ms/op
Iteration   3: 640,082 ms/op
Iteration   4: 622,905 ms/op
Iteration   5: 639,459 ms/op
Iteration   6: 623,799 ms/op
Iteration   7: 620,616 ms/op
Iteration   8: 620,448 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    626,875 ±(99.9%) 15,955 ms/op

  Histogram, ms/op:
    [610,000, 612,500) = 0
    [612,500, 615,000) = 0
    [615,000, 617,500) = 0
    [617,500, 620,000) = 1
    [620,000, 622,500) = 2
    [622,500, 625,000) = 2
    [625,000, 627,500) = 0
    [627,500, 630,000) = 1
    [630,000, 632,500) = 0
    [632,500, 635,000) = 0
    [635,000, 637,500) = 0
    [637,500, 640,000) = 1
    [640,000, 642,500) = 1
    [642,500, 645,000) = 0
    [645,000, 647,500) = 0

  Percentiles, ms/op:
      p(0,0000) =    619,931 ms/op
     p(50,0000) =    623,352 ms/op
     p(90,0000) =    640,082 ms/op
     p(95,0000) =    640,082 ms/op
     p(99,0000) =    640,082 ms/op
     p(99,9000) =    640,082 ms/op
     p(99,9900) =    640,082 ms/op
     p(99,9990) =    640,082 ms/op
     p(99,9999) =    640,082 ms/op
    p(100,0000) =    640,082 ms/op


# Run complete. Total time: 00:00:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest        10000        remove    ss    8  626,875 ± 15,955  ms/op
tests.maptests.article_examples.IntIntMap4aTest (10000) = 626.8748302500001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 883,189 ms/op
# Warmup Iteration   2: 749,522 ms/op
# Warmup Iteration   3: 753,512 ms/op
# Warmup Iteration   4: 712,140 ms/op
# Warmup Iteration   5: 745,268 ms/op
# Warmup Iteration   6: 712,378 ms/op
# Warmup Iteration   7: 784,129 ms/op
# Warmup Iteration   8: 743,464 ms/op
# Warmup Iteration   9: 738,242 ms/op
# Warmup Iteration  10: 741,725 ms/op
Iteration   1: 729,312 ms/op
Iteration   2: 705,362 ms/op
Iteration   3: 717,793 ms/op
Iteration   4: 734,091 ms/op
Iteration   5: 751,209 ms/op
Iteration   6: 743,146 ms/op
Iteration   7: 729,855 ms/op
Iteration   8: 718,932 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    728,712 ±(99.9%) 28,037 ms/op

  Histogram, ms/op:
    [700,000, 705,000) = 0
    [705,000, 710,000) = 1
    [710,000, 715,000) = 0
    [715,000, 720,000) = 2
    [720,000, 725,000) = 0
    [725,000, 730,000) = 2
    [730,000, 735,000) = 1
    [735,000, 740,000) = 0
    [740,000, 745,000) = 1
    [745,000, 750,000) = 0
    [750,000, 755,000) = 1

  Percentiles, ms/op:
      p(0,0000) =    705,362 ms/op
     p(50,0000) =    729,583 ms/op
     p(90,0000) =    751,209 ms/op
     p(95,0000) =    751,209 ms/op
     p(99,0000) =    751,209 ms/op
     p(99,9000) =    751,209 ms/op
     p(99,9900) =    751,209 ms/op
     p(99,9990) =    751,209 ms/op
     p(99,9999) =    751,209 ms/op
    p(100,0000) =    751,209 ms/op


# Run complete. Total time: 00:00:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest        10000        remove    ss    8  728,712 ± 28,037  ms/op
tests.maptests.primitive.FastUtilMapTest (10000) = 728.7123797500001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2546,728 ms/op
# Warmup Iteration   2: 2393,978 ms/op
# Warmup Iteration   3: 2394,315 ms/op
# Warmup Iteration   4: 2367,000 ms/op
# Warmup Iteration   5: 2381,757 ms/op
# Warmup Iteration   6: 2365,286 ms/op
# Warmup Iteration   7: 2448,169 ms/op
# Warmup Iteration   8: 2386,577 ms/op
# Warmup Iteration   9: 2347,577 ms/op
# Warmup Iteration  10: 2352,249 ms/op
Iteration   1: 2379,667 ms/op
Iteration   2: 2381,329 ms/op
Iteration   3: 2376,010 ms/op
Iteration   4: 2360,332 ms/op
Iteration   5: 2365,829 ms/op
Iteration   6: 2374,135 ms/op
Iteration   7: 2382,748 ms/op
Iteration   8: 2369,528 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2373,697 ±(99.9%) 15,146 ms/op

  Histogram, ms/op:
    [2360,000, 2362,500) = 1
    [2362,500, 2365,000) = 0
    [2365,000, 2367,500) = 1
    [2367,500, 2370,000) = 1
    [2370,000, 2372,500) = 0
    [2372,500, 2375,000) = 1
    [2375,000, 2377,500) = 1
    [2377,500, 2380,000) = 1
    [2380,000, 2382,500) = 1
    [2382,500, 2385,000) = 1
    [2385,000, 2387,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2360,332 ms/op
     p(50,0000) =   2375,072 ms/op
     p(90,0000) =   2382,748 ms/op
     p(95,0000) =   2382,748 ms/op
     p(99,0000) =   2382,748 ms/op
     p(99,9000) =   2382,748 ms/op
     p(99,9900) =   2382,748 ms/op
     p(99,9990) =   2382,748 ms/op
     p(99,9999) =   2382,748 ms/op
    p(100,0000) =   2382,748 ms/op


# Run complete. Total time: 00:00:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest        10000        remove    ss    8  2373,697 ± 15,146  ms/op
tests.maptests.primitive.GsMutableMapTest (10000) = 2373.6973026250002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 817,083 ms/op
# Warmup Iteration   2: 655,145 ms/op
# Warmup Iteration   3: 634,733 ms/op
# Warmup Iteration   4: 654,572 ms/op
# Warmup Iteration   5: 653,994 ms/op
# Warmup Iteration   6: 635,302 ms/op
# Warmup Iteration   7: 649,849 ms/op
# Warmup Iteration   8: 641,756 ms/op
# Warmup Iteration   9: 630,590 ms/op
# Warmup Iteration  10: 632,254 ms/op
Iteration   1: 658,976 ms/op
Iteration   2: 645,090 ms/op
Iteration   3: 658,063 ms/op
Iteration   4: 652,367 ms/op
Iteration   5: 639,316 ms/op
Iteration   6: 647,562 ms/op
Iteration   7: 641,459 ms/op
Iteration   8: 636,180 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =    647,377 ±(99.9%) 16,228 ms/op

  Histogram, ms/op:
    [630,000, 632,500) = 0
    [632,500, 635,000) = 0
    [635,000, 637,500) = 1
    [637,500, 640,000) = 1
    [640,000, 642,500) = 1
    [642,500, 645,000) = 0
    [645,000, 647,500) = 1
    [647,500, 650,000) = 1
    [650,000, 652,500) = 1
    [652,500, 655,000) = 0
    [655,000, 657,500) = 0

  Percentiles, ms/op:
      p(0,0000) =    636,180 ms/op
     p(50,0000) =    646,326 ms/op
     p(90,0000) =    658,976 ms/op
     p(95,0000) =    658,976 ms/op
     p(99,0000) =    658,976 ms/op
     p(99,9000) =    658,976 ms/op
     p(99,9900) =    658,976 ms/op
     p(99,9990) =    658,976 ms/op
     p(99,9999) =    658,976 ms/op
    p(100,0000) =    658,976 ms/op


# Run complete. Total time: 00:00:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt    Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest        10000        remove    ss    8  647,377 ± 16,228  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (10000) = 647.376615625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1245,506 ms/op
# Warmup Iteration   2: 1130,873 ms/op
# Warmup Iteration   3: 1129,600 ms/op
# Warmup Iteration   4: 1142,746 ms/op
# Warmup Iteration   5: 1140,196 ms/op
# Warmup Iteration   6: 1153,233 ms/op
# Warmup Iteration   7: 1155,042 ms/op
# Warmup Iteration   8: 1170,665 ms/op
# Warmup Iteration   9: 1180,967 ms/op
# Warmup Iteration  10: 1180,258 ms/op
Iteration   1: 1137,952 ms/op
Iteration   2: 1145,660 ms/op
Iteration   3: 1183,444 ms/op
Iteration   4: 1170,726 ms/op
Iteration   5: 1147,824 ms/op
Iteration   6: 1176,953 ms/op
Iteration   7: 1177,352 ms/op
Iteration   8: 1134,670 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1159,323 ±(99.9%) 37,766 ms/op

  Histogram, ms/op:
    [1130,000, 1135,000) = 1
    [1135,000, 1140,000) = 1
    [1140,000, 1145,000) = 0
    [1145,000, 1150,000) = 2
    [1150,000, 1155,000) = 0
    [1155,000, 1160,000) = 0
    [1160,000, 1165,000) = 0
    [1165,000, 1170,000) = 0
    [1170,000, 1175,000) = 1
    [1175,000, 1180,000) = 2
    [1180,000, 1185,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1134,670 ms/op
     p(50,0000) =   1159,275 ms/op
     p(90,0000) =   1183,444 ms/op
     p(95,0000) =   1183,444 ms/op
     p(99,0000) =   1183,444 ms/op
     p(99,9000) =   1183,444 ms/op
     p(99,9900) =   1183,444 ms/op
     p(99,9990) =   1183,444 ms/op
     p(99,9999) =   1183,444 ms/op
    p(100,0000) =   1183,444 ms/op


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest        10000        remove    ss    8  1159,323 ± 37,766  ms/op
tests.maptests.primitive.HppcMapTest (10000) = 1159.3227333749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3312,008 ms/op
# Warmup Iteration   2: 3170,827 ms/op
# Warmup Iteration   3: 3212,138 ms/op
# Warmup Iteration   4: 3182,344 ms/op
# Warmup Iteration   5: 3262,572 ms/op
# Warmup Iteration   6: 3208,985 ms/op
# Warmup Iteration   7: 3185,833 ms/op
# Warmup Iteration   8: 3191,807 ms/op
# Warmup Iteration   9: 3194,022 ms/op
# Warmup Iteration  10: 3185,561 ms/op
Iteration   1: 3178,469 ms/op
Iteration   2: 3174,898 ms/op
Iteration   3: 3173,348 ms/op
Iteration   4: 3226,039 ms/op
Iteration   5: 3174,103 ms/op
Iteration   6: 3176,007 ms/op
Iteration   7: 3175,032 ms/op
Iteration   8: 3183,536 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3182,679 ±(99.9%) 34,070 ms/op

  Histogram, ms/op:
    [3170,000, 3175,000) = 3
    [3175,000, 3180,000) = 3
    [3180,000, 3185,000) = 1
    [3185,000, 3190,000) = 0
    [3190,000, 3195,000) = 0
    [3195,000, 3200,000) = 0
    [3200,000, 3205,000) = 0
    [3205,000, 3210,000) = 0
    [3210,000, 3215,000) = 0
    [3215,000, 3220,000) = 0
    [3220,000, 3225,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3173,348 ms/op
     p(50,0000) =   3175,520 ms/op
     p(90,0000) =   3226,039 ms/op
     p(95,0000) =   3226,039 ms/op
     p(99,0000) =   3226,039 ms/op
     p(99,9000) =   3226,039 ms/op
     p(99,9900) =   3226,039 ms/op
     p(99,9990) =   3226,039 ms/op
     p(99,9999) =   3226,039 ms/op
    p(100,0000) =   3226,039 ms/op


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest        10000        remove    ss    8  3182,679 ± 34,070  ms/op
tests.maptests.primitive.TroveJbMapTest (10000) = 3182.67898275
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2928,330 ms/op
# Warmup Iteration   2: 2733,523 ms/op
# Warmup Iteration   3: 2746,479 ms/op
# Warmup Iteration   4: 2766,376 ms/op
# Warmup Iteration   5: 2772,492 ms/op
# Warmup Iteration   6: 2746,475 ms/op
# Warmup Iteration   7: 2729,779 ms/op
# Warmup Iteration   8: 2734,527 ms/op
# Warmup Iteration   9: 2743,389 ms/op
# Warmup Iteration  10: 2734,691 ms/op
Iteration   1: 2744,351 ms/op
Iteration   2: 2768,011 ms/op
Iteration   3: 2794,783 ms/op
Iteration   4: 2780,079 ms/op
Iteration   5: 2810,040 ms/op
Iteration   6: 2749,861 ms/op
Iteration   7: 2739,266 ms/op
Iteration   8: 2729,255 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2764,456 ±(99.9%) 54,775 ms/op

  Histogram, ms/op:
    [2720,000, 2730,000) = 1
    [2730,000, 2740,000) = 1
    [2740,000, 2750,000) = 2
    [2750,000, 2760,000) = 0
    [2760,000, 2770,000) = 1
    [2770,000, 2780,000) = 0
    [2780,000, 2790,000) = 1
    [2790,000, 2800,000) = 1
    [2800,000, 2810,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2729,255 ms/op
     p(50,0000) =   2758,936 ms/op
     p(90,0000) =   2810,040 ms/op
     p(95,0000) =   2810,040 ms/op
     p(99,0000) =   2810,040 ms/op
     p(99,9000) =   2810,040 ms/op
     p(99,9900) =   2810,040 ms/op
     p(99,9990) =   2810,040 ms/op
     p(99,9999) =   2810,040 ms/op
    p(100,0000) =   2810,040 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest        10000        remove    ss    8  2764,456 ± 54,775  ms/op
tests.maptests.primitive.TroveMapTest (10000) = 2764.4558567499994
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1768,220 ms/op
# Warmup Iteration   2: 1620,168 ms/op
# Warmup Iteration   3: 1633,998 ms/op
# Warmup Iteration   4: 1651,012 ms/op
# Warmup Iteration   5: 1658,883 ms/op
# Warmup Iteration   6: 1653,950 ms/op
# Warmup Iteration   7: 1656,952 ms/op
# Warmup Iteration   8: 1623,960 ms/op
# Warmup Iteration   9: 1632,875 ms/op
# Warmup Iteration  10: 1697,169 ms/op
Iteration   1: 1618,616 ms/op
Iteration   2: 1663,894 ms/op
Iteration   3: 1677,555 ms/op
Iteration   4: 1663,291 ms/op
Iteration   5: 1645,169 ms/op
Iteration   6: 1624,942 ms/op
Iteration   7: 1650,394 ms/op
Iteration   8: 1636,558 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1647,552 ±(99.9%) 38,904 ms/op

  Histogram, ms/op:
    [1610,000, 1615,000) = 0
    [1615,000, 1620,000) = 1
    [1620,000, 1625,000) = 1
    [1625,000, 1630,000) = 0
    [1630,000, 1635,000) = 0
    [1635,000, 1640,000) = 1
    [1640,000, 1645,000) = 0
    [1645,000, 1650,000) = 1
    [1650,000, 1655,000) = 1
    [1655,000, 1660,000) = 0
    [1660,000, 1665,000) = 2
    [1665,000, 1670,000) = 0
    [1670,000, 1675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1618,616 ms/op
     p(50,0000) =   1647,781 ms/op
     p(90,0000) =   1677,555 ms/op
     p(95,0000) =   1677,555 ms/op
     p(99,0000) =   1677,555 ms/op
     p(99,9000) =   1677,555 ms/op
     p(99,9900) =   1677,555 ms/op
     p(99,9990) =   1677,555 ms/op
     p(99,9999) =   1677,555 ms/op
    p(100,0000) =   1677,555 ms/op


# Run complete. Total time: 00:00:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest        10000        remove    ss    8  1647,552 ± 38,904  ms/op
tests.maptests.object.FastUtilObjMapTest (10000) = 1647.5523130000001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2047,966 ms/op
# Warmup Iteration   2: 1893,614 ms/op
# Warmup Iteration   3: 1896,501 ms/op
# Warmup Iteration   4: 1896,468 ms/op
# Warmup Iteration   5: 1889,420 ms/op
# Warmup Iteration   6: 1947,548 ms/op
# Warmup Iteration   7: 1887,852 ms/op
# Warmup Iteration   8: 1898,237 ms/op
# Warmup Iteration   9: 1907,251 ms/op
# Warmup Iteration  10: 1887,309 ms/op
Iteration   1: 1896,458 ms/op
Iteration   2: 1878,558 ms/op
Iteration   3: 1908,105 ms/op
Iteration   4: 1887,059 ms/op
Iteration   5: 1922,276 ms/op
Iteration   6: 1901,838 ms/op
Iteration   7: 1890,520 ms/op
Iteration   8: 1911,272 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1899,511 ±(99.9%) 27,233 ms/op

  Histogram, ms/op:
    [1870,000, 1875,000) = 0
    [1875,000, 1880,000) = 1
    [1880,000, 1885,000) = 0
    [1885,000, 1890,000) = 1
    [1890,000, 1895,000) = 1
    [1895,000, 1900,000) = 1
    [1900,000, 1905,000) = 1
    [1905,000, 1910,000) = 1
    [1910,000, 1915,000) = 1
    [1915,000, 1920,000) = 0
    [1920,000, 1925,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1878,558 ms/op
     p(50,0000) =   1899,148 ms/op
     p(90,0000) =   1922,276 ms/op
     p(95,0000) =   1922,276 ms/op
     p(99,0000) =   1922,276 ms/op
     p(99,9000) =   1922,276 ms/op
     p(99,9900) =   1922,276 ms/op
     p(99,9990) =   1922,276 ms/op
     p(99,9999) =   1922,276 ms/op
    p(100,0000) =   1922,276 ms/op


# Run complete. Total time: 00:00:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest        10000        remove    ss    8  1899,511 ± 27,233  ms/op
tests.maptests.object.KolobokeMutableObjTest (10000) = 1899.5106891250002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2200,912 ms/op
# Warmup Iteration   2: 2015,185 ms/op
# Warmup Iteration   3: 2020,076 ms/op
# Warmup Iteration   4: 2007,904 ms/op
# Warmup Iteration   5: 1996,648 ms/op
# Warmup Iteration   6: 2017,960 ms/op
# Warmup Iteration   7: 1993,340 ms/op
# Warmup Iteration   8: 2013,062 ms/op
# Warmup Iteration   9: 2014,090 ms/op
# Warmup Iteration  10: 1998,543 ms/op
Iteration   1: 2023,514 ms/op
Iteration   2: 2020,242 ms/op
Iteration   3: 2019,690 ms/op
Iteration   4: 2015,803 ms/op
Iteration   5: 2001,653 ms/op
Iteration   6: 2084,766 ms/op
Iteration   7: 1996,861 ms/op
Iteration   8: 1987,078 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2018,701 ±(99.9%) 56,751 ms/op

  Histogram, ms/op:
    [1980,000, 1990,000) = 1
    [1990,000, 2000,000) = 1
    [2000,000, 2010,000) = 1
    [2010,000, 2020,000) = 2
    [2020,000, 2030,000) = 2
    [2030,000, 2040,000) = 0
    [2040,000, 2050,000) = 0
    [2050,000, 2060,000) = 0
    [2060,000, 2070,000) = 0
    [2070,000, 2080,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1987,078 ms/op
     p(50,0000) =   2017,747 ms/op
     p(90,0000) =   2084,766 ms/op
     p(95,0000) =   2084,766 ms/op
     p(99,0000) =   2084,766 ms/op
     p(99,9000) =   2084,766 ms/op
     p(99,9900) =   2084,766 ms/op
     p(99,9990) =   2084,766 ms/op
     p(99,9999) =   2084,766 ms/op
    p(100,0000) =   2084,766 ms/op


# Run complete. Total time: 00:00:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest        10000        remove    ss    8  2018,701 ± 56,751  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (10000) = 2018.7009037499997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2195,268 ms/op
# Warmup Iteration   2: 2022,956 ms/op
# Warmup Iteration   3: 2011,773 ms/op
# Warmup Iteration   4: 2023,574 ms/op
# Warmup Iteration   5: 2032,983 ms/op
# Warmup Iteration   6: 2004,647 ms/op
# Warmup Iteration   7: 2008,968 ms/op
# Warmup Iteration   8: 2033,708 ms/op
# Warmup Iteration   9: 2031,496 ms/op
# Warmup Iteration  10: 2083,607 ms/op
Iteration   1: 2043,963 ms/op
Iteration   2: 2028,426 ms/op
Iteration   3: 2017,297 ms/op
Iteration   4: 2050,557 ms/op
Iteration   5: 2066,437 ms/op
Iteration   6: 2038,547 ms/op
Iteration   7: 2021,605 ms/op
Iteration   8: 2045,804 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2039,079 ±(99.9%) 31,023 ms/op

  Histogram, ms/op:
    [2010,000, 2015,000) = 0
    [2015,000, 2020,000) = 1
    [2020,000, 2025,000) = 1
    [2025,000, 2030,000) = 1
    [2030,000, 2035,000) = 0
    [2035,000, 2040,000) = 1
    [2040,000, 2045,000) = 1
    [2045,000, 2050,000) = 1
    [2050,000, 2055,000) = 1
    [2055,000, 2060,000) = 0
    [2060,000, 2065,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2017,297 ms/op
     p(50,0000) =   2041,255 ms/op
     p(90,0000) =   2066,437 ms/op
     p(95,0000) =   2066,437 ms/op
     p(99,0000) =   2066,437 ms/op
     p(99,9000) =   2066,437 ms/op
     p(99,9900) =   2066,437 ms/op
     p(99,9990) =   2066,437 ms/op
     p(99,9999) =   2066,437 ms/op
    p(100,0000) =   2066,437 ms/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest        10000        remove    ss    8  2039,079 ± 31,023  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (10000) = 2039.0794139999998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2056,460 ms/op
# Warmup Iteration   2: 1949,146 ms/op
# Warmup Iteration   3: 1927,905 ms/op
# Warmup Iteration   4: 2006,022 ms/op
# Warmup Iteration   5: 1967,767 ms/op
# Warmup Iteration   6: 1972,991 ms/op
# Warmup Iteration   7: 1939,985 ms/op
# Warmup Iteration   8: 1961,035 ms/op
# Warmup Iteration   9: 1923,509 ms/op
# Warmup Iteration  10: 1976,084 ms/op
Iteration   1: 1941,879 ms/op
Iteration   2: 1971,670 ms/op
Iteration   3: 1940,486 ms/op
Iteration   4: 1935,905 ms/op
Iteration   5: 1934,341 ms/op
Iteration   6: 1939,606 ms/op
Iteration   7: 1939,645 ms/op
Iteration   8: 1979,616 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1947,893 ±(99.9%) 33,327 ms/op

  Histogram, ms/op:
    [1930,000, 1935,000) = 1
    [1935,000, 1940,000) = 3
    [1940,000, 1945,000) = 2
    [1945,000, 1950,000) = 0
    [1950,000, 1955,000) = 0
    [1955,000, 1960,000) = 0
    [1960,000, 1965,000) = 0
    [1965,000, 1970,000) = 0
    [1970,000, 1975,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1934,341 ms/op
     p(50,0000) =   1940,066 ms/op
     p(90,0000) =   1979,616 ms/op
     p(95,0000) =   1979,616 ms/op
     p(99,0000) =   1979,616 ms/op
     p(99,9000) =   1979,616 ms/op
     p(99,9900) =   1979,616 ms/op
     p(99,9990) =   1979,616 ms/op
     p(99,9999) =   1979,616 ms/op
    p(100,0000) =   1979,616 ms/op


# Run complete. Total time: 00:00:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest        10000        remove    ss    8  1947,893 ± 33,327  ms/op
tests.maptests.object.HppcObjMapTest (10000) = 1947.8933760000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2008,101 ms/op
# Warmup Iteration   2: 1864,247 ms/op
# Warmup Iteration   3: 1803,316 ms/op
# Warmup Iteration   4: 1834,190 ms/op
# Warmup Iteration   5: 1859,174 ms/op
# Warmup Iteration   6: 1831,649 ms/op
# Warmup Iteration   7: 1841,435 ms/op
# Warmup Iteration   8: 1858,418 ms/op
# Warmup Iteration   9: 1841,004 ms/op
# Warmup Iteration  10: 1866,175 ms/op
Iteration   1: 1858,754 ms/op
Iteration   2: 1824,783 ms/op
Iteration   3: 1851,015 ms/op
Iteration   4: 1857,580 ms/op
Iteration   5: 1915,153 ms/op
Iteration   6: 1859,823 ms/op
Iteration   7: 1832,390 ms/op
Iteration   8: 1841,926 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1855,178 ±(99.9%) 52,478 ms/op

  Histogram, ms/op:
    [1820,000, 1830,000) = 1
    [1830,000, 1840,000) = 1
    [1840,000, 1850,000) = 1
    [1850,000, 1860,000) = 4
    [1860,000, 1870,000) = 0
    [1870,000, 1880,000) = 0
    [1880,000, 1890,000) = 0
    [1890,000, 1900,000) = 0
    [1900,000, 1910,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1824,783 ms/op
     p(50,0000) =   1854,298 ms/op
     p(90,0000) =   1915,153 ms/op
     p(95,0000) =   1915,153 ms/op
     p(99,0000) =   1915,153 ms/op
     p(99,9000) =   1915,153 ms/op
     p(99,9900) =   1915,153 ms/op
     p(99,9990) =   1915,153 ms/op
     p(99,9999) =   1915,153 ms/op
    p(100,0000) =   1915,153 ms/op


# Run complete. Total time: 00:00:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest        10000        remove    ss    8  1855,178 ± 52,478  ms/op
tests.maptests.object.GsObjMapTest (10000) = 1855.1780521250002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2693,724 ms/op
# Warmup Iteration   2: 2537,487 ms/op
# Warmup Iteration   3: 2541,250 ms/op
# Warmup Iteration   4: 2526,785 ms/op
# Warmup Iteration   5: 2519,409 ms/op
# Warmup Iteration   6: 2530,053 ms/op
# Warmup Iteration   7: 2602,713 ms/op
# Warmup Iteration   8: 2543,256 ms/op
# Warmup Iteration   9: 2552,043 ms/op
# Warmup Iteration  10: 2568,254 ms/op
Iteration   1: 2565,702 ms/op
Iteration   2: 2617,098 ms/op
Iteration   3: 2617,659 ms/op
Iteration   4: 2606,443 ms/op
Iteration   5: 2617,131 ms/op
Iteration   6: 2598,884 ms/op
Iteration   7: 2607,428 ms/op
Iteration   8: 2615,183 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2605,691 ±(99.9%) 33,457 ms/op

  Histogram, ms/op:
    [2560,000, 2565,000) = 0
    [2565,000, 2570,000) = 1
    [2570,000, 2575,000) = 0
    [2575,000, 2580,000) = 0
    [2580,000, 2585,000) = 0
    [2585,000, 2590,000) = 0
    [2590,000, 2595,000) = 0
    [2595,000, 2600,000) = 1
    [2600,000, 2605,000) = 0
    [2605,000, 2610,000) = 2
    [2610,000, 2615,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2565,702 ms/op
     p(50,0000) =   2611,305 ms/op
     p(90,0000) =   2617,659 ms/op
     p(95,0000) =   2617,659 ms/op
     p(99,0000) =   2617,659 ms/op
     p(99,9000) =   2617,659 ms/op
     p(99,9900) =   2617,659 ms/op
     p(99,9990) =   2617,659 ms/op
     p(99,9999) =   2617,659 ms/op
    p(100,0000) =   2617,659 ms/op


# Run complete. Total time: 00:00:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest        10000        remove    ss    8  2605,691 ± 33,457  ms/op
tests.maptests.object.JdkMapTest (10000) = 2605.6909520000004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1901,224 ms/op
# Warmup Iteration   2: 1768,302 ms/op
# Warmup Iteration   3: 1713,537 ms/op
# Warmup Iteration   4: 1708,654 ms/op
# Warmup Iteration   5: 1723,836 ms/op
# Warmup Iteration   6: 1724,515 ms/op
# Warmup Iteration   7: 1723,785 ms/op
# Warmup Iteration   8: 1721,084 ms/op
# Warmup Iteration   9: 1713,673 ms/op
# Warmup Iteration  10: 1725,925 ms/op
Iteration   1: 1725,698 ms/op
Iteration   2: 1699,025 ms/op
Iteration   3: 1702,907 ms/op
Iteration   4: 1707,358 ms/op
Iteration   5: 1772,609 ms/op
Iteration   6: 1700,723 ms/op
Iteration   7: 1697,138 ms/op
Iteration   8: 1691,982 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1712,180 ±(99.9%) 50,494 ms/op

  Histogram, ms/op:
    [1690,000, 1695,000) = 1
    [1695,000, 1700,000) = 2
    [1700,000, 1705,000) = 2
    [1705,000, 1710,000) = 1
    [1710,000, 1715,000) = 0
    [1715,000, 1720,000) = 0
    [1720,000, 1725,000) = 0
    [1725,000, 1730,000) = 1
    [1730,000, 1735,000) = 0
    [1735,000, 1740,000) = 0
    [1740,000, 1745,000) = 0
    [1745,000, 1750,000) = 0
    [1750,000, 1755,000) = 0
    [1755,000, 1760,000) = 0
    [1760,000, 1765,000) = 0
    [1765,000, 1770,000) = 0
    [1770,000, 1775,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1691,982 ms/op
     p(50,0000) =   1701,815 ms/op
     p(90,0000) =   1772,609 ms/op
     p(95,0000) =   1772,609 ms/op
     p(99,0000) =   1772,609 ms/op
     p(99,9000) =   1772,609 ms/op
     p(99,9900) =   1772,609 ms/op
     p(99,9990) =   1772,609 ms/op
     p(99,9999) =   1772,609 ms/op
    p(100,0000) =   1772,609 ms/op


# Run complete. Total time: 00:00:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity        10000        remove    ss    8  1712,180 ± 50,494  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (10000) = 1712.180059
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3790,865 ms/op
# Warmup Iteration   2: 3674,294 ms/op
# Warmup Iteration   3: 3632,188 ms/op
# Warmup Iteration   4: 3664,896 ms/op
# Warmup Iteration   5: 3660,272 ms/op
# Warmup Iteration   6: 3702,098 ms/op
# Warmup Iteration   7: 3630,834 ms/op
# Warmup Iteration   8: 3641,804 ms/op
# Warmup Iteration   9: 3691,341 ms/op
# Warmup Iteration  10: 3643,565 ms/op
Iteration   1: 3631,987 ms/op
Iteration   2: 3645,325 ms/op
Iteration   3: 3644,605 ms/op
Iteration   4: 3715,152 ms/op
Iteration   5: 3640,669 ms/op
Iteration   6: 3644,672 ms/op
Iteration   7: 3629,487 ms/op
Iteration   8: 3646,833 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3649,841 ±(99.9%) 51,943 ms/op

  Histogram, ms/op:
    [3620,000, 3630,000) = 1
    [3630,000, 3640,000) = 1
    [3640,000, 3650,000) = 5
    [3650,000, 3660,000) = 0
    [3660,000, 3670,000) = 0
    [3670,000, 3680,000) = 0
    [3680,000, 3690,000) = 0
    [3690,000, 3700,000) = 0
    [3700,000, 3710,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3629,487 ms/op
     p(50,0000) =   3644,639 ms/op
     p(90,0000) =   3715,152 ms/op
     p(95,0000) =   3715,152 ms/op
     p(99,0000) =   3715,152 ms/op
     p(99,9000) =   3715,152 ms/op
     p(99,9900) =   3715,152 ms/op
     p(99,9990) =   3715,152 ms/op
     p(99,9999) =   3715,152 ms/op
    p(100,0000) =   3715,152 ms/op


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest        10000        remove    ss    8  3649,841 ± 51,943  ms/op
tests.maptests.object.TroveJbObjMapTest (10000) = 3649.8412260000005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4135,979 ms/op
# Warmup Iteration   2: 4098,788 ms/op
# Warmup Iteration   3: 4024,894 ms/op
# Warmup Iteration   4: 4036,616 ms/op
# Warmup Iteration   5: 4024,836 ms/op
# Warmup Iteration   6: 4040,512 ms/op
# Warmup Iteration   7: 4049,713 ms/op
# Warmup Iteration   8: 4036,573 ms/op
# Warmup Iteration   9: 4019,474 ms/op
# Warmup Iteration  10: 4094,432 ms/op
Iteration   1: 4028,007 ms/op
Iteration   2: 4024,282 ms/op
Iteration   3: 4054,366 ms/op
Iteration   4: 4048,044 ms/op
Iteration   5: 4046,936 ms/op
Iteration   6: 4051,461 ms/op
Iteration   7: 4117,225 ms/op
Iteration   8: 4054,822 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4053,143 ±(99.9%) 54,286 ms/op

  Histogram, ms/op:
    [4020,000, 4030,000) = 2
    [4030,000, 4040,000) = 0
    [4040,000, 4050,000) = 2
    [4050,000, 4060,000) = 3
    [4060,000, 4070,000) = 0
    [4070,000, 4080,000) = 0
    [4080,000, 4090,000) = 0
    [4090,000, 4100,000) = 0
    [4100,000, 4110,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4024,282 ms/op
     p(50,0000) =   4049,753 ms/op
     p(90,0000) =   4117,225 ms/op
     p(95,0000) =   4117,225 ms/op
     p(99,0000) =   4117,225 ms/op
     p(99,9000) =   4117,225 ms/op
     p(99,9900) =   4117,225 ms/op
     p(99,9990) =   4117,225 ms/op
     p(99,9999) =   4117,225 ms/op
    p(100,0000) =   4117,225 ms/op


# Run complete. Total time: 00:01:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest        10000        remove    ss    8  4053,143 ± 54,286  ms/op
tests.maptests.object.TroveObjMapTest (10000) = 4053.142950125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1760,672 ms/op
# Warmup Iteration   2: 1625,462 ms/op
# Warmup Iteration   3: 1605,349 ms/op
# Warmup Iteration   4: 1609,886 ms/op
# Warmup Iteration   5: 1660,133 ms/op
# Warmup Iteration   6: 1647,342 ms/op
# Warmup Iteration   7: 1623,224 ms/op
# Warmup Iteration   8: 1623,914 ms/op
# Warmup Iteration   9: 1628,052 ms/op
# Warmup Iteration  10: 1610,602 ms/op
Iteration   1: 1609,984 ms/op
Iteration   2: 1621,241 ms/op
Iteration   3: 1634,854 ms/op
Iteration   4: 1684,731 ms/op
Iteration   5: 1668,354 ms/op
Iteration   6: 1654,111 ms/op
Iteration   7: 1630,499 ms/op
Iteration   8: 1637,546 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1642,665 ±(99.9%) 47,513 ms/op

  Histogram, ms/op:
    [1600,000, 1605,000) = 0
    [1605,000, 1610,000) = 1
    [1610,000, 1615,000) = 0
    [1615,000, 1620,000) = 0
    [1620,000, 1625,000) = 1
    [1625,000, 1630,000) = 0
    [1630,000, 1635,000) = 2
    [1635,000, 1640,000) = 1
    [1640,000, 1645,000) = 0
    [1645,000, 1650,000) = 0
    [1650,000, 1655,000) = 1
    [1655,000, 1660,000) = 0
    [1660,000, 1665,000) = 0
    [1665,000, 1670,000) = 1
    [1670,000, 1675,000) = 0
    [1675,000, 1680,000) = 0
    [1680,000, 1685,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1609,984 ms/op
     p(50,0000) =   1636,200 ms/op
     p(90,0000) =   1684,731 ms/op
     p(95,0000) =   1684,731 ms/op
     p(99,0000) =   1684,731 ms/op
     p(99,9000) =   1684,731 ms/op
     p(99,9900) =   1684,731 ms/op
     p(99,9990) =   1684,731 ms/op
     p(99,9999) =   1684,731 ms/op
    p(100,0000) =   1684,731 ms/op


# Run complete. Total time: 00:00:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest        10000        remove    ss    8  1642,665 ± 47,513  ms/op
tests.maptests.article_examples.ObjObjMapTest (10000) = 1642.664988875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1331,133 ms/op
# Warmup Iteration   2: 1194,924 ms/op
# Warmup Iteration   3: 1195,821 ms/op
# Warmup Iteration   4: 1191,463 ms/op
# Warmup Iteration   5: 1185,882 ms/op
# Warmup Iteration   6: 1191,752 ms/op
# Warmup Iteration   7: 1204,721 ms/op
# Warmup Iteration   8: 1189,959 ms/op
# Warmup Iteration   9: 1191,324 ms/op
# Warmup Iteration  10: 1189,703 ms/op
Iteration   1: 1218,983 ms/op
Iteration   2: 1184,758 ms/op
Iteration   3: 1196,179 ms/op
Iteration   4: 1186,190 ms/op
Iteration   5: 1259,618 ms/op
Iteration   6: 1209,580 ms/op
Iteration   7: 1178,100 ms/op
Iteration   8: 1197,250 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1203,832 ±(99.9%) 50,138 ms/op

  Histogram, ms/op:
    [1170,000, 1175,000) = 0
    [1175,000, 1180,000) = 1
    [1180,000, 1185,000) = 1
    [1185,000, 1190,000) = 1
    [1190,000, 1195,000) = 0
    [1195,000, 1200,000) = 2
    [1200,000, 1205,000) = 0
    [1205,000, 1210,000) = 1
    [1210,000, 1215,000) = 0
    [1215,000, 1220,000) = 1
    [1220,000, 1225,000) = 0
    [1225,000, 1230,000) = 0
    [1230,000, 1235,000) = 0
    [1235,000, 1240,000) = 0
    [1240,000, 1245,000) = 0
    [1245,000, 1250,000) = 0
    [1250,000, 1255,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1178,100 ms/op
     p(50,0000) =   1196,715 ms/op
     p(90,0000) =   1259,618 ms/op
     p(95,0000) =   1259,618 ms/op
     p(99,0000) =   1259,618 ms/op
     p(99,9000) =   1259,618 ms/op
     p(99,9900) =   1259,618 ms/op
     p(99,9990) =   1259,618 ms/op
     p(99,9999) =   1259,618 ms/op
    p(100,0000) =   1259,618 ms/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest        10000        remove    ss    8  1203,832 ± 50,138  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (10000) = 1203.8322786249998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2889,805 ms/op
# Warmup Iteration   2: 2738,089 ms/op
# Warmup Iteration   3: 2717,053 ms/op
# Warmup Iteration   4: 2739,039 ms/op
# Warmup Iteration   5: 2742,484 ms/op
# Warmup Iteration   6: 2713,434 ms/op
# Warmup Iteration   7: 2731,355 ms/op
# Warmup Iteration   8: 2761,637 ms/op
# Warmup Iteration   9: 2719,572 ms/op
# Warmup Iteration  10: 2713,427 ms/op
Iteration   1: 2725,641 ms/op
Iteration   2: 2721,278 ms/op
Iteration   3: 2706,329 ms/op
Iteration   4: 2712,049 ms/op
Iteration   5: 2717,476 ms/op
Iteration   6: 2744,596 ms/op
Iteration   7: 2748,721 ms/op
Iteration   8: 2754,117 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2728,776 ±(99.9%) 34,413 ms/op

  Histogram, ms/op:
    [2700,000, 2705,000) = 0
    [2705,000, 2710,000) = 1
    [2710,000, 2715,000) = 1
    [2715,000, 2720,000) = 1
    [2720,000, 2725,000) = 1
    [2725,000, 2730,000) = 1
    [2730,000, 2735,000) = 0
    [2735,000, 2740,000) = 0
    [2740,000, 2745,000) = 1
    [2745,000, 2750,000) = 1
    [2750,000, 2755,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2706,329 ms/op
     p(50,0000) =   2723,460 ms/op
     p(90,0000) =   2754,117 ms/op
     p(95,0000) =   2754,117 ms/op
     p(99,0000) =   2754,117 ms/op
     p(99,9000) =   2754,117 ms/op
     p(99,9900) =   2754,117 ms/op
     p(99,9990) =   2754,117 ms/op
     p(99,9999) =   2754,117 ms/op
    p(100,0000) =   2754,117 ms/op


# Run complete. Total time: 00:00:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest        10000        remove    ss    8  2728,776 ± 34,413  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (10000) = 2728.7759961250003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1446,914 ms/op
# Warmup Iteration   2: 1297,364 ms/op
# Warmup Iteration   3: 1305,531 ms/op
# Warmup Iteration   4: 1298,995 ms/op
# Warmup Iteration   5: 1295,203 ms/op
# Warmup Iteration   6: 1281,202 ms/op
# Warmup Iteration   7: 1287,476 ms/op
# Warmup Iteration   8: 1297,521 ms/op
# Warmup Iteration   9: 1295,752 ms/op
# Warmup Iteration  10: 1281,198 ms/op
Iteration   1: 1287,082 ms/op
Iteration   2: 1290,466 ms/op
Iteration   3: 1309,449 ms/op
Iteration   4: 1295,256 ms/op
Iteration   5: 1272,373 ms/op
Iteration   6: 1281,566 ms/op
Iteration   7: 1297,741 ms/op
Iteration   8: 1290,133 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1290,508 ±(99.9%) 21,123 ms/op

  Histogram, ms/op:
    [1270,000, 1272,500) = 1
    [1272,500, 1275,000) = 0
    [1275,000, 1277,500) = 0
    [1277,500, 1280,000) = 0
    [1280,000, 1282,500) = 1
    [1282,500, 1285,000) = 0
    [1285,000, 1287,500) = 1
    [1287,500, 1290,000) = 0
    [1290,000, 1292,500) = 2
    [1292,500, 1295,000) = 0
    [1295,000, 1297,500) = 1
    [1297,500, 1300,000) = 1
    [1300,000, 1302,500) = 0
    [1302,500, 1305,000) = 0
    [1305,000, 1307,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1272,373 ms/op
     p(50,0000) =   1290,300 ms/op
     p(90,0000) =   1309,449 ms/op
     p(95,0000) =   1309,449 ms/op
     p(99,0000) =   1309,449 ms/op
     p(99,9000) =   1309,449 ms/op
     p(99,9900) =   1309,449 ms/op
     p(99,9990) =   1309,449 ms/op
     p(99,9999) =   1309,449 ms/op
    p(100,0000) =   1309,449 ms/op


# Run complete. Total time: 00:00:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest        10000        remove    ss    8  1290,508 ± 21,123  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (10000) = 1290.50827225
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1748,744 ms/op
# Warmup Iteration   2: 1615,543 ms/op
# Warmup Iteration   3: 1643,821 ms/op
# Warmup Iteration   4: 1625,410 ms/op
# Warmup Iteration   5: 1621,354 ms/op
# Warmup Iteration   6: 1639,972 ms/op
# Warmup Iteration   7: 1624,456 ms/op
# Warmup Iteration   8: 1637,306 ms/op
# Warmup Iteration   9: 1622,536 ms/op
# Warmup Iteration  10: 1614,276 ms/op
Iteration   1: 1627,001 ms/op
Iteration   2: 1640,129 ms/op
Iteration   3: 1628,995 ms/op
Iteration   4: 1626,748 ms/op
Iteration   5: 1630,063 ms/op
Iteration   6: 1629,455 ms/op
Iteration   7: 1691,500 ms/op
Iteration   8: 1651,639 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1640,691 ±(99.9%) 42,505 ms/op

  Histogram, ms/op:
    [1620,000, 1625,000) = 0
    [1625,000, 1630,000) = 4
    [1630,000, 1635,000) = 1
    [1635,000, 1640,000) = 0
    [1640,000, 1645,000) = 1
    [1645,000, 1650,000) = 0
    [1650,000, 1655,000) = 1
    [1655,000, 1660,000) = 0
    [1660,000, 1665,000) = 0
    [1665,000, 1670,000) = 0
    [1670,000, 1675,000) = 0
    [1675,000, 1680,000) = 0
    [1680,000, 1685,000) = 0
    [1685,000, 1690,000) = 0
    [1690,000, 1695,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1626,748 ms/op
     p(50,0000) =   1629,759 ms/op
     p(90,0000) =   1691,500 ms/op
     p(95,0000) =   1691,500 ms/op
     p(99,0000) =   1691,500 ms/op
     p(99,9000) =   1691,500 ms/op
     p(99,9900) =   1691,500 ms/op
     p(99,9990) =   1691,500 ms/op
     p(99,9999) =   1691,500 ms/op
    p(100,0000) =   1691,500 ms/op


# Run complete. Total time: 00:00:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest        10000        remove    ss    8  1640,691 ± 42,505  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (10000) = 1640.6911411249998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3346,258 ms/op
# Warmup Iteration   2: 3227,896 ms/op
# Warmup Iteration   3: 3233,790 ms/op
# Warmup Iteration   4: 3251,521 ms/op
# Warmup Iteration   5: 3249,398 ms/op
# Warmup Iteration   6: 3239,411 ms/op
# Warmup Iteration   7: 3284,448 ms/op
# Warmup Iteration   8: 3230,696 ms/op
# Warmup Iteration   9: 3221,762 ms/op
# Warmup Iteration  10: 3213,166 ms/op
Iteration   1: 3271,986 ms/op
Iteration   2: 3234,285 ms/op
Iteration   3: 3235,231 ms/op
Iteration   4: 3235,772 ms/op
Iteration   5: 3261,730 ms/op
Iteration   6: 3284,886 ms/op
Iteration   7: 3310,559 ms/op
Iteration   8: 3277,300 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3263,969 ±(99.9%) 52,893 ms/op

  Histogram, ms/op:
    [3230,000, 3235,000) = 1
    [3235,000, 3240,000) = 2
    [3240,000, 3245,000) = 0
    [3245,000, 3250,000) = 0
    [3250,000, 3255,000) = 0
    [3255,000, 3260,000) = 0
    [3260,000, 3265,000) = 1
    [3265,000, 3270,000) = 0
    [3270,000, 3275,000) = 1
    [3275,000, 3280,000) = 1
    [3280,000, 3285,000) = 1
    [3285,000, 3290,000) = 0
    [3290,000, 3295,000) = 0
    [3295,000, 3300,000) = 0
    [3300,000, 3305,000) = 0
    [3305,000, 3310,000) = 0
    [3310,000, 3315,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3234,285 ms/op
     p(50,0000) =   3266,858 ms/op
     p(90,0000) =   3310,559 ms/op
     p(95,0000) =   3310,559 ms/op
     p(99,0000) =   3310,559 ms/op
     p(99,9000) =   3310,559 ms/op
     p(99,9900) =   3310,559 ms/op
     p(99,9990) =   3310,559 ms/op
     p(99,9999) =   3310,559 ms/op
    p(100,0000) =   3310,559 ms/op


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest        10000        remove    ss    8  3263,969 ± 52,893  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (10000) = 3263.968610625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3320,010 ms/op
# Warmup Iteration   2: 3154,166 ms/op
# Warmup Iteration   3: 3171,199 ms/op
# Warmup Iteration   4: 3178,261 ms/op
# Warmup Iteration   5: 3165,572 ms/op
# Warmup Iteration   6: 3200,867 ms/op
# Warmup Iteration   7: 3144,883 ms/op
# Warmup Iteration   8: 3154,947 ms/op
# Warmup Iteration   9: 3146,515 ms/op
# Warmup Iteration  10: 3115,178 ms/op
Iteration   1: 3123,682 ms/op
Iteration   2: 3128,405 ms/op
Iteration   3: 3138,599 ms/op
Iteration   4: 3146,748 ms/op
Iteration   5: 3153,705 ms/op
Iteration   6: 3222,636 ms/op
Iteration   7: 3150,772 ms/op
Iteration   8: 3190,534 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3156,885 ±(99.9%) 64,043 ms/op

  Histogram, ms/op:
    [3120,000, 3130,000) = 2
    [3130,000, 3140,000) = 1
    [3140,000, 3150,000) = 1
    [3150,000, 3160,000) = 2
    [3160,000, 3170,000) = 0
    [3170,000, 3180,000) = 0
    [3180,000, 3190,000) = 0
    [3190,000, 3200,000) = 1
    [3200,000, 3210,000) = 0
    [3210,000, 3220,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3123,682 ms/op
     p(50,0000) =   3148,760 ms/op
     p(90,0000) =   3222,636 ms/op
     p(95,0000) =   3222,636 ms/op
     p(99,0000) =   3222,636 ms/op
     p(99,9000) =   3222,636 ms/op
     p(99,9900) =   3222,636 ms/op
     p(99,9990) =   3222,636 ms/op
     p(99,9999) =   3222,636 ms/op
    p(100,0000) =   3222,636 ms/op


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest        10000        remove    ss    8  3156,885 ± 64,043  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (10000) = 3156.884990125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1450,663 ms/op
# Warmup Iteration   2: 1294,065 ms/op
# Warmup Iteration   3: 1291,318 ms/op
# Warmup Iteration   4: 1284,975 ms/op
# Warmup Iteration   5: 1282,205 ms/op
# Warmup Iteration   6: 1284,504 ms/op
# Warmup Iteration   7: 1302,826 ms/op
# Warmup Iteration   8: 1279,965 ms/op
# Warmup Iteration   9: 1309,030 ms/op
# Warmup Iteration  10: 1274,226 ms/op
Iteration   1: 1276,342 ms/op
Iteration   2: 1290,480 ms/op
Iteration   3: 1357,228 ms/op
Iteration   4: 1276,651 ms/op
Iteration   5: 1303,494 ms/op
Iteration   6: 1286,478 ms/op
Iteration   7: 1277,656 ms/op
Iteration   8: 1302,793 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1296,390 ±(99.9%) 51,448 ms/op

  Histogram, ms/op:
    [1270,000, 1275,000) = 0
    [1275,000, 1280,000) = 3
    [1280,000, 1285,000) = 0
    [1285,000, 1290,000) = 1
    [1290,000, 1295,000) = 1
    [1295,000, 1300,000) = 0
    [1300,000, 1305,000) = 2
    [1305,000, 1310,000) = 0
    [1310,000, 1315,000) = 0
    [1315,000, 1320,000) = 0
    [1320,000, 1325,000) = 0
    [1325,000, 1330,000) = 0
    [1330,000, 1335,000) = 0
    [1335,000, 1340,000) = 0
    [1340,000, 1345,000) = 0
    [1345,000, 1350,000) = 0
    [1350,000, 1355,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1276,342 ms/op
     p(50,0000) =   1288,479 ms/op
     p(90,0000) =   1357,228 ms/op
     p(95,0000) =   1357,228 ms/op
     p(99,0000) =   1357,228 ms/op
     p(99,9000) =   1357,228 ms/op
     p(99,9900) =   1357,228 ms/op
     p(99,9990) =   1357,228 ms/op
     p(99,9999) =   1357,228 ms/op
    p(100,0000) =   1357,228 ms/op


# Run complete. Total time: 00:00:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest        10000        remove    ss    8  1296,390 ± 51,448  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (10000) = 1296.3901405
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3344,626 ms/op
# Warmup Iteration   2: 3176,817 ms/op
# Warmup Iteration   3: 3236,830 ms/op
# Warmup Iteration   4: 3247,072 ms/op
# Warmup Iteration   5: 3256,325 ms/op
# Warmup Iteration   6: 3322,670 ms/op
# Warmup Iteration   7: 3218,100 ms/op
# Warmup Iteration   8: 3249,118 ms/op
# Warmup Iteration   9: 3258,289 ms/op
# Warmup Iteration  10: 3229,006 ms/op
Iteration   1: 3240,333 ms/op
Iteration   2: 3246,001 ms/op
Iteration   3: 3242,771 ms/op
Iteration   4: 3259,446 ms/op
Iteration   5: 3313,564 ms/op
Iteration   6: 3255,817 ms/op
Iteration   7: 3258,378 ms/op
Iteration   8: 3247,202 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3257,939 ±(99.9%) 45,124 ms/op

  Histogram, ms/op:
    [3240,000, 3245,000) = 2
    [3245,000, 3250,000) = 2
    [3250,000, 3255,000) = 0
    [3255,000, 3260,000) = 3
    [3260,000, 3265,000) = 0
    [3265,000, 3270,000) = 0
    [3270,000, 3275,000) = 0
    [3275,000, 3280,000) = 0
    [3280,000, 3285,000) = 0
    [3285,000, 3290,000) = 0
    [3290,000, 3295,000) = 0
    [3295,000, 3300,000) = 0
    [3300,000, 3305,000) = 0
    [3305,000, 3310,000) = 0
    [3310,000, 3315,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3240,333 ms/op
     p(50,0000) =   3251,509 ms/op
     p(90,0000) =   3313,564 ms/op
     p(95,0000) =   3313,564 ms/op
     p(99,0000) =   3313,564 ms/op
     p(99,9000) =   3313,564 ms/op
     p(99,9900) =   3313,564 ms/op
     p(99,9990) =   3313,564 ms/op
     p(99,9999) =   3313,564 ms/op
    p(100,0000) =   3313,564 ms/op


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest        10000        remove    ss    8  3257,939 ± 45,124  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (10000) = 3257.938962625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1889,716 ms/op
# Warmup Iteration   2: 1763,773 ms/op
# Warmup Iteration   3: 1780,576 ms/op
# Warmup Iteration   4: 1785,786 ms/op
# Warmup Iteration   5: 1754,268 ms/op
# Warmup Iteration   6: 1750,419 ms/op
# Warmup Iteration   7: 1763,155 ms/op
# Warmup Iteration   8: 1824,457 ms/op
# Warmup Iteration   9: 1742,478 ms/op
# Warmup Iteration  10: 1738,580 ms/op
Iteration   1: 1739,280 ms/op
Iteration   2: 1760,676 ms/op
Iteration   3: 1756,367 ms/op
Iteration   4: 1760,501 ms/op
Iteration   5: 1762,798 ms/op
Iteration   6: 1745,019 ms/op
Iteration   7: 1738,654 ms/op
Iteration   8: 1771,422 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1754,340 ±(99.9%) 22,913 ms/op

  Histogram, ms/op:
    [1730,000, 1735,000) = 0
    [1735,000, 1740,000) = 2
    [1740,000, 1745,000) = 0
    [1745,000, 1750,000) = 1
    [1750,000, 1755,000) = 0
    [1755,000, 1760,000) = 1
    [1760,000, 1765,000) = 3
    [1765,000, 1770,000) = 0
    [1770,000, 1775,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1738,654 ms/op
     p(50,0000) =   1758,434 ms/op
     p(90,0000) =   1771,422 ms/op
     p(95,0000) =   1771,422 ms/op
     p(99,0000) =   1771,422 ms/op
     p(99,9000) =   1771,422 ms/op
     p(99,9900) =   1771,422 ms/op
     p(99,9990) =   1771,422 ms/op
     p(99,9999) =   1771,422 ms/op
    p(100,0000) =   1771,422 ms/op


# Run complete. Total time: 00:00:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest        10000        remove    ss    8  1754,340 ± 22,913  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (10000) = 1754.3397547499999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1746,004 ms/op
# Warmup Iteration   2: 1635,570 ms/op
# Warmup Iteration   3: 1608,043 ms/op
# Warmup Iteration   4: 1694,468 ms/op
# Warmup Iteration   5: 1617,095 ms/op
# Warmup Iteration   6: 1628,225 ms/op
# Warmup Iteration   7: 1615,701 ms/op
# Warmup Iteration   8: 1632,098 ms/op
# Warmup Iteration   9: 1623,959 ms/op
# Warmup Iteration  10: 1634,612 ms/op
Iteration   1: 1638,091 ms/op
Iteration   2: 1630,657 ms/op
Iteration   3: 1632,780 ms/op
Iteration   4: 1615,731 ms/op
Iteration   5: 1635,570 ms/op
Iteration   6: 1651,907 ms/op
Iteration   7: 1650,129 ms/op
Iteration   8: 1637,752 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1636,577 ±(99.9%) 21,768 ms/op

  Histogram, ms/op:
    [1610,000, 1615,000) = 0
    [1615,000, 1620,000) = 1
    [1620,000, 1625,000) = 0
    [1625,000, 1630,000) = 0
    [1630,000, 1635,000) = 2
    [1635,000, 1640,000) = 3
    [1640,000, 1645,000) = 0
    [1645,000, 1650,000) = 0
    [1650,000, 1655,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   1615,731 ms/op
     p(50,0000) =   1636,661 ms/op
     p(90,0000) =   1651,907 ms/op
     p(95,0000) =   1651,907 ms/op
     p(99,0000) =   1651,907 ms/op
     p(99,9000) =   1651,907 ms/op
     p(99,9900) =   1651,907 ms/op
     p(99,9990) =   1651,907 ms/op
     p(99,9999) =   1651,907 ms/op
    p(100,0000) =   1651,907 ms/op


# Run complete. Total time: 00:00:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest        10000        remove    ss    8  1636,577 ± 21,768  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (10000) = 1636.5771335
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3539,056 ms/op
# Warmup Iteration   2: 3387,712 ms/op
# Warmup Iteration   3: 3396,271 ms/op
# Warmup Iteration   4: 3377,666 ms/op
# Warmup Iteration   5: 3364,530 ms/op
# Warmup Iteration   6: 3380,837 ms/op
# Warmup Iteration   7: 3392,389 ms/op
# Warmup Iteration   8: 3361,443 ms/op
# Warmup Iteration   9: 3410,319 ms/op
# Warmup Iteration  10: 3456,760 ms/op
Iteration   1: 3376,439 ms/op
Iteration   2: 3354,815 ms/op
Iteration   3: 3369,517 ms/op
Iteration   4: 3374,671 ms/op
Iteration   5: 3351,645 ms/op
Iteration   6: 3355,160 ms/op
Iteration   7: 3380,351 ms/op
Iteration   8: 3435,445 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3374,756 ±(99.9%) 51,408 ms/op

  Histogram, ms/op:
    [3350,000, 3355,000) = 2
    [3355,000, 3360,000) = 1
    [3360,000, 3365,000) = 0
    [3365,000, 3370,000) = 1
    [3370,000, 3375,000) = 1
    [3375,000, 3380,000) = 1
    [3380,000, 3385,000) = 1
    [3385,000, 3390,000) = 0
    [3390,000, 3395,000) = 0
    [3395,000, 3400,000) = 0
    [3400,000, 3405,000) = 0
    [3405,000, 3410,000) = 0
    [3410,000, 3415,000) = 0
    [3415,000, 3420,000) = 0
    [3420,000, 3425,000) = 0
    [3425,000, 3430,000) = 0
    [3430,000, 3435,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3351,645 ms/op
     p(50,0000) =   3372,094 ms/op
     p(90,0000) =   3435,445 ms/op
     p(95,0000) =   3435,445 ms/op
     p(99,0000) =   3435,445 ms/op
     p(99,9000) =   3435,445 ms/op
     p(99,9900) =   3435,445 ms/op
     p(99,9990) =   3435,445 ms/op
     p(99,9999) =   3435,445 ms/op
    p(100,0000) =   3435,445 ms/op


# Run complete. Total time: 00:01:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest        10000        remove    ss    8  3374,756 ± 51,408  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (10000) = 3374.7555343749996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3764,827 ms/op
# Warmup Iteration   2: 3660,346 ms/op
# Warmup Iteration   3: 3677,031 ms/op
# Warmup Iteration   4: 3651,064 ms/op
# Warmup Iteration   5: 3704,624 ms/op
# Warmup Iteration   6: 3668,516 ms/op
# Warmup Iteration   7: 3719,173 ms/op
# Warmup Iteration   8: 3660,606 ms/op
# Warmup Iteration   9: 3653,877 ms/op
# Warmup Iteration  10: 3660,127 ms/op
Iteration   1: 3654,164 ms/op
Iteration   2: 3694,087 ms/op
Iteration   3: 3652,655 ms/op
Iteration   4: 3655,014 ms/op
Iteration   5: 3733,890 ms/op
Iteration   6: 3697,207 ms/op
Iteration   7: 3761,086 ms/op
Iteration   8: 3710,151 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3694,782 ±(99.9%) 76,391 ms/op

  Histogram, ms/op:
    [3600,000, 3612,500) = 0
    [3612,500, 3625,000) = 0
    [3625,000, 3637,500) = 0
    [3637,500, 3650,000) = 0
    [3650,000, 3662,500) = 3
    [3662,500, 3675,000) = 0
    [3675,000, 3687,500) = 0
    [3687,500, 3700,000) = 2
    [3700,000, 3712,500) = 1
    [3712,500, 3725,000) = 0
    [3725,000, 3737,500) = 1
    [3737,500, 3750,000) = 0
    [3750,000, 3762,500) = 1
    [3762,500, 3775,000) = 0
    [3775,000, 3787,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   3652,655 ms/op
     p(50,0000) =   3695,647 ms/op
     p(90,0000) =   3761,086 ms/op
     p(95,0000) =   3761,086 ms/op
     p(99,0000) =   3761,086 ms/op
     p(99,9000) =   3761,086 ms/op
     p(99,9900) =   3761,086 ms/op
     p(99,9990) =   3761,086 ms/op
     p(99,9999) =   3761,086 ms/op
    p(100,0000) =   3761,086 ms/op


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest        10000        remove    ss    8  3694,782 ± 76,391  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (10000) = 3694.7817532500003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2078,959 ms/op
# Warmup Iteration   2: 1964,048 ms/op
# Warmup Iteration   3: 1940,406 ms/op
# Warmup Iteration   4: 1947,435 ms/op
# Warmup Iteration   5: 1962,736 ms/op
# Warmup Iteration   6: 1954,835 ms/op
# Warmup Iteration   7: 1979,195 ms/op
# Warmup Iteration   8: 1962,030 ms/op
# Warmup Iteration   9: 1927,929 ms/op
# Warmup Iteration  10: 1979,805 ms/op
Iteration   1: 1938,510 ms/op
Iteration   2: 1959,878 ms/op
Iteration   3: 1939,629 ms/op
Iteration   4: 1910,310 ms/op
Iteration   5: 1945,120 ms/op
Iteration   6: 1916,394 ms/op
Iteration   7: 1918,896 ms/op
Iteration   8: 1932,105 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1932,605 ±(99.9%) 31,770 ms/op

  Histogram, ms/op:
    [1910,000, 1915,000) = 1
    [1915,000, 1920,000) = 2
    [1920,000, 1925,000) = 0
    [1925,000, 1930,000) = 0
    [1930,000, 1935,000) = 1
    [1935,000, 1940,000) = 2
    [1940,000, 1945,000) = 0
    [1945,000, 1950,000) = 1
    [1950,000, 1955,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1910,310 ms/op
     p(50,0000) =   1935,308 ms/op
     p(90,0000) =   1959,878 ms/op
     p(95,0000) =   1959,878 ms/op
     p(99,0000) =   1959,878 ms/op
     p(99,9000) =   1959,878 ms/op
     p(99,9900) =   1959,878 ms/op
     p(99,9990) =   1959,878 ms/op
     p(99,9999) =   1959,878 ms/op
    p(100,0000) =   1959,878 ms/op


# Run complete. Total time: 00:00:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest        10000        remove    ss    8  1932,605 ± 31,770  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (10000) = 1932.6051391249998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2211,847 ms/op
# Warmup Iteration   2: 1986,602 ms/op
# Warmup Iteration   3: 1966,740 ms/op
# Warmup Iteration   4: 1972,831 ms/op
# Warmup Iteration   5: 1988,883 ms/op
# Warmup Iteration   6: 1970,859 ms/op
# Warmup Iteration   7: 1944,100 ms/op
# Warmup Iteration   8: 1948,515 ms/op
# Warmup Iteration   9: 1927,596 ms/op
# Warmup Iteration  10: 1950,562 ms/op
Iteration   1: 1944,474 ms/op
Iteration   2: 1971,615 ms/op
Iteration   3: 1962,891 ms/op
Iteration   4: 1960,165 ms/op
Iteration   5: 1977,927 ms/op
Iteration   6: 1972,465 ms/op
Iteration   7: 2015,545 ms/op
Iteration   8: 1965,758 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1971,355 ±(99.9%) 39,237 ms/op

  Histogram, ms/op:
    [1940,000, 1945,000) = 1
    [1945,000, 1950,000) = 0
    [1950,000, 1955,000) = 0
    [1955,000, 1960,000) = 0
    [1960,000, 1965,000) = 2
    [1965,000, 1970,000) = 1
    [1970,000, 1975,000) = 2
    [1975,000, 1980,000) = 1
    [1980,000, 1985,000) = 0
    [1985,000, 1990,000) = 0
    [1990,000, 1995,000) = 0
    [1995,000, 2000,000) = 0
    [2000,000, 2005,000) = 0
    [2005,000, 2010,000) = 0
    [2010,000, 2015,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1944,474 ms/op
     p(50,0000) =   1968,686 ms/op
     p(90,0000) =   2015,545 ms/op
     p(95,0000) =   2015,545 ms/op
     p(99,0000) =   2015,545 ms/op
     p(99,9000) =   2015,545 ms/op
     p(99,9900) =   2015,545 ms/op
     p(99,9990) =   2015,545 ms/op
     p(99,9999) =   2015,545 ms/op
    p(100,0000) =   2015,545 ms/op


# Run complete. Total time: 00:00:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest        10000        remove    ss    8  1971,355 ± 39,237  ms/op
tests.maptests.identity_object.GsIdentityMapTest (10000) = 1971.354814625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2254,218 ms/op
# Warmup Iteration   2: 2105,135 ms/op
# Warmup Iteration   3: 2097,959 ms/op
# Warmup Iteration   4: 2112,266 ms/op
# Warmup Iteration   5: 2088,904 ms/op
# Warmup Iteration   6: 2097,424 ms/op
# Warmup Iteration   7: 2107,967 ms/op
# Warmup Iteration   8: 2087,462 ms/op
# Warmup Iteration   9: 2099,098 ms/op
# Warmup Iteration  10: 2152,295 ms/op
Iteration   1: 2106,806 ms/op
Iteration   2: 2113,577 ms/op
Iteration   3: 2100,779 ms/op
Iteration   4: 2101,271 ms/op
Iteration   5: 2103,437 ms/op
Iteration   6: 2091,848 ms/op
Iteration   7: 2109,253 ms/op
Iteration   8: 2108,921 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2104,487 ±(99.9%) 12,833 ms/op

  Histogram, ms/op:
    [2090,000, 2092,500) = 1
    [2092,500, 2095,000) = 0
    [2095,000, 2097,500) = 0
    [2097,500, 2100,000) = 0
    [2100,000, 2102,500) = 2
    [2102,500, 2105,000) = 1
    [2105,000, 2107,500) = 1
    [2107,500, 2110,000) = 2
    [2110,000, 2112,500) = 0
    [2112,500, 2115,000) = 1
    [2115,000, 2117,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2091,848 ms/op
     p(50,0000) =   2105,122 ms/op
     p(90,0000) =   2113,577 ms/op
     p(95,0000) =   2113,577 ms/op
     p(99,0000) =   2113,577 ms/op
     p(99,9000) =   2113,577 ms/op
     p(99,9900) =   2113,577 ms/op
     p(99,9990) =   2113,577 ms/op
     p(99,9999) =   2113,577 ms/op
    p(100,0000) =   2113,577 ms/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest        10000        remove    ss    8  2104,487 ± 12,833  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (10000) = 2104.4865625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2122,739 ms/op
# Warmup Iteration   2: 2030,429 ms/op
# Warmup Iteration   3: 2022,122 ms/op
# Warmup Iteration   4: 2065,044 ms/op
# Warmup Iteration   5: 2019,139 ms/op
# Warmup Iteration   6: 1997,014 ms/op
# Warmup Iteration   7: 2016,866 ms/op
# Warmup Iteration   8: 2022,801 ms/op
# Warmup Iteration   9: 2037,562 ms/op
# Warmup Iteration  10: 2015,402 ms/op
Iteration   1: 2043,517 ms/op
Iteration   2: 2046,910 ms/op
Iteration   3: 2025,810 ms/op
Iteration   4: 2016,831 ms/op
Iteration   5: 2036,613 ms/op
Iteration   6: 1997,527 ms/op
Iteration   7: 2014,605 ms/op
Iteration   8: 2034,729 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2027,068 ±(99.9%) 31,899 ms/op

  Histogram, ms/op:
    [1990,000, 1995,000) = 0
    [1995,000, 2000,000) = 1
    [2000,000, 2005,000) = 0
    [2005,000, 2010,000) = 0
    [2010,000, 2015,000) = 1
    [2015,000, 2020,000) = 1
    [2020,000, 2025,000) = 0
    [2025,000, 2030,000) = 1
    [2030,000, 2035,000) = 1
    [2035,000, 2040,000) = 1
    [2040,000, 2045,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1997,527 ms/op
     p(50,0000) =   2030,270 ms/op
     p(90,0000) =   2046,910 ms/op
     p(95,0000) =   2046,910 ms/op
     p(99,0000) =   2046,910 ms/op
     p(99,9000) =   2046,910 ms/op
     p(99,9900) =   2046,910 ms/op
     p(99,9990) =   2046,910 ms/op
     p(99,9999) =   2046,910 ms/op
    p(100,0000) =   2046,910 ms/op


# Run complete. Total time: 00:00:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest        10000        remove    ss    8  2027,068 ± 31,899  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (10000) = 2027.067780375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2551,271 ms/op
# Warmup Iteration   2: 2443,951 ms/op
# Warmup Iteration   3: 2473,091 ms/op
# Warmup Iteration   4: 2455,650 ms/op
# Warmup Iteration   5: 2452,120 ms/op
# Warmup Iteration   6: 2459,470 ms/op
# Warmup Iteration   7: 2446,284 ms/op
# Warmup Iteration   8: 2468,125 ms/op
# Warmup Iteration   9: 2463,690 ms/op
# Warmup Iteration  10: 2440,684 ms/op
Iteration   1: 2495,404 ms/op
Iteration   2: 2428,858 ms/op
Iteration   3: 2447,450 ms/op
Iteration   4: 2438,582 ms/op
Iteration   5: 2464,459 ms/op
Iteration   6: 2437,045 ms/op
Iteration   7: 2430,269 ms/op
Iteration   8: 2434,594 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2447,083 ±(99.9%) 43,244 ms/op

  Histogram, ms/op:
    [2420,000, 2425,000) = 0
    [2425,000, 2430,000) = 1
    [2430,000, 2435,000) = 2
    [2435,000, 2440,000) = 2
    [2440,000, 2445,000) = 0
    [2445,000, 2450,000) = 1
    [2450,000, 2455,000) = 0
    [2455,000, 2460,000) = 0
    [2460,000, 2465,000) = 1
    [2465,000, 2470,000) = 0
    [2470,000, 2475,000) = 0
    [2475,000, 2480,000) = 0
    [2480,000, 2485,000) = 0
    [2485,000, 2490,000) = 0
    [2490,000, 2495,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2428,858 ms/op
     p(50,0000) =   2437,814 ms/op
     p(90,0000) =   2495,404 ms/op
     p(95,0000) =   2495,404 ms/op
     p(99,0000) =   2495,404 ms/op
     p(99,9000) =   2495,404 ms/op
     p(99,9900) =   2495,404 ms/op
     p(99,9990) =   2495,404 ms/op
     p(99,9999) =   2495,404 ms/op
    p(100,0000) =   2495,404 ms/op


# Run complete. Total time: 00:00:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest        10000        remove    ss    8  2447,083 ± 43,244  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (10000) = 2447.0826443749997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3832,738 ms/op
# Warmup Iteration   2: 3782,314 ms/op
# Warmup Iteration   3: 3708,106 ms/op
# Warmup Iteration   4: 3722,842 ms/op
# Warmup Iteration   5: 3716,331 ms/op
# Warmup Iteration   6: 3706,905 ms/op
# Warmup Iteration   7: 3708,490 ms/op
# Warmup Iteration   8: 3729,902 ms/op
# Warmup Iteration   9: 3713,215 ms/op
# Warmup Iteration  10: 3775,098 ms/op
Iteration   1: 3715,366 ms/op
Iteration   2: 3712,551 ms/op
Iteration   3: 3738,271 ms/op
Iteration   4: 3719,081 ms/op
Iteration   5: 3702,022 ms/op
Iteration   6: 3731,240 ms/op
Iteration   7: 3730,814 ms/op
Iteration   8: 3781,228 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3728,822 ±(99.9%) 46,298 ms/op

  Histogram, ms/op:
    [3700,000, 3705,000) = 1
    [3705,000, 3710,000) = 0
    [3710,000, 3715,000) = 1
    [3715,000, 3720,000) = 2
    [3720,000, 3725,000) = 0
    [3725,000, 3730,000) = 0
    [3730,000, 3735,000) = 2
    [3735,000, 3740,000) = 1
    [3740,000, 3745,000) = 0
    [3745,000, 3750,000) = 0
    [3750,000, 3755,000) = 0
    [3755,000, 3760,000) = 0
    [3760,000, 3765,000) = 0
    [3765,000, 3770,000) = 0
    [3770,000, 3775,000) = 0
    [3775,000, 3780,000) = 0
    [3780,000, 3785,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3702,022 ms/op
     p(50,0000) =   3724,948 ms/op
     p(90,0000) =   3781,228 ms/op
     p(95,0000) =   3781,228 ms/op
     p(99,0000) =   3781,228 ms/op
     p(99,9000) =   3781,228 ms/op
     p(99,9900) =   3781,228 ms/op
     p(99,9990) =   3781,228 ms/op
     p(99,9999) =   3781,228 ms/op
    p(100,0000) =   3781,228 ms/op


# Run complete. Total time: 00:01:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest        10000        remove    ss    8  3728,822 ± 46,298  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (10000) = 3728.82158875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10000 calls per op
# Measurement: 8 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 10000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4121,598 ms/op
# Warmup Iteration   2: 3997,636 ms/op
# Warmup Iteration   3: 4019,290 ms/op
# Warmup Iteration   4: 4011,272 ms/op
# Warmup Iteration   5: 3992,318 ms/op
# Warmup Iteration   6: 4100,869 ms/op
# Warmup Iteration   7: 4039,207 ms/op
# Warmup Iteration   8: 4002,588 ms/op
# Warmup Iteration   9: 3993,355 ms/op
# Warmup Iteration  10: 4006,087 ms/op
Iteration   1: 4014,770 ms/op
Iteration   2: 4076,399 ms/op
Iteration   3: 4010,243 ms/op
Iteration   4: 4068,002 ms/op
Iteration   5: 4027,451 ms/op
Iteration   6: 4027,519 ms/op
Iteration   7: 4017,335 ms/op
Iteration   8: 4036,680 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4034,800 ±(99.9%) 47,127 ms/op

  Histogram, ms/op:
    [4010,000, 4015,000) = 2
    [4015,000, 4020,000) = 1
    [4020,000, 4025,000) = 0
    [4025,000, 4030,000) = 2
    [4030,000, 4035,000) = 0
    [4035,000, 4040,000) = 1
    [4040,000, 4045,000) = 0
    [4045,000, 4050,000) = 0
    [4050,000, 4055,000) = 0
    [4055,000, 4060,000) = 0
    [4060,000, 4065,000) = 0
    [4065,000, 4070,000) = 1
    [4070,000, 4075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4010,243 ms/op
     p(50,0000) =   4027,485 ms/op
     p(90,0000) =   4076,399 ms/op
     p(95,0000) =   4076,399 ms/op
     p(99,0000) =   4076,399 ms/op
     p(99,9000) =   4076,399 ms/op
     p(99,9900) =   4076,399 ms/op
     p(99,9990) =   4076,399 ms/op
     p(99,9999) =   4076,399 ms/op
    p(100,0000) =   4076,399 ms/op


# Run complete. Total time: 00:01:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest        10000        remove    ss    8  4034,800 ± 47,127  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (10000) = 4034.800006125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4252,997 ms/op
# Warmup Iteration   2: 4193,091 ms/op
# Warmup Iteration   3: 4142,516 ms/op
# Warmup Iteration   4: 4118,857 ms/op
# Warmup Iteration   5: 4171,006 ms/op
# Warmup Iteration   6: 4148,005 ms/op
# Warmup Iteration   7: 4121,373 ms/op
# Warmup Iteration   8: 4107,419 ms/op
# Warmup Iteration   9: 4181,002 ms/op
# Warmup Iteration  10: 4138,153 ms/op
Iteration   1: 4141,441 ms/op
Iteration   2: 4158,718 ms/op
Iteration   3: 4155,883 ms/op
Iteration   4: 4172,184 ms/op
Iteration   5: 4155,269 ms/op
Iteration   6: 4200,150 ms/op
Iteration   7: 4078,999 ms/op
Iteration   8: 4102,486 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4145,641 ±(99.9%) 73,575 ms/op

  Histogram, ms/op:
    [4000,000, 4025,000) = 0
    [4025,000, 4050,000) = 0
    [4050,000, 4075,000) = 0
    [4075,000, 4100,000) = 1
    [4100,000, 4125,000) = 1
    [4125,000, 4150,000) = 1
    [4150,000, 4175,000) = 4
    [4175,000, 4200,000) = 0
    [4200,000, 4225,000) = 1
    [4225,000, 4250,000) = 0
    [4250,000, 4275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4078,999 ms/op
     p(50,0000) =   4155,576 ms/op
     p(90,0000) =   4200,150 ms/op
     p(95,0000) =   4200,150 ms/op
     p(99,0000) =   4200,150 ms/op
     p(99,9000) =   4200,150 ms/op
     p(99,9900) =   4200,150 ms/op
     p(99,9990) =   4200,150 ms/op
     p(99,9999) =   4200,150 ms/op
    p(100,0000) =   4200,150 ms/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test       100000        remove    ss    8  4145,641 ± 73,575  ms/op
tests.maptests.article_examples.IntIntMap1Test (100000) = 4145.641269625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1822,913 ms/op
# Warmup Iteration   2: 1713,771 ms/op
# Warmup Iteration   3: 1694,715 ms/op
# Warmup Iteration   4: 1683,666 ms/op
# Warmup Iteration   5: 1685,053 ms/op
# Warmup Iteration   6: 1711,575 ms/op
# Warmup Iteration   7: 1718,801 ms/op
# Warmup Iteration   8: 1705,379 ms/op
# Warmup Iteration   9: 1785,793 ms/op
# Warmup Iteration  10: 1688,108 ms/op
Iteration   1: 1710,620 ms/op
Iteration   2: 1679,520 ms/op
Iteration   3: 1709,790 ms/op
Iteration   4: 1725,058 ms/op
Iteration   5: 1736,283 ms/op
Iteration   6: 1718,839 ms/op
Iteration   7: 1728,793 ms/op
Iteration   8: 1694,502 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1712,926 ±(99.9%) 35,770 ms/op

  Histogram, ms/op:
    [1670,000, 1675,000) = 0
    [1675,000, 1680,000) = 1
    [1680,000, 1685,000) = 0
    [1685,000, 1690,000) = 0
    [1690,000, 1695,000) = 1
    [1695,000, 1700,000) = 0
    [1700,000, 1705,000) = 0
    [1705,000, 1710,000) = 1
    [1710,000, 1715,000) = 1
    [1715,000, 1720,000) = 1
    [1720,000, 1725,000) = 0
    [1725,000, 1730,000) = 2
    [1730,000, 1735,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1679,520 ms/op
     p(50,0000) =   1714,729 ms/op
     p(90,0000) =   1736,283 ms/op
     p(95,0000) =   1736,283 ms/op
     p(99,0000) =   1736,283 ms/op
     p(99,9000) =   1736,283 ms/op
     p(99,9900) =   1736,283 ms/op
     p(99,9990) =   1736,283 ms/op
     p(99,9999) =   1736,283 ms/op
    p(100,0000) =   1736,283 ms/op


# Run complete. Total time: 00:00:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test       100000        remove    ss    8  1712,926 ± 35,770  ms/op
tests.maptests.article_examples.IntIntMap2Test (100000) = 1712.9255745
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1619,558 ms/op
# Warmup Iteration   2: 1506,756 ms/op
# Warmup Iteration   3: 1539,468 ms/op
# Warmup Iteration   4: 1529,271 ms/op
# Warmup Iteration   5: 1516,432 ms/op
# Warmup Iteration   6: 1570,457 ms/op
# Warmup Iteration   7: 1530,869 ms/op
# Warmup Iteration   8: 1522,037 ms/op
# Warmup Iteration   9: 1501,362 ms/op
# Warmup Iteration  10: 1507,507 ms/op
Iteration   1: 1539,964 ms/op
Iteration   2: 1515,159 ms/op
Iteration   3: 1554,530 ms/op
Iteration   4: 1516,194 ms/op
Iteration   5: 1544,081 ms/op
Iteration   6: 1524,071 ms/op
Iteration   7: 1504,270 ms/op
Iteration   8: 1556,206 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1531,809 ±(99.9%) 37,326 ms/op

  Histogram, ms/op:
    [1500,000, 1505,000) = 1
    [1505,000, 1510,000) = 0
    [1510,000, 1515,000) = 0
    [1515,000, 1520,000) = 2
    [1520,000, 1525,000) = 1
    [1525,000, 1530,000) = 0
    [1530,000, 1535,000) = 0
    [1535,000, 1540,000) = 1
    [1540,000, 1545,000) = 1
    [1545,000, 1550,000) = 0
    [1550,000, 1555,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1504,270 ms/op
     p(50,0000) =   1532,017 ms/op
     p(90,0000) =   1556,206 ms/op
     p(95,0000) =   1556,206 ms/op
     p(99,0000) =   1556,206 ms/op
     p(99,9000) =   1556,206 ms/op
     p(99,9900) =   1556,206 ms/op
     p(99,9990) =   1556,206 ms/op
     p(99,9999) =   1556,206 ms/op
    p(100,0000) =   1556,206 ms/op


# Run complete. Total time: 00:00:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test       100000        remove    ss    8  1531,809 ± 37,326  ms/op
tests.maptests.article_examples.IntIntMap3Test (100000) = 1531.809271875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1361,108 ms/op
# Warmup Iteration   2: 1268,907 ms/op
# Warmup Iteration   3: 1271,399 ms/op
# Warmup Iteration   4: 1285,807 ms/op
# Warmup Iteration   5: 1335,010 ms/op
# Warmup Iteration   6: 1263,061 ms/op
# Warmup Iteration   7: 1265,954 ms/op
# Warmup Iteration   8: 1274,147 ms/op
# Warmup Iteration   9: 1260,254 ms/op
# Warmup Iteration  10: 1267,317 ms/op
Iteration   1: 1281,309 ms/op
Iteration   2: 1263,068 ms/op
Iteration   3: 1250,655 ms/op
Iteration   4: 1257,673 ms/op
Iteration   5: 1252,045 ms/op
Iteration   6: 1261,152 ms/op
Iteration   7: 1271,307 ms/op
Iteration   8: 1270,665 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1263,484 ±(99.9%) 19,992 ms/op

  Histogram, ms/op:
    [1250,000, 1252,500) = 2
    [1252,500, 1255,000) = 0
    [1255,000, 1257,500) = 0
    [1257,500, 1260,000) = 1
    [1260,000, 1262,500) = 1
    [1262,500, 1265,000) = 1
    [1265,000, 1267,500) = 0
    [1267,500, 1270,000) = 0
    [1270,000, 1272,500) = 2
    [1272,500, 1275,000) = 0
    [1275,000, 1277,500) = 0
    [1277,500, 1280,000) = 0
    [1280,000, 1282,500) = 1
    [1282,500, 1285,000) = 0
    [1285,000, 1287,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1250,655 ms/op
     p(50,0000) =   1262,110 ms/op
     p(90,0000) =   1281,309 ms/op
     p(95,0000) =   1281,309 ms/op
     p(99,0000) =   1281,309 ms/op
     p(99,9000) =   1281,309 ms/op
     p(99,9900) =   1281,309 ms/op
     p(99,9990) =   1281,309 ms/op
     p(99,9999) =   1281,309 ms/op
    p(100,0000) =   1281,309 ms/op


# Run complete. Total time: 00:00:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test       100000        remove    ss    8  1263,484 ± 19,992  ms/op
tests.maptests.article_examples.IntIntMap4Test (100000) = 1263.4840695
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1382,632 ms/op
# Warmup Iteration   2: 1293,297 ms/op
# Warmup Iteration   3: 1289,745 ms/op
# Warmup Iteration   4: 1284,028 ms/op
# Warmup Iteration   5: 1298,131 ms/op
# Warmup Iteration   6: 1362,663 ms/op
# Warmup Iteration   7: 1295,231 ms/op
# Warmup Iteration   8: 1265,040 ms/op
# Warmup Iteration   9: 1281,995 ms/op
# Warmup Iteration  10: 1293,295 ms/op
Iteration   1: 1276,675 ms/op
Iteration   2: 1268,028 ms/op
Iteration   3: 1274,333 ms/op
Iteration   4: 1272,223 ms/op
Iteration   5: 1291,771 ms/op
Iteration   6: 1270,260 ms/op
Iteration   7: 1272,616 ms/op
Iteration   8: 1274,395 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1275,038 ±(99.9%) 13,888 ms/op

  Histogram, ms/op:
    [1260,000, 1262,500) = 0
    [1262,500, 1265,000) = 0
    [1265,000, 1267,500) = 0
    [1267,500, 1270,000) = 1
    [1270,000, 1272,500) = 2
    [1272,500, 1275,000) = 3
    [1275,000, 1277,500) = 1
    [1277,500, 1280,000) = 0
    [1280,000, 1282,500) = 0
    [1282,500, 1285,000) = 0
    [1285,000, 1287,500) = 0
    [1287,500, 1290,000) = 0
    [1290,000, 1292,500) = 1
    [1292,500, 1295,000) = 0
    [1295,000, 1297,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1268,028 ms/op
     p(50,0000) =   1273,474 ms/op
     p(90,0000) =   1291,771 ms/op
     p(95,0000) =   1291,771 ms/op
     p(99,0000) =   1291,771 ms/op
     p(99,9000) =   1291,771 ms/op
     p(99,9900) =   1291,771 ms/op
     p(99,9990) =   1291,771 ms/op
     p(99,9999) =   1291,771 ms/op
    p(100,0000) =   1291,771 ms/op


# Run complete. Total time: 00:00:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest       100000        remove    ss    8  1275,038 ± 13,888  ms/op
tests.maptests.article_examples.IntIntMap4aTest (100000) = 1275.0375106249999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1407,108 ms/op
# Warmup Iteration   2: 1359,381 ms/op
# Warmup Iteration   3: 1340,289 ms/op
# Warmup Iteration   4: 1312,579 ms/op
# Warmup Iteration   5: 1316,179 ms/op
# Warmup Iteration   6: 1287,825 ms/op
# Warmup Iteration   7: 1401,303 ms/op
# Warmup Iteration   8: 1323,229 ms/op
# Warmup Iteration   9: 1300,069 ms/op
# Warmup Iteration  10: 1345,564 ms/op
Iteration   1: 1329,328 ms/op
Iteration   2: 1281,576 ms/op
Iteration   3: 1311,966 ms/op
Iteration   4: 1342,671 ms/op
Iteration   5: 1316,955 ms/op
Iteration   6: 1279,563 ms/op
Iteration   7: 1331,607 ms/op
Iteration   8: 1327,305 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1315,121 ±(99.9%) 44,454 ms/op

  Histogram, ms/op:
    [1270,000, 1275,000) = 0
    [1275,000, 1280,000) = 1
    [1280,000, 1285,000) = 1
    [1285,000, 1290,000) = 0
    [1290,000, 1295,000) = 0
    [1295,000, 1300,000) = 0
    [1300,000, 1305,000) = 0
    [1305,000, 1310,000) = 0
    [1310,000, 1315,000) = 1
    [1315,000, 1320,000) = 1
    [1320,000, 1325,000) = 0
    [1325,000, 1330,000) = 2
    [1330,000, 1335,000) = 1
    [1335,000, 1340,000) = 0
    [1340,000, 1345,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1279,563 ms/op
     p(50,0000) =   1322,130 ms/op
     p(90,0000) =   1342,671 ms/op
     p(95,0000) =   1342,671 ms/op
     p(99,0000) =   1342,671 ms/op
     p(99,9000) =   1342,671 ms/op
     p(99,9900) =   1342,671 ms/op
     p(99,9990) =   1342,671 ms/op
     p(99,9999) =   1342,671 ms/op
    p(100,0000) =   1342,671 ms/op


# Run complete. Total time: 00:00:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest       100000        remove    ss    8  1315,121 ± 44,454  ms/op
tests.maptests.primitive.FastUtilMapTest (100000) = 1315.121426
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2714,939 ms/op
# Warmup Iteration   2: 2620,413 ms/op
# Warmup Iteration   3: 2631,406 ms/op
# Warmup Iteration   4: 2685,378 ms/op
# Warmup Iteration   5: 2619,575 ms/op
# Warmup Iteration   6: 2617,155 ms/op
# Warmup Iteration   7: 2657,094 ms/op
# Warmup Iteration   8: 2666,235 ms/op
# Warmup Iteration   9: 2638,381 ms/op
# Warmup Iteration  10: 2689,408 ms/op
Iteration   1: 2654,031 ms/op
Iteration   2: 2648,282 ms/op
Iteration   3: 2668,133 ms/op
Iteration   4: 2685,689 ms/op
Iteration   5: 2731,570 ms/op
Iteration   6: 2639,857 ms/op
Iteration   7: 2653,872 ms/op
Iteration   8: 2647,245 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2666,085 ±(99.9%) 57,501 ms/op

  Histogram, ms/op:
    [2630,000, 2640,000) = 1
    [2640,000, 2650,000) = 2
    [2650,000, 2660,000) = 2
    [2660,000, 2670,000) = 1
    [2670,000, 2680,000) = 0
    [2680,000, 2690,000) = 1
    [2690,000, 2700,000) = 0
    [2700,000, 2710,000) = 0
    [2710,000, 2720,000) = 0
    [2720,000, 2730,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2639,857 ms/op
     p(50,0000) =   2653,952 ms/op
     p(90,0000) =   2731,570 ms/op
     p(95,0000) =   2731,570 ms/op
     p(99,0000) =   2731,570 ms/op
     p(99,9000) =   2731,570 ms/op
     p(99,9900) =   2731,570 ms/op
     p(99,9990) =   2731,570 ms/op
     p(99,9999) =   2731,570 ms/op
    p(100,0000) =   2731,570 ms/op


# Run complete. Total time: 00:00:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest       100000        remove    ss    8  2666,085 ± 57,501  ms/op
tests.maptests.primitive.GsMutableMapTest (100000) = 2666.084964375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1382,721 ms/op
# Warmup Iteration   2: 1269,543 ms/op
# Warmup Iteration   3: 1284,387 ms/op
# Warmup Iteration   4: 1280,868 ms/op
# Warmup Iteration   5: 1294,704 ms/op
# Warmup Iteration   6: 1266,495 ms/op
# Warmup Iteration   7: 1262,309 ms/op
# Warmup Iteration   8: 1268,445 ms/op
# Warmup Iteration   9: 1248,301 ms/op
# Warmup Iteration  10: 1274,860 ms/op
Iteration   1: 1272,828 ms/op
Iteration   2: 1275,046 ms/op
Iteration   3: 1365,457 ms/op
Iteration   4: 1256,242 ms/op
Iteration   5: 1262,935 ms/op
Iteration   6: 1254,854 ms/op
Iteration   7: 1270,355 ms/op
Iteration   8: 1266,267 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1277,998 ±(99.9%) 69,000 ms/op

  Histogram, ms/op:
    [1200,000, 1212,500) = 0
    [1212,500, 1225,000) = 0
    [1225,000, 1237,500) = 0
    [1237,500, 1250,000) = 0
    [1250,000, 1262,500) = 2
    [1262,500, 1275,000) = 4
    [1275,000, 1287,500) = 1
    [1287,500, 1300,000) = 0
    [1300,000, 1312,500) = 0
    [1312,500, 1325,000) = 0
    [1325,000, 1337,500) = 0
    [1337,500, 1350,000) = 0
    [1350,000, 1362,500) = 0
    [1362,500, 1375,000) = 1
    [1375,000, 1387,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   1254,854 ms/op
     p(50,0000) =   1268,311 ms/op
     p(90,0000) =   1365,457 ms/op
     p(95,0000) =   1365,457 ms/op
     p(99,0000) =   1365,457 ms/op
     p(99,9000) =   1365,457 ms/op
     p(99,9900) =   1365,457 ms/op
     p(99,9990) =   1365,457 ms/op
     p(99,9999) =   1365,457 ms/op
    p(100,0000) =   1365,457 ms/op


# Run complete. Total time: 00:00:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest       100000        remove    ss    8  1277,998 ± 69,000  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (100000) = 1277.997880875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1673,098 ms/op
# Warmup Iteration   2: 1594,492 ms/op
# Warmup Iteration   3: 1599,336 ms/op
# Warmup Iteration   4: 1587,745 ms/op
# Warmup Iteration   5: 1559,432 ms/op
# Warmup Iteration   6: 1559,031 ms/op
# Warmup Iteration   7: 1590,459 ms/op
# Warmup Iteration   8: 1600,103 ms/op
# Warmup Iteration   9: 1578,166 ms/op
# Warmup Iteration  10: 1588,546 ms/op
Iteration   1: 1561,970 ms/op
Iteration   2: 1645,876 ms/op
Iteration   3: 1576,510 ms/op
Iteration   4: 1559,430 ms/op
Iteration   5: 1607,107 ms/op
Iteration   6: 1554,963 ms/op
Iteration   7: 1560,045 ms/op
Iteration   8: 1587,568 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1581,684 ±(99.9%) 60,004 ms/op

  Histogram, ms/op:
    [1550,000, 1560,000) = 2
    [1560,000, 1570,000) = 2
    [1570,000, 1580,000) = 1
    [1580,000, 1590,000) = 1
    [1590,000, 1600,000) = 0
    [1600,000, 1610,000) = 1
    [1610,000, 1620,000) = 0
    [1620,000, 1630,000) = 0
    [1630,000, 1640,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1554,963 ms/op
     p(50,0000) =   1569,240 ms/op
     p(90,0000) =   1645,876 ms/op
     p(95,0000) =   1645,876 ms/op
     p(99,0000) =   1645,876 ms/op
     p(99,9000) =   1645,876 ms/op
     p(99,9900) =   1645,876 ms/op
     p(99,9990) =   1645,876 ms/op
     p(99,9999) =   1645,876 ms/op
    p(100,0000) =   1645,876 ms/op


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest       100000        remove    ss    8  1581,684 ± 60,004  ms/op
tests.maptests.primitive.HppcMapTest (100000) = 1581.6835436250003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3781,091 ms/op
# Warmup Iteration   2: 3671,710 ms/op
# Warmup Iteration   3: 3677,264 ms/op
# Warmup Iteration   4: 3754,736 ms/op
# Warmup Iteration   5: 3646,615 ms/op
# Warmup Iteration   6: 3641,367 ms/op
# Warmup Iteration   7: 3693,925 ms/op
# Warmup Iteration   8: 3706,847 ms/op
# Warmup Iteration   9: 3793,614 ms/op
# Warmup Iteration  10: 3679,039 ms/op
Iteration   1: 3646,076 ms/op
Iteration   2: 3760,642 ms/op
Iteration   3: 3657,096 ms/op
Iteration   4: 3655,032 ms/op
Iteration   5: 3659,544 ms/op
Iteration   6: 3659,663 ms/op
Iteration   7: 3709,136 ms/op
Iteration   8: 3680,365 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3678,444 ±(99.9%) 73,922 ms/op

  Histogram, ms/op:
    [3600,000, 3612,500) = 0
    [3612,500, 3625,000) = 0
    [3625,000, 3637,500) = 0
    [3637,500, 3650,000) = 1
    [3650,000, 3662,500) = 4
    [3662,500, 3675,000) = 0
    [3675,000, 3687,500) = 1
    [3687,500, 3700,000) = 0
    [3700,000, 3712,500) = 1
    [3712,500, 3725,000) = 0
    [3725,000, 3737,500) = 0
    [3737,500, 3750,000) = 0
    [3750,000, 3762,500) = 1
    [3762,500, 3775,000) = 0
    [3775,000, 3787,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   3646,076 ms/op
     p(50,0000) =   3659,603 ms/op
     p(90,0000) =   3760,642 ms/op
     p(95,0000) =   3760,642 ms/op
     p(99,0000) =   3760,642 ms/op
     p(99,9000) =   3760,642 ms/op
     p(99,9900) =   3760,642 ms/op
     p(99,9990) =   3760,642 ms/op
     p(99,9999) =   3760,642 ms/op
    p(100,0000) =   3760,642 ms/op


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest       100000        remove    ss    8  3678,444 ± 73,922  ms/op
tests.maptests.primitive.TroveJbMapTest (100000) = 3678.4442605000004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3425,115 ms/op
# Warmup Iteration   2: 3268,055 ms/op
# Warmup Iteration   3: 3256,199 ms/op
# Warmup Iteration   4: 3199,993 ms/op
# Warmup Iteration   5: 3201,693 ms/op
# Warmup Iteration   6: 3159,789 ms/op
# Warmup Iteration   7: 3241,564 ms/op
# Warmup Iteration   8: 3172,811 ms/op
# Warmup Iteration   9: 3282,424 ms/op
# Warmup Iteration  10: 3254,792 ms/op
Iteration   1: 3213,325 ms/op
Iteration   2: 3189,063 ms/op
Iteration   3: 3284,763 ms/op
Iteration   4: 3213,117 ms/op
Iteration   5: 3175,412 ms/op
Iteration   6: 3267,366 ms/op
Iteration   7: 3224,852 ms/op
Iteration   8: 3243,806 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3226,463 ±(99.9%) 71,287 ms/op

  Histogram, ms/op:
    [3100,000, 3112,500) = 0
    [3112,500, 3125,000) = 0
    [3125,000, 3137,500) = 0
    [3137,500, 3150,000) = 0
    [3150,000, 3162,500) = 0
    [3162,500, 3175,000) = 0
    [3175,000, 3187,500) = 1
    [3187,500, 3200,000) = 1
    [3200,000, 3212,500) = 0
    [3212,500, 3225,000) = 3
    [3225,000, 3237,500) = 0
    [3237,500, 3250,000) = 1
    [3250,000, 3262,500) = 0
    [3262,500, 3275,000) = 1
    [3275,000, 3287,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   3175,412 ms/op
     p(50,0000) =   3219,089 ms/op
     p(90,0000) =   3284,763 ms/op
     p(95,0000) =   3284,763 ms/op
     p(99,0000) =   3284,763 ms/op
     p(99,9000) =   3284,763 ms/op
     p(99,9900) =   3284,763 ms/op
     p(99,9990) =   3284,763 ms/op
     p(99,9999) =   3284,763 ms/op
    p(100,0000) =   3284,763 ms/op


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest       100000        remove    ss    8  3226,463 ± 71,287  ms/op
tests.maptests.primitive.TroveMapTest (100000) = 3226.46300625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2542,306 ms/op
# Warmup Iteration   2: 2408,570 ms/op
# Warmup Iteration   3: 2369,200 ms/op
# Warmup Iteration   4: 2371,451 ms/op
# Warmup Iteration   5: 2455,714 ms/op
# Warmup Iteration   6: 2429,255 ms/op
# Warmup Iteration   7: 2392,007 ms/op
# Warmup Iteration   8: 2392,273 ms/op
# Warmup Iteration   9: 2364,887 ms/op
# Warmup Iteration  10: 2389,721 ms/op
Iteration   1: 2425,907 ms/op
Iteration   2: 2453,730 ms/op
Iteration   3: 2437,133 ms/op
Iteration   4: 2394,270 ms/op
Iteration   5: 2422,355 ms/op
Iteration   6: 2442,666 ms/op
Iteration   7: 2382,093 ms/op
Iteration   8: 2415,458 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2421,702 ±(99.9%) 46,170 ms/op

  Histogram, ms/op:
    [2380,000, 2385,000) = 1
    [2385,000, 2390,000) = 0
    [2390,000, 2395,000) = 1
    [2395,000, 2400,000) = 0
    [2400,000, 2405,000) = 0
    [2405,000, 2410,000) = 0
    [2410,000, 2415,000) = 0
    [2415,000, 2420,000) = 1
    [2420,000, 2425,000) = 1
    [2425,000, 2430,000) = 1
    [2430,000, 2435,000) = 0
    [2435,000, 2440,000) = 1
    [2440,000, 2445,000) = 1
    [2445,000, 2450,000) = 0
    [2450,000, 2455,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2382,093 ms/op
     p(50,0000) =   2424,131 ms/op
     p(90,0000) =   2453,730 ms/op
     p(95,0000) =   2453,730 ms/op
     p(99,0000) =   2453,730 ms/op
     p(99,9000) =   2453,730 ms/op
     p(99,9900) =   2453,730 ms/op
     p(99,9990) =   2453,730 ms/op
     p(99,9999) =   2453,730 ms/op
    p(100,0000) =   2453,730 ms/op


# Run complete. Total time: 00:00:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest       100000        remove    ss    8  2421,702 ± 46,170  ms/op
tests.maptests.object.FastUtilObjMapTest (100000) = 2421.7015069999998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2741,872 ms/op
# Warmup Iteration   2: 2613,952 ms/op
# Warmup Iteration   3: 2626,954 ms/op
# Warmup Iteration   4: 2660,123 ms/op
# Warmup Iteration   5: 2619,136 ms/op
# Warmup Iteration   6: 2590,485 ms/op
# Warmup Iteration   7: 2596,111 ms/op
# Warmup Iteration   8: 2575,427 ms/op
# Warmup Iteration   9: 2595,112 ms/op
# Warmup Iteration  10: 2564,768 ms/op
Iteration   1: 2576,385 ms/op
Iteration   2: 2579,776 ms/op
Iteration   3: 2590,317 ms/op
Iteration   4: 2547,513 ms/op
Iteration   5: 2579,468 ms/op
Iteration   6: 2652,979 ms/op
Iteration   7: 2580,869 ms/op
Iteration   8: 2562,651 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2583,745 ±(99.9%) 59,112 ms/op

  Histogram, ms/op:
    [2500,000, 2512,500) = 0
    [2512,500, 2525,000) = 0
    [2525,000, 2537,500) = 0
    [2537,500, 2550,000) = 1
    [2550,000, 2562,500) = 0
    [2562,500, 2575,000) = 1
    [2575,000, 2587,500) = 4
    [2587,500, 2600,000) = 1
    [2600,000, 2612,500) = 0
    [2612,500, 2625,000) = 0
    [2625,000, 2637,500) = 0
    [2637,500, 2650,000) = 0
    [2650,000, 2662,500) = 1
    [2662,500, 2675,000) = 0
    [2675,000, 2687,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2547,513 ms/op
     p(50,0000) =   2579,622 ms/op
     p(90,0000) =   2652,979 ms/op
     p(95,0000) =   2652,979 ms/op
     p(99,0000) =   2652,979 ms/op
     p(99,9000) =   2652,979 ms/op
     p(99,9900) =   2652,979 ms/op
     p(99,9990) =   2652,979 ms/op
     p(99,9999) =   2652,979 ms/op
    p(100,0000) =   2652,979 ms/op


# Run complete. Total time: 00:00:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest       100000        remove    ss    8  2583,745 ± 59,112  ms/op
tests.maptests.object.KolobokeMutableObjTest (100000) = 2583.74478425
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2730,098 ms/op
# Warmup Iteration   2: 2577,470 ms/op
# Warmup Iteration   3: 2572,360 ms/op
# Warmup Iteration   4: 2565,771 ms/op
# Warmup Iteration   5: 2575,038 ms/op
# Warmup Iteration   6: 2580,851 ms/op
# Warmup Iteration   7: 2665,668 ms/op
# Warmup Iteration   8: 2561,383 ms/op
# Warmup Iteration   9: 2580,616 ms/op
# Warmup Iteration  10: 2599,586 ms/op
Iteration   1: 2627,878 ms/op
Iteration   2: 2597,147 ms/op
Iteration   3: 2597,920 ms/op
Iteration   4: 2591,024 ms/op
Iteration   5: 2618,991 ms/op
Iteration   6: 2623,478 ms/op
Iteration   7: 2571,854 ms/op
Iteration   8: 2612,787 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2605,135 ±(99.9%) 36,327 ms/op

  Histogram, ms/op:
    [2570,000, 2575,000) = 1
    [2575,000, 2580,000) = 0
    [2580,000, 2585,000) = 0
    [2585,000, 2590,000) = 0
    [2590,000, 2595,000) = 1
    [2595,000, 2600,000) = 2
    [2600,000, 2605,000) = 0
    [2605,000, 2610,000) = 0
    [2610,000, 2615,000) = 1
    [2615,000, 2620,000) = 1
    [2620,000, 2625,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2571,854 ms/op
     p(50,0000) =   2605,354 ms/op
     p(90,0000) =   2627,878 ms/op
     p(95,0000) =   2627,878 ms/op
     p(99,0000) =   2627,878 ms/op
     p(99,9000) =   2627,878 ms/op
     p(99,9900) =   2627,878 ms/op
     p(99,9990) =   2627,878 ms/op
     p(99,9999) =   2627,878 ms/op
    p(100,0000) =   2627,878 ms/op


# Run complete. Total time: 00:00:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest       100000        remove    ss    8  2605,135 ± 36,327  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (100000) = 2605.1349607499997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2927,781 ms/op
# Warmup Iteration   2: 2814,292 ms/op
# Warmup Iteration   3: 2779,299 ms/op
# Warmup Iteration   4: 2780,582 ms/op
# Warmup Iteration   5: 2759,256 ms/op
# Warmup Iteration   6: 2765,077 ms/op
# Warmup Iteration   7: 2723,117 ms/op
# Warmup Iteration   8: 2756,244 ms/op
# Warmup Iteration   9: 2741,827 ms/op
# Warmup Iteration  10: 2819,495 ms/op
Iteration   1: 2729,288 ms/op
Iteration   2: 2744,628 ms/op
Iteration   3: 2786,862 ms/op
Iteration   4: 2733,564 ms/op
Iteration   5: 2773,085 ms/op
Iteration   6: 2775,330 ms/op
Iteration   7: 2784,269 ms/op
Iteration   8: 2769,350 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2762,047 ±(99.9%) 43,654 ms/op

  Histogram, ms/op:
    [2720,000, 2725,000) = 0
    [2725,000, 2730,000) = 1
    [2730,000, 2735,000) = 1
    [2735,000, 2740,000) = 0
    [2740,000, 2745,000) = 1
    [2745,000, 2750,000) = 0
    [2750,000, 2755,000) = 0
    [2755,000, 2760,000) = 0
    [2760,000, 2765,000) = 0
    [2765,000, 2770,000) = 1
    [2770,000, 2775,000) = 1
    [2775,000, 2780,000) = 1
    [2780,000, 2785,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2729,288 ms/op
     p(50,0000) =   2771,217 ms/op
     p(90,0000) =   2786,862 ms/op
     p(95,0000) =   2786,862 ms/op
     p(99,0000) =   2786,862 ms/op
     p(99,9000) =   2786,862 ms/op
     p(99,9900) =   2786,862 ms/op
     p(99,9990) =   2786,862 ms/op
     p(99,9999) =   2786,862 ms/op
    p(100,0000) =   2786,862 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest       100000        remove    ss    8  2762,047 ± 43,654  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (100000) = 2762.047055000001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2887,605 ms/op
# Warmup Iteration   2: 2792,427 ms/op
# Warmup Iteration   3: 2816,433 ms/op
# Warmup Iteration   4: 2819,436 ms/op
# Warmup Iteration   5: 2800,101 ms/op
# Warmup Iteration   6: 2760,801 ms/op
# Warmup Iteration   7: 2760,721 ms/op
# Warmup Iteration   8: 2799,838 ms/op
# Warmup Iteration   9: 2804,079 ms/op
# Warmup Iteration  10: 2744,093 ms/op
Iteration   1: 2823,747 ms/op
Iteration   2: 2770,930 ms/op
Iteration   3: 2759,583 ms/op
Iteration   4: 2834,758 ms/op
Iteration   5: 2790,445 ms/op
Iteration   6: 2798,177 ms/op
Iteration   7: 2760,459 ms/op
Iteration   8: 2788,316 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2790,802 ±(99.9%) 52,949 ms/op

  Histogram, ms/op:
    [2750,000, 2755,000) = 0
    [2755,000, 2760,000) = 1
    [2760,000, 2765,000) = 1
    [2765,000, 2770,000) = 0
    [2770,000, 2775,000) = 1
    [2775,000, 2780,000) = 0
    [2780,000, 2785,000) = 0
    [2785,000, 2790,000) = 1
    [2790,000, 2795,000) = 1
    [2795,000, 2800,000) = 1
    [2800,000, 2805,000) = 0
    [2805,000, 2810,000) = 0
    [2810,000, 2815,000) = 0
    [2815,000, 2820,000) = 0
    [2820,000, 2825,000) = 1
    [2825,000, 2830,000) = 0
    [2830,000, 2835,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2759,583 ms/op
     p(50,0000) =   2789,380 ms/op
     p(90,0000) =   2834,758 ms/op
     p(95,0000) =   2834,758 ms/op
     p(99,0000) =   2834,758 ms/op
     p(99,9000) =   2834,758 ms/op
     p(99,9900) =   2834,758 ms/op
     p(99,9990) =   2834,758 ms/op
     p(99,9999) =   2834,758 ms/op
    p(100,0000) =   2834,758 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest       100000        remove    ss    8  2790,802 ± 52,949  ms/op
tests.maptests.object.HppcObjMapTest (100000) = 2790.80172
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2758,885 ms/op
# Warmup Iteration   2: 2676,946 ms/op
# Warmup Iteration   3: 2639,999 ms/op
# Warmup Iteration   4: 2609,199 ms/op
# Warmup Iteration   5: 2589,528 ms/op
# Warmup Iteration   6: 2568,128 ms/op
# Warmup Iteration   7: 2543,271 ms/op
# Warmup Iteration   8: 2594,033 ms/op
# Warmup Iteration   9: 2579,836 ms/op
# Warmup Iteration  10: 2543,227 ms/op
Iteration   1: 2571,323 ms/op
Iteration   2: 2581,188 ms/op
Iteration   3: 2558,074 ms/op
Iteration   4: 2679,280 ms/op
Iteration   5: 2554,080 ms/op
Iteration   6: 2554,301 ms/op
Iteration   7: 2623,972 ms/op
Iteration   8: 2608,631 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2591,356 ±(99.9%) 83,865 ms/op

  Histogram, ms/op:
    [2500,000, 2512,500) = 0
    [2512,500, 2525,000) = 0
    [2525,000, 2537,500) = 0
    [2537,500, 2550,000) = 0
    [2550,000, 2562,500) = 3
    [2562,500, 2575,000) = 1
    [2575,000, 2587,500) = 1
    [2587,500, 2600,000) = 0
    [2600,000, 2612,500) = 1
    [2612,500, 2625,000) = 1
    [2625,000, 2637,500) = 0
    [2637,500, 2650,000) = 0
    [2650,000, 2662,500) = 0
    [2662,500, 2675,000) = 0
    [2675,000, 2687,500) = 1

  Percentiles, ms/op:
      p(0,0000) =   2554,080 ms/op
     p(50,0000) =   2576,255 ms/op
     p(90,0000) =   2679,280 ms/op
     p(95,0000) =   2679,280 ms/op
     p(99,0000) =   2679,280 ms/op
     p(99,9000) =   2679,280 ms/op
     p(99,9900) =   2679,280 ms/op
     p(99,9990) =   2679,280 ms/op
     p(99,9999) =   2679,280 ms/op
    p(100,0000) =   2679,280 ms/op


# Run complete. Total time: 00:00:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest       100000        remove    ss    8  2591,356 ± 83,865  ms/op
tests.maptests.object.GsObjMapTest (100000) = 2591.3561520000003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3242,219 ms/op
# Warmup Iteration   2: 3242,356 ms/op
# Warmup Iteration   3: 3126,457 ms/op
# Warmup Iteration   4: 3179,680 ms/op
# Warmup Iteration   5: 3058,902 ms/op
# Warmup Iteration   6: 3095,387 ms/op
# Warmup Iteration   7: 3144,650 ms/op
# Warmup Iteration   8: 3101,097 ms/op
# Warmup Iteration   9: 3149,351 ms/op
# Warmup Iteration  10: 3086,464 ms/op
Iteration   1: 3106,683 ms/op
Iteration   2: 3127,246 ms/op
Iteration   3: 3157,076 ms/op
Iteration   4: 3180,290 ms/op
Iteration   5: 3087,328 ms/op
Iteration   6: 3205,660 ms/op
Iteration   7: 3161,581 ms/op
Iteration   8: 3216,336 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3155,275 ±(99.9%) 87,616 ms/op

  Histogram, ms/op:
    [3000,000, 3025,000) = 0
    [3025,000, 3050,000) = 0
    [3050,000, 3075,000) = 0
    [3075,000, 3100,000) = 1
    [3100,000, 3125,000) = 1
    [3125,000, 3150,000) = 1
    [3150,000, 3175,000) = 2
    [3175,000, 3200,000) = 1
    [3200,000, 3225,000) = 2
    [3225,000, 3250,000) = 0
    [3250,000, 3275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3087,328 ms/op
     p(50,0000) =   3159,329 ms/op
     p(90,0000) =   3216,336 ms/op
     p(95,0000) =   3216,336 ms/op
     p(99,0000) =   3216,336 ms/op
     p(99,9000) =   3216,336 ms/op
     p(99,9900) =   3216,336 ms/op
     p(99,9990) =   3216,336 ms/op
     p(99,9999) =   3216,336 ms/op
    p(100,0000) =   3216,336 ms/op


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest       100000        remove    ss    8  3155,275 ± 87,616  ms/op
tests.maptests.object.JdkMapTest (100000) = 3155.2748932500003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2696,909 ms/op
# Warmup Iteration   2: 2448,892 ms/op
# Warmup Iteration   3: 2465,818 ms/op
# Warmup Iteration   4: 2537,548 ms/op
# Warmup Iteration   5: 2474,858 ms/op
# Warmup Iteration   6: 2419,065 ms/op
# Warmup Iteration   7: 2452,909 ms/op
# Warmup Iteration   8: 2418,646 ms/op
# Warmup Iteration   9: 2410,377 ms/op
# Warmup Iteration  10: 2404,543 ms/op
Iteration   1: 2435,575 ms/op
Iteration   2: 2435,538 ms/op
Iteration   3: 2439,214 ms/op
Iteration   4: 2421,362 ms/op
Iteration   5: 2460,838 ms/op
Iteration   6: 2465,070 ms/op
Iteration   7: 2542,036 ms/op
Iteration   8: 2410,741 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2451,297 ±(99.9%) 78,157 ms/op

  Histogram, ms/op:
    [2400,000, 2412,500) = 1
    [2412,500, 2425,000) = 1
    [2425,000, 2437,500) = 2
    [2437,500, 2450,000) = 1
    [2450,000, 2462,500) = 1
    [2462,500, 2475,000) = 1
    [2475,000, 2487,500) = 0
    [2487,500, 2500,000) = 0
    [2500,000, 2512,500) = 0
    [2512,500, 2525,000) = 0
    [2525,000, 2537,500) = 0
    [2537,500, 2550,000) = 1
    [2550,000, 2562,500) = 0
    [2562,500, 2575,000) = 0
    [2575,000, 2587,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2410,741 ms/op
     p(50,0000) =   2437,395 ms/op
     p(90,0000) =   2542,036 ms/op
     p(95,0000) =   2542,036 ms/op
     p(99,0000) =   2542,036 ms/op
     p(99,9000) =   2542,036 ms/op
     p(99,9900) =   2542,036 ms/op
     p(99,9990) =   2542,036 ms/op
     p(99,9999) =   2542,036 ms/op
    p(100,0000) =   2542,036 ms/op


# Run complete. Total time: 00:00:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity       100000        remove    ss    8  2451,297 ± 78,157  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (100000) = 2451.296857
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4528,190 ms/op
# Warmup Iteration   2: 4475,962 ms/op
# Warmup Iteration   3: 4439,010 ms/op
# Warmup Iteration   4: 4442,435 ms/op
# Warmup Iteration   5: 4507,198 ms/op
# Warmup Iteration   6: 4438,743 ms/op
# Warmup Iteration   7: 4419,272 ms/op
# Warmup Iteration   8: 4432,245 ms/op
# Warmup Iteration   9: 4374,127 ms/op
# Warmup Iteration  10: 4392,335 ms/op
Iteration   1: 4424,068 ms/op
Iteration   2: 4455,523 ms/op
Iteration   3: 4412,439 ms/op
Iteration   4: 4401,324 ms/op
Iteration   5: 4399,784 ms/op
Iteration   6: 4407,942 ms/op
Iteration   7: 4429,875 ms/op
Iteration   8: 4422,261 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4419,152 ±(99.9%) 34,922 ms/op

  Histogram, ms/op:
    [4390,000, 4395,000) = 0
    [4395,000, 4400,000) = 1
    [4400,000, 4405,000) = 1
    [4405,000, 4410,000) = 1
    [4410,000, 4415,000) = 1
    [4415,000, 4420,000) = 0
    [4420,000, 4425,000) = 2
    [4425,000, 4430,000) = 1
    [4430,000, 4435,000) = 0
    [4435,000, 4440,000) = 0
    [4440,000, 4445,000) = 0
    [4445,000, 4450,000) = 0
    [4450,000, 4455,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4399,784 ms/op
     p(50,0000) =   4417,350 ms/op
     p(90,0000) =   4455,523 ms/op
     p(95,0000) =   4455,523 ms/op
     p(99,0000) =   4455,523 ms/op
     p(99,9000) =   4455,523 ms/op
     p(99,9900) =   4455,523 ms/op
     p(99,9990) =   4455,523 ms/op
     p(99,9999) =   4455,523 ms/op
    p(100,0000) =   4455,523 ms/op


# Run complete. Total time: 00:01:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest       100000        remove    ss    8  4419,152 ± 34,922  ms/op
tests.maptests.object.TroveJbObjMapTest (100000) = 4419.151941749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4829,042 ms/op
# Warmup Iteration   2: 4746,537 ms/op
# Warmup Iteration   3: 4783,207 ms/op
# Warmup Iteration   4: 4698,570 ms/op
# Warmup Iteration   5: 4692,319 ms/op
# Warmup Iteration   6: 4818,208 ms/op
# Warmup Iteration   7: 4766,126 ms/op
# Warmup Iteration   8: 4766,500 ms/op
# Warmup Iteration   9: 4734,207 ms/op
# Warmup Iteration  10: 4765,277 ms/op
Iteration   1: 4750,477 ms/op
Iteration   2: 4899,205 ms/op
Iteration   3: 4726,664 ms/op
Iteration   4: 4789,770 ms/op
Iteration   5: 4749,615 ms/op
Iteration   6: 4712,793 ms/op
Iteration   7: 4726,617 ms/op
Iteration   8: 4831,983 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4773,390 ±(99.9%) 122,350 ms/op

  Histogram, ms/op:
    [4700,000, 4712,500) = 0
    [4712,500, 4725,000) = 1
    [4725,000, 4737,500) = 2
    [4737,500, 4750,000) = 1
    [4750,000, 4762,500) = 1
    [4762,500, 4775,000) = 0
    [4775,000, 4787,500) = 0
    [4787,500, 4800,000) = 1
    [4800,000, 4812,500) = 0
    [4812,500, 4825,000) = 0
    [4825,000, 4837,500) = 1
    [4837,500, 4850,000) = 0
    [4850,000, 4862,500) = 0
    [4862,500, 4875,000) = 0
    [4875,000, 4887,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4712,793 ms/op
     p(50,0000) =   4750,046 ms/op
     p(90,0000) =   4899,205 ms/op
     p(95,0000) =   4899,205 ms/op
     p(99,0000) =   4899,205 ms/op
     p(99,9000) =   4899,205 ms/op
     p(99,9900) =   4899,205 ms/op
     p(99,9990) =   4899,205 ms/op
     p(99,9999) =   4899,205 ms/op
    p(100,0000) =   4899,205 ms/op


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest       100000        remove    ss    8  4773,390 ± 122,350  ms/op
tests.maptests.object.TroveObjMapTest (100000) = 4773.3903041250005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2799,878 ms/op
# Warmup Iteration   2: 2690,459 ms/op
# Warmup Iteration   3: 2710,529 ms/op
# Warmup Iteration   4: 2707,293 ms/op
# Warmup Iteration   5: 2742,679 ms/op
# Warmup Iteration   6: 2699,028 ms/op
# Warmup Iteration   7: 2694,220 ms/op
# Warmup Iteration   8: 2679,746 ms/op
# Warmup Iteration   9: 2730,246 ms/op
# Warmup Iteration  10: 2680,015 ms/op
Iteration   1: 2677,217 ms/op
Iteration   2: 2698,716 ms/op
Iteration   3: 2685,117 ms/op
Iteration   4: 2645,515 ms/op
Iteration   5: 2694,487 ms/op
Iteration   6: 2745,479 ms/op
Iteration   7: 2666,638 ms/op
Iteration   8: 2661,540 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2684,339 ±(99.9%) 57,991 ms/op

  Histogram, ms/op:
    [2640,000, 2650,000) = 1
    [2650,000, 2660,000) = 0
    [2660,000, 2670,000) = 2
    [2670,000, 2680,000) = 1
    [2680,000, 2690,000) = 1
    [2690,000, 2700,000) = 2
    [2700,000, 2710,000) = 0
    [2710,000, 2720,000) = 0
    [2720,000, 2730,000) = 0
    [2730,000, 2740,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2645,515 ms/op
     p(50,0000) =   2681,167 ms/op
     p(90,0000) =   2745,479 ms/op
     p(95,0000) =   2745,479 ms/op
     p(99,0000) =   2745,479 ms/op
     p(99,9000) =   2745,479 ms/op
     p(99,9900) =   2745,479 ms/op
     p(99,9990) =   2745,479 ms/op
     p(99,9999) =   2745,479 ms/op
    p(100,0000) =   2745,479 ms/op


# Run complete. Total time: 00:00:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest       100000        remove    ss    8  2684,339 ± 57,991  ms/op
tests.maptests.article_examples.ObjObjMapTest (100000) = 2684.33864
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 1945,240 ms/op
# Warmup Iteration   2: 1830,199 ms/op
# Warmup Iteration   3: 1800,982 ms/op
# Warmup Iteration   4: 1828,411 ms/op
# Warmup Iteration   5: 1778,732 ms/op
# Warmup Iteration   6: 1840,788 ms/op
# Warmup Iteration   7: 1831,562 ms/op
# Warmup Iteration   8: 1826,729 ms/op
# Warmup Iteration   9: 1808,388 ms/op
# Warmup Iteration  10: 1821,368 ms/op
Iteration   1: 1782,891 ms/op
Iteration   2: 1843,357 ms/op
Iteration   3: 1795,251 ms/op
Iteration   4: 1798,856 ms/op
Iteration   5: 1808,223 ms/op
Iteration   6: 1790,154 ms/op
Iteration   7: 1861,027 ms/op
Iteration   8: 1809,611 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   1811,171 ±(99.9%) 52,008 ms/op

  Histogram, ms/op:
    [1780,000, 1785,000) = 1
    [1785,000, 1790,000) = 0
    [1790,000, 1795,000) = 1
    [1795,000, 1800,000) = 2
    [1800,000, 1805,000) = 0
    [1805,000, 1810,000) = 2
    [1810,000, 1815,000) = 0
    [1815,000, 1820,000) = 0
    [1820,000, 1825,000) = 0
    [1825,000, 1830,000) = 0
    [1830,000, 1835,000) = 0
    [1835,000, 1840,000) = 0
    [1840,000, 1845,000) = 1
    [1845,000, 1850,000) = 0
    [1850,000, 1855,000) = 0
    [1855,000, 1860,000) = 0
    [1860,000, 1865,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   1782,891 ms/op
     p(50,0000) =   1803,540 ms/op
     p(90,0000) =   1861,027 ms/op
     p(95,0000) =   1861,027 ms/op
     p(99,0000) =   1861,027 ms/op
     p(99,9000) =   1861,027 ms/op
     p(99,9900) =   1861,027 ms/op
     p(99,9990) =   1861,027 ms/op
     p(99,9999) =   1861,027 ms/op
    p(100,0000) =   1861,027 ms/op


# Run complete. Total time: 00:00:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest       100000        remove    ss    8  1811,171 ± 52,008  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (100000) = 1811.1712141250002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3221,848 ms/op
# Warmup Iteration   2: 3063,845 ms/op
# Warmup Iteration   3: 3047,703 ms/op
# Warmup Iteration   4: 3067,485 ms/op
# Warmup Iteration   5: 3083,059 ms/op
# Warmup Iteration   6: 3082,939 ms/op
# Warmup Iteration   7: 3110,702 ms/op
# Warmup Iteration   8: 3061,800 ms/op
# Warmup Iteration   9: 3057,660 ms/op
# Warmup Iteration  10: 3072,448 ms/op
Iteration   1: 3065,339 ms/op
Iteration   2: 3059,031 ms/op
Iteration   3: 3110,064 ms/op
Iteration   4: 3072,126 ms/op
Iteration   5: 3042,052 ms/op
Iteration   6: 3048,962 ms/op
Iteration   7: 3109,761 ms/op
Iteration   8: 3070,703 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3072,255 ±(99.9%) 48,564 ms/op

  Histogram, ms/op:
    [3040,000, 3045,000) = 1
    [3045,000, 3050,000) = 1
    [3050,000, 3055,000) = 0
    [3055,000, 3060,000) = 1
    [3060,000, 3065,000) = 0
    [3065,000, 3070,000) = 1
    [3070,000, 3075,000) = 2
    [3075,000, 3080,000) = 0
    [3080,000, 3085,000) = 0
    [3085,000, 3090,000) = 0
    [3090,000, 3095,000) = 0
    [3095,000, 3100,000) = 0
    [3100,000, 3105,000) = 0
    [3105,000, 3110,000) = 1
    [3110,000, 3115,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3042,052 ms/op
     p(50,0000) =   3068,021 ms/op
     p(90,0000) =   3110,064 ms/op
     p(95,0000) =   3110,064 ms/op
     p(99,0000) =   3110,064 ms/op
     p(99,9000) =   3110,064 ms/op
     p(99,9900) =   3110,064 ms/op
     p(99,9990) =   3110,064 ms/op
     p(99,9999) =   3110,064 ms/op
    p(100,0000) =   3110,064 ms/op


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest       100000        remove    ss    8  3072,255 ± 48,564  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (100000) = 3072.2545436249998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2172,196 ms/op
# Warmup Iteration   2: 2023,422 ms/op
# Warmup Iteration   3: 1997,395 ms/op
# Warmup Iteration   4: 2014,341 ms/op
# Warmup Iteration   5: 2035,161 ms/op
# Warmup Iteration   6: 2024,910 ms/op
# Warmup Iteration   7: 2020,983 ms/op
# Warmup Iteration   8: 2026,431 ms/op
# Warmup Iteration   9: 1996,809 ms/op
# Warmup Iteration  10: 1969,297 ms/op
Iteration   1: 2070,031 ms/op
Iteration   2: 2040,997 ms/op
Iteration   3: 2003,586 ms/op
Iteration   4: 2050,045 ms/op
Iteration   5: 2036,585 ms/op
Iteration   6: 2044,414 ms/op
Iteration   7: 1981,288 ms/op
Iteration   8: 1986,026 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2026,621 ±(99.9%) 61,698 ms/op

  Histogram, ms/op:
    [1980,000, 1990,000) = 2
    [1990,000, 2000,000) = 0
    [2000,000, 2010,000) = 1
    [2010,000, 2020,000) = 0
    [2020,000, 2030,000) = 0
    [2030,000, 2040,000) = 1
    [2040,000, 2050,000) = 2
    [2050,000, 2060,000) = 1
    [2060,000, 2070,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   1981,288 ms/op
     p(50,0000) =   2038,791 ms/op
     p(90,0000) =   2070,031 ms/op
     p(95,0000) =   2070,031 ms/op
     p(99,0000) =   2070,031 ms/op
     p(99,9000) =   2070,031 ms/op
     p(99,9900) =   2070,031 ms/op
     p(99,9990) =   2070,031 ms/op
     p(99,9999) =   2070,031 ms/op
    p(100,0000) =   2070,031 ms/op


# Run complete. Total time: 00:00:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest       100000        remove    ss    8  2026,621 ± 61,698  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (100000) = 2026.6214557500002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2315,699 ms/op
# Warmup Iteration   2: 2262,311 ms/op
# Warmup Iteration   3: 2232,364 ms/op
# Warmup Iteration   4: 2250,241 ms/op
# Warmup Iteration   5: 2198,169 ms/op
# Warmup Iteration   6: 2186,530 ms/op
# Warmup Iteration   7: 2248,987 ms/op
# Warmup Iteration   8: 2187,430 ms/op
# Warmup Iteration   9: 2200,108 ms/op
# Warmup Iteration  10: 2228,178 ms/op
Iteration   1: 2229,290 ms/op
Iteration   2: 2221,573 ms/op
Iteration   3: 2202,959 ms/op
Iteration   4: 2212,629 ms/op
Iteration   5: 2241,549 ms/op
Iteration   6: 2212,708 ms/op
Iteration   7: 2203,220 ms/op
Iteration   8: 2283,226 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2225,894 ±(99.9%) 50,854 ms/op

  Histogram, ms/op:
    [2200,000, 2205,000) = 2
    [2205,000, 2210,000) = 0
    [2210,000, 2215,000) = 2
    [2215,000, 2220,000) = 0
    [2220,000, 2225,000) = 1
    [2225,000, 2230,000) = 1
    [2230,000, 2235,000) = 0
    [2235,000, 2240,000) = 0
    [2240,000, 2245,000) = 1
    [2245,000, 2250,000) = 0
    [2250,000, 2255,000) = 0
    [2255,000, 2260,000) = 0
    [2260,000, 2265,000) = 0
    [2265,000, 2270,000) = 0
    [2270,000, 2275,000) = 0
    [2275,000, 2280,000) = 0
    [2280,000, 2285,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2202,959 ms/op
     p(50,0000) =   2217,140 ms/op
     p(90,0000) =   2283,226 ms/op
     p(95,0000) =   2283,226 ms/op
     p(99,0000) =   2283,226 ms/op
     p(99,9000) =   2283,226 ms/op
     p(99,9900) =   2283,226 ms/op
     p(99,9990) =   2283,226 ms/op
     p(99,9999) =   2283,226 ms/op
    p(100,0000) =   2283,226 ms/op


# Run complete. Total time: 00:00:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest       100000        remove    ss    8  2225,894 ± 50,854  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (100000) = 2225.8940762499997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4257,788 ms/op
# Warmup Iteration   2: 4208,095 ms/op
# Warmup Iteration   3: 4189,278 ms/op
# Warmup Iteration   4: 4202,556 ms/op
# Warmup Iteration   5: 4162,470 ms/op
# Warmup Iteration   6: 4242,077 ms/op
# Warmup Iteration   7: 4184,772 ms/op
# Warmup Iteration   8: 4189,563 ms/op
# Warmup Iteration   9: 4157,135 ms/op
# Warmup Iteration  10: 4133,482 ms/op
Iteration   1: 4164,804 ms/op
Iteration   2: 4148,644 ms/op
Iteration   3: 4199,104 ms/op
Iteration   4: 4132,810 ms/op
Iteration   5: 4115,755 ms/op
Iteration   6: 4144,258 ms/op
Iteration   7: 4138,078 ms/op
Iteration   8: 4179,242 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4152,837 ±(99.9%) 51,437 ms/op

  Histogram, ms/op:
    [4110,000, 4115,000) = 0
    [4115,000, 4120,000) = 1
    [4120,000, 4125,000) = 0
    [4125,000, 4130,000) = 0
    [4130,000, 4135,000) = 1
    [4135,000, 4140,000) = 1
    [4140,000, 4145,000) = 1
    [4145,000, 4150,000) = 1
    [4150,000, 4155,000) = 0
    [4155,000, 4160,000) = 0
    [4160,000, 4165,000) = 1
    [4165,000, 4170,000) = 0
    [4170,000, 4175,000) = 0
    [4175,000, 4180,000) = 1
    [4180,000, 4185,000) = 0
    [4185,000, 4190,000) = 0
    [4190,000, 4195,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4115,755 ms/op
     p(50,0000) =   4146,451 ms/op
     p(90,0000) =   4199,104 ms/op
     p(95,0000) =   4199,104 ms/op
     p(99,0000) =   4199,104 ms/op
     p(99,9000) =   4199,104 ms/op
     p(99,9900) =   4199,104 ms/op
     p(99,9990) =   4199,104 ms/op
     p(99,9999) =   4199,104 ms/op
    p(100,0000) =   4199,104 ms/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest       100000        remove    ss    8  4152,837 ± 51,437  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (100000) = 4152.836641
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3839,558 ms/op
# Warmup Iteration   2: 3681,140 ms/op
# Warmup Iteration   3: 3644,447 ms/op
# Warmup Iteration   4: 3651,147 ms/op
# Warmup Iteration   5: 3635,553 ms/op
# Warmup Iteration   6: 3633,402 ms/op
# Warmup Iteration   7: 3608,744 ms/op
# Warmup Iteration   8: 3626,411 ms/op
# Warmup Iteration   9: 3691,458 ms/op
# Warmup Iteration  10: 3652,918 ms/op
Iteration   1: 3615,647 ms/op
Iteration   2: 3643,490 ms/op
Iteration   3: 3641,074 ms/op
Iteration   4: 3626,221 ms/op
Iteration   5: 3640,251 ms/op
Iteration   6: 3628,012 ms/op
Iteration   7: 3615,369 ms/op
Iteration   8: 3699,770 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3638,729 ±(99.9%) 51,640 ms/op

  Histogram, ms/op:
    [3610,000, 3615,000) = 0
    [3615,000, 3620,000) = 2
    [3620,000, 3625,000) = 0
    [3625,000, 3630,000) = 2
    [3630,000, 3635,000) = 0
    [3635,000, 3640,000) = 0
    [3640,000, 3645,000) = 3
    [3645,000, 3650,000) = 0
    [3650,000, 3655,000) = 0
    [3655,000, 3660,000) = 0
    [3660,000, 3665,000) = 0
    [3665,000, 3670,000) = 0
    [3670,000, 3675,000) = 0
    [3675,000, 3680,000) = 0
    [3680,000, 3685,000) = 0
    [3685,000, 3690,000) = 0
    [3690,000, 3695,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3615,369 ms/op
     p(50,0000) =   3634,131 ms/op
     p(90,0000) =   3699,770 ms/op
     p(95,0000) =   3699,770 ms/op
     p(99,0000) =   3699,770 ms/op
     p(99,9000) =   3699,770 ms/op
     p(99,9900) =   3699,770 ms/op
     p(99,9990) =   3699,770 ms/op
     p(99,9999) =   3699,770 ms/op
    p(100,0000) =   3699,770 ms/op


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest       100000        remove    ss    8  3638,729 ± 51,640  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (100000) = 3638.729163625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2170,920 ms/op
# Warmup Iteration   2: 2069,508 ms/op
# Warmup Iteration   3: 2071,946 ms/op
# Warmup Iteration   4: 2080,952 ms/op
# Warmup Iteration   5: 2012,558 ms/op
# Warmup Iteration   6: 2027,917 ms/op
# Warmup Iteration   7: 2095,764 ms/op
# Warmup Iteration   8: 2034,656 ms/op
# Warmup Iteration   9: 2044,628 ms/op
# Warmup Iteration  10: 2067,895 ms/op
Iteration   1: 2110,702 ms/op
Iteration   2: 2076,369 ms/op
Iteration   3: 2066,302 ms/op
Iteration   4: 2028,462 ms/op
Iteration   5: 2050,427 ms/op
Iteration   6: 2060,377 ms/op
Iteration   7: 2057,778 ms/op
Iteration   8: 2057,730 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2063,518 ±(99.9%) 44,990 ms/op

  Histogram, ms/op:
    [2020,000, 2030,000) = 1
    [2030,000, 2040,000) = 0
    [2040,000, 2050,000) = 0
    [2050,000, 2060,000) = 3
    [2060,000, 2070,000) = 2
    [2070,000, 2080,000) = 1
    [2080,000, 2090,000) = 0
    [2090,000, 2100,000) = 0
    [2100,000, 2110,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2028,462 ms/op
     p(50,0000) =   2059,078 ms/op
     p(90,0000) =   2110,702 ms/op
     p(95,0000) =   2110,702 ms/op
     p(99,0000) =   2110,702 ms/op
     p(99,9000) =   2110,702 ms/op
     p(99,9900) =   2110,702 ms/op
     p(99,9990) =   2110,702 ms/op
     p(99,9999) =   2110,702 ms/op
    p(100,0000) =   2110,702 ms/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest       100000        remove    ss    8  2063,518 ± 44,990  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (100000) = 2063.518391625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3771,392 ms/op
# Warmup Iteration   2: 3578,401 ms/op
# Warmup Iteration   3: 3661,127 ms/op
# Warmup Iteration   4: 3574,493 ms/op
# Warmup Iteration   5: 3656,249 ms/op
# Warmup Iteration   6: 3553,129 ms/op
# Warmup Iteration   7: 3571,542 ms/op
# Warmup Iteration   8: 3567,856 ms/op
# Warmup Iteration   9: 3591,154 ms/op
# Warmup Iteration  10: 3597,544 ms/op
Iteration   1: 3633,726 ms/op
Iteration   2: 3588,193 ms/op
Iteration   3: 3564,905 ms/op
Iteration   4: 3579,929 ms/op
Iteration   5: 3597,090 ms/op
Iteration   6: 3568,052 ms/op
Iteration   7: 3603,198 ms/op
Iteration   8: 3527,286 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3582,797 ±(99.9%) 59,900 ms/op

  Histogram, ms/op:
    [3500,000, 3512,500) = 0
    [3512,500, 3525,000) = 0
    [3525,000, 3537,500) = 1
    [3537,500, 3550,000) = 0
    [3550,000, 3562,500) = 0
    [3562,500, 3575,000) = 2
    [3575,000, 3587,500) = 1
    [3587,500, 3600,000) = 2
    [3600,000, 3612,500) = 1
    [3612,500, 3625,000) = 0
    [3625,000, 3637,500) = 1
    [3637,500, 3650,000) = 0
    [3650,000, 3662,500) = 0
    [3662,500, 3675,000) = 0
    [3675,000, 3687,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   3527,286 ms/op
     p(50,0000) =   3584,061 ms/op
     p(90,0000) =   3633,726 ms/op
     p(95,0000) =   3633,726 ms/op
     p(99,0000) =   3633,726 ms/op
     p(99,9000) =   3633,726 ms/op
     p(99,9900) =   3633,726 ms/op
     p(99,9990) =   3633,726 ms/op
     p(99,9999) =   3633,726 ms/op
    p(100,0000) =   3633,726 ms/op


# Run complete. Total time: 00:01:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest       100000        remove    ss    8  3582,797 ± 59,900  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (100000) = 3582.797396375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2586,830 ms/op
# Warmup Iteration   2: 2481,180 ms/op
# Warmup Iteration   3: 2452,887 ms/op
# Warmup Iteration   4: 2449,430 ms/op
# Warmup Iteration   5: 2487,799 ms/op
# Warmup Iteration   6: 2472,771 ms/op
# Warmup Iteration   7: 2492,968 ms/op
# Warmup Iteration   8: 2483,137 ms/op
# Warmup Iteration   9: 2491,938 ms/op
# Warmup Iteration  10: 2495,462 ms/op
Iteration   1: 2471,928 ms/op
Iteration   2: 2521,231 ms/op
Iteration   3: 2495,231 ms/op
Iteration   4: 2471,853 ms/op
Iteration   5: 2508,418 ms/op
Iteration   6: 2505,180 ms/op
Iteration   7: 2509,278 ms/op
Iteration   8: 2499,895 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2497,877 ±(99.9%) 33,908 ms/op

  Histogram, ms/op:
    [2470,000, 2475,000) = 2
    [2475,000, 2480,000) = 0
    [2480,000, 2485,000) = 0
    [2485,000, 2490,000) = 0
    [2490,000, 2495,000) = 0
    [2495,000, 2500,000) = 2
    [2500,000, 2505,000) = 0
    [2505,000, 2510,000) = 3
    [2510,000, 2515,000) = 0
    [2515,000, 2520,000) = 0
    [2520,000, 2525,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2471,853 ms/op
     p(50,0000) =   2502,538 ms/op
     p(90,0000) =   2521,231 ms/op
     p(95,0000) =   2521,231 ms/op
     p(99,0000) =   2521,231 ms/op
     p(99,9000) =   2521,231 ms/op
     p(99,9900) =   2521,231 ms/op
     p(99,9990) =   2521,231 ms/op
     p(99,9999) =   2521,231 ms/op
    p(100,0000) =   2521,231 ms/op


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest       100000        remove    ss    8  2497,877 ± 33,908  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (100000) = 2497.876792
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2483,251 ms/op
# Warmup Iteration   2: 2385,893 ms/op
# Warmup Iteration   3: 2367,017 ms/op
# Warmup Iteration   4: 2411,706 ms/op
# Warmup Iteration   5: 2363,589 ms/op
# Warmup Iteration   6: 2353,781 ms/op
# Warmup Iteration   7: 2371,317 ms/op
# Warmup Iteration   8: 2423,280 ms/op
# Warmup Iteration   9: 2345,616 ms/op
# Warmup Iteration  10: 2384,444 ms/op
Iteration   1: 2363,841 ms/op
Iteration   2: 2351,918 ms/op
Iteration   3: 2372,925 ms/op
Iteration   4: 2355,093 ms/op
Iteration   5: 2364,883 ms/op
Iteration   6: 2384,199 ms/op
Iteration   7: 2474,019 ms/op
Iteration   8: 2385,214 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2381,512 ±(99.9%) 75,152 ms/op

  Histogram, ms/op:
    [2300,000, 2312,500) = 0
    [2312,500, 2325,000) = 0
    [2325,000, 2337,500) = 0
    [2337,500, 2350,000) = 0
    [2350,000, 2362,500) = 2
    [2362,500, 2375,000) = 3
    [2375,000, 2387,500) = 2
    [2387,500, 2400,000) = 0
    [2400,000, 2412,500) = 0
    [2412,500, 2425,000) = 0
    [2425,000, 2437,500) = 0
    [2437,500, 2450,000) = 0
    [2450,000, 2462,500) = 0
    [2462,500, 2475,000) = 1
    [2475,000, 2487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   2351,918 ms/op
     p(50,0000) =   2368,904 ms/op
     p(90,0000) =   2474,019 ms/op
     p(95,0000) =   2474,019 ms/op
     p(99,0000) =   2474,019 ms/op
     p(99,9000) =   2474,019 ms/op
     p(99,9900) =   2474,019 ms/op
     p(99,9990) =   2474,019 ms/op
     p(99,9999) =   2474,019 ms/op
    p(100,0000) =   2474,019 ms/op


# Run complete. Total time: 00:00:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest       100000        remove    ss    8  2381,512 ± 75,152  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (100000) = 2381.51151175
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4306,865 ms/op
# Warmup Iteration   2: 4200,813 ms/op
# Warmup Iteration   3: 4200,415 ms/op
# Warmup Iteration   4: 4175,728 ms/op
# Warmup Iteration   5: 4261,864 ms/op
# Warmup Iteration   6: 4182,827 ms/op
# Warmup Iteration   7: 4152,661 ms/op
# Warmup Iteration   8: 4228,449 ms/op
# Warmup Iteration   9: 4127,510 ms/op
# Warmup Iteration  10: 4174,119 ms/op
Iteration   1: 4206,687 ms/op
Iteration   2: 4225,853 ms/op
Iteration   3: 4207,933 ms/op
Iteration   4: 4145,883 ms/op
Iteration   5: 4144,844 ms/op
Iteration   6: 4135,488 ms/op
Iteration   7: 4161,291 ms/op
Iteration   8: 4162,541 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4173,815 ±(99.9%) 65,936 ms/op

  Histogram, ms/op:
    [4130,000, 4140,000) = 1
    [4140,000, 4150,000) = 2
    [4150,000, 4160,000) = 0
    [4160,000, 4170,000) = 2
    [4170,000, 4180,000) = 0
    [4180,000, 4190,000) = 0
    [4190,000, 4200,000) = 0
    [4200,000, 4210,000) = 2
    [4210,000, 4220,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4135,488 ms/op
     p(50,0000) =   4161,916 ms/op
     p(90,0000) =   4225,853 ms/op
     p(95,0000) =   4225,853 ms/op
     p(99,0000) =   4225,853 ms/op
     p(99,9000) =   4225,853 ms/op
     p(99,9900) =   4225,853 ms/op
     p(99,9990) =   4225,853 ms/op
     p(99,9999) =   4225,853 ms/op
    p(100,0000) =   4225,853 ms/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest       100000        remove    ss    8  4173,815 ± 65,936  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (100000) = 4173.814832874999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4487,946 ms/op
# Warmup Iteration   2: 4348,495 ms/op
# Warmup Iteration   3: 4323,219 ms/op
# Warmup Iteration   4: 4387,307 ms/op
# Warmup Iteration   5: 4363,741 ms/op
# Warmup Iteration   6: 4415,751 ms/op
# Warmup Iteration   7: 4479,137 ms/op
# Warmup Iteration   8: 4446,552 ms/op
# Warmup Iteration   9: 4433,287 ms/op
# Warmup Iteration  10: 4403,077 ms/op
Iteration   1: 4409,015 ms/op
Iteration   2: 4374,836 ms/op
Iteration   3: 4413,439 ms/op
Iteration   4: 4457,460 ms/op
Iteration   5: 4455,800 ms/op
Iteration   6: 4446,703 ms/op
Iteration   7: 4390,730 ms/op
Iteration   8: 4385,171 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4416,644 ±(99.9%) 62,922 ms/op

  Histogram, ms/op:
    [4370,000, 4375,000) = 1
    [4375,000, 4380,000) = 0
    [4380,000, 4385,000) = 0
    [4385,000, 4390,000) = 1
    [4390,000, 4395,000) = 1
    [4395,000, 4400,000) = 0
    [4400,000, 4405,000) = 0
    [4405,000, 4410,000) = 1
    [4410,000, 4415,000) = 1
    [4415,000, 4420,000) = 0
    [4420,000, 4425,000) = 0
    [4425,000, 4430,000) = 0
    [4430,000, 4435,000) = 0
    [4435,000, 4440,000) = 0
    [4440,000, 4445,000) = 0
    [4445,000, 4450,000) = 1
    [4450,000, 4455,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4374,836 ms/op
     p(50,0000) =   4411,227 ms/op
     p(90,0000) =   4457,460 ms/op
     p(95,0000) =   4457,460 ms/op
     p(99,0000) =   4457,460 ms/op
     p(99,9000) =   4457,460 ms/op
     p(99,9900) =   4457,460 ms/op
     p(99,9990) =   4457,460 ms/op
     p(99,9999) =   4457,460 ms/op
    p(100,0000) =   4457,460 ms/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest       100000        remove    ss    8  4416,644 ± 62,922  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (100000) = 4416.64423525
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2847,240 ms/op
# Warmup Iteration   2: 2796,849 ms/op
# Warmup Iteration   3: 2771,384 ms/op
# Warmup Iteration   4: 2730,503 ms/op
# Warmup Iteration   5: 2747,168 ms/op
# Warmup Iteration   6: 2742,100 ms/op
# Warmup Iteration   7: 2713,286 ms/op
# Warmup Iteration   8: 2746,784 ms/op
# Warmup Iteration   9: 2697,721 ms/op
# Warmup Iteration  10: 2767,288 ms/op
Iteration   1: 2751,592 ms/op
Iteration   2: 2731,795 ms/op
Iteration   3: 2818,037 ms/op
Iteration   4: 2756,910 ms/op
Iteration   5: 2736,185 ms/op
Iteration   6: 2767,392 ms/op
Iteration   7: 2742,421 ms/op
Iteration   8: 2746,121 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2756,307 ±(99.9%) 52,403 ms/op

  Histogram, ms/op:
    [2730,000, 2735,000) = 1
    [2735,000, 2740,000) = 1
    [2740,000, 2745,000) = 1
    [2745,000, 2750,000) = 1
    [2750,000, 2755,000) = 1
    [2755,000, 2760,000) = 1
    [2760,000, 2765,000) = 0
    [2765,000, 2770,000) = 1
    [2770,000, 2775,000) = 0
    [2775,000, 2780,000) = 0
    [2780,000, 2785,000) = 0
    [2785,000, 2790,000) = 0
    [2790,000, 2795,000) = 0
    [2795,000, 2800,000) = 0
    [2800,000, 2805,000) = 0
    [2805,000, 2810,000) = 0
    [2810,000, 2815,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2731,795 ms/op
     p(50,0000) =   2748,857 ms/op
     p(90,0000) =   2818,037 ms/op
     p(95,0000) =   2818,037 ms/op
     p(99,0000) =   2818,037 ms/op
     p(99,9000) =   2818,037 ms/op
     p(99,9900) =   2818,037 ms/op
     p(99,9990) =   2818,037 ms/op
     p(99,9999) =   2818,037 ms/op
    p(100,0000) =   2818,037 ms/op


# Run complete. Total time: 00:00:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest       100000        remove    ss    8  2756,307 ± 52,403  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (100000) = 2756.306650875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2644,170 ms/op
# Warmup Iteration   2: 2493,008 ms/op
# Warmup Iteration   3: 2509,181 ms/op
# Warmup Iteration   4: 2533,865 ms/op
# Warmup Iteration   5: 2467,245 ms/op
# Warmup Iteration   6: 2416,186 ms/op
# Warmup Iteration   7: 2430,236 ms/op
# Warmup Iteration   8: 2486,587 ms/op
# Warmup Iteration   9: 2436,324 ms/op
# Warmup Iteration  10: 2444,332 ms/op
Iteration   1: 2427,972 ms/op
Iteration   2: 2399,765 ms/op
Iteration   3: 2464,999 ms/op
Iteration   4: 2440,462 ms/op
Iteration   5: 2444,085 ms/op
Iteration   6: 2417,743 ms/op
Iteration   7: 2531,079 ms/op
Iteration   8: 2485,975 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2451,510 ±(99.9%) 79,984 ms/op

  Histogram, ms/op:
    [2300,000, 2325,000) = 0
    [2325,000, 2350,000) = 0
    [2350,000, 2375,000) = 0
    [2375,000, 2400,000) = 1
    [2400,000, 2425,000) = 1
    [2425,000, 2450,000) = 3
    [2450,000, 2475,000) = 1
    [2475,000, 2500,000) = 1
    [2500,000, 2525,000) = 0
    [2525,000, 2550,000) = 1
    [2550,000, 2575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2399,765 ms/op
     p(50,0000) =   2442,274 ms/op
     p(90,0000) =   2531,079 ms/op
     p(95,0000) =   2531,079 ms/op
     p(99,0000) =   2531,079 ms/op
     p(99,9000) =   2531,079 ms/op
     p(99,9900) =   2531,079 ms/op
     p(99,9990) =   2531,079 ms/op
     p(99,9999) =   2531,079 ms/op
    p(100,0000) =   2531,079 ms/op


# Run complete. Total time: 00:00:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest       100000        remove    ss    8  2451,510 ± 79,984  ms/op
tests.maptests.identity_object.GsIdentityMapTest (100000) = 2451.5101364999996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2961,024 ms/op
# Warmup Iteration   2: 2828,504 ms/op
# Warmup Iteration   3: 2805,530 ms/op
# Warmup Iteration   4: 2823,333 ms/op
# Warmup Iteration   5: 2827,455 ms/op
# Warmup Iteration   6: 2798,939 ms/op
# Warmup Iteration   7: 2906,261 ms/op
# Warmup Iteration   8: 2823,446 ms/op
# Warmup Iteration   9: 2829,034 ms/op
# Warmup Iteration  10: 2841,876 ms/op
Iteration   1: 2843,169 ms/op
Iteration   2: 2827,303 ms/op
Iteration   3: 2831,835 ms/op
Iteration   4: 2857,049 ms/op
Iteration   5: 2811,391 ms/op
Iteration   6: 2822,919 ms/op
Iteration   7: 2825,333 ms/op
Iteration   8: 2895,793 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2839,349 ±(99.9%) 50,912 ms/op

  Histogram, ms/op:
    [2810,000, 2815,000) = 1
    [2815,000, 2820,000) = 0
    [2820,000, 2825,000) = 1
    [2825,000, 2830,000) = 2
    [2830,000, 2835,000) = 1
    [2835,000, 2840,000) = 0
    [2840,000, 2845,000) = 1
    [2845,000, 2850,000) = 0
    [2850,000, 2855,000) = 0
    [2855,000, 2860,000) = 1
    [2860,000, 2865,000) = 0
    [2865,000, 2870,000) = 0
    [2870,000, 2875,000) = 0
    [2875,000, 2880,000) = 0
    [2880,000, 2885,000) = 0
    [2885,000, 2890,000) = 0
    [2890,000, 2895,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2811,391 ms/op
     p(50,0000) =   2829,569 ms/op
     p(90,0000) =   2895,793 ms/op
     p(95,0000) =   2895,793 ms/op
     p(99,0000) =   2895,793 ms/op
     p(99,9000) =   2895,793 ms/op
     p(99,9900) =   2895,793 ms/op
     p(99,9990) =   2895,793 ms/op
     p(99,9999) =   2895,793 ms/op
    p(100,0000) =   2895,793 ms/op


# Run complete. Total time: 00:00:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest       100000        remove    ss    8  2839,349 ± 50,912  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (100000) = 2839.348843125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2920,822 ms/op
# Warmup Iteration   2: 2796,906 ms/op
# Warmup Iteration   3: 2793,554 ms/op
# Warmup Iteration   4: 2818,956 ms/op
# Warmup Iteration   5: 2812,198 ms/op
# Warmup Iteration   6: 2800,650 ms/op
# Warmup Iteration   7: 2763,681 ms/op
# Warmup Iteration   8: 2770,870 ms/op
# Warmup Iteration   9: 2846,623 ms/op
# Warmup Iteration  10: 2774,289 ms/op
Iteration   1: 2773,661 ms/op
Iteration   2: 2775,309 ms/op
Iteration   3: 2822,248 ms/op
Iteration   4: 2801,085 ms/op
Iteration   5: 2767,067 ms/op
Iteration   6: 2815,167 ms/op
Iteration   7: 2742,914 ms/op
Iteration   8: 2780,706 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2784,770 ±(99.9%) 50,532 ms/op

  Histogram, ms/op:
    [2740,000, 2745,000) = 1
    [2745,000, 2750,000) = 0
    [2750,000, 2755,000) = 0
    [2755,000, 2760,000) = 0
    [2760,000, 2765,000) = 0
    [2765,000, 2770,000) = 1
    [2770,000, 2775,000) = 1
    [2775,000, 2780,000) = 1
    [2780,000, 2785,000) = 1
    [2785,000, 2790,000) = 0
    [2790,000, 2795,000) = 0
    [2795,000, 2800,000) = 0
    [2800,000, 2805,000) = 1
    [2805,000, 2810,000) = 0
    [2810,000, 2815,000) = 0
    [2815,000, 2820,000) = 1
    [2820,000, 2825,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2742,914 ms/op
     p(50,0000) =   2778,008 ms/op
     p(90,0000) =   2822,248 ms/op
     p(95,0000) =   2822,248 ms/op
     p(99,0000) =   2822,248 ms/op
     p(99,9000) =   2822,248 ms/op
     p(99,9900) =   2822,248 ms/op
     p(99,9990) =   2822,248 ms/op
     p(99,9999) =   2822,248 ms/op
    p(100,0000) =   2822,248 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest       100000        remove    ss    8  2784,770 ± 50,532  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (100000) = 2784.769767625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2524,522 ms/op
# Warmup Iteration   2: 2442,032 ms/op
# Warmup Iteration   3: 2435,621 ms/op
# Warmup Iteration   4: 2448,961 ms/op
# Warmup Iteration   5: 2435,441 ms/op
# Warmup Iteration   6: 2425,484 ms/op
# Warmup Iteration   7: 2459,563 ms/op
# Warmup Iteration   8: 2400,118 ms/op
# Warmup Iteration   9: 2469,264 ms/op
# Warmup Iteration  10: 2424,621 ms/op
Iteration   1: 2422,602 ms/op
Iteration   2: 2484,867 ms/op
Iteration   3: 2439,687 ms/op
Iteration   4: 2402,184 ms/op
Iteration   5: 2442,242 ms/op
Iteration   6: 2428,643 ms/op
Iteration   7: 2448,835 ms/op
Iteration   8: 2465,551 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2441,827 ±(99.9%) 48,928 ms/op

  Histogram, ms/op:
    [2400,000, 2405,000) = 1
    [2405,000, 2410,000) = 0
    [2410,000, 2415,000) = 0
    [2415,000, 2420,000) = 0
    [2420,000, 2425,000) = 1
    [2425,000, 2430,000) = 1
    [2430,000, 2435,000) = 0
    [2435,000, 2440,000) = 1
    [2440,000, 2445,000) = 1
    [2445,000, 2450,000) = 1
    [2450,000, 2455,000) = 0
    [2455,000, 2460,000) = 0
    [2460,000, 2465,000) = 0
    [2465,000, 2470,000) = 1
    [2470,000, 2475,000) = 0
    [2475,000, 2480,000) = 0
    [2480,000, 2485,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   2402,184 ms/op
     p(50,0000) =   2440,965 ms/op
     p(90,0000) =   2484,867 ms/op
     p(95,0000) =   2484,867 ms/op
     p(99,0000) =   2484,867 ms/op
     p(99,9000) =   2484,867 ms/op
     p(99,9900) =   2484,867 ms/op
     p(99,9990) =   2484,867 ms/op
     p(99,9999) =   2484,867 ms/op
    p(100,0000) =   2484,867 ms/op


# Run complete. Total time: 00:00:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest       100000        remove    ss    8  2441,827 ± 48,928  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (100000) = 2441.826543375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4496,342 ms/op
# Warmup Iteration   2: 4424,314 ms/op
# Warmup Iteration   3: 4344,334 ms/op
# Warmup Iteration   4: 4389,171 ms/op
# Warmup Iteration   5: 4374,091 ms/op
# Warmup Iteration   6: 4384,974 ms/op
# Warmup Iteration   7: 4333,030 ms/op
# Warmup Iteration   8: 4337,150 ms/op
# Warmup Iteration   9: 4464,262 ms/op
# Warmup Iteration  10: 4336,497 ms/op
Iteration   1: 4357,483 ms/op
Iteration   2: 4360,297 ms/op
Iteration   3: 4375,133 ms/op
Iteration   4: 4324,688 ms/op
Iteration   5: 4368,000 ms/op
Iteration   6: 4458,898 ms/op
Iteration   7: 4367,335 ms/op
Iteration   8: 4356,049 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4370,985 ±(99.9%) 73,807 ms/op

  Histogram, ms/op:
    [4300,000, 4312,500) = 0
    [4312,500, 4325,000) = 1
    [4325,000, 4337,500) = 0
    [4337,500, 4350,000) = 0
    [4350,000, 4362,500) = 3
    [4362,500, 4375,000) = 2
    [4375,000, 4387,500) = 1
    [4387,500, 4400,000) = 0
    [4400,000, 4412,500) = 0
    [4412,500, 4425,000) = 0
    [4425,000, 4437,500) = 0
    [4437,500, 4450,000) = 0
    [4450,000, 4462,500) = 1
    [4462,500, 4475,000) = 0
    [4475,000, 4487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4324,688 ms/op
     p(50,0000) =   4363,816 ms/op
     p(90,0000) =   4458,898 ms/op
     p(95,0000) =   4458,898 ms/op
     p(99,0000) =   4458,898 ms/op
     p(99,9000) =   4458,898 ms/op
     p(99,9900) =   4458,898 ms/op
     p(99,9990) =   4458,898 ms/op
     p(99,9999) =   4458,898 ms/op
    p(100,0000) =   4458,898 ms/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest       100000        remove    ss    8  4370,985 ± 73,807  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (100000) = 4370.9853885
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 1000 calls per op
# Measurement: 8 iterations, single-shot each, 1000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 100000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5180,380 ms/op
# Warmup Iteration   2: 5061,747 ms/op
# Warmup Iteration   3: 5075,761 ms/op
# Warmup Iteration   4: 5038,361 ms/op
# Warmup Iteration   5: 5082,796 ms/op
# Warmup Iteration   6: 5094,282 ms/op
# Warmup Iteration   7: 5080,925 ms/op
# Warmup Iteration   8: 5077,242 ms/op
# Warmup Iteration   9: 5157,454 ms/op
# Warmup Iteration  10: 5075,451 ms/op
Iteration   1: 5056,006 ms/op
Iteration   2: 5070,321 ms/op
Iteration   3: 5052,805 ms/op
Iteration   4: 5096,806 ms/op
Iteration   5: 5126,284 ms/op
Iteration   6: 5095,767 ms/op
Iteration   7: 5085,135 ms/op
Iteration   8: 5119,132 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5087,782 ±(99.9%) 51,887 ms/op

  Histogram, ms/op:
    [5050,000, 5055,000) = 1
    [5055,000, 5060,000) = 1
    [5060,000, 5065,000) = 0
    [5065,000, 5070,000) = 0
    [5070,000, 5075,000) = 1
    [5075,000, 5080,000) = 0
    [5080,000, 5085,000) = 0
    [5085,000, 5090,000) = 1
    [5090,000, 5095,000) = 0
    [5095,000, 5100,000) = 2
    [5100,000, 5105,000) = 0
    [5105,000, 5110,000) = 0
    [5110,000, 5115,000) = 0
    [5115,000, 5120,000) = 1
    [5120,000, 5125,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5052,805 ms/op
     p(50,0000) =   5090,451 ms/op
     p(90,0000) =   5126,284 ms/op
     p(95,0000) =   5126,284 ms/op
     p(99,0000) =   5126,284 ms/op
     p(99,9000) =   5126,284 ms/op
     p(99,9900) =   5126,284 ms/op
     p(99,9990) =   5126,284 ms/op
     p(99,9999) =   5126,284 ms/op
    p(100,0000) =   5126,284 ms/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest       100000        remove    ss    8  5087,782 ± 51,887  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (100000) = 5087.782203999999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5787,842 ms/op
# Warmup Iteration   2: 5725,668 ms/op
# Warmup Iteration   3: 5673,365 ms/op
# Warmup Iteration   4: 5647,170 ms/op
# Warmup Iteration   5: 5651,013 ms/op
# Warmup Iteration   6: 5617,789 ms/op
# Warmup Iteration   7: 5704,827 ms/op
# Warmup Iteration   8: 5606,495 ms/op
# Warmup Iteration   9: 5673,539 ms/op
# Warmup Iteration  10: 5636,454 ms/op
Iteration   1: 5646,653 ms/op
Iteration   2: 5679,218 ms/op
Iteration   3: 5624,071 ms/op
Iteration   4: 5611,888 ms/op
Iteration   5: 5611,973 ms/op
Iteration   6: 5629,636 ms/op
Iteration   7: 5621,653 ms/op
Iteration   8: 5685,563 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5638,832 ±(99.9%) 55,607 ms/op

  Histogram, ms/op:
    [5610,000, 5615,000) = 2
    [5615,000, 5620,000) = 0
    [5620,000, 5625,000) = 2
    [5625,000, 5630,000) = 1
    [5630,000, 5635,000) = 0
    [5635,000, 5640,000) = 0
    [5640,000, 5645,000) = 0
    [5645,000, 5650,000) = 1
    [5650,000, 5655,000) = 0
    [5655,000, 5660,000) = 0
    [5660,000, 5665,000) = 0
    [5665,000, 5670,000) = 0
    [5670,000, 5675,000) = 0
    [5675,000, 5680,000) = 1
    [5680,000, 5685,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5611,888 ms/op
     p(50,0000) =   5626,853 ms/op
     p(90,0000) =   5685,563 ms/op
     p(95,0000) =   5685,563 ms/op
     p(99,0000) =   5685,563 ms/op
     p(99,9000) =   5685,563 ms/op
     p(99,9900) =   5685,563 ms/op
     p(99,9990) =   5685,563 ms/op
     p(99,9999) =   5685,563 ms/op
    p(100,0000) =   5685,563 ms/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test      1000000        remove    ss    8  5638,832 ± 55,607  ms/op
tests.maptests.article_examples.IntIntMap1Test (1000000) = 5638.831883750001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3921,212 ms/op
# Warmup Iteration   2: 3790,895 ms/op
# Warmup Iteration   3: 3787,041 ms/op
# Warmup Iteration   4: 3758,141 ms/op
# Warmup Iteration   5: 3794,491 ms/op
# Warmup Iteration   6: 3876,237 ms/op
# Warmup Iteration   7: 3830,992 ms/op
# Warmup Iteration   8: 3808,345 ms/op
# Warmup Iteration   9: 3840,582 ms/op
# Warmup Iteration  10: 3792,542 ms/op
Iteration   1: 3850,614 ms/op
Iteration   2: 3777,717 ms/op
Iteration   3: 3860,520 ms/op
Iteration   4: 3804,663 ms/op
Iteration   5: 3780,065 ms/op
Iteration   6: 3817,636 ms/op
Iteration   7: 3796,558 ms/op
Iteration   8: 3775,897 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3807,959 ±(99.9%) 62,739 ms/op

  Histogram, ms/op:
    [3770,000, 3780,000) = 2
    [3780,000, 3790,000) = 1
    [3790,000, 3800,000) = 1
    [3800,000, 3810,000) = 1
    [3810,000, 3820,000) = 1
    [3820,000, 3830,000) = 0
    [3830,000, 3840,000) = 0
    [3840,000, 3850,000) = 0
    [3850,000, 3860,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3775,897 ms/op
     p(50,0000) =   3800,610 ms/op
     p(90,0000) =   3860,520 ms/op
     p(95,0000) =   3860,520 ms/op
     p(99,0000) =   3860,520 ms/op
     p(99,9000) =   3860,520 ms/op
     p(99,9900) =   3860,520 ms/op
     p(99,9990) =   3860,520 ms/op
     p(99,9999) =   3860,520 ms/op
    p(100,0000) =   3860,520 ms/op


# Run complete. Total time: 00:01:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test      1000000        remove    ss    8  3807,959 ± 62,739  ms/op
tests.maptests.article_examples.IntIntMap2Test (1000000) = 3807.9586572499998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3195,271 ms/op
# Warmup Iteration   2: 3131,281 ms/op
# Warmup Iteration   3: 3072,844 ms/op
# Warmup Iteration   4: 3061,062 ms/op
# Warmup Iteration   5: 3091,403 ms/op
# Warmup Iteration   6: 3056,514 ms/op
# Warmup Iteration   7: 3089,309 ms/op
# Warmup Iteration   8: 3033,731 ms/op
# Warmup Iteration   9: 3046,221 ms/op
# Warmup Iteration  10: 3035,234 ms/op
Iteration   1: 3089,974 ms/op
Iteration   2: 3111,451 ms/op
Iteration   3: 3084,146 ms/op
Iteration   4: 3062,291 ms/op
Iteration   5: 3068,255 ms/op
Iteration   6: 3041,007 ms/op
Iteration   7: 3050,466 ms/op
Iteration   8: 3052,966 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3070,069 ±(99.9%) 45,084 ms/op

  Histogram, ms/op:
    [3040,000, 3045,000) = 1
    [3045,000, 3050,000) = 0
    [3050,000, 3055,000) = 2
    [3055,000, 3060,000) = 0
    [3060,000, 3065,000) = 1
    [3065,000, 3070,000) = 1
    [3070,000, 3075,000) = 0
    [3075,000, 3080,000) = 0
    [3080,000, 3085,000) = 1
    [3085,000, 3090,000) = 1
    [3090,000, 3095,000) = 0
    [3095,000, 3100,000) = 0
    [3100,000, 3105,000) = 0
    [3105,000, 3110,000) = 0
    [3110,000, 3115,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   3041,007 ms/op
     p(50,0000) =   3065,273 ms/op
     p(90,0000) =   3111,451 ms/op
     p(95,0000) =   3111,451 ms/op
     p(99,0000) =   3111,451 ms/op
     p(99,9000) =   3111,451 ms/op
     p(99,9900) =   3111,451 ms/op
     p(99,9990) =   3111,451 ms/op
     p(99,9999) =   3111,451 ms/op
    p(100,0000) =   3111,451 ms/op


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test      1000000        remove    ss    8  3070,069 ± 45,084  ms/op
tests.maptests.article_examples.IntIntMap3Test (1000000) = 3070.0694105000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2882,290 ms/op
# Warmup Iteration   2: 2879,641 ms/op
# Warmup Iteration   3: 2829,108 ms/op
# Warmup Iteration   4: 2803,364 ms/op
# Warmup Iteration   5: 2808,635 ms/op
# Warmup Iteration   6: 2787,004 ms/op
# Warmup Iteration   7: 2931,665 ms/op
# Warmup Iteration   8: 2824,814 ms/op
# Warmup Iteration   9: 2815,429 ms/op
# Warmup Iteration  10: 2820,547 ms/op
Iteration   1: 2804,830 ms/op
Iteration   2: 2778,688 ms/op
Iteration   3: 2999,144 ms/op
Iteration   4: 2794,481 ms/op
Iteration   5: 2781,534 ms/op
Iteration   6: 2792,236 ms/op
Iteration   7: 2826,842 ms/op
Iteration   8: 2816,841 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2824,325 ±(99.9%) 138,702 ms/op

  Histogram, ms/op:
    [2700,000, 2725,000) = 0
    [2725,000, 2750,000) = 0
    [2750,000, 2775,000) = 0
    [2775,000, 2800,000) = 4
    [2800,000, 2825,000) = 2
    [2825,000, 2850,000) = 1
    [2850,000, 2875,000) = 0
    [2875,000, 2900,000) = 0
    [2900,000, 2925,000) = 0
    [2925,000, 2950,000) = 0
    [2950,000, 2975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2778,688 ms/op
     p(50,0000) =   2799,655 ms/op
     p(90,0000) =   2999,144 ms/op
     p(95,0000) =   2999,144 ms/op
     p(99,0000) =   2999,144 ms/op
     p(99,9000) =   2999,144 ms/op
     p(99,9900) =   2999,144 ms/op
     p(99,9990) =   2999,144 ms/op
     p(99,9999) =   2999,144 ms/op
    p(100,0000) =   2999,144 ms/op


# Run complete. Total time: 00:00:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test      1000000        remove    ss    8  2824,325 ± 138,702  ms/op
tests.maptests.article_examples.IntIntMap4Test (1000000) = 2824.3246425
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2861,426 ms/op
# Warmup Iteration   2: 2819,813 ms/op
# Warmup Iteration   3: 2797,088 ms/op
# Warmup Iteration   4: 2837,741 ms/op
# Warmup Iteration   5: 2776,468 ms/op
# Warmup Iteration   6: 2778,389 ms/op
# Warmup Iteration   7: 2782,562 ms/op
# Warmup Iteration   8: 2807,694 ms/op
# Warmup Iteration   9: 2765,274 ms/op
# Warmup Iteration  10: 2793,868 ms/op
Iteration   1: 2797,297 ms/op
Iteration   2: 2777,429 ms/op
Iteration   3: 2774,935 ms/op
Iteration   4: 2834,039 ms/op
Iteration   5: 2799,038 ms/op
Iteration   6: 2748,003 ms/op
Iteration   7: 2808,357 ms/op
Iteration   8: 2799,275 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2792,297 ±(99.9%) 49,034 ms/op

  Histogram, ms/op:
    [2740,000, 2750,000) = 1
    [2750,000, 2760,000) = 0
    [2760,000, 2770,000) = 0
    [2770,000, 2780,000) = 2
    [2780,000, 2790,000) = 0
    [2790,000, 2800,000) = 3
    [2800,000, 2810,000) = 1
    [2810,000, 2820,000) = 0
    [2820,000, 2830,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2748,003 ms/op
     p(50,0000) =   2798,168 ms/op
     p(90,0000) =   2834,039 ms/op
     p(95,0000) =   2834,039 ms/op
     p(99,0000) =   2834,039 ms/op
     p(99,9000) =   2834,039 ms/op
     p(99,9900) =   2834,039 ms/op
     p(99,9990) =   2834,039 ms/op
     p(99,9999) =   2834,039 ms/op
    p(100,0000) =   2834,039 ms/op


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest      1000000        remove    ss    8  2792,297 ± 49,034  ms/op
tests.maptests.article_examples.IntIntMap4aTest (1000000) = 2792.296584
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3198,269 ms/op
# Warmup Iteration   2: 3215,566 ms/op
# Warmup Iteration   3: 3123,326 ms/op
# Warmup Iteration   4: 3063,224 ms/op
# Warmup Iteration   5: 3197,069 ms/op
# Warmup Iteration   6: 3148,433 ms/op
# Warmup Iteration   7: 3162,438 ms/op
# Warmup Iteration   8: 3162,023 ms/op
# Warmup Iteration   9: 3079,871 ms/op
# Warmup Iteration  10: 3140,905 ms/op
Iteration   1: 3082,493 ms/op
Iteration   2: 3106,178 ms/op
Iteration   3: 3143,951 ms/op
Iteration   4: 3152,783 ms/op
Iteration   5: 3229,926 ms/op
Iteration   6: 3173,383 ms/op
Iteration   7: 3103,854 ms/op
Iteration   8: 3135,742 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3141,039 ±(99.9%) 88,940 ms/op

  Histogram, ms/op:
    [3000,000, 3025,000) = 0
    [3025,000, 3050,000) = 0
    [3050,000, 3075,000) = 0
    [3075,000, 3100,000) = 1
    [3100,000, 3125,000) = 2
    [3125,000, 3150,000) = 2
    [3150,000, 3175,000) = 2
    [3175,000, 3200,000) = 0
    [3200,000, 3225,000) = 0
    [3225,000, 3250,000) = 1
    [3250,000, 3275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3082,493 ms/op
     p(50,0000) =   3139,846 ms/op
     p(90,0000) =   3229,926 ms/op
     p(95,0000) =   3229,926 ms/op
     p(99,0000) =   3229,926 ms/op
     p(99,9000) =   3229,926 ms/op
     p(99,9900) =   3229,926 ms/op
     p(99,9990) =   3229,926 ms/op
     p(99,9999) =   3229,926 ms/op
    p(100,0000) =   3229,926 ms/op


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest      1000000        remove    ss    8  3141,039 ± 88,940  ms/op
tests.maptests.primitive.FastUtilMapTest (1000000) = 3141.038739125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5481,417 ms/op
# Warmup Iteration   2: 5335,558 ms/op
# Warmup Iteration   3: 5399,698 ms/op
# Warmup Iteration   4: 5341,507 ms/op
# Warmup Iteration   5: 5389,002 ms/op
# Warmup Iteration   6: 5401,586 ms/op
# Warmup Iteration   7: 5352,656 ms/op
# Warmup Iteration   8: 5432,754 ms/op
# Warmup Iteration   9: 5340,436 ms/op
# Warmup Iteration  10: 5331,544 ms/op
Iteration   1: 5345,152 ms/op
Iteration   2: 5289,132 ms/op
Iteration   3: 5299,655 ms/op
Iteration   4: 5348,692 ms/op
Iteration   5: 5367,352 ms/op
Iteration   6: 5370,478 ms/op
Iteration   7: 5316,342 ms/op
Iteration   8: 5324,940 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5332,718 ±(99.9%) 57,617 ms/op

  Histogram, ms/op:
    [5280,000, 5290,000) = 1
    [5290,000, 5300,000) = 1
    [5300,000, 5310,000) = 0
    [5310,000, 5320,000) = 1
    [5320,000, 5330,000) = 1
    [5330,000, 5340,000) = 0
    [5340,000, 5350,000) = 2
    [5350,000, 5360,000) = 0
    [5360,000, 5370,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   5289,132 ms/op
     p(50,0000) =   5335,046 ms/op
     p(90,0000) =   5370,478 ms/op
     p(95,0000) =   5370,478 ms/op
     p(99,0000) =   5370,478 ms/op
     p(99,9000) =   5370,478 ms/op
     p(99,9900) =   5370,478 ms/op
     p(99,9990) =   5370,478 ms/op
     p(99,9999) =   5370,478 ms/op
    p(100,0000) =   5370,478 ms/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest      1000000        remove    ss    8  5332,718 ± 57,617  ms/op
tests.maptests.primitive.GsMutableMapTest (1000000) = 5332.71805125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2783,591 ms/op
# Warmup Iteration   2: 2667,056 ms/op
# Warmup Iteration   3: 2630,822 ms/op
# Warmup Iteration   4: 2669,291 ms/op
# Warmup Iteration   5: 2633,594 ms/op
# Warmup Iteration   6: 2621,432 ms/op
# Warmup Iteration   7: 2627,994 ms/op
# Warmup Iteration   8: 2619,650 ms/op
# Warmup Iteration   9: 2669,425 ms/op
# Warmup Iteration  10: 2665,258 ms/op
Iteration   1: 2687,463 ms/op
Iteration   2: 2625,941 ms/op
Iteration   3: 2623,089 ms/op
Iteration   4: 2619,932 ms/op
Iteration   5: 2617,342 ms/op
Iteration   6: 2604,784 ms/op
Iteration   7: 2632,032 ms/op
Iteration   8: 2644,188 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   2631,846 ±(99.9%) 48,163 ms/op

  Histogram, ms/op:
    [2600,000, 2605,000) = 1
    [2605,000, 2610,000) = 0
    [2610,000, 2615,000) = 0
    [2615,000, 2620,000) = 2
    [2620,000, 2625,000) = 1
    [2625,000, 2630,000) = 1
    [2630,000, 2635,000) = 1
    [2635,000, 2640,000) = 0
    [2640,000, 2645,000) = 1
    [2645,000, 2650,000) = 0
    [2650,000, 2655,000) = 0
    [2655,000, 2660,000) = 0
    [2660,000, 2665,000) = 0
    [2665,000, 2670,000) = 0
    [2670,000, 2675,000) = 0
    [2675,000, 2680,000) = 0
    [2680,000, 2685,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   2604,784 ms/op
     p(50,0000) =   2624,515 ms/op
     p(90,0000) =   2687,463 ms/op
     p(95,0000) =   2687,463 ms/op
     p(99,0000) =   2687,463 ms/op
     p(99,9000) =   2687,463 ms/op
     p(99,9900) =   2687,463 ms/op
     p(99,9990) =   2687,463 ms/op
     p(99,9999) =   2687,463 ms/op
    p(100,0000) =   2687,463 ms/op


# Run complete. Total time: 00:00:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest      1000000        remove    ss    8  2631,846 ± 48,163  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (1000000) = 2631.8464377499995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 3161,826 ms/op
# Warmup Iteration   2: 3171,156 ms/op
# Warmup Iteration   3: 3130,641 ms/op
# Warmup Iteration   4: 3119,129 ms/op
# Warmup Iteration   5: 3099,651 ms/op
# Warmup Iteration   6: 3124,307 ms/op
# Warmup Iteration   7: 3107,102 ms/op
# Warmup Iteration   8: 3083,737 ms/op
# Warmup Iteration   9: 3090,745 ms/op
# Warmup Iteration  10: 3120,878 ms/op
Iteration   1: 3092,311 ms/op
Iteration   2: 3224,483 ms/op
Iteration   3: 3099,573 ms/op
Iteration   4: 3224,230 ms/op
Iteration   5: 3168,163 ms/op
Iteration   6: 3115,364 ms/op
Iteration   7: 3168,275 ms/op
Iteration   8: 3166,581 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   3157,373 ±(99.9%) 98,643 ms/op

  Histogram, ms/op:
    [3000,000, 3025,000) = 0
    [3025,000, 3050,000) = 0
    [3050,000, 3075,000) = 0
    [3075,000, 3100,000) = 2
    [3100,000, 3125,000) = 1
    [3125,000, 3150,000) = 0
    [3150,000, 3175,000) = 3
    [3175,000, 3200,000) = 0
    [3200,000, 3225,000) = 2
    [3225,000, 3250,000) = 0
    [3250,000, 3275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   3092,311 ms/op
     p(50,0000) =   3167,372 ms/op
     p(90,0000) =   3224,483 ms/op
     p(95,0000) =   3224,483 ms/op
     p(99,0000) =   3224,483 ms/op
     p(99,9000) =   3224,483 ms/op
     p(99,9900) =   3224,483 ms/op
     p(99,9990) =   3224,483 ms/op
     p(99,9999) =   3224,483 ms/op
    p(100,0000) =   3224,483 ms/op


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest      1000000        remove    ss    8  3157,373 ± 98,643  ms/op
tests.maptests.primitive.HppcMapTest (1000000) = 3157.3725680000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5744,991 ms/op
# Warmup Iteration   2: 5608,924 ms/op
# Warmup Iteration   3: 5573,260 ms/op
# Warmup Iteration   4: 5566,914 ms/op
# Warmup Iteration   5: 5576,752 ms/op
# Warmup Iteration   6: 5578,827 ms/op
# Warmup Iteration   7: 5584,599 ms/op
# Warmup Iteration   8: 5627,370 ms/op
# Warmup Iteration   9: 5620,828 ms/op
# Warmup Iteration  10: 5556,121 ms/op
Iteration   1: 5563,146 ms/op
Iteration   2: 5586,982 ms/op
Iteration   3: 5610,717 ms/op
Iteration   4: 5612,230 ms/op
Iteration   5: 5590,339 ms/op
Iteration   6: 5542,939 ms/op
Iteration   7: 5651,696 ms/op
Iteration   8: 5587,501 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5593,194 ±(99.9%) 62,998 ms/op

  Histogram, ms/op:
    [5500,000, 5512,500) = 0
    [5512,500, 5525,000) = 0
    [5525,000, 5537,500) = 0
    [5537,500, 5550,000) = 1
    [5550,000, 5562,500) = 0
    [5562,500, 5575,000) = 1
    [5575,000, 5587,500) = 1
    [5587,500, 5600,000) = 2
    [5600,000, 5612,500) = 2
    [5612,500, 5625,000) = 0
    [5625,000, 5637,500) = 0
    [5637,500, 5650,000) = 0
    [5650,000, 5662,500) = 1
    [5662,500, 5675,000) = 0
    [5675,000, 5687,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   5542,939 ms/op
     p(50,0000) =   5588,920 ms/op
     p(90,0000) =   5651,696 ms/op
     p(95,0000) =   5651,696 ms/op
     p(99,0000) =   5651,696 ms/op
     p(99,9000) =   5651,696 ms/op
     p(99,9900) =   5651,696 ms/op
     p(99,9990) =   5651,696 ms/op
     p(99,9999) =   5651,696 ms/op
    p(100,0000) =   5651,696 ms/op


# Run complete. Total time: 00:01:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest      1000000        remove    ss    8  5593,194 ± 62,998  ms/op
tests.maptests.primitive.TroveJbMapTest (1000000) = 5593.193930625001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4995,712 ms/op
# Warmup Iteration   2: 4862,576 ms/op
# Warmup Iteration   3: 4813,512 ms/op
# Warmup Iteration   4: 4975,961 ms/op
# Warmup Iteration   5: 4836,993 ms/op
# Warmup Iteration   6: 4863,868 ms/op
# Warmup Iteration   7: 4814,283 ms/op
# Warmup Iteration   8: 4875,250 ms/op
# Warmup Iteration   9: 4874,062 ms/op
# Warmup Iteration  10: 4883,464 ms/op
Iteration   1: 4915,385 ms/op
Iteration   2: 4867,707 ms/op
Iteration   3: 4900,828 ms/op
Iteration   4: 4966,764 ms/op
Iteration   5: 4857,527 ms/op
Iteration   6: 4932,388 ms/op
Iteration   7: 4828,198 ms/op
Iteration   8: 4844,829 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4889,203 ±(99.9%) 91,002 ms/op

  Histogram, ms/op:
    [4800,000, 4812,500) = 0
    [4812,500, 4825,000) = 0
    [4825,000, 4837,500) = 1
    [4837,500, 4850,000) = 1
    [4850,000, 4862,500) = 1
    [4862,500, 4875,000) = 1
    [4875,000, 4887,500) = 0
    [4887,500, 4900,000) = 0
    [4900,000, 4912,500) = 1
    [4912,500, 4925,000) = 1
    [4925,000, 4937,500) = 1
    [4937,500, 4950,000) = 0
    [4950,000, 4962,500) = 0
    [4962,500, 4975,000) = 1
    [4975,000, 4987,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4828,198 ms/op
     p(50,0000) =   4884,267 ms/op
     p(90,0000) =   4966,764 ms/op
     p(95,0000) =   4966,764 ms/op
     p(99,0000) =   4966,764 ms/op
     p(99,9000) =   4966,764 ms/op
     p(99,9900) =   4966,764 ms/op
     p(99,9990) =   4966,764 ms/op
     p(99,9999) =   4966,764 ms/op
    p(100,0000) =   4966,764 ms/op


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest      1000000        remove    ss    8  4889,203 ± 91,002  ms/op
tests.maptests.primitive.TroveMapTest (1000000) = 4889.203184125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10564,589 ms/op
# Warmup Iteration   2: 10347,614 ms/op
# Warmup Iteration   3: 9977,515 ms/op
# Warmup Iteration   4: 9923,824 ms/op
# Warmup Iteration   5: 9916,979 ms/op
# Warmup Iteration   6: 9915,962 ms/op
# Warmup Iteration   7: 10124,340 ms/op
# Warmup Iteration   8: 9950,559 ms/op
# Warmup Iteration   9: 9889,354 ms/op
# Warmup Iteration  10: 9891,707 ms/op
Iteration   1: 9983,423 ms/op
Iteration   2: 9820,321 ms/op
Iteration   3: 9871,078 ms/op
Iteration   4: 9890,789 ms/op
Iteration   5: 9894,911 ms/op
Iteration   6: 9822,285 ms/op
Iteration   7: 10099,181 ms/op
Iteration   8: 9941,162 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9915,394 ±(99.9%) 176,670 ms/op

  Histogram, ms/op:
    [ 9800,000,  9825,000) = 2
    [ 9825,000,  9850,000) = 0
    [ 9850,000,  9875,000) = 1
    [ 9875,000,  9900,000) = 2
    [ 9900,000,  9925,000) = 0
    [ 9925,000,  9950,000) = 1
    [ 9950,000,  9975,000) = 0
    [ 9975,000, 10000,000) = 1
    [10000,000, 10025,000) = 0
    [10025,000, 10050,000) = 0
    [10050,000, 10075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9820,321 ms/op
     p(50,0000) =   9892,850 ms/op
     p(90,0000) =  10099,181 ms/op
     p(95,0000) =  10099,181 ms/op
     p(99,0000) =  10099,181 ms/op
     p(99,9000) =  10099,181 ms/op
     p(99,9900) =  10099,181 ms/op
     p(99,9990) =  10099,181 ms/op
     p(99,9999) =  10099,181 ms/op
    p(100,0000) =  10099,181 ms/op


# Run complete. Total time: 00:03:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest      1000000        remove    ss    8  9915,394 ± 176,670  ms/op
tests.maptests.object.FastUtilObjMapTest (1000000) = 9915.393767624999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10652,248 ms/op
# Warmup Iteration   2: 10492,424 ms/op
# Warmup Iteration   3: 10609,281 ms/op
# Warmup Iteration   4: 10368,052 ms/op
# Warmup Iteration   5: 10215,865 ms/op
# Warmup Iteration   6: 10296,593 ms/op
# Warmup Iteration   7: 10363,720 ms/op
# Warmup Iteration   8: 10324,150 ms/op
# Warmup Iteration   9: 10311,086 ms/op
# Warmup Iteration  10: 10261,464 ms/op
Iteration   1: 10403,821 ms/op
Iteration   2: 10235,775 ms/op
Iteration   3: 10512,022 ms/op
Iteration   4: 10272,278 ms/op
Iteration   5: 10268,278 ms/op
Iteration   6: 10277,478 ms/op
Iteration   7: 10206,000 ms/op
Iteration   8: 10276,082 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10306,467 ±(99.9%) 192,846 ms/op

  Histogram, ms/op:
    [10200,000, 10225,000) = 1
    [10225,000, 10250,000) = 1
    [10250,000, 10275,000) = 2
    [10275,000, 10300,000) = 2
    [10300,000, 10325,000) = 0
    [10325,000, 10350,000) = 0
    [10350,000, 10375,000) = 0
    [10375,000, 10400,000) = 0
    [10400,000, 10425,000) = 1
    [10425,000, 10450,000) = 0
    [10450,000, 10475,000) = 0
    [10475,000, 10500,000) = 0
    [10500,000, 10525,000) = 1
    [10525,000, 10550,000) = 0
    [10550,000, 10575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  10206,000 ms/op
     p(50,0000) =  10274,180 ms/op
     p(90,0000) =  10512,022 ms/op
     p(95,0000) =  10512,022 ms/op
     p(99,0000) =  10512,022 ms/op
     p(99,9000) =  10512,022 ms/op
     p(99,9900) =  10512,022 ms/op
     p(99,9990) =  10512,022 ms/op
     p(99,9999) =  10512,022 ms/op
    p(100,0000) =  10512,022 ms/op


# Run complete. Total time: 00:03:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest      1000000        remove    ss    8  10306,467 ± 192,846  ms/op
tests.maptests.object.KolobokeMutableObjTest (1000000) = 10306.4665615
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10626,389 ms/op
# Warmup Iteration   2: 10606,073 ms/op
# Warmup Iteration   3: 10698,947 ms/op
# Warmup Iteration   4: 10353,317 ms/op
# Warmup Iteration   5: 10273,179 ms/op
# Warmup Iteration   6: 10340,956 ms/op
# Warmup Iteration   7: 10381,584 ms/op
# Warmup Iteration   8: 10459,737 ms/op
# Warmup Iteration   9: 10431,000 ms/op
# Warmup Iteration  10: 10275,038 ms/op
Iteration   1: 10325,605 ms/op
Iteration   2: 10297,047 ms/op
Iteration   3: 10283,309 ms/op
Iteration   4: 10346,462 ms/op
Iteration   5: 10350,672 ms/op
Iteration   6: 10256,289 ms/op
Iteration   7: 10263,753 ms/op
Iteration   8: 10520,482 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10330,452 ±(99.9%) 161,732 ms/op

  Histogram, ms/op:
    [10200,000, 10225,000) = 0
    [10225,000, 10250,000) = 0
    [10250,000, 10275,000) = 2
    [10275,000, 10300,000) = 2
    [10300,000, 10325,000) = 0
    [10325,000, 10350,000) = 2
    [10350,000, 10375,000) = 1
    [10375,000, 10400,000) = 0
    [10400,000, 10425,000) = 0
    [10425,000, 10450,000) = 0
    [10450,000, 10475,000) = 0
    [10475,000, 10500,000) = 0
    [10500,000, 10525,000) = 1
    [10525,000, 10550,000) = 0
    [10550,000, 10575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  10256,289 ms/op
     p(50,0000) =  10311,326 ms/op
     p(90,0000) =  10520,482 ms/op
     p(95,0000) =  10520,482 ms/op
     p(99,0000) =  10520,482 ms/op
     p(99,9000) =  10520,482 ms/op
     p(99,9900) =  10520,482 ms/op
     p(99,9990) =  10520,482 ms/op
     p(99,9999) =  10520,482 ms/op
    p(100,0000) =  10520,482 ms/op


# Run complete. Total time: 00:03:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest      1000000        remove    ss    8  10330,452 ± 161,732  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (1000000) = 10330.452317874999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11281,800 ms/op
# Warmup Iteration   2: 11424,731 ms/op
# Warmup Iteration   3: 11451,300 ms/op
# Warmup Iteration   4: 11207,561 ms/op
# Warmup Iteration   5: 11075,858 ms/op
# Warmup Iteration   6: 11021,523 ms/op
# Warmup Iteration   7: 11071,388 ms/op
# Warmup Iteration   8: 11092,916 ms/op
# Warmup Iteration   9: 11173,005 ms/op
# Warmup Iteration  10: 11075,893 ms/op
Iteration   1: 11091,296 ms/op
Iteration   2: 11099,210 ms/op
Iteration   3: 11238,295 ms/op
Iteration   4: 11017,375 ms/op
Iteration   5: 11090,208 ms/op
Iteration   6: 10941,515 ms/op
Iteration   7: 11129,260 ms/op
Iteration   8: 11110,421 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11089,698 ±(99.9%) 163,771 ms/op

  Histogram, ms/op:
    [10900,000, 10925,000) = 0
    [10925,000, 10950,000) = 1
    [10950,000, 10975,000) = 0
    [10975,000, 11000,000) = 0
    [11000,000, 11025,000) = 1
    [11025,000, 11050,000) = 0
    [11050,000, 11075,000) = 0
    [11075,000, 11100,000) = 3
    [11100,000, 11125,000) = 1
    [11125,000, 11150,000) = 1
    [11150,000, 11175,000) = 0
    [11175,000, 11200,000) = 0
    [11200,000, 11225,000) = 0
    [11225,000, 11250,000) = 1
    [11250,000, 11275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  10941,515 ms/op
     p(50,0000) =  11095,253 ms/op
     p(90,0000) =  11238,295 ms/op
     p(95,0000) =  11238,295 ms/op
     p(99,0000) =  11238,295 ms/op
     p(99,9000) =  11238,295 ms/op
     p(99,9900) =  11238,295 ms/op
     p(99,9990) =  11238,295 ms/op
     p(99,9999) =  11238,295 ms/op
    p(100,0000) =  11238,295 ms/op


# Run complete. Total time: 00:03:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest      1000000        remove    ss    8  11089,698 ± 163,771  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (1000000) = 11089.697706874998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10539,323 ms/op
# Warmup Iteration   2: 10342,448 ms/op
# Warmup Iteration   3: 10062,291 ms/op
# Warmup Iteration   4: 9905,314 ms/op
# Warmup Iteration   5: 10187,798 ms/op
# Warmup Iteration   6: 10123,969 ms/op
# Warmup Iteration   7: 9902,903 ms/op
# Warmup Iteration   8: 10250,508 ms/op
# Warmup Iteration   9: 9954,372 ms/op
# Warmup Iteration  10: 10080,594 ms/op
Iteration   1: 10129,949 ms/op
Iteration   2: 9997,518 ms/op
Iteration   3: 9857,738 ms/op
Iteration   4: 10033,360 ms/op
Iteration   5: 9947,257 ms/op
Iteration   6: 9990,268 ms/op
Iteration   7: 10108,119 ms/op
Iteration   8: 10047,217 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10013,928 ±(99.9%) 167,133 ms/op

  Histogram, ms/op:
    [ 9800,000,  9825,000) = 0
    [ 9825,000,  9850,000) = 0
    [ 9850,000,  9875,000) = 1
    [ 9875,000,  9900,000) = 0
    [ 9900,000,  9925,000) = 0
    [ 9925,000,  9950,000) = 1
    [ 9950,000,  9975,000) = 0
    [ 9975,000, 10000,000) = 2
    [10000,000, 10025,000) = 0
    [10025,000, 10050,000) = 2
    [10050,000, 10075,000) = 0
    [10075,000, 10100,000) = 0
    [10100,000, 10125,000) = 1
    [10125,000, 10150,000) = 1
    [10150,000, 10175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9857,738 ms/op
     p(50,0000) =  10015,439 ms/op
     p(90,0000) =  10129,949 ms/op
     p(95,0000) =  10129,949 ms/op
     p(99,0000) =  10129,949 ms/op
     p(99,9000) =  10129,949 ms/op
     p(99,9900) =  10129,949 ms/op
     p(99,9990) =  10129,949 ms/op
     p(99,9999) =  10129,949 ms/op
    p(100,0000) =  10129,949 ms/op


# Run complete. Total time: 00:03:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest      1000000        remove    ss    8  10013,928 ± 167,133  ms/op
tests.maptests.object.HppcObjMapTest (1000000) = 10013.9282315
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9606,681 ms/op
# Warmup Iteration   2: 9479,005 ms/op
# Warmup Iteration   3: 9428,676 ms/op
# Warmup Iteration   4: 9312,479 ms/op
# Warmup Iteration   5: 9427,961 ms/op
# Warmup Iteration   6: 9061,380 ms/op
# Warmup Iteration   7: 9661,022 ms/op
# Warmup Iteration   8: 9082,379 ms/op
# Warmup Iteration   9: 9183,720 ms/op
# Warmup Iteration  10: 9781,256 ms/op
Iteration   1: 8998,051 ms/op
Iteration   2: 8949,556 ms/op
Iteration   3: 9060,306 ms/op
Iteration   4: 9272,510 ms/op
Iteration   5: 9039,879 ms/op
Iteration   6: 9169,503 ms/op
Iteration   7: 8929,613 ms/op
Iteration   8: 9316,922 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9092,043 ±(99.9%) 278,376 ms/op

  Histogram, ms/op:
    [8900,000, 8950,000) = 2
    [8950,000, 9000,000) = 1
    [9000,000, 9050,000) = 1
    [9050,000, 9100,000) = 1
    [9100,000, 9150,000) = 0
    [9150,000, 9200,000) = 1
    [9200,000, 9250,000) = 0
    [9250,000, 9300,000) = 1
    [9300,000, 9350,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8929,613 ms/op
     p(50,0000) =   9050,092 ms/op
     p(90,0000) =   9316,922 ms/op
     p(95,0000) =   9316,922 ms/op
     p(99,0000) =   9316,922 ms/op
     p(99,9000) =   9316,922 ms/op
     p(99,9900) =   9316,922 ms/op
     p(99,9990) =   9316,922 ms/op
     p(99,9999) =   9316,922 ms/op
    p(100,0000) =   9316,922 ms/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest      1000000        remove    ss    8  9092,043 ± 278,376  ms/op
tests.maptests.object.GsObjMapTest (1000000) = 9092.0425255
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8573,530 ms/op
# Warmup Iteration   2: 8280,681 ms/op
# Warmup Iteration   3: 8568,183 ms/op
# Warmup Iteration   4: 8449,985 ms/op
# Warmup Iteration   5: 7970,493 ms/op
# Warmup Iteration   6: 8450,605 ms/op
# Warmup Iteration   7: 8069,388 ms/op
# Warmup Iteration   8: 8312,853 ms/op
# Warmup Iteration   9: 7886,336 ms/op
# Warmup Iteration  10: 7682,005 ms/op
Iteration   1: 8120,731 ms/op
Iteration   2: 8374,375 ms/op
Iteration   3: 7928,182 ms/op
Iteration   4: 7983,370 ms/op
Iteration   5: 7801,872 ms/op
Iteration   6: 8190,864 ms/op
Iteration   7: 7544,029 ms/op
Iteration   8: 8139,039 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8010,308 ±(99.9%) 491,324 ms/op

  Histogram, ms/op:
    [7500,000, 7550,000) = 1
    [7550,000, 7600,000) = 0
    [7600,000, 7650,000) = 0
    [7650,000, 7700,000) = 0
    [7700,000, 7750,000) = 0
    [7750,000, 7800,000) = 0
    [7800,000, 7850,000) = 1
    [7850,000, 7900,000) = 0
    [7900,000, 7950,000) = 1
    [7950,000, 8000,000) = 1
    [8000,000, 8050,000) = 0
    [8050,000, 8100,000) = 0
    [8100,000, 8150,000) = 2
    [8150,000, 8200,000) = 1
    [8200,000, 8250,000) = 0
    [8250,000, 8300,000) = 0
    [8300,000, 8350,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   7544,029 ms/op
     p(50,0000) =   8052,051 ms/op
     p(90,0000) =   8374,375 ms/op
     p(95,0000) =   8374,375 ms/op
     p(99,0000) =   8374,375 ms/op
     p(99,9000) =   8374,375 ms/op
     p(99,9900) =   8374,375 ms/op
     p(99,9990) =   8374,375 ms/op
     p(99,9999) =   8374,375 ms/op
    p(100,0000) =   8374,375 ms/op


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest      1000000        remove    ss    8  8010,308 ± 491,324  ms/op
tests.maptests.object.JdkMapTest (1000000) = 8010.30775525
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7460,913 ms/op
# Warmup Iteration   2: 7386,414 ms/op
# Warmup Iteration   3: 7135,407 ms/op
# Warmup Iteration   4: 7539,576 ms/op
# Warmup Iteration   5: 7367,648 ms/op
# Warmup Iteration   6: 6939,342 ms/op
# Warmup Iteration   7: 6974,969 ms/op
# Warmup Iteration   8: 7270,935 ms/op
# Warmup Iteration   9: 6868,030 ms/op
# Warmup Iteration  10: 6887,146 ms/op
Iteration   1: 7204,397 ms/op
Iteration   2: 7083,372 ms/op
Iteration   3: 6355,224 ms/op
Iteration   4: 7205,992 ms/op
Iteration   5: 6650,968 ms/op
Iteration   6: 7104,221 ms/op
Iteration   7: 7245,538 ms/op
Iteration   8: 6470,119 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6914,979 ±(99.9%) 694,210 ms/op

  Histogram, ms/op:
    [6300,000, 6400,000) = 1
    [6400,000, 6500,000) = 1
    [6500,000, 6600,000) = 0
    [6600,000, 6700,000) = 1
    [6700,000, 6800,000) = 0
    [6800,000, 6900,000) = 0
    [6900,000, 7000,000) = 0
    [7000,000, 7100,000) = 1
    [7100,000, 7200,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   6355,224 ms/op
     p(50,0000) =   7093,797 ms/op
     p(90,0000) =   7245,538 ms/op
     p(95,0000) =   7245,538 ms/op
     p(99,0000) =   7245,538 ms/op
     p(99,9000) =   7245,538 ms/op
     p(99,9900) =   7245,538 ms/op
     p(99,9990) =   7245,538 ms/op
     p(99,9999) =   7245,538 ms/op
    p(100,0000) =   7245,538 ms/op


# Run complete. Total time: 00:02:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity      1000000        remove    ss    8  6914,979 ± 694,210  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (1000000) = 6914.97896425
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12603,572 ms/op
# Warmup Iteration   2: 12148,165 ms/op
# Warmup Iteration   3: 12175,454 ms/op
# Warmup Iteration   4: 11921,105 ms/op
# Warmup Iteration   5: 12015,578 ms/op
# Warmup Iteration   6: 11930,082 ms/op
# Warmup Iteration   7: 12044,845 ms/op
# Warmup Iteration   8: 12002,885 ms/op
# Warmup Iteration   9: 11906,559 ms/op
# Warmup Iteration  10: 11932,828 ms/op
Iteration   1: 12095,668 ms/op
Iteration   2: 11834,109 ms/op
Iteration   3: 11836,698 ms/op
Iteration   4: 11801,893 ms/op
Iteration   5: 11952,703 ms/op
Iteration   6: 11933,668 ms/op
Iteration   7: 12062,536 ms/op
Iteration   8: 12146,306 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11957,948 ±(99.9%) 250,745 ms/op

  Histogram, ms/op:
    [11800,000, 11825,000) = 1
    [11825,000, 11850,000) = 2
    [11850,000, 11875,000) = 0
    [11875,000, 11900,000) = 0
    [11900,000, 11925,000) = 0
    [11925,000, 11950,000) = 1
    [11950,000, 11975,000) = 1
    [11975,000, 12000,000) = 0
    [12000,000, 12025,000) = 0
    [12025,000, 12050,000) = 0
    [12050,000, 12075,000) = 1
    [12075,000, 12100,000) = 1
    [12100,000, 12125,000) = 0
    [12125,000, 12150,000) = 1
    [12150,000, 12175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11801,893 ms/op
     p(50,0000) =  11943,185 ms/op
     p(90,0000) =  12146,306 ms/op
     p(95,0000) =  12146,306 ms/op
     p(99,0000) =  12146,306 ms/op
     p(99,9000) =  12146,306 ms/op
     p(99,9900) =  12146,306 ms/op
     p(99,9990) =  12146,306 ms/op
     p(99,9999) =  12146,306 ms/op
    p(100,0000) =  12146,306 ms/op


# Run complete. Total time: 00:03:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest      1000000        remove    ss    8  11957,948 ± 250,745  ms/op
tests.maptests.object.TroveJbObjMapTest (1000000) = 11957.947608749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13536,969 ms/op
# Warmup Iteration   2: 13499,419 ms/op
# Warmup Iteration   3: 13482,375 ms/op
# Warmup Iteration   4: 13191,543 ms/op
# Warmup Iteration   5: 13128,085 ms/op
# Warmup Iteration   6: 13107,835 ms/op
# Warmup Iteration   7: 13188,578 ms/op
# Warmup Iteration   8: 13030,873 ms/op
# Warmup Iteration   9: 13222,352 ms/op
# Warmup Iteration  10: 13203,326 ms/op
Iteration   1: 13122,912 ms/op
Iteration   2: 13031,345 ms/op
Iteration   3: 13256,081 ms/op
Iteration   4: 13140,526 ms/op
Iteration   5: 13182,770 ms/op
Iteration   6: 13108,539 ms/op
Iteration   7: 13068,147 ms/op
Iteration   8: 13264,190 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13146,814 ±(99.9%) 159,324 ms/op

  Histogram, ms/op:
    [13000,000, 13025,000) = 0
    [13025,000, 13050,000) = 1
    [13050,000, 13075,000) = 1
    [13075,000, 13100,000) = 0
    [13100,000, 13125,000) = 2
    [13125,000, 13150,000) = 1
    [13150,000, 13175,000) = 0
    [13175,000, 13200,000) = 1
    [13200,000, 13225,000) = 0
    [13225,000, 13250,000) = 0
    [13250,000, 13275,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  13031,345 ms/op
     p(50,0000) =  13131,719 ms/op
     p(90,0000) =  13264,190 ms/op
     p(95,0000) =  13264,190 ms/op
     p(99,0000) =  13264,190 ms/op
     p(99,9000) =  13264,190 ms/op
     p(99,9900) =  13264,190 ms/op
     p(99,9990) =  13264,190 ms/op
     p(99,9999) =  13264,190 ms/op
    p(100,0000) =  13264,190 ms/op


# Run complete. Total time: 00:04:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest      1000000        remove    ss    8  13146,814 ± 159,324  ms/op
tests.maptests.object.TroveObjMapTest (1000000) = 13146.813795375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10309,617 ms/op
# Warmup Iteration   2: 10074,098 ms/op
# Warmup Iteration   3: 9616,819 ms/op
# Warmup Iteration   4: 9553,104 ms/op
# Warmup Iteration   5: 9749,024 ms/op
# Warmup Iteration   6: 9572,700 ms/op
# Warmup Iteration   7: 9441,120 ms/op
# Warmup Iteration   8: 9462,208 ms/op
# Warmup Iteration   9: 9543,620 ms/op
# Warmup Iteration  10: 9521,194 ms/op
Iteration   1: 9523,195 ms/op
Iteration   2: 9822,978 ms/op
Iteration   3: 9655,508 ms/op
Iteration   4: 9505,575 ms/op
Iteration   5: 9625,362 ms/op
Iteration   6: 9567,991 ms/op
Iteration   7: 9446,565 ms/op
Iteration   8: 9493,993 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9580,146 ±(99.9%) 229,561 ms/op

  Histogram, ms/op:
    [9400,000, 9450,000) = 1
    [9450,000, 9500,000) = 1
    [9500,000, 9550,000) = 2
    [9550,000, 9600,000) = 1
    [9600,000, 9650,000) = 1
    [9650,000, 9700,000) = 1
    [9700,000, 9750,000) = 0
    [9750,000, 9800,000) = 0
    [9800,000, 9850,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   9446,565 ms/op
     p(50,0000) =   9545,593 ms/op
     p(90,0000) =   9822,978 ms/op
     p(95,0000) =   9822,978 ms/op
     p(99,0000) =   9822,978 ms/op
     p(99,9000) =   9822,978 ms/op
     p(99,9900) =   9822,978 ms/op
     p(99,9990) =   9822,978 ms/op
     p(99,9999) =   9822,978 ms/op
    p(100,0000) =   9822,978 ms/op


# Run complete. Total time: 00:02:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest      1000000        remove    ss    8  9580,146 ± 229,561  ms/op
tests.maptests.article_examples.ObjObjMapTest (1000000) = 9580.146134375002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4427,105 ms/op
# Warmup Iteration   2: 4461,784 ms/op
# Warmup Iteration   3: 4362,194 ms/op
# Warmup Iteration   4: 4335,592 ms/op
# Warmup Iteration   5: 4528,157 ms/op
# Warmup Iteration   6: 4269,394 ms/op
# Warmup Iteration   7: 4346,533 ms/op
# Warmup Iteration   8: 4430,504 ms/op
# Warmup Iteration   9: 4458,560 ms/op
# Warmup Iteration  10: 4341,387 ms/op
Iteration   1: 4332,115 ms/op
Iteration   2: 4446,179 ms/op
Iteration   3: 4388,423 ms/op
Iteration   4: 4353,381 ms/op
Iteration   5: 4356,578 ms/op
Iteration   6: 4314,736 ms/op
Iteration   7: 4351,390 ms/op
Iteration   8: 4343,027 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4360,729 ±(99.9%) 77,411 ms/op

  Histogram, ms/op:
    [4300,000, 4312,500) = 0
    [4312,500, 4325,000) = 1
    [4325,000, 4337,500) = 1
    [4337,500, 4350,000) = 1
    [4350,000, 4362,500) = 3
    [4362,500, 4375,000) = 0
    [4375,000, 4387,500) = 0
    [4387,500, 4400,000) = 1
    [4400,000, 4412,500) = 0
    [4412,500, 4425,000) = 0
    [4425,000, 4437,500) = 0
    [4437,500, 4450,000) = 1
    [4450,000, 4462,500) = 0
    [4462,500, 4475,000) = 0
    [4475,000, 4487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   4314,736 ms/op
     p(50,0000) =   4352,385 ms/op
     p(90,0000) =   4446,179 ms/op
     p(95,0000) =   4446,179 ms/op
     p(99,0000) =   4446,179 ms/op
     p(99,9000) =   4446,179 ms/op
     p(99,9900) =   4446,179 ms/op
     p(99,9990) =   4446,179 ms/op
     p(99,9999) =   4446,179 ms/op
    p(100,0000) =   4446,179 ms/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest      1000000        remove    ss    8  4360,729 ± 77,411  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (1000000) = 4360.728501125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7557,393 ms/op
# Warmup Iteration   2: 7479,985 ms/op
# Warmup Iteration   3: 7409,751 ms/op
# Warmup Iteration   4: 7440,055 ms/op
# Warmup Iteration   5: 7463,120 ms/op
# Warmup Iteration   6: 7462,281 ms/op
# Warmup Iteration   7: 7317,157 ms/op
# Warmup Iteration   8: 7403,975 ms/op
# Warmup Iteration   9: 7298,451 ms/op
# Warmup Iteration  10: 7373,953 ms/op
Iteration   1: 7320,418 ms/op
Iteration   2: 7456,078 ms/op
Iteration   3: 7220,560 ms/op
Iteration   4: 7262,919 ms/op
Iteration   5: 7247,937 ms/op
Iteration   6: 7472,296 ms/op
Iteration   7: 7383,414 ms/op
Iteration   8: 7323,549 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7335,896 ±(99.9%) 180,033 ms/op

  Histogram, ms/op:
    [7200,000, 7225,000) = 1
    [7225,000, 7250,000) = 1
    [7250,000, 7275,000) = 1
    [7275,000, 7300,000) = 0
    [7300,000, 7325,000) = 2
    [7325,000, 7350,000) = 0
    [7350,000, 7375,000) = 0
    [7375,000, 7400,000) = 1
    [7400,000, 7425,000) = 0
    [7425,000, 7450,000) = 0
    [7450,000, 7475,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   7220,560 ms/op
     p(50,0000) =   7321,984 ms/op
     p(90,0000) =   7472,296 ms/op
     p(95,0000) =   7472,296 ms/op
     p(99,0000) =   7472,296 ms/op
     p(99,9000) =   7472,296 ms/op
     p(99,9900) =   7472,296 ms/op
     p(99,9990) =   7472,296 ms/op
     p(99,9999) =   7472,296 ms/op
    p(100,0000) =   7472,296 ms/op


# Run complete. Total time: 00:02:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest      1000000        remove    ss    8  7335,896 ± 180,033  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (1000000) = 7335.896343375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4370,164 ms/op
# Warmup Iteration   2: 4449,765 ms/op
# Warmup Iteration   3: 4279,420 ms/op
# Warmup Iteration   4: 4242,053 ms/op
# Warmup Iteration   5: 4325,300 ms/op
# Warmup Iteration   6: 4335,954 ms/op
# Warmup Iteration   7: 4263,473 ms/op
# Warmup Iteration   8: 4282,434 ms/op
# Warmup Iteration   9: 4412,887 ms/op
# Warmup Iteration  10: 4340,787 ms/op
Iteration   1: 4284,843 ms/op
Iteration   2: 4239,390 ms/op
Iteration   3: 4186,784 ms/op
Iteration   4: 4317,605 ms/op
Iteration   5: 4413,003 ms/op
Iteration   6: 4284,409 ms/op
Iteration   7: 4409,456 ms/op
Iteration   8: 4272,894 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4301,048 ±(99.9%) 149,418 ms/op

  Histogram, ms/op:
    [4100,000, 4125,000) = 0
    [4125,000, 4150,000) = 0
    [4150,000, 4175,000) = 0
    [4175,000, 4200,000) = 1
    [4200,000, 4225,000) = 0
    [4225,000, 4250,000) = 1
    [4250,000, 4275,000) = 1
    [4275,000, 4300,000) = 2
    [4300,000, 4325,000) = 1
    [4325,000, 4350,000) = 0
    [4350,000, 4375,000) = 0
    [4375,000, 4400,000) = 0
    [4400,000, 4425,000) = 2
    [4425,000, 4450,000) = 0
    [4450,000, 4475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4186,784 ms/op
     p(50,0000) =   4284,626 ms/op
     p(90,0000) =   4413,003 ms/op
     p(95,0000) =   4413,003 ms/op
     p(99,0000) =   4413,003 ms/op
     p(99,9000) =   4413,003 ms/op
     p(99,9900) =   4413,003 ms/op
     p(99,9990) =   4413,003 ms/op
     p(99,9999) =   4413,003 ms/op
    p(100,0000) =   4413,003 ms/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest      1000000        remove    ss    8  4301,048 ± 149,418  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (1000000) = 4301.048105875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 4562,689 ms/op
# Warmup Iteration   2: 4597,092 ms/op
# Warmup Iteration   3: 4629,128 ms/op
# Warmup Iteration   4: 4551,374 ms/op
# Warmup Iteration   5: 4621,960 ms/op
# Warmup Iteration   6: 4586,931 ms/op
# Warmup Iteration   7: 4581,397 ms/op
# Warmup Iteration   8: 4674,282 ms/op
# Warmup Iteration   9: 4614,037 ms/op
# Warmup Iteration  10: 4669,384 ms/op
Iteration   1: 4567,862 ms/op
Iteration   2: 4504,416 ms/op
Iteration   3: 4525,616 ms/op
Iteration   4: 4449,475 ms/op
Iteration   5: 4580,843 ms/op
Iteration   6: 4496,453 ms/op
Iteration   7: 4574,504 ms/op
Iteration   8: 4714,298 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   4551,683 ±(99.9%) 152,423 ms/op

  Histogram, ms/op:
    [4400,000, 4425,000) = 0
    [4425,000, 4450,000) = 1
    [4450,000, 4475,000) = 0
    [4475,000, 4500,000) = 1
    [4500,000, 4525,000) = 1
    [4525,000, 4550,000) = 1
    [4550,000, 4575,000) = 2
    [4575,000, 4600,000) = 1
    [4600,000, 4625,000) = 0
    [4625,000, 4650,000) = 0
    [4650,000, 4675,000) = 0
    [4675,000, 4700,000) = 0
    [4700,000, 4725,000) = 1
    [4725,000, 4750,000) = 0
    [4750,000, 4775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   4449,475 ms/op
     p(50,0000) =   4546,739 ms/op
     p(90,0000) =   4714,298 ms/op
     p(95,0000) =   4714,298 ms/op
     p(99,0000) =   4714,298 ms/op
     p(99,9000) =   4714,298 ms/op
     p(99,9900) =   4714,298 ms/op
     p(99,9990) =   4714,298 ms/op
     p(99,9999) =   4714,298 ms/op
    p(100,0000) =   4714,298 ms/op


# Run complete. Total time: 00:01:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest      1000000        remove    ss    8  4551,683 ± 152,423  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (1000000) = 4551.6834473750005
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 7022,299 ms/op
# Warmup Iteration   2: 7175,100 ms/op
# Warmup Iteration   3: 7487,774 ms/op
# Warmup Iteration   4: 7527,217 ms/op
# Warmup Iteration   5: 7575,875 ms/op
# Warmup Iteration   6: 7445,553 ms/op
# Warmup Iteration   7: 7637,721 ms/op
# Warmup Iteration   8: 7504,783 ms/op
# Warmup Iteration   9: 7528,637 ms/op
# Warmup Iteration  10: 7422,189 ms/op
Iteration   1: 7510,173 ms/op
Iteration   2: 7455,220 ms/op
Iteration   3: 7425,597 ms/op
Iteration   4: 7425,692 ms/op
Iteration   5: 7439,036 ms/op
Iteration   6: 7442,722 ms/op
Iteration   7: 7414,661 ms/op
Iteration   8: 7458,973 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7446,509 ±(99.9%) 57,083 ms/op

  Histogram, ms/op:
    [7410,000, 7420,000) = 1
    [7420,000, 7430,000) = 2
    [7430,000, 7440,000) = 1
    [7440,000, 7450,000) = 1
    [7450,000, 7460,000) = 2
    [7460,000, 7470,000) = 0
    [7470,000, 7480,000) = 0
    [7480,000, 7490,000) = 0
    [7490,000, 7500,000) = 0
    [7500,000, 7510,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   7414,661 ms/op
     p(50,0000) =   7440,879 ms/op
     p(90,0000) =   7510,173 ms/op
     p(95,0000) =   7510,173 ms/op
     p(99,0000) =   7510,173 ms/op
     p(99,9000) =   7510,173 ms/op
     p(99,9900) =   7510,173 ms/op
     p(99,9990) =   7510,173 ms/op
     p(99,9999) =   7510,173 ms/op
    p(100,0000) =   7510,173 ms/op


# Run complete. Total time: 00:02:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest      1000000        remove    ss    8  7446,509 ± 57,083  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (1000000) = 7446.509311875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6286,868 ms/op
# Warmup Iteration   2: 6684,353 ms/op
# Warmup Iteration   3: 6568,658 ms/op
# Warmup Iteration   4: 6605,213 ms/op
# Warmup Iteration   5: 6610,564 ms/op
# Warmup Iteration   6: 6651,013 ms/op
# Warmup Iteration   7: 6792,254 ms/op
# Warmup Iteration   8: 6675,010 ms/op
# Warmup Iteration   9: 6670,198 ms/op
# Warmup Iteration  10: 6634,623 ms/op
Iteration   1: 6628,217 ms/op
Iteration   2: 6764,621 ms/op
Iteration   3: 6583,125 ms/op
Iteration   4: 6591,132 ms/op
Iteration   5: 6646,565 ms/op
Iteration   6: 6542,940 ms/op
Iteration   7: 6499,245 ms/op
Iteration   8: 6668,403 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6615,531 ±(99.9%) 155,975 ms/op

  Histogram, ms/op:
    [6400,000, 6425,000) = 0
    [6425,000, 6450,000) = 0
    [6450,000, 6475,000) = 0
    [6475,000, 6500,000) = 1
    [6500,000, 6525,000) = 0
    [6525,000, 6550,000) = 1
    [6550,000, 6575,000) = 0
    [6575,000, 6600,000) = 2
    [6600,000, 6625,000) = 0
    [6625,000, 6650,000) = 2
    [6650,000, 6675,000) = 1
    [6675,000, 6700,000) = 0
    [6700,000, 6725,000) = 0
    [6725,000, 6750,000) = 0
    [6750,000, 6775,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   6499,245 ms/op
     p(50,0000) =   6609,675 ms/op
     p(90,0000) =   6764,621 ms/op
     p(95,0000) =   6764,621 ms/op
     p(99,0000) =   6764,621 ms/op
     p(99,9000) =   6764,621 ms/op
     p(99,9900) =   6764,621 ms/op
     p(99,9990) =   6764,621 ms/op
     p(99,9999) =   6764,621 ms/op
    p(100,0000) =   6764,621 ms/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest      1000000        remove    ss    8  6615,531 ± 155,975  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (1000000) = 6615.531017500001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8556,522 ms/op
# Warmup Iteration   2: 8369,350 ms/op
# Warmup Iteration   3: 8422,157 ms/op
# Warmup Iteration   4: 8385,456 ms/op
# Warmup Iteration   5: 8446,191 ms/op
# Warmup Iteration   6: 8423,193 ms/op
# Warmup Iteration   7: 8468,672 ms/op
# Warmup Iteration   8: 8391,451 ms/op
# Warmup Iteration   9: 8616,806 ms/op
# Warmup Iteration  10: 8467,853 ms/op
Iteration   1: 8403,508 ms/op
Iteration   2: 8423,452 ms/op
Iteration   3: 8448,395 ms/op
Iteration   4: 8409,211 ms/op
Iteration   5: 8325,591 ms/op
Iteration   6: 8342,710 ms/op
Iteration   7: 8353,089 ms/op
Iteration   8: 8437,703 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8392,957 ±(99.9%) 88,606 ms/op

  Histogram, ms/op:
    [8300,000, 8312,500) = 0
    [8312,500, 8325,000) = 0
    [8325,000, 8337,500) = 1
    [8337,500, 8350,000) = 1
    [8350,000, 8362,500) = 1
    [8362,500, 8375,000) = 0
    [8375,000, 8387,500) = 0
    [8387,500, 8400,000) = 0
    [8400,000, 8412,500) = 2
    [8412,500, 8425,000) = 1
    [8425,000, 8437,500) = 0
    [8437,500, 8450,000) = 2
    [8450,000, 8462,500) = 0
    [8462,500, 8475,000) = 0
    [8475,000, 8487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   8325,591 ms/op
     p(50,0000) =   8406,359 ms/op
     p(90,0000) =   8448,395 ms/op
     p(95,0000) =   8448,395 ms/op
     p(99,0000) =   8448,395 ms/op
     p(99,9000) =   8448,395 ms/op
     p(99,9900) =   8448,395 ms/op
     p(99,9990) =   8448,395 ms/op
     p(99,9999) =   8448,395 ms/op
    p(100,0000) =   8448,395 ms/op


# Run complete. Total time: 00:02:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest      1000000        remove    ss    8  8392,957 ± 88,606  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (1000000) = 8392.957387749999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11218,850 ms/op
# Warmup Iteration   2: 11266,279 ms/op
# Warmup Iteration   3: 11138,460 ms/op
# Warmup Iteration   4: 10980,358 ms/op
# Warmup Iteration   5: 11023,918 ms/op
# Warmup Iteration   6: 10898,612 ms/op
# Warmup Iteration   7: 10818,382 ms/op
# Warmup Iteration   8: 10751,022 ms/op
# Warmup Iteration   9: 10846,058 ms/op
# Warmup Iteration  10: 10925,244 ms/op
Iteration   1: 10830,483 ms/op
Iteration   2: 10835,221 ms/op
Iteration   3: 10953,509 ms/op
Iteration   4: 10756,782 ms/op
Iteration   5: 10771,947 ms/op
Iteration   6: 10869,014 ms/op
Iteration   7: 10905,015 ms/op
Iteration   8: 10965,932 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10860,988 ±(99.9%) 148,027 ms/op

  Histogram, ms/op:
    [10700,000, 10725,000) = 0
    [10725,000, 10750,000) = 0
    [10750,000, 10775,000) = 2
    [10775,000, 10800,000) = 0
    [10800,000, 10825,000) = 0
    [10825,000, 10850,000) = 2
    [10850,000, 10875,000) = 1
    [10875,000, 10900,000) = 0
    [10900,000, 10925,000) = 1
    [10925,000, 10950,000) = 0
    [10950,000, 10975,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  10756,782 ms/op
     p(50,0000) =  10852,118 ms/op
     p(90,0000) =  10965,932 ms/op
     p(95,0000) =  10965,932 ms/op
     p(99,0000) =  10965,932 ms/op
     p(99,9000) =  10965,932 ms/op
     p(99,9900) =  10965,932 ms/op
     p(99,9990) =  10965,932 ms/op
     p(99,9999) =  10965,932 ms/op
    p(100,0000) =  10965,932 ms/op


# Run complete. Total time: 00:03:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest      1000000        remove    ss    8  10860,988 ± 148,027  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (1000000) = 10860.987851124999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8924,902 ms/op
# Warmup Iteration   2: 8840,396 ms/op
# Warmup Iteration   3: 8921,424 ms/op
# Warmup Iteration   4: 8781,555 ms/op
# Warmup Iteration   5: 8831,852 ms/op
# Warmup Iteration   6: 8832,733 ms/op
# Warmup Iteration   7: 8810,060 ms/op
# Warmup Iteration   8: 8775,972 ms/op
# Warmup Iteration   9: 8841,651 ms/op
# Warmup Iteration  10: 8792,164 ms/op
Iteration   1: 8828,483 ms/op
Iteration   2: 8719,965 ms/op
Iteration   3: 8792,382 ms/op
Iteration   4: 8815,536 ms/op
Iteration   5: 8901,373 ms/op
Iteration   6: 8844,592 ms/op
Iteration   7: 8870,470 ms/op
Iteration   8: 8799,698 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8821,563 ±(99.9%) 104,793 ms/op

  Histogram, ms/op:
    [8700,000, 8725,000) = 1
    [8725,000, 8750,000) = 0
    [8750,000, 8775,000) = 0
    [8775,000, 8800,000) = 2
    [8800,000, 8825,000) = 1
    [8825,000, 8850,000) = 2
    [8850,000, 8875,000) = 1
    [8875,000, 8900,000) = 0
    [8900,000, 8925,000) = 1
    [8925,000, 8950,000) = 0
    [8950,000, 8975,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8719,965 ms/op
     p(50,0000) =   8822,009 ms/op
     p(90,0000) =   8901,373 ms/op
     p(95,0000) =   8901,373 ms/op
     p(99,0000) =   8901,373 ms/op
     p(99,9000) =   8901,373 ms/op
     p(99,9900) =   8901,373 ms/op
     p(99,9990) =   8901,373 ms/op
     p(99,9999) =   8901,373 ms/op
    p(100,0000) =   8901,373 ms/op


# Run complete. Total time: 00:02:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest      1000000        remove    ss    8  8821,563 ± 104,793  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (1000000) = 8821.56252775
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8502,494 ms/op
# Warmup Iteration   2: 8413,958 ms/op
# Warmup Iteration   3: 8345,314 ms/op
# Warmup Iteration   4: 8374,477 ms/op
# Warmup Iteration   5: 8401,099 ms/op
# Warmup Iteration   6: 8393,699 ms/op
# Warmup Iteration   7: 8414,693 ms/op
# Warmup Iteration   8: 8347,408 ms/op
# Warmup Iteration   9: 8385,307 ms/op
# Warmup Iteration  10: 8307,507 ms/op
Iteration   1: 8407,616 ms/op
Iteration   2: 8399,860 ms/op
Iteration   3: 8310,943 ms/op
Iteration   4: 8371,170 ms/op
Iteration   5: 8308,197 ms/op
Iteration   6: 8454,307 ms/op
Iteration   7: 8382,845 ms/op
Iteration   8: 8333,167 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8371,013 ±(99.9%) 97,589 ms/op

  Histogram, ms/op:
    [8300,000, 8312,500) = 2
    [8312,500, 8325,000) = 0
    [8325,000, 8337,500) = 1
    [8337,500, 8350,000) = 0
    [8350,000, 8362,500) = 0
    [8362,500, 8375,000) = 1
    [8375,000, 8387,500) = 1
    [8387,500, 8400,000) = 1
    [8400,000, 8412,500) = 1
    [8412,500, 8425,000) = 0
    [8425,000, 8437,500) = 0
    [8437,500, 8450,000) = 0
    [8450,000, 8462,500) = 1
    [8462,500, 8475,000) = 0
    [8475,000, 8487,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   8308,197 ms/op
     p(50,0000) =   8377,008 ms/op
     p(90,0000) =   8454,307 ms/op
     p(95,0000) =   8454,307 ms/op
     p(99,0000) =   8454,307 ms/op
     p(99,9000) =   8454,307 ms/op
     p(99,9900) =   8454,307 ms/op
     p(99,9990) =   8454,307 ms/op
     p(99,9999) =   8454,307 ms/op
    p(100,0000) =   8454,307 ms/op


# Run complete. Total time: 00:02:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest      1000000        remove    ss    8  8371,013 ± 97,589  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (1000000) = 8371.0133155
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10960,975 ms/op
# Warmup Iteration   2: 11289,630 ms/op
# Warmup Iteration   3: 11367,811 ms/op
# Warmup Iteration   4: 11287,034 ms/op
# Warmup Iteration   5: 11348,146 ms/op
# Warmup Iteration   6: 11329,926 ms/op
# Warmup Iteration   7: 11188,184 ms/op
# Warmup Iteration   8: 11215,464 ms/op
# Warmup Iteration   9: 11202,205 ms/op
# Warmup Iteration  10: 11214,442 ms/op
Iteration   1: 11254,601 ms/op
Iteration   2: 11173,421 ms/op
Iteration   3: 11232,459 ms/op
Iteration   4: 11290,122 ms/op
Iteration   5: 11234,859 ms/op
Iteration   6: 11190,558 ms/op
Iteration   7: 11362,786 ms/op
Iteration   8: 11148,283 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11235,886 ±(99.9%) 131,355 ms/op

  Histogram, ms/op:
    [11100,000, 11125,000) = 0
    [11125,000, 11150,000) = 1
    [11150,000, 11175,000) = 1
    [11175,000, 11200,000) = 1
    [11200,000, 11225,000) = 0
    [11225,000, 11250,000) = 2
    [11250,000, 11275,000) = 1
    [11275,000, 11300,000) = 1
    [11300,000, 11325,000) = 0
    [11325,000, 11350,000) = 0
    [11350,000, 11375,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  11148,283 ms/op
     p(50,0000) =  11233,659 ms/op
     p(90,0000) =  11362,786 ms/op
     p(95,0000) =  11362,786 ms/op
     p(99,0000) =  11362,786 ms/op
     p(99,9000) =  11362,786 ms/op
     p(99,9900) =  11362,786 ms/op
     p(99,9990) =  11362,786 ms/op
     p(99,9999) =  11362,786 ms/op
    p(100,0000) =  11362,786 ms/op


# Run complete. Total time: 00:03:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest      1000000        remove    ss    8  11235,886 ± 131,355  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (1000000) = 11235.886082375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11711,419 ms/op
# Warmup Iteration   2: 11901,070 ms/op
# Warmup Iteration   3: 11812,494 ms/op
# Warmup Iteration   4: 11832,196 ms/op
# Warmup Iteration   5: 11830,287 ms/op
# Warmup Iteration   6: 11912,511 ms/op
# Warmup Iteration   7: 11868,209 ms/op
# Warmup Iteration   8: 11952,605 ms/op
# Warmup Iteration   9: 11827,328 ms/op
# Warmup Iteration  10: 11887,368 ms/op
Iteration   1: 12005,446 ms/op
Iteration   2: 11820,289 ms/op
Iteration   3: 11944,535 ms/op
Iteration   4: 11805,995 ms/op
Iteration   5: 11846,042 ms/op
Iteration   6: 11940,440 ms/op
Iteration   7: 11913,894 ms/op
Iteration   8: 11983,703 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11907,543 ±(99.9%) 143,778 ms/op

  Histogram, ms/op:
    [11800,000, 11825,000) = 2
    [11825,000, 11850,000) = 1
    [11850,000, 11875,000) = 0
    [11875,000, 11900,000) = 0
    [11900,000, 11925,000) = 1
    [11925,000, 11950,000) = 2
    [11950,000, 11975,000) = 0
    [11975,000, 12000,000) = 1
    [12000,000, 12025,000) = 1
    [12025,000, 12050,000) = 0
    [12050,000, 12075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11805,995 ms/op
     p(50,0000) =  11927,167 ms/op
     p(90,0000) =  12005,446 ms/op
     p(95,0000) =  12005,446 ms/op
     p(99,0000) =  12005,446 ms/op
     p(99,9000) =  12005,446 ms/op
     p(99,9900) =  12005,446 ms/op
     p(99,9990) =  12005,446 ms/op
     p(99,9999) =  12005,446 ms/op
    p(100,0000) =  12005,446 ms/op


# Run complete. Total time: 00:03:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest      1000000        remove    ss    8  11907,543 ± 143,778  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (1000000) = 11907.5431575
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11519,581 ms/op
# Warmup Iteration   2: 11401,061 ms/op
# Warmup Iteration   3: 11406,760 ms/op
# Warmup Iteration   4: 11423,018 ms/op
# Warmup Iteration   5: 11353,857 ms/op
# Warmup Iteration   6: 11291,451 ms/op
# Warmup Iteration   7: 11341,814 ms/op
# Warmup Iteration   8: 11380,280 ms/op
# Warmup Iteration   9: 11207,745 ms/op
# Warmup Iteration  10: 11216,092 ms/op
Iteration   1: 11310,536 ms/op
Iteration   2: 11237,034 ms/op
Iteration   3: 11237,303 ms/op
Iteration   4: 11146,852 ms/op
Iteration   5: 11262,232 ms/op
Iteration   6: 11355,197 ms/op
Iteration   7: 11280,402 ms/op
Iteration   8: 11232,272 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11257,728 ±(99.9%) 117,885 ms/op

  Histogram, ms/op:
    [11100,000, 11125,000) = 0
    [11125,000, 11150,000) = 1
    [11150,000, 11175,000) = 0
    [11175,000, 11200,000) = 0
    [11200,000, 11225,000) = 0
    [11225,000, 11250,000) = 3
    [11250,000, 11275,000) = 1
    [11275,000, 11300,000) = 1
    [11300,000, 11325,000) = 1
    [11325,000, 11350,000) = 0
    [11350,000, 11375,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  11146,852 ms/op
     p(50,0000) =  11249,767 ms/op
     p(90,0000) =  11355,197 ms/op
     p(95,0000) =  11355,197 ms/op
     p(99,0000) =  11355,197 ms/op
     p(99,9000) =  11355,197 ms/op
     p(99,9900) =  11355,197 ms/op
     p(99,9990) =  11355,197 ms/op
     p(99,9999) =  11355,197 ms/op
    p(100,0000) =  11355,197 ms/op


# Run complete. Total time: 00:03:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest      1000000        remove    ss    8  11257,728 ± 117,885  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (1000000) = 11257.728412
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8833,012 ms/op
# Warmup Iteration   2: 8842,822 ms/op
# Warmup Iteration   3: 8639,855 ms/op
# Warmup Iteration   4: 8370,925 ms/op
# Warmup Iteration   5: 8414,106 ms/op
# Warmup Iteration   6: 8456,765 ms/op
# Warmup Iteration   7: 8523,624 ms/op
# Warmup Iteration   8: 8293,591 ms/op
# Warmup Iteration   9: 8490,870 ms/op
# Warmup Iteration  10: 8439,049 ms/op
Iteration   1: 8217,497 ms/op
Iteration   2: 8256,689 ms/op
Iteration   3: 8731,301 ms/op
Iteration   4: 8161,214 ms/op
Iteration   5: 8242,898 ms/op
Iteration   6: 8107,296 ms/op
Iteration   7: 8086,452 ms/op
Iteration   8: 8534,094 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8292,180 ±(99.9%) 430,133 ms/op

  Histogram, ms/op:
    [8000,000, 8050,000) = 0
    [8050,000, 8100,000) = 1
    [8100,000, 8150,000) = 1
    [8150,000, 8200,000) = 1
    [8200,000, 8250,000) = 2
    [8250,000, 8300,000) = 1
    [8300,000, 8350,000) = 0
    [8350,000, 8400,000) = 0
    [8400,000, 8450,000) = 0
    [8450,000, 8500,000) = 0
    [8500,000, 8550,000) = 1
    [8550,000, 8600,000) = 0
    [8600,000, 8650,000) = 0
    [8650,000, 8700,000) = 0
    [8700,000, 8750,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8086,452 ms/op
     p(50,0000) =   8230,197 ms/op
     p(90,0000) =   8731,301 ms/op
     p(95,0000) =   8731,301 ms/op
     p(99,0000) =   8731,301 ms/op
     p(99,9000) =   8731,301 ms/op
     p(99,9900) =   8731,301 ms/op
     p(99,9990) =   8731,301 ms/op
     p(99,9999) =   8731,301 ms/op
    p(100,0000) =   8731,301 ms/op


# Run complete. Total time: 00:02:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest      1000000        remove    ss    8  8292,180 ± 430,133  ms/op
tests.maptests.identity_object.GsIdentityMapTest (1000000) = 8292.180000375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10525,542 ms/op
# Warmup Iteration   2: 10060,383 ms/op
# Warmup Iteration   3: 10040,119 ms/op
# Warmup Iteration   4: 10416,425 ms/op
# Warmup Iteration   5: 10692,483 ms/op
# Warmup Iteration   6: 10538,586 ms/op
# Warmup Iteration   7: 10629,675 ms/op
# Warmup Iteration   8: 10446,407 ms/op
# Warmup Iteration   9: 10485,715 ms/op
# Warmup Iteration  10: 10467,839 ms/op
Iteration   1: 10336,939 ms/op
Iteration   2: 10100,102 ms/op
Iteration   3: 10706,761 ms/op
Iteration   4: 10078,186 ms/op
Iteration   5: 9935,527 ms/op
Iteration   6: 9970,256 ms/op
Iteration   7: 10004,541 ms/op
Iteration   8: 9945,259 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10134,696 ±(99.9%) 506,936 ms/op

  Histogram, ms/op:
    [ 9900,000,  9950,000) = 2
    [ 9950,000, 10000,000) = 1
    [10000,000, 10050,000) = 1
    [10050,000, 10100,000) = 1
    [10100,000, 10150,000) = 1
    [10150,000, 10200,000) = 0
    [10200,000, 10250,000) = 0
    [10250,000, 10300,000) = 0
    [10300,000, 10350,000) = 1
    [10350,000, 10400,000) = 0
    [10400,000, 10450,000) = 0
    [10450,000, 10500,000) = 0
    [10500,000, 10550,000) = 0
    [10550,000, 10600,000) = 0
    [10600,000, 10650,000) = 0
    [10650,000, 10700,000) = 0
    [10700,000, 10750,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   9935,527 ms/op
     p(50,0000) =  10041,363 ms/op
     p(90,0000) =  10706,761 ms/op
     p(95,0000) =  10706,761 ms/op
     p(99,0000) =  10706,761 ms/op
     p(99,9000) =  10706,761 ms/op
     p(99,9900) =  10706,761 ms/op
     p(99,9990) =  10706,761 ms/op
     p(99,9999) =  10706,761 ms/op
    p(100,0000) =  10706,761 ms/op


# Run complete. Total time: 00:03:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest      1000000        remove    ss    8  10134,696 ± 506,936  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (1000000) = 10134.696297125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11817,780 ms/op
# Warmup Iteration   2: 11616,989 ms/op
# Warmup Iteration   3: 11557,024 ms/op
# Warmup Iteration   4: 11536,596 ms/op
# Warmup Iteration   5: 11539,770 ms/op
# Warmup Iteration   6: 11697,381 ms/op
# Warmup Iteration   7: 11493,887 ms/op
# Warmup Iteration   8: 11436,328 ms/op
# Warmup Iteration   9: 11401,014 ms/op
# Warmup Iteration  10: 11486,237 ms/op
Iteration   1: 11421,440 ms/op
Iteration   2: 11548,249 ms/op
Iteration   3: 11378,926 ms/op
Iteration   4: 11532,281 ms/op
Iteration   5: 11378,156 ms/op
Iteration   6: 11401,821 ms/op
Iteration   7: 11427,923 ms/op
Iteration   8: 11508,099 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11449,612 ±(99.9%) 132,534 ms/op

  Histogram, ms/op:
    [11300,000, 11325,000) = 0
    [11325,000, 11350,000) = 0
    [11350,000, 11375,000) = 0
    [11375,000, 11400,000) = 2
    [11400,000, 11425,000) = 2
    [11425,000, 11450,000) = 1
    [11450,000, 11475,000) = 0
    [11475,000, 11500,000) = 0
    [11500,000, 11525,000) = 1
    [11525,000, 11550,000) = 2
    [11550,000, 11575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11378,156 ms/op
     p(50,0000) =  11424,682 ms/op
     p(90,0000) =  11548,249 ms/op
     p(95,0000) =  11548,249 ms/op
     p(99,0000) =  11548,249 ms/op
     p(99,9000) =  11548,249 ms/op
     p(99,9900) =  11548,249 ms/op
     p(99,9990) =  11548,249 ms/op
     p(99,9999) =  11548,249 ms/op
    p(100,0000) =  11548,249 ms/op


# Run complete. Total time: 00:03:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest      1000000        remove    ss    8  11449,612 ± 132,534  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (1000000) = 11449.611963500001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10234,861 ms/op
# Warmup Iteration   2: 10398,728 ms/op
# Warmup Iteration   3: 10368,170 ms/op
# Warmup Iteration   4: 10464,310 ms/op
# Warmup Iteration   5: 10508,263 ms/op
# Warmup Iteration   6: 10572,151 ms/op
# Warmup Iteration   7: 10620,628 ms/op
# Warmup Iteration   8: 10610,423 ms/op
# Warmup Iteration   9: 10642,037 ms/op
# Warmup Iteration  10: 10564,630 ms/op
Iteration   1: 10501,114 ms/op
Iteration   2: 10533,146 ms/op
Iteration   3: 10528,914 ms/op
Iteration   4: 10518,494 ms/op
Iteration   5: 10490,283 ms/op
Iteration   6: 10509,330 ms/op
Iteration   7: 10574,885 ms/op
Iteration   8: 10550,146 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10525,789 ±(99.9%) 52,417 ms/op

  Histogram, ms/op:
    [10490,000, 10495,000) = 1
    [10495,000, 10500,000) = 0
    [10500,000, 10505,000) = 1
    [10505,000, 10510,000) = 1
    [10510,000, 10515,000) = 0
    [10515,000, 10520,000) = 1
    [10520,000, 10525,000) = 0
    [10525,000, 10530,000) = 1
    [10530,000, 10535,000) = 1
    [10535,000, 10540,000) = 0
    [10540,000, 10545,000) = 0
    [10545,000, 10550,000) = 0
    [10550,000, 10555,000) = 1
    [10555,000, 10560,000) = 0
    [10560,000, 10565,000) = 0
    [10565,000, 10570,000) = 0
    [10570,000, 10575,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  10490,283 ms/op
     p(50,0000) =  10523,704 ms/op
     p(90,0000) =  10574,885 ms/op
     p(95,0000) =  10574,885 ms/op
     p(99,0000) =  10574,885 ms/op
     p(99,9000) =  10574,885 ms/op
     p(99,9900) =  10574,885 ms/op
     p(99,9990) =  10574,885 ms/op
     p(99,9999) =  10574,885 ms/op
    p(100,0000) =  10574,885 ms/op


# Run complete. Total time: 00:03:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest      1000000        remove    ss    8  10525,789 ± 52,417  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (1000000) = 10525.789216375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13305,539 ms/op
# Warmup Iteration   2: 13389,503 ms/op
# Warmup Iteration   3: 13396,716 ms/op
# Warmup Iteration   4: 13242,023 ms/op
# Warmup Iteration   5: 13252,179 ms/op
# Warmup Iteration   6: 13055,942 ms/op
# Warmup Iteration   7: 13249,382 ms/op
# Warmup Iteration   8: 13233,216 ms/op
# Warmup Iteration   9: 13279,932 ms/op
# Warmup Iteration  10: 13053,395 ms/op
Iteration   1: 13156,656 ms/op
Iteration   2: 13062,530 ms/op
Iteration   3: 13164,414 ms/op
Iteration   4: 13244,826 ms/op
Iteration   5: 13174,465 ms/op
Iteration   6: 13273,581 ms/op
Iteration   7: 13140,646 ms/op
Iteration   8: 13185,905 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13175,378 ±(99.9%) 123,044 ms/op

  Histogram, ms/op:
    [13000,000, 13025,000) = 0
    [13025,000, 13050,000) = 0
    [13050,000, 13075,000) = 1
    [13075,000, 13100,000) = 0
    [13100,000, 13125,000) = 0
    [13125,000, 13150,000) = 1
    [13150,000, 13175,000) = 3
    [13175,000, 13200,000) = 1
    [13200,000, 13225,000) = 0
    [13225,000, 13250,000) = 1
    [13250,000, 13275,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  13062,530 ms/op
     p(50,0000) =  13169,439 ms/op
     p(90,0000) =  13273,581 ms/op
     p(95,0000) =  13273,581 ms/op
     p(99,0000) =  13273,581 ms/op
     p(99,9000) =  13273,581 ms/op
     p(99,9900) =  13273,581 ms/op
     p(99,9990) =  13273,581 ms/op
     p(99,9999) =  13273,581 ms/op
    p(100,0000) =  13273,581 ms/op


# Run complete. Total time: 00:04:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest      1000000        remove    ss    8  13175,378 ± 123,044  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (1000000) = 13175.377982125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 100 calls per op
# Measurement: 8 iterations, single-shot each, 100 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 1000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14048,443 ms/op
# Warmup Iteration   2: 13992,761 ms/op
# Warmup Iteration   3: 14333,148 ms/op
# Warmup Iteration   4: 13913,340 ms/op
# Warmup Iteration   5: 14009,733 ms/op
# Warmup Iteration   6: 13927,663 ms/op
# Warmup Iteration   7: 13892,257 ms/op
# Warmup Iteration   8: 13804,148 ms/op
# Warmup Iteration   9: 13824,734 ms/op
# Warmup Iteration  10: 13778,793 ms/op
Iteration   1: 13730,868 ms/op
Iteration   2: 13715,705 ms/op
Iteration   3: 13744,469 ms/op
Iteration   4: 13823,471 ms/op
Iteration   5: 13805,480 ms/op
Iteration   6: 13699,548 ms/op
Iteration   7: 13965,147 ms/op
Iteration   8: 13688,051 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13771,592 ±(99.9%) 175,519 ms/op

  Histogram, ms/op:
    [13600,000, 13625,000) = 0
    [13625,000, 13650,000) = 0
    [13650,000, 13675,000) = 0
    [13675,000, 13700,000) = 2
    [13700,000, 13725,000) = 1
    [13725,000, 13750,000) = 2
    [13750,000, 13775,000) = 0
    [13775,000, 13800,000) = 0
    [13800,000, 13825,000) = 2
    [13825,000, 13850,000) = 0
    [13850,000, 13875,000) = 0
    [13875,000, 13900,000) = 0
    [13900,000, 13925,000) = 0
    [13925,000, 13950,000) = 0
    [13950,000, 13975,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  13688,051 ms/op
     p(50,0000) =  13737,668 ms/op
     p(90,0000) =  13965,147 ms/op
     p(95,0000) =  13965,147 ms/op
     p(99,0000) =  13965,147 ms/op
     p(99,9000) =  13965,147 ms/op
     p(99,9900) =  13965,147 ms/op
     p(99,9990) =  13965,147 ms/op
     p(99,9999) =  13965,147 ms/op
    p(100,0000) =  13965,147 ms/op


# Run complete. Total time: 00:04:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest      1000000        remove    ss    8  13771,592 ± 175,519  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (1000000) = 13771.592237375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11780,158 ms/op
# Warmup Iteration   2: 11786,112 ms/op
# Warmup Iteration   3: 11784,756 ms/op
# Warmup Iteration   4: 11802,812 ms/op
# Warmup Iteration   5: 11770,702 ms/op
# Warmup Iteration   6: 11773,119 ms/op
# Warmup Iteration   7: 11764,039 ms/op
# Warmup Iteration   8: 11800,700 ms/op
# Warmup Iteration   9: 11851,713 ms/op
# Warmup Iteration  10: 11770,302 ms/op
Iteration   1: 11821,736 ms/op
Iteration   2: 11772,649 ms/op
Iteration   3: 11765,111 ms/op
Iteration   4: 11790,927 ms/op
Iteration   5: 11761,040 ms/op
Iteration   6: 11781,511 ms/op
Iteration   7: 11751,034 ms/op
Iteration   8: 11757,319 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11775,166 ±(99.9%) 43,751 ms/op

  Histogram, ms/op:
    [11750,000, 11755,000) = 1
    [11755,000, 11760,000) = 1
    [11760,000, 11765,000) = 1
    [11765,000, 11770,000) = 1
    [11770,000, 11775,000) = 1
    [11775,000, 11780,000) = 0
    [11780,000, 11785,000) = 1
    [11785,000, 11790,000) = 0
    [11790,000, 11795,000) = 1
    [11795,000, 11800,000) = 0
    [11800,000, 11805,000) = 0
    [11805,000, 11810,000) = 0
    [11810,000, 11815,000) = 0
    [11815,000, 11820,000) = 0
    [11820,000, 11825,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  11751,034 ms/op
     p(50,0000) =  11768,880 ms/op
     p(90,0000) =  11821,736 ms/op
     p(95,0000) =  11821,736 ms/op
     p(99,0000) =  11821,736 ms/op
     p(99,9000) =  11821,736 ms/op
     p(99,9900) =  11821,736 ms/op
     p(99,9990) =  11821,736 ms/op
     p(99,9999) =  11821,736 ms/op
    p(100,0000) =  11821,736 ms/op


# Run complete. Total time: 00:03:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test     10000000        remove    ss    8  11775,166 ± 43,751  ms/op
tests.maptests.article_examples.IntIntMap1Test (10000000) = 11775.165765
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9999,396 ms/op
# Warmup Iteration   2: 10004,506 ms/op
# Warmup Iteration   3: 10279,969 ms/op
# Warmup Iteration   4: 9988,968 ms/op
# Warmup Iteration   5: 10051,101 ms/op
# Warmup Iteration   6: 10070,469 ms/op
# Warmup Iteration   7: 10101,319 ms/op
# Warmup Iteration   8: 10258,392 ms/op
# Warmup Iteration   9: 9942,224 ms/op
# Warmup Iteration  10: 10175,453 ms/op
Iteration   1: 9947,191 ms/op
Iteration   2: 10111,227 ms/op
Iteration   3: 10116,530 ms/op
Iteration   4: 10211,787 ms/op
Iteration   5: 10139,821 ms/op
Iteration   6: 10073,771 ms/op
Iteration   7: 10097,817 ms/op
Iteration   8: 10145,231 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10105,422 ±(99.9%) 145,137 ms/op

  Histogram, ms/op:
    [ 9900,000,  9925,000) = 0
    [ 9925,000,  9950,000) = 1
    [ 9950,000,  9975,000) = 0
    [ 9975,000, 10000,000) = 0
    [10000,000, 10025,000) = 0
    [10025,000, 10050,000) = 0
    [10050,000, 10075,000) = 1
    [10075,000, 10100,000) = 1
    [10100,000, 10125,000) = 2
    [10125,000, 10150,000) = 2
    [10150,000, 10175,000) = 0
    [10175,000, 10200,000) = 0
    [10200,000, 10225,000) = 1
    [10225,000, 10250,000) = 0
    [10250,000, 10275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9947,191 ms/op
     p(50,0000) =  10113,879 ms/op
     p(90,0000) =  10211,787 ms/op
     p(95,0000) =  10211,787 ms/op
     p(99,0000) =  10211,787 ms/op
     p(99,9000) =  10211,787 ms/op
     p(99,9900) =  10211,787 ms/op
     p(99,9990) =  10211,787 ms/op
     p(99,9999) =  10211,787 ms/op
    p(100,0000) =  10211,787 ms/op


# Run complete. Total time: 00:03:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test     10000000        remove    ss    8  10105,422 ± 145,137  ms/op
tests.maptests.article_examples.IntIntMap2Test (10000000) = 10105.421901624999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6760,817 ms/op
# Warmup Iteration   2: 6700,963 ms/op
# Warmup Iteration   3: 6646,066 ms/op
# Warmup Iteration   4: 6567,006 ms/op
# Warmup Iteration   5: 6680,206 ms/op
# Warmup Iteration   6: 6585,331 ms/op
# Warmup Iteration   7: 6680,516 ms/op
# Warmup Iteration   8: 6584,137 ms/op
# Warmup Iteration   9: 6645,911 ms/op
# Warmup Iteration  10: 6670,466 ms/op
Iteration   1: 6613,840 ms/op
Iteration   2: 6619,049 ms/op
Iteration   3: 6660,109 ms/op
Iteration   4: 6586,629 ms/op
Iteration   5: 6630,930 ms/op
Iteration   6: 6629,884 ms/op
Iteration   7: 6690,863 ms/op
Iteration   8: 6664,800 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6637,013 ±(99.9%) 63,378 ms/op

  Histogram, ms/op:
    [6500,000, 6512,500) = 0
    [6512,500, 6525,000) = 0
    [6525,000, 6537,500) = 0
    [6537,500, 6550,000) = 0
    [6550,000, 6562,500) = 0
    [6562,500, 6575,000) = 0
    [6575,000, 6587,500) = 1
    [6587,500, 6600,000) = 0
    [6600,000, 6612,500) = 0
    [6612,500, 6625,000) = 2
    [6625,000, 6637,500) = 2
    [6637,500, 6650,000) = 0
    [6650,000, 6662,500) = 1
    [6662,500, 6675,000) = 1
    [6675,000, 6687,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   6586,629 ms/op
     p(50,0000) =   6630,407 ms/op
     p(90,0000) =   6690,863 ms/op
     p(95,0000) =   6690,863 ms/op
     p(99,0000) =   6690,863 ms/op
     p(99,9000) =   6690,863 ms/op
     p(99,9900) =   6690,863 ms/op
     p(99,9990) =   6690,863 ms/op
     p(99,9999) =   6690,863 ms/op
    p(100,0000) =   6690,863 ms/op


# Run complete. Total time: 00:02:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test     10000000        remove    ss    8  6637,013 ± 63,378  ms/op
tests.maptests.article_examples.IntIntMap3Test (10000000) = 6637.012997374999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5321,496 ms/op
# Warmup Iteration   2: 5257,600 ms/op
# Warmup Iteration   3: 5225,929 ms/op
# Warmup Iteration   4: 5222,686 ms/op
# Warmup Iteration   5: 5230,090 ms/op
# Warmup Iteration   6: 5234,970 ms/op
# Warmup Iteration   7: 5243,897 ms/op
# Warmup Iteration   8: 5224,354 ms/op
# Warmup Iteration   9: 5304,838 ms/op
# Warmup Iteration  10: 5258,097 ms/op
Iteration   1: 5248,000 ms/op
Iteration   2: 5294,248 ms/op
Iteration   3: 5259,908 ms/op
Iteration   4: 5272,011 ms/op
Iteration   5: 5294,161 ms/op
Iteration   6: 5248,410 ms/op
Iteration   7: 5244,526 ms/op
Iteration   8: 5274,000 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5266,908 ±(99.9%) 38,349 ms/op

  Histogram, ms/op:
    [5240,000, 5245,000) = 1
    [5245,000, 5250,000) = 2
    [5250,000, 5255,000) = 0
    [5255,000, 5260,000) = 1
    [5260,000, 5265,000) = 0
    [5265,000, 5270,000) = 0
    [5270,000, 5275,000) = 2
    [5275,000, 5280,000) = 0
    [5280,000, 5285,000) = 0
    [5285,000, 5290,000) = 0
    [5290,000, 5295,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   5244,526 ms/op
     p(50,0000) =   5265,959 ms/op
     p(90,0000) =   5294,248 ms/op
     p(95,0000) =   5294,248 ms/op
     p(99,0000) =   5294,248 ms/op
     p(99,9000) =   5294,248 ms/op
     p(99,9900) =   5294,248 ms/op
     p(99,9990) =   5294,248 ms/op
     p(99,9999) =   5294,248 ms/op
    p(100,0000) =   5294,248 ms/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test     10000000        remove    ss    8  5266,908 ± 38,349  ms/op
tests.maptests.article_examples.IntIntMap4Test (10000000) = 5266.908000250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5322,126 ms/op
# Warmup Iteration   2: 5277,646 ms/op
# Warmup Iteration   3: 5258,560 ms/op
# Warmup Iteration   4: 5274,356 ms/op
# Warmup Iteration   5: 5274,991 ms/op
# Warmup Iteration   6: 5268,029 ms/op
# Warmup Iteration   7: 5302,035 ms/op
# Warmup Iteration   8: 5278,307 ms/op
# Warmup Iteration   9: 5263,724 ms/op
# Warmup Iteration  10: 5257,147 ms/op
Iteration   1: 5247,174 ms/op
Iteration   2: 5249,877 ms/op
Iteration   3: 5277,314 ms/op
Iteration   4: 5308,209 ms/op
Iteration   5: 5274,828 ms/op
Iteration   6: 5269,299 ms/op
Iteration   7: 5285,970 ms/op
Iteration   8: 5288,920 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5275,199 ±(99.9%) 38,646 ms/op

  Histogram, ms/op:
    [5240,000, 5245,000) = 0
    [5245,000, 5250,000) = 2
    [5250,000, 5255,000) = 0
    [5255,000, 5260,000) = 0
    [5260,000, 5265,000) = 0
    [5265,000, 5270,000) = 1
    [5270,000, 5275,000) = 1
    [5275,000, 5280,000) = 1
    [5280,000, 5285,000) = 0
    [5285,000, 5290,000) = 2
    [5290,000, 5295,000) = 0
    [5295,000, 5300,000) = 0
    [5300,000, 5305,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5247,174 ms/op
     p(50,0000) =   5276,071 ms/op
     p(90,0000) =   5308,209 ms/op
     p(95,0000) =   5308,209 ms/op
     p(99,0000) =   5308,209 ms/op
     p(99,9000) =   5308,209 ms/op
     p(99,9900) =   5308,209 ms/op
     p(99,9990) =   5308,209 ms/op
     p(99,9999) =   5308,209 ms/op
    p(100,0000) =   5308,209 ms/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest     10000000        remove    ss    8  5275,199 ± 38,646  ms/op
tests.maptests.article_examples.IntIntMap4aTest (10000000) = 5275.19880325
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6763,994 ms/op
# Warmup Iteration   2: 6589,476 ms/op
# Warmup Iteration   3: 6573,643 ms/op
# Warmup Iteration   4: 6566,583 ms/op
# Warmup Iteration   5: 6546,666 ms/op
# Warmup Iteration   6: 6518,826 ms/op
# Warmup Iteration   7: 6527,340 ms/op
# Warmup Iteration   8: 6544,854 ms/op
# Warmup Iteration   9: 6371,428 ms/op
# Warmup Iteration  10: 5940,538 ms/op
Iteration   1: 6121,655 ms/op
Iteration   2: 6126,579 ms/op
Iteration   3: 6138,143 ms/op
Iteration   4: 6230,284 ms/op
Iteration   5: 6272,192 ms/op
Iteration   6: 6177,344 ms/op
Iteration   7: 6577,041 ms/op
Iteration   8: 6622,650 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6283,236 ±(99.9%) 387,391 ms/op

  Histogram, ms/op:
    [6100,000, 6150,000) = 3
    [6150,000, 6200,000) = 1
    [6200,000, 6250,000) = 1
    [6250,000, 6300,000) = 1
    [6300,000, 6350,000) = 0
    [6350,000, 6400,000) = 0
    [6400,000, 6450,000) = 0
    [6450,000, 6500,000) = 0
    [6500,000, 6550,000) = 0
    [6550,000, 6600,000) = 1
    [6600,000, 6650,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   6121,655 ms/op
     p(50,0000) =   6203,814 ms/op
     p(90,0000) =   6622,650 ms/op
     p(95,0000) =   6622,650 ms/op
     p(99,0000) =   6622,650 ms/op
     p(99,9000) =   6622,650 ms/op
     p(99,9900) =   6622,650 ms/op
     p(99,9990) =   6622,650 ms/op
     p(99,9999) =   6622,650 ms/op
    p(100,0000) =   6622,650 ms/op


# Run complete. Total time: 00:02:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest     10000000        remove    ss    8  6283,236 ± 387,391  ms/op
tests.maptests.primitive.FastUtilMapTest (10000000) = 6283.2360285
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8300,611 ms/op
# Warmup Iteration   2: 8160,447 ms/op
# Warmup Iteration   3: 8237,018 ms/op
# Warmup Iteration   4: 8278,412 ms/op
# Warmup Iteration   5: 8229,533 ms/op
# Warmup Iteration   6: 8211,670 ms/op
# Warmup Iteration   7: 8186,605 ms/op
# Warmup Iteration   8: 8193,393 ms/op
# Warmup Iteration   9: 8234,056 ms/op
# Warmup Iteration  10: 8179,876 ms/op
Iteration   1: 8199,497 ms/op
Iteration   2: 8258,760 ms/op
Iteration   3: 8179,553 ms/op
Iteration   4: 8261,446 ms/op
Iteration   5: 8187,681 ms/op
Iteration   6: 8203,476 ms/op
Iteration   7: 8164,406 ms/op
Iteration   8: 8084,497 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8192,415 ±(99.9%) 107,086 ms/op

  Histogram, ms/op:
    [8000,000, 8025,000) = 0
    [8025,000, 8050,000) = 0
    [8050,000, 8075,000) = 0
    [8075,000, 8100,000) = 1
    [8100,000, 8125,000) = 0
    [8125,000, 8150,000) = 0
    [8150,000, 8175,000) = 1
    [8175,000, 8200,000) = 3
    [8200,000, 8225,000) = 1
    [8225,000, 8250,000) = 0
    [8250,000, 8275,000) = 2

  Percentiles, ms/op:
      p(0,0000) =   8084,497 ms/op
     p(50,0000) =   8193,589 ms/op
     p(90,0000) =   8261,446 ms/op
     p(95,0000) =   8261,446 ms/op
     p(99,0000) =   8261,446 ms/op
     p(99,9000) =   8261,446 ms/op
     p(99,9900) =   8261,446 ms/op
     p(99,9990) =   8261,446 ms/op
     p(99,9999) =   8261,446 ms/op
    p(100,0000) =   8261,446 ms/op


# Run complete. Total time: 00:02:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest     10000000        remove    ss    8  8192,415 ± 107,086  ms/op
tests.maptests.primitive.GsMutableMapTest (10000000) = 8192.41458525
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 5620,492 ms/op
# Warmup Iteration   2: 5527,420 ms/op
# Warmup Iteration   3: 5521,792 ms/op
# Warmup Iteration   4: 5566,168 ms/op
# Warmup Iteration   5: 5522,968 ms/op
# Warmup Iteration   6: 5550,061 ms/op
# Warmup Iteration   7: 5572,120 ms/op
# Warmup Iteration   8: 5586,234 ms/op
# Warmup Iteration   9: 5556,178 ms/op
# Warmup Iteration  10: 5565,720 ms/op
Iteration   1: 5510,746 ms/op
Iteration   2: 5511,574 ms/op
Iteration   3: 5554,356 ms/op
Iteration   4: 5521,144 ms/op
Iteration   5: 5512,161 ms/op
Iteration   6: 5492,917 ms/op
Iteration   7: 5465,838 ms/op
Iteration   8: 5479,678 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   5506,052 ±(99.9%) 51,791 ms/op

  Histogram, ms/op:
    [5460,000, 5470,000) = 1
    [5470,000, 5480,000) = 1
    [5480,000, 5490,000) = 0
    [5490,000, 5500,000) = 1
    [5500,000, 5510,000) = 0
    [5510,000, 5520,000) = 3
    [5520,000, 5530,000) = 1
    [5530,000, 5540,000) = 0
    [5540,000, 5550,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   5465,838 ms/op
     p(50,0000) =   5511,160 ms/op
     p(90,0000) =   5554,356 ms/op
     p(95,0000) =   5554,356 ms/op
     p(99,0000) =   5554,356 ms/op
     p(99,9000) =   5554,356 ms/op
     p(99,9900) =   5554,356 ms/op
     p(99,9990) =   5554,356 ms/op
     p(99,9999) =   5554,356 ms/op
    p(100,0000) =   5554,356 ms/op


# Run complete. Total time: 00:01:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest     10000000        remove    ss    8  5506,052 ± 51,791  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (10000000) = 5506.051648875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6441,534 ms/op
# Warmup Iteration   2: 6251,600 ms/op
# Warmup Iteration   3: 6246,076 ms/op
# Warmup Iteration   4: 6307,800 ms/op
# Warmup Iteration   5: 6276,098 ms/op
# Warmup Iteration   6: 6253,298 ms/op
# Warmup Iteration   7: 6270,277 ms/op
# Warmup Iteration   8: 6276,253 ms/op
# Warmup Iteration   9: 6306,267 ms/op
# Warmup Iteration  10: 6281,954 ms/op
Iteration   1: 6299,469 ms/op
Iteration   2: 6305,312 ms/op
Iteration   3: 6328,493 ms/op
Iteration   4: 6268,966 ms/op
Iteration   5: 6243,941 ms/op
Iteration   6: 6253,115 ms/op
Iteration   7: 6269,318 ms/op
Iteration   8: 6288,797 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6282,176 ±(99.9%) 54,414 ms/op

  Histogram, ms/op:
    [6240,000, 6245,000) = 1
    [6245,000, 6250,000) = 0
    [6250,000, 6255,000) = 1
    [6255,000, 6260,000) = 0
    [6260,000, 6265,000) = 0
    [6265,000, 6270,000) = 2
    [6270,000, 6275,000) = 0
    [6275,000, 6280,000) = 0
    [6280,000, 6285,000) = 0
    [6285,000, 6290,000) = 1
    [6290,000, 6295,000) = 0
    [6295,000, 6300,000) = 1
    [6300,000, 6305,000) = 0
    [6305,000, 6310,000) = 1
    [6310,000, 6315,000) = 0
    [6315,000, 6320,000) = 0
    [6320,000, 6325,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6243,941 ms/op
     p(50,0000) =   6279,058 ms/op
     p(90,0000) =   6328,493 ms/op
     p(95,0000) =   6328,493 ms/op
     p(99,0000) =   6328,493 ms/op
     p(99,9000) =   6328,493 ms/op
     p(99,9900) =   6328,493 ms/op
     p(99,9990) =   6328,493 ms/op
     p(99,9999) =   6328,493 ms/op
    p(100,0000) =   6328,493 ms/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest     10000000        remove    ss    8  6282,176 ± 54,414  ms/op
tests.maptests.primitive.HppcMapTest (10000000) = 6282.176429250001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13707,744 ms/op
# Warmup Iteration   2: 13422,362 ms/op
# Warmup Iteration   3: 13016,997 ms/op
# Warmup Iteration   4: 12984,693 ms/op
# Warmup Iteration   5: 13002,631 ms/op
# Warmup Iteration   6: 12969,332 ms/op
# Warmup Iteration   7: 12945,711 ms/op
# Warmup Iteration   8: 12966,611 ms/op
# Warmup Iteration   9: 13005,110 ms/op
# Warmup Iteration  10: 13033,420 ms/op
Iteration   1: 13012,233 ms/op
Iteration   2: 12983,028 ms/op
Iteration   3: 13067,725 ms/op
Iteration   4: 13008,269 ms/op
Iteration   5: 12983,482 ms/op
Iteration   6: 13040,785 ms/op
Iteration   7: 13170,484 ms/op
Iteration   8: 12987,444 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13031,681 ±(99.9%) 121,402 ms/op

  Histogram, ms/op:
    [12900,000, 12925,000) = 0
    [12925,000, 12950,000) = 0
    [12950,000, 12975,000) = 0
    [12975,000, 13000,000) = 3
    [13000,000, 13025,000) = 2
    [13025,000, 13050,000) = 1
    [13050,000, 13075,000) = 1
    [13075,000, 13100,000) = 0
    [13100,000, 13125,000) = 0
    [13125,000, 13150,000) = 0
    [13150,000, 13175,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  12983,028 ms/op
     p(50,0000) =  13010,251 ms/op
     p(90,0000) =  13170,484 ms/op
     p(95,0000) =  13170,484 ms/op
     p(99,0000) =  13170,484 ms/op
     p(99,9000) =  13170,484 ms/op
     p(99,9900) =  13170,484 ms/op
     p(99,9990) =  13170,484 ms/op
     p(99,9999) =  13170,484 ms/op
    p(100,0000) =  13170,484 ms/op


# Run complete. Total time: 00:04:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest     10000000        remove    ss    8  13031,681 ± 121,402  ms/op
tests.maptests.primitive.TroveJbMapTest (10000000) = 13031.681227500001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13769,083 ms/op
# Warmup Iteration   2: 13783,813 ms/op
# Warmup Iteration   3: 13816,941 ms/op
# Warmup Iteration   4: 13827,530 ms/op
# Warmup Iteration   5: 13804,649 ms/op
# Warmup Iteration   6: 13802,215 ms/op
# Warmup Iteration   7: 13879,393 ms/op
# Warmup Iteration   8: 13838,830 ms/op
# Warmup Iteration   9: 13734,459 ms/op
# Warmup Iteration  10: 13672,300 ms/op
Iteration   1: 13826,599 ms/op
Iteration   2: 13814,399 ms/op
Iteration   3: 13763,190 ms/op
Iteration   4: 13830,160 ms/op
Iteration   5: 13797,153 ms/op
Iteration   6: 13867,563 ms/op
Iteration   7: 13823,021 ms/op
Iteration   8: 13861,502 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13822,948 ±(99.9%) 64,035 ms/op

  Histogram, ms/op:
    [13700,000, 13712,500) = 0
    [13712,500, 13725,000) = 0
    [13725,000, 13737,500) = 0
    [13737,500, 13750,000) = 0
    [13750,000, 13762,500) = 0
    [13762,500, 13775,000) = 1
    [13775,000, 13787,500) = 0
    [13787,500, 13800,000) = 1
    [13800,000, 13812,500) = 0
    [13812,500, 13825,000) = 2
    [13825,000, 13837,500) = 2
    [13837,500, 13850,000) = 0
    [13850,000, 13862,500) = 1
    [13862,500, 13875,000) = 1
    [13875,000, 13887,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  13763,190 ms/op
     p(50,0000) =  13824,810 ms/op
     p(90,0000) =  13867,563 ms/op
     p(95,0000) =  13867,563 ms/op
     p(99,0000) =  13867,563 ms/op
     p(99,9000) =  13867,563 ms/op
     p(99,9900) =  13867,563 ms/op
     p(99,9990) =  13867,563 ms/op
     p(99,9999) =  13867,563 ms/op
    p(100,0000) =  13867,563 ms/op


# Run complete. Total time: 00:04:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest     10000000        remove    ss    8  13822,948 ± 64,035  ms/op
tests.maptests.primitive.TroveMapTest (10000000) = 13822.948455875001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 22152,470 ms/op
# Warmup Iteration   2: 21348,632 ms/op
# Warmup Iteration   3: 18746,539 ms/op
# Warmup Iteration   4: 15748,175 ms/op
# Warmup Iteration   5: 15715,240 ms/op
# Warmup Iteration   6: 16675,685 ms/op
# Warmup Iteration   7: 16217,489 ms/op
# Warmup Iteration   8: 15949,910 ms/op
# Warmup Iteration   9: 16301,614 ms/op
# Warmup Iteration  10: 16409,156 ms/op
Iteration   1: 15905,049 ms/op
Iteration   2: 16258,275 ms/op
Iteration   3: 15884,904 ms/op
Iteration   4: 16053,038 ms/op
Iteration   5: 16184,921 ms/op
Iteration   6: 15645,881 ms/op
Iteration   7: 15999,089 ms/op
Iteration   8: 15978,149 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  15988,663 ±(99.9%) 361,928 ms/op

  Histogram, ms/op:
    [15600,000, 15650,000) = 1
    [15650,000, 15700,000) = 0
    [15700,000, 15750,000) = 0
    [15750,000, 15800,000) = 0
    [15800,000, 15850,000) = 0
    [15850,000, 15900,000) = 1
    [15900,000, 15950,000) = 1
    [15950,000, 16000,000) = 2
    [16000,000, 16050,000) = 0
    [16050,000, 16100,000) = 1
    [16100,000, 16150,000) = 0
    [16150,000, 16200,000) = 1
    [16200,000, 16250,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  15645,881 ms/op
     p(50,0000) =  15988,619 ms/op
     p(90,0000) =  16258,275 ms/op
     p(95,0000) =  16258,275 ms/op
     p(99,0000) =  16258,275 ms/op
     p(99,9000) =  16258,275 ms/op
     p(99,9900) =  16258,275 ms/op
     p(99,9990) =  16258,275 ms/op
     p(99,9999) =  16258,275 ms/op
    p(100,0000) =  16258,275 ms/op


# Run complete. Total time: 00:05:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest     10000000        remove    ss    8  15988,663 ± 361,928  ms/op
tests.maptests.object.FastUtilObjMapTest (10000000) = 15988.663242875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18869,684 ms/op
# Warmup Iteration   2: 17416,195 ms/op
# Warmup Iteration   3: 16873,623 ms/op
# Warmup Iteration   4: 16130,781 ms/op
# Warmup Iteration   5: 15129,714 ms/op
# Warmup Iteration   6: 14081,409 ms/op
# Warmup Iteration   7: 13528,124 ms/op
# Warmup Iteration   8: 13303,983 ms/op
# Warmup Iteration   9: 13400,181 ms/op
# Warmup Iteration  10: 13173,182 ms/op
Iteration   1: 13337,852 ms/op
Iteration   2: 13220,639 ms/op
Iteration   3: 13242,016 ms/op
Iteration   4: 13147,905 ms/op
Iteration   5: 13269,602 ms/op
Iteration   6: 13283,696 ms/op
Iteration   7: 13191,030 ms/op
Iteration   8: 13232,717 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13240,682 ±(99.9%) 111,177 ms/op

  Histogram, ms/op:
    [13100,000, 13125,000) = 0
    [13125,000, 13150,000) = 1
    [13150,000, 13175,000) = 0
    [13175,000, 13200,000) = 1
    [13200,000, 13225,000) = 1
    [13225,000, 13250,000) = 2
    [13250,000, 13275,000) = 1
    [13275,000, 13300,000) = 1
    [13300,000, 13325,000) = 0
    [13325,000, 13350,000) = 1
    [13350,000, 13375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13147,905 ms/op
     p(50,0000) =  13237,366 ms/op
     p(90,0000) =  13337,852 ms/op
     p(95,0000) =  13337,852 ms/op
     p(99,0000) =  13337,852 ms/op
     p(99,9000) =  13337,852 ms/op
     p(99,9900) =  13337,852 ms/op
     p(99,9990) =  13337,852 ms/op
     p(99,9999) =  13337,852 ms/op
    p(100,0000) =  13337,852 ms/op


# Run complete. Total time: 00:04:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest     10000000        remove    ss    8  13240,682 ± 111,177  ms/op
tests.maptests.object.KolobokeMutableObjTest (10000000) = 13240.682149
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 20131,690 ms/op
# Warmup Iteration   2: 18597,660 ms/op
# Warmup Iteration   3: 16981,700 ms/op
# Warmup Iteration   4: 14190,757 ms/op
# Warmup Iteration   5: 13172,381 ms/op
# Warmup Iteration   6: 12967,744 ms/op
# Warmup Iteration   7: 13176,504 ms/op
# Warmup Iteration   8: 13078,535 ms/op
# Warmup Iteration   9: 13029,157 ms/op
# Warmup Iteration  10: 13254,348 ms/op
Iteration   1: 13048,412 ms/op
Iteration   2: 13092,095 ms/op
Iteration   3: 13194,157 ms/op
Iteration   4: 13305,254 ms/op
Iteration   5: 13151,771 ms/op
Iteration   6: 13199,025 ms/op
Iteration   7: 13152,119 ms/op
Iteration   8: 12979,386 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13140,277 ±(99.9%) 191,866 ms/op

  Histogram, ms/op:
    [12900,000, 12950,000) = 0
    [12950,000, 13000,000) = 1
    [13000,000, 13050,000) = 1
    [13050,000, 13100,000) = 1
    [13100,000, 13150,000) = 0
    [13150,000, 13200,000) = 4
    [13200,000, 13250,000) = 0
    [13250,000, 13300,000) = 0
    [13300,000, 13350,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  12979,386 ms/op
     p(50,0000) =  13151,945 ms/op
     p(90,0000) =  13305,254 ms/op
     p(95,0000) =  13305,254 ms/op
     p(99,0000) =  13305,254 ms/op
     p(99,9000) =  13305,254 ms/op
     p(99,9900) =  13305,254 ms/op
     p(99,9990) =  13305,254 ms/op
     p(99,9999) =  13305,254 ms/op
    p(100,0000) =  13305,254 ms/op


# Run complete. Total time: 00:04:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest     10000000        remove    ss    8  13140,277 ± 191,866  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (10000000) = 13140.277382249998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19634,779 ms/op
# Warmup Iteration   2: 18164,340 ms/op
# Warmup Iteration   3: 17946,989 ms/op
# Warmup Iteration   4: 17220,641 ms/op
# Warmup Iteration   5: 15916,371 ms/op
# Warmup Iteration   6: 15037,299 ms/op
# Warmup Iteration   7: 14654,061 ms/op
# Warmup Iteration   8: 14279,361 ms/op
# Warmup Iteration   9: 14448,164 ms/op
# Warmup Iteration  10: 14278,009 ms/op
Iteration   1: 14280,861 ms/op
Iteration   2: 14465,553 ms/op
Iteration   3: 14348,164 ms/op
Iteration   4: 14414,834 ms/op
Iteration   5: 14229,618 ms/op
Iteration   6: 14181,104 ms/op
Iteration   7: 14475,511 ms/op
Iteration   8: 14357,139 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  14344,098 ±(99.9%) 205,523 ms/op

  Histogram, ms/op:
    [14100,000, 14125,000) = 0
    [14125,000, 14150,000) = 0
    [14150,000, 14175,000) = 0
    [14175,000, 14200,000) = 1
    [14200,000, 14225,000) = 0
    [14225,000, 14250,000) = 1
    [14250,000, 14275,000) = 0
    [14275,000, 14300,000) = 1
    [14300,000, 14325,000) = 0
    [14325,000, 14350,000) = 1
    [14350,000, 14375,000) = 1
    [14375,000, 14400,000) = 0
    [14400,000, 14425,000) = 1
    [14425,000, 14450,000) = 0
    [14450,000, 14475,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  14181,104 ms/op
     p(50,0000) =  14352,652 ms/op
     p(90,0000) =  14475,511 ms/op
     p(95,0000) =  14475,511 ms/op
     p(99,0000) =  14475,511 ms/op
     p(99,9000) =  14475,511 ms/op
     p(99,9900) =  14475,511 ms/op
     p(99,9990) =  14475,511 ms/op
     p(99,9999) =  14475,511 ms/op
    p(100,0000) =  14475,511 ms/op


# Run complete. Total time: 00:04:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest     10000000        remove    ss    8  14344,098 ± 205,523  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (10000000) = 14344.097934875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21770,750 ms/op
# Warmup Iteration   2: 21007,796 ms/op
# Warmup Iteration   3: 18872,017 ms/op
# Warmup Iteration   4: 14745,983 ms/op
# Warmup Iteration   5: 13740,178 ms/op
# Warmup Iteration   6: 13255,006 ms/op
# Warmup Iteration   7: 13437,518 ms/op
# Warmup Iteration   8: 13276,194 ms/op
# Warmup Iteration   9: 13326,333 ms/op
# Warmup Iteration  10: 13461,797 ms/op
Iteration   1: 13253,965 ms/op
Iteration   2: 13379,688 ms/op
Iteration   3: 13400,892 ms/op
Iteration   4: 13588,989 ms/op
Iteration   5: 13402,883 ms/op
Iteration   6: 13456,817 ms/op
Iteration   7: 13424,783 ms/op
Iteration   8: 13294,603 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13400,327 ±(99.9%) 194,468 ms/op

  Histogram, ms/op:
    [13200,000, 13225,000) = 0
    [13225,000, 13250,000) = 0
    [13250,000, 13275,000) = 1
    [13275,000, 13300,000) = 1
    [13300,000, 13325,000) = 0
    [13325,000, 13350,000) = 0
    [13350,000, 13375,000) = 0
    [13375,000, 13400,000) = 1
    [13400,000, 13425,000) = 3
    [13425,000, 13450,000) = 0
    [13450,000, 13475,000) = 1
    [13475,000, 13500,000) = 0
    [13500,000, 13525,000) = 0
    [13525,000, 13550,000) = 0
    [13550,000, 13575,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13253,965 ms/op
     p(50,0000) =  13401,887 ms/op
     p(90,0000) =  13588,989 ms/op
     p(95,0000) =  13588,989 ms/op
     p(99,0000) =  13588,989 ms/op
     p(99,9000) =  13588,989 ms/op
     p(99,9900) =  13588,989 ms/op
     p(99,9990) =  13588,989 ms/op
     p(99,9999) =  13588,989 ms/op
    p(100,0000) =  13588,989 ms/op


# Run complete. Total time: 00:04:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest     10000000        remove    ss    8  13400,327 ± 194,468  ms/op
tests.maptests.object.HppcObjMapTest (10000000) = 13400.327430124999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14201,422 ms/op
# Warmup Iteration   2: 13193,863 ms/op
# Warmup Iteration   3: 12575,514 ms/op
# Warmup Iteration   4: 12746,847 ms/op
# Warmup Iteration   5: 12577,883 ms/op
# Warmup Iteration   6: 13164,078 ms/op
# Warmup Iteration   7: 12086,174 ms/op
# Warmup Iteration   8: 12045,017 ms/op
# Warmup Iteration   9: 12118,697 ms/op
# Warmup Iteration  10: 12058,737 ms/op
Iteration   1: 12539,023 ms/op
Iteration   2: 11264,228 ms/op
Iteration   3: 11797,255 ms/op
Iteration   4: 12280,677 ms/op
Iteration   5: 11613,277 ms/op
Iteration   6: 11700,066 ms/op
Iteration   7: 11580,583 ms/op
Iteration   8: 11559,943 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11791,882 ±(99.9%) 796,355 ms/op

  Histogram, ms/op:
    [11000,000, 11125,000) = 0
    [11125,000, 11250,000) = 0
    [11250,000, 11375,000) = 1
    [11375,000, 11500,000) = 0
    [11500,000, 11625,000) = 3
    [11625,000, 11750,000) = 1
    [11750,000, 11875,000) = 1
    [11875,000, 12000,000) = 0
    [12000,000, 12125,000) = 0
    [12125,000, 12250,000) = 0
    [12250,000, 12375,000) = 1
    [12375,000, 12500,000) = 0
    [12500,000, 12625,000) = 1
    [12625,000, 12750,000) = 0
    [12750,000, 12875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  11264,228 ms/op
     p(50,0000) =  11656,671 ms/op
     p(90,0000) =  12539,023 ms/op
     p(95,0000) =  12539,023 ms/op
     p(99,0000) =  12539,023 ms/op
     p(99,9000) =  12539,023 ms/op
     p(99,9900) =  12539,023 ms/op
     p(99,9990) =  12539,023 ms/op
     p(99,9999) =  12539,023 ms/op
    p(100,0000) =  12539,023 ms/op


# Run complete. Total time: 00:03:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest     10000000        remove    ss    8  11791,882 ± 796,355  ms/op
tests.maptests.object.GsObjMapTest (10000000) = 11791.881500125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19751,964 ms/op
# Warmup Iteration   2: 17547,204 ms/op
# Warmup Iteration   3: 17619,100 ms/op
# Warmup Iteration   4: 16118,553 ms/op
# Warmup Iteration   5: 17168,192 ms/op
# Warmup Iteration   6: 17388,101 ms/op
# Warmup Iteration   7: 16918,527 ms/op
# Warmup Iteration   8: 15522,658 ms/op
# Warmup Iteration   9: 17412,369 ms/op
# Warmup Iteration  10: 17750,882 ms/op
Iteration   1: 17325,868 ms/op
Iteration   2: 17695,027 ms/op
Iteration   3: 17334,517 ms/op
Iteration   4: 17706,706 ms/op
Iteration   5: 17723,707 ms/op
Iteration   6: 17250,065 ms/op
Iteration   7: 17699,780 ms/op
Iteration   8: 17581,458 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  17539,641 ±(99.9%) 385,766 ms/op

  Histogram, ms/op:
    [17200,000, 17250,000) = 0
    [17250,000, 17300,000) = 1
    [17300,000, 17350,000) = 2
    [17350,000, 17400,000) = 0
    [17400,000, 17450,000) = 0
    [17450,000, 17500,000) = 0
    [17500,000, 17550,000) = 0
    [17550,000, 17600,000) = 1
    [17600,000, 17650,000) = 0
    [17650,000, 17700,000) = 2
    [17700,000, 17750,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  17250,065 ms/op
     p(50,0000) =  17638,242 ms/op
     p(90,0000) =  17723,707 ms/op
     p(95,0000) =  17723,707 ms/op
     p(99,0000) =  17723,707 ms/op
     p(99,9000) =  17723,707 ms/op
     p(99,9900) =  17723,707 ms/op
     p(99,9990) =  17723,707 ms/op
     p(99,9999) =  17723,707 ms/op
    p(100,0000) =  17723,707 ms/op


# Run complete. Total time: 00:05:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest     10000000        remove    ss    8  17539,641 ± 385,766  ms/op
tests.maptests.object.JdkMapTest (10000000) = 17539.640995374997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 16550,882 ms/op
# Warmup Iteration   2: 14775,319 ms/op
# Warmup Iteration   3: 13849,402 ms/op
# Warmup Iteration   4: 13194,586 ms/op
# Warmup Iteration   5: 11861,906 ms/op
# Warmup Iteration   6: 11907,620 ms/op
# Warmup Iteration   7: 11914,563 ms/op
# Warmup Iteration   8: 12725,300 ms/op
# Warmup Iteration   9: 13073,868 ms/op
# Warmup Iteration  10: 12559,543 ms/op
Iteration   1: 12881,053 ms/op
Iteration   2: 12748,719 ms/op
Iteration   3: 12776,283 ms/op
Iteration   4: 12984,324 ms/op
Iteration   5: 12957,814 ms/op
Iteration   6: 12791,562 ms/op
Iteration   7: 12415,791 ms/op
Iteration   8: 12830,195 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12798,218 ±(99.9%) 336,806 ms/op

  Histogram, ms/op:
    [12400,000, 12450,000) = 1
    [12450,000, 12500,000) = 0
    [12500,000, 12550,000) = 0
    [12550,000, 12600,000) = 0
    [12600,000, 12650,000) = 0
    [12650,000, 12700,000) = 0
    [12700,000, 12750,000) = 1
    [12750,000, 12800,000) = 2
    [12800,000, 12850,000) = 1
    [12850,000, 12900,000) = 1
    [12900,000, 12950,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  12415,791 ms/op
     p(50,0000) =  12810,878 ms/op
     p(90,0000) =  12984,324 ms/op
     p(95,0000) =  12984,324 ms/op
     p(99,0000) =  12984,324 ms/op
     p(99,9000) =  12984,324 ms/op
     p(99,9900) =  12984,324 ms/op
     p(99,9990) =  12984,324 ms/op
     p(99,9999) =  12984,324 ms/op
    p(100,0000) =  12984,324 ms/op


# Run complete. Total time: 00:04:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity     10000000        remove    ss    8  12798,218 ± 336,806  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (10000000) = 12798.2176595
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 28885,102 ms/op
# Warmup Iteration   2: 26925,165 ms/op
# Warmup Iteration   3: 22320,589 ms/op
# Warmup Iteration   4: 19587,977 ms/op
# Warmup Iteration   5: 19309,382 ms/op
# Warmup Iteration   6: 19126,163 ms/op
# Warmup Iteration   7: 19066,408 ms/op
# Warmup Iteration   8: 19072,780 ms/op
# Warmup Iteration   9: 19471,020 ms/op
# Warmup Iteration  10: 19116,448 ms/op
Iteration   1: 19091,716 ms/op
Iteration   2: 19161,429 ms/op
Iteration   3: 19120,670 ms/op
Iteration   4: 19083,543 ms/op
Iteration   5: 19123,416 ms/op
Iteration   6: 19171,754 ms/op
Iteration   7: 19120,213 ms/op
Iteration   8: 19038,817 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  19113,945 ±(99.9%) 81,866 ms/op

  Histogram, ms/op:
    [19000,000, 19012,500) = 0
    [19012,500, 19025,000) = 0
    [19025,000, 19037,500) = 0
    [19037,500, 19050,000) = 1
    [19050,000, 19062,500) = 0
    [19062,500, 19075,000) = 0
    [19075,000, 19087,500) = 1
    [19087,500, 19100,000) = 1
    [19100,000, 19112,500) = 0
    [19112,500, 19125,000) = 3
    [19125,000, 19137,500) = 0
    [19137,500, 19150,000) = 0
    [19150,000, 19162,500) = 1
    [19162,500, 19175,000) = 1
    [19175,000, 19187,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  19038,817 ms/op
     p(50,0000) =  19120,441 ms/op
     p(90,0000) =  19171,754 ms/op
     p(95,0000) =  19171,754 ms/op
     p(99,0000) =  19171,754 ms/op
     p(99,9000) =  19171,754 ms/op
     p(99,9900) =  19171,754 ms/op
     p(99,9990) =  19171,754 ms/op
     p(99,9999) =  19171,754 ms/op
    p(100,0000) =  19171,754 ms/op


# Run complete. Total time: 00:06:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest     10000000        remove    ss    8  19113,945 ± 81,866  ms/op
tests.maptests.object.TroveJbObjMapTest (10000000) = 19113.944851499997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 30069,458 ms/op
# Warmup Iteration   2: 26949,723 ms/op
# Warmup Iteration   3: 22992,848 ms/op
# Warmup Iteration   4: 20619,105 ms/op
# Warmup Iteration   5: 20670,818 ms/op
# Warmup Iteration   6: 21754,986 ms/op
# Warmup Iteration   7: 20815,285 ms/op
# Warmup Iteration   8: 20108,922 ms/op
# Warmup Iteration   9: 19910,157 ms/op
# Warmup Iteration  10: 20976,762 ms/op
Iteration   1: 20347,998 ms/op
Iteration   2: 20193,987 ms/op
Iteration   3: 20032,475 ms/op
Iteration   4: 20056,012 ms/op
Iteration   5: 20573,578 ms/op
Iteration   6: 20282,820 ms/op
Iteration   7: 20314,245 ms/op
Iteration   8: 19998,050 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  20224,896 ±(99.9%) 372,736 ms/op

  Histogram, ms/op:
    [19900,000, 19950,000) = 0
    [19950,000, 20000,000) = 1
    [20000,000, 20050,000) = 1
    [20050,000, 20100,000) = 1
    [20100,000, 20150,000) = 0
    [20150,000, 20200,000) = 1
    [20200,000, 20250,000) = 0
    [20250,000, 20300,000) = 1
    [20300,000, 20350,000) = 2
    [20350,000, 20400,000) = 0
    [20400,000, 20450,000) = 0
    [20450,000, 20500,000) = 0
    [20500,000, 20550,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  19998,050 ms/op
     p(50,0000) =  20238,403 ms/op
     p(90,0000) =  20573,578 ms/op
     p(95,0000) =  20573,578 ms/op
     p(99,0000) =  20573,578 ms/op
     p(99,9000) =  20573,578 ms/op
     p(99,9900) =  20573,578 ms/op
     p(99,9990) =  20573,578 ms/op
     p(99,9999) =  20573,578 ms/op
    p(100,0000) =  20573,578 ms/op


# Run complete. Total time: 00:06:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest     10000000        remove    ss    8  20224,896 ± 372,736  ms/op
tests.maptests.object.TroveObjMapTest (10000000) = 20224.895624625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21267,392 ms/op
# Warmup Iteration   2: 20657,161 ms/op
# Warmup Iteration   3: 18301,433 ms/op
# Warmup Iteration   4: 14906,731 ms/op
# Warmup Iteration   5: 15285,728 ms/op
# Warmup Iteration   6: 16276,120 ms/op
# Warmup Iteration   7: 17181,372 ms/op
# Warmup Iteration   8: 17996,905 ms/op
# Warmup Iteration   9: 18382,837 ms/op
# Warmup Iteration  10: 18111,209 ms/op
Iteration   1: 18113,726 ms/op
Iteration   2: 18475,570 ms/op
Iteration   3: 18304,335 ms/op
Iteration   4: 18202,876 ms/op
Iteration   5: 18332,005 ms/op
Iteration   6: 18152,976 ms/op
Iteration   7: 18252,701 ms/op
Iteration   8: 18467,151 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18287,667 ±(99.9%) 257,103 ms/op

  Histogram, ms/op:
    [18100,000, 18125,000) = 1
    [18125,000, 18150,000) = 0
    [18150,000, 18175,000) = 1
    [18175,000, 18200,000) = 0
    [18200,000, 18225,000) = 1
    [18225,000, 18250,000) = 0
    [18250,000, 18275,000) = 1
    [18275,000, 18300,000) = 0
    [18300,000, 18325,000) = 1
    [18325,000, 18350,000) = 1
    [18350,000, 18375,000) = 0
    [18375,000, 18400,000) = 0
    [18400,000, 18425,000) = 0
    [18425,000, 18450,000) = 0
    [18450,000, 18475,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  18113,726 ms/op
     p(50,0000) =  18278,518 ms/op
     p(90,0000) =  18475,570 ms/op
     p(95,0000) =  18475,570 ms/op
     p(99,0000) =  18475,570 ms/op
     p(99,9000) =  18475,570 ms/op
     p(99,9900) =  18475,570 ms/op
     p(99,9990) =  18475,570 ms/op
     p(99,9999) =  18475,570 ms/op
    p(100,0000) =  18475,570 ms/op


# Run complete. Total time: 00:05:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest     10000000        remove    ss    8  18287,667 ± 257,103  ms/op
tests.maptests.article_examples.ObjObjMapTest (10000000) = 18287.66745575
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11011,803 ms/op
# Warmup Iteration   2: 10314,597 ms/op
# Warmup Iteration   3: 9488,278 ms/op
# Warmup Iteration   4: 8426,224 ms/op
# Warmup Iteration   5: 8081,570 ms/op
# Warmup Iteration   6: 8444,808 ms/op
# Warmup Iteration   7: 9067,541 ms/op
# Warmup Iteration   8: 8861,656 ms/op
# Warmup Iteration   9: 8951,629 ms/op
# Warmup Iteration  10: 8963,032 ms/op
Iteration   1: 8923,129 ms/op
Iteration   2: 9053,922 ms/op
Iteration   3: 8901,063 ms/op
Iteration   4: 8811,161 ms/op
Iteration   5: 8843,951 ms/op
Iteration   6: 8843,848 ms/op
Iteration   7: 8971,219 ms/op
Iteration   8: 9000,203 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8918,562 ±(99.9%) 162,833 ms/op

  Histogram, ms/op:
    [8800,000, 8825,000) = 1
    [8825,000, 8850,000) = 2
    [8850,000, 8875,000) = 0
    [8875,000, 8900,000) = 0
    [8900,000, 8925,000) = 2
    [8925,000, 8950,000) = 0
    [8950,000, 8975,000) = 1
    [8975,000, 9000,000) = 0
    [9000,000, 9025,000) = 1
    [9025,000, 9050,000) = 0
    [9050,000, 9075,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8811,161 ms/op
     p(50,0000) =   8912,096 ms/op
     p(90,0000) =   9053,922 ms/op
     p(95,0000) =   9053,922 ms/op
     p(99,0000) =   9053,922 ms/op
     p(99,9000) =   9053,922 ms/op
     p(99,9900) =   9053,922 ms/op
     p(99,9990) =   9053,922 ms/op
     p(99,9999) =   9053,922 ms/op
    p(100,0000) =   9053,922 ms/op


# Run complete. Total time: 00:02:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest     10000000        remove    ss    8  8918,562 ± 162,833  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (10000000) = 8918.562027500002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 12141,500 ms/op
# Warmup Iteration   2: 10842,083 ms/op
# Warmup Iteration   3: 10414,924 ms/op
# Warmup Iteration   4: 10436,345 ms/op
# Warmup Iteration   5: 10691,013 ms/op
# Warmup Iteration   6: 10780,266 ms/op
# Warmup Iteration   7: 10974,094 ms/op
# Warmup Iteration   8: 11003,990 ms/op
# Warmup Iteration   9: 10986,233 ms/op
# Warmup Iteration  10: 10987,200 ms/op
Iteration   1: 10991,678 ms/op
Iteration   2: 11009,115 ms/op
Iteration   3: 10890,395 ms/op
Iteration   4: 10949,204 ms/op
Iteration   5: 11006,815 ms/op
Iteration   6: 10904,867 ms/op
Iteration   7: 11148,005 ms/op
Iteration   8: 10943,365 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10980,430 ±(99.9%) 154,811 ms/op

  Histogram, ms/op:
    [10800,000, 10825,000) = 0
    [10825,000, 10850,000) = 0
    [10850,000, 10875,000) = 0
    [10875,000, 10900,000) = 1
    [10900,000, 10925,000) = 1
    [10925,000, 10950,000) = 2
    [10950,000, 10975,000) = 0
    [10975,000, 11000,000) = 1
    [11000,000, 11025,000) = 2
    [11025,000, 11050,000) = 0
    [11050,000, 11075,000) = 0
    [11075,000, 11100,000) = 0
    [11100,000, 11125,000) = 0
    [11125,000, 11150,000) = 1
    [11150,000, 11175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  10890,395 ms/op
     p(50,0000) =  10970,441 ms/op
     p(90,0000) =  11148,005 ms/op
     p(95,0000) =  11148,005 ms/op
     p(99,0000) =  11148,005 ms/op
     p(99,9000) =  11148,005 ms/op
     p(99,9900) =  11148,005 ms/op
     p(99,9990) =  11148,005 ms/op
     p(99,9999) =  11148,005 ms/op
    p(100,0000) =  11148,005 ms/op


# Run complete. Total time: 00:03:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest     10000000        remove    ss    8  10980,430 ± 154,811  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (10000000) = 10980.430459374998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 10916,049 ms/op
# Warmup Iteration   2: 10135,414 ms/op
# Warmup Iteration   3: 9329,092 ms/op
# Warmup Iteration   4: 8296,321 ms/op
# Warmup Iteration   5: 8007,485 ms/op
# Warmup Iteration   6: 8824,075 ms/op
# Warmup Iteration   7: 8988,806 ms/op
# Warmup Iteration   8: 8936,232 ms/op
# Warmup Iteration   9: 8813,915 ms/op
# Warmup Iteration  10: 8760,673 ms/op
Iteration   1: 8876,707 ms/op
Iteration   2: 8852,725 ms/op
Iteration   3: 8836,299 ms/op
Iteration   4: 8879,863 ms/op
Iteration   5: 8734,244 ms/op
Iteration   6: 8882,050 ms/op
Iteration   7: 9063,845 ms/op
Iteration   8: 8985,531 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8888,908 ±(99.9%) 188,743 ms/op

  Histogram, ms/op:
    [8700,000, 8725,000) = 0
    [8725,000, 8750,000) = 1
    [8750,000, 8775,000) = 0
    [8775,000, 8800,000) = 0
    [8800,000, 8825,000) = 0
    [8825,000, 8850,000) = 1
    [8850,000, 8875,000) = 1
    [8875,000, 8900,000) = 3
    [8900,000, 8925,000) = 0
    [8925,000, 8950,000) = 0
    [8950,000, 8975,000) = 0
    [8975,000, 9000,000) = 1
    [9000,000, 9025,000) = 0
    [9025,000, 9050,000) = 0
    [9050,000, 9075,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8734,244 ms/op
     p(50,0000) =   8878,285 ms/op
     p(90,0000) =   9063,845 ms/op
     p(95,0000) =   9063,845 ms/op
     p(99,0000) =   9063,845 ms/op
     p(99,9000) =   9063,845 ms/op
     p(99,9900) =   9063,845 ms/op
     p(99,9990) =   9063,845 ms/op
     p(99,9999) =   9063,845 ms/op
    p(100,0000) =   9063,845 ms/op


# Run complete. Total time: 00:02:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest     10000000        remove    ss    8  8888,908 ± 188,743  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (10000000) = 8888.908089375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 11108,181 ms/op
# Warmup Iteration   2: 10288,549 ms/op
# Warmup Iteration   3: 9431,450 ms/op
# Warmup Iteration   4: 8709,837 ms/op
# Warmup Iteration   5: 8611,423 ms/op
# Warmup Iteration   6: 9433,340 ms/op
# Warmup Iteration   7: 9288,348 ms/op
# Warmup Iteration   8: 9228,454 ms/op
# Warmup Iteration   9: 9213,268 ms/op
# Warmup Iteration  10: 9444,709 ms/op
Iteration   1: 9378,046 ms/op
Iteration   2: 9319,241 ms/op
Iteration   3: 9235,564 ms/op
Iteration   4: 9280,671 ms/op
Iteration   5: 9261,734 ms/op
Iteration   6: 9243,221 ms/op
Iteration   7: 9366,327 ms/op
Iteration   8: 9405,036 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   9311,230 ±(99.9%) 125,373 ms/op

  Histogram, ms/op:
    [9200,000, 9225,000) = 0
    [9225,000, 9250,000) = 2
    [9250,000, 9275,000) = 1
    [9275,000, 9300,000) = 1
    [9300,000, 9325,000) = 1
    [9325,000, 9350,000) = 0
    [9350,000, 9375,000) = 1
    [9375,000, 9400,000) = 1
    [9400,000, 9425,000) = 1
    [9425,000, 9450,000) = 0
    [9450,000, 9475,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   9235,564 ms/op
     p(50,0000) =   9299,956 ms/op
     p(90,0000) =   9405,036 ms/op
     p(95,0000) =   9405,036 ms/op
     p(99,0000) =   9405,036 ms/op
     p(99,9000) =   9405,036 ms/op
     p(99,9900) =   9405,036 ms/op
     p(99,9990) =   9405,036 ms/op
     p(99,9999) =   9405,036 ms/op
    p(100,0000) =   9405,036 ms/op


# Run complete. Total time: 00:02:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest     10000000        remove    ss    8  9311,230 ± 125,373  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (10000000) = 9311.2300525
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19397,533 ms/op
# Warmup Iteration   2: 17941,927 ms/op
# Warmup Iteration   3: 17351,894 ms/op
# Warmup Iteration   4: 16805,841 ms/op
# Warmup Iteration   5: 16299,606 ms/op
# Warmup Iteration   6: 16290,035 ms/op
# Warmup Iteration   7: 16284,907 ms/op
# Warmup Iteration   8: 16036,368 ms/op
# Warmup Iteration   9: 17593,203 ms/op
# Warmup Iteration  10: 17946,712 ms/op
Iteration   1: 18070,308 ms/op
Iteration   2: 18075,395 ms/op
Iteration   3: 17973,032 ms/op
Iteration   4: 18014,809 ms/op
Iteration   5: 17930,431 ms/op
Iteration   6: 17981,076 ms/op
Iteration   7: 18048,320 ms/op
Iteration   8: 18005,605 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18012,372 ±(99.9%) 96,723 ms/op

  Histogram, ms/op:
    [17900,000, 17912,500) = 0
    [17912,500, 17925,000) = 0
    [17925,000, 17937,500) = 1
    [17937,500, 17950,000) = 0
    [17950,000, 17962,500) = 0
    [17962,500, 17975,000) = 1
    [17975,000, 17987,500) = 1
    [17987,500, 18000,000) = 0
    [18000,000, 18012,500) = 1
    [18012,500, 18025,000) = 1
    [18025,000, 18037,500) = 0
    [18037,500, 18050,000) = 1
    [18050,000, 18062,500) = 0
    [18062,500, 18075,000) = 1
    [18075,000, 18087,500) = 1

  Percentiles, ms/op:
      p(0,0000) =  17930,431 ms/op
     p(50,0000) =  18010,207 ms/op
     p(90,0000) =  18075,395 ms/op
     p(95,0000) =  18075,395 ms/op
     p(99,0000) =  18075,395 ms/op
     p(99,9000) =  18075,395 ms/op
     p(99,9900) =  18075,395 ms/op
     p(99,9990) =  18075,395 ms/op
     p(99,9999) =  18075,395 ms/op
    p(100,0000) =  18075,395 ms/op


# Run complete. Total time: 00:05:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest     10000000        remove    ss    8  18012,372 ± 96,723  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (10000000) = 18012.37189775
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14286,693 ms/op
# Warmup Iteration   2: 13873,087 ms/op
# Warmup Iteration   3: 14112,066 ms/op
# Warmup Iteration   4: 13821,279 ms/op
# Warmup Iteration   5: 14966,419 ms/op
# Warmup Iteration   6: 14983,750 ms/op
# Warmup Iteration   7: 15145,310 ms/op
# Warmup Iteration   8: 15136,773 ms/op
# Warmup Iteration   9: 15055,384 ms/op
# Warmup Iteration  10: 14994,911 ms/op
Iteration   1: 15073,335 ms/op
Iteration   2: 15067,133 ms/op
Iteration   3: 15023,237 ms/op
Iteration   4: 14998,455 ms/op
Iteration   5: 15183,237 ms/op
Iteration   6: 15146,229 ms/op
Iteration   7: 15143,164 ms/op
Iteration   8: 15078,132 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  15089,115 ±(99.9%) 121,901 ms/op

  Histogram, ms/op:
    [14900,000, 14925,000) = 0
    [14925,000, 14950,000) = 0
    [14950,000, 14975,000) = 0
    [14975,000, 15000,000) = 1
    [15000,000, 15025,000) = 1
    [15025,000, 15050,000) = 0
    [15050,000, 15075,000) = 2
    [15075,000, 15100,000) = 1
    [15100,000, 15125,000) = 0
    [15125,000, 15150,000) = 2
    [15150,000, 15175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  14998,455 ms/op
     p(50,0000) =  15075,734 ms/op
     p(90,0000) =  15183,237 ms/op
     p(95,0000) =  15183,237 ms/op
     p(99,0000) =  15183,237 ms/op
     p(99,9000) =  15183,237 ms/op
     p(99,9900) =  15183,237 ms/op
     p(99,9990) =  15183,237 ms/op
     p(99,9999) =  15183,237 ms/op
    p(100,0000) =  15183,237 ms/op


# Run complete. Total time: 00:04:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest     10000000        remove    ss    8  15089,115 ± 121,901  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (10000000) = 15089.115248375001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13598,368 ms/op
# Warmup Iteration   2: 12964,972 ms/op
# Warmup Iteration   3: 11893,521 ms/op
# Warmup Iteration   4: 10881,762 ms/op
# Warmup Iteration   5: 11314,547 ms/op
# Warmup Iteration   6: 11288,623 ms/op
# Warmup Iteration   7: 10460,098 ms/op
# Warmup Iteration   8: 10557,319 ms/op
# Warmup Iteration   9: 10583,156 ms/op
# Warmup Iteration  10: 10508,741 ms/op
Iteration   1: 10511,751 ms/op
Iteration   2: 10605,311 ms/op
Iteration   3: 10569,658 ms/op
Iteration   4: 10584,065 ms/op
Iteration   5: 10694,358 ms/op
Iteration   6: 10417,073 ms/op
Iteration   7: 10532,631 ms/op
Iteration   8: 10505,985 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  10552,604 ±(99.9%) 156,273 ms/op

  Histogram, ms/op:
    [10400,000, 10425,000) = 1
    [10425,000, 10450,000) = 0
    [10450,000, 10475,000) = 0
    [10475,000, 10500,000) = 0
    [10500,000, 10525,000) = 2
    [10525,000, 10550,000) = 1
    [10550,000, 10575,000) = 1
    [10575,000, 10600,000) = 1
    [10600,000, 10625,000) = 1
    [10625,000, 10650,000) = 0
    [10650,000, 10675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  10417,073 ms/op
     p(50,0000) =  10551,144 ms/op
     p(90,0000) =  10694,358 ms/op
     p(95,0000) =  10694,358 ms/op
     p(99,0000) =  10694,358 ms/op
     p(99,9000) =  10694,358 ms/op
     p(99,9900) =  10694,358 ms/op
     p(99,9990) =  10694,358 ms/op
     p(99,9999) =  10694,358 ms/op
    p(100,0000) =  10694,358 ms/op


# Run complete. Total time: 00:03:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest     10000000        remove    ss    8  10552,604 ± 156,273  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (10000000) = 10552.60388525
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21843,618 ms/op
# Warmup Iteration   2: 19789,900 ms/op
# Warmup Iteration   3: 17081,646 ms/op
# Warmup Iteration   4: 16400,656 ms/op
# Warmup Iteration   5: 16896,714 ms/op
# Warmup Iteration   6: 16606,405 ms/op
# Warmup Iteration   7: 16491,140 ms/op
# Warmup Iteration   8: 16589,187 ms/op
# Warmup Iteration   9: 16587,218 ms/op
# Warmup Iteration  10: 16601,617 ms/op
Iteration   1: 16539,704 ms/op
Iteration   2: 16614,586 ms/op
Iteration   3: 16549,332 ms/op
Iteration   4: 16516,920 ms/op
Iteration   5: 16670,841 ms/op
Iteration   6: 16468,005 ms/op
Iteration   7: 16449,233 ms/op
Iteration   8: 16436,855 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  16530,684 ±(99.9%) 156,116 ms/op

  Histogram, ms/op:
    [16400,000, 16425,000) = 0
    [16425,000, 16450,000) = 2
    [16450,000, 16475,000) = 1
    [16475,000, 16500,000) = 0
    [16500,000, 16525,000) = 1
    [16525,000, 16550,000) = 2
    [16550,000, 16575,000) = 0
    [16575,000, 16600,000) = 0
    [16600,000, 16625,000) = 1
    [16625,000, 16650,000) = 0
    [16650,000, 16675,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  16436,855 ms/op
     p(50,0000) =  16528,312 ms/op
     p(90,0000) =  16670,841 ms/op
     p(95,0000) =  16670,841 ms/op
     p(99,0000) =  16670,841 ms/op
     p(99,9000) =  16670,841 ms/op
     p(99,9900) =  16670,841 ms/op
     p(99,9990) =  16670,841 ms/op
     p(99,9999) =  16670,841 ms/op
    p(100,0000) =  16670,841 ms/op


# Run complete. Total time: 00:05:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest     10000000        remove    ss    8  16530,684 ± 156,116  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (10000000) = 16530.68449
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19318,551 ms/op
# Warmup Iteration   2: 16071,944 ms/op
# Warmup Iteration   3: 13263,804 ms/op
# Warmup Iteration   4: 11608,948 ms/op
# Warmup Iteration   5: 12099,047 ms/op
# Warmup Iteration   6: 12278,317 ms/op
# Warmup Iteration   7: 12314,436 ms/op
# Warmup Iteration   8: 12151,374 ms/op
# Warmup Iteration   9: 12245,838 ms/op
# Warmup Iteration  10: 12141,284 ms/op
Iteration   1: 12267,565 ms/op
Iteration   2: 12297,794 ms/op
Iteration   3: 12151,826 ms/op
Iteration   4: 12081,899 ms/op
Iteration   5: 12278,160 ms/op
Iteration   6: 12303,417 ms/op
Iteration   7: 12115,868 ms/op
Iteration   8: 12181,261 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  12209,724 ±(99.9%) 167,735 ms/op

  Histogram, ms/op:
    [12000,000, 12025,000) = 0
    [12025,000, 12050,000) = 0
    [12050,000, 12075,000) = 0
    [12075,000, 12100,000) = 1
    [12100,000, 12125,000) = 1
    [12125,000, 12150,000) = 0
    [12150,000, 12175,000) = 1
    [12175,000, 12200,000) = 1
    [12200,000, 12225,000) = 0
    [12225,000, 12250,000) = 0
    [12250,000, 12275,000) = 1
    [12275,000, 12300,000) = 2
    [12300,000, 12325,000) = 1
    [12325,000, 12350,000) = 0
    [12350,000, 12375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  12081,899 ms/op
     p(50,0000) =  12224,413 ms/op
     p(90,0000) =  12303,417 ms/op
     p(95,0000) =  12303,417 ms/op
     p(99,0000) =  12303,417 ms/op
     p(99,9000) =  12303,417 ms/op
     p(99,9900) =  12303,417 ms/op
     p(99,9990) =  12303,417 ms/op
     p(99,9999) =  12303,417 ms/op
    p(100,0000) =  12303,417 ms/op


# Run complete. Total time: 00:03:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest     10000000        remove    ss    8  12209,724 ± 167,735  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (10000000) = 12209.723671
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 13561,587 ms/op
# Warmup Iteration   2: 12848,182 ms/op
# Warmup Iteration   3: 11807,948 ms/op
# Warmup Iteration   4: 10761,227 ms/op
# Warmup Iteration   5: 11297,474 ms/op
# Warmup Iteration   6: 11642,180 ms/op
# Warmup Iteration   7: 11454,643 ms/op
# Warmup Iteration   8: 11489,843 ms/op
# Warmup Iteration   9: 11382,553 ms/op
# Warmup Iteration  10: 11537,011 ms/op
Iteration   1: 11637,253 ms/op
Iteration   2: 11475,006 ms/op
Iteration   3: 11434,536 ms/op
Iteration   4: 11502,079 ms/op
Iteration   5: 11299,414 ms/op
Iteration   6: 11682,836 ms/op
Iteration   7: 11292,963 ms/op
Iteration   8: 11384,749 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11463,604 ±(99.9%) 273,244 ms/op

  Histogram, ms/op:
    [11200,000, 11250,000) = 0
    [11250,000, 11300,000) = 2
    [11300,000, 11350,000) = 0
    [11350,000, 11400,000) = 1
    [11400,000, 11450,000) = 1
    [11450,000, 11500,000) = 1
    [11500,000, 11550,000) = 1
    [11550,000, 11600,000) = 0
    [11600,000, 11650,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  11292,963 ms/op
     p(50,0000) =  11454,771 ms/op
     p(90,0000) =  11682,836 ms/op
     p(95,0000) =  11682,836 ms/op
     p(99,0000) =  11682,836 ms/op
     p(99,9000) =  11682,836 ms/op
     p(99,9900) =  11682,836 ms/op
     p(99,9990) =  11682,836 ms/op
     p(99,9999) =  11682,836 ms/op
    p(100,0000) =  11682,836 ms/op


# Run complete. Total time: 00:03:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest     10000000        remove    ss    8  11463,604 ± 273,244  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (10000000) = 11463.604294249999
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21113,427 ms/op
# Warmup Iteration   2: 19606,658 ms/op
# Warmup Iteration   3: 18162,264 ms/op
# Warmup Iteration   4: 18836,526 ms/op
# Warmup Iteration   5: 19040,823 ms/op
# Warmup Iteration   6: 19161,661 ms/op
# Warmup Iteration   7: 19004,903 ms/op
# Warmup Iteration   8: 19074,291 ms/op
# Warmup Iteration   9: 19081,441 ms/op
# Warmup Iteration  10: 19154,545 ms/op
Iteration   1: 19077,308 ms/op
Iteration   2: 19090,975 ms/op
Iteration   3: 19077,951 ms/op
Iteration   4: 19071,106 ms/op
Iteration   5: 19095,624 ms/op
Iteration   6: 19106,646 ms/op
Iteration   7: 18982,644 ms/op
Iteration   8: 18889,770 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  19049,003 ±(99.9%) 142,978 ms/op

  Histogram, ms/op:
    [18800,000, 18825,000) = 0
    [18825,000, 18850,000) = 0
    [18850,000, 18875,000) = 0
    [18875,000, 18900,000) = 1
    [18900,000, 18925,000) = 0
    [18925,000, 18950,000) = 0
    [18950,000, 18975,000) = 0
    [18975,000, 19000,000) = 1
    [19000,000, 19025,000) = 0
    [19025,000, 19050,000) = 0
    [19050,000, 19075,000) = 1
    [19075,000, 19100,000) = 4
    [19100,000, 19125,000) = 1
    [19125,000, 19150,000) = 0
    [19150,000, 19175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  18889,770 ms/op
     p(50,0000) =  19077,630 ms/op
     p(90,0000) =  19106,646 ms/op
     p(95,0000) =  19106,646 ms/op
     p(99,0000) =  19106,646 ms/op
     p(99,9000) =  19106,646 ms/op
     p(99,9900) =  19106,646 ms/op
     p(99,9990) =  19106,646 ms/op
     p(99,9999) =  19106,646 ms/op
    p(100,0000) =  19106,646 ms/op


# Run complete. Total time: 00:05:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest     10000000        remove    ss    8  19049,003 ± 142,978  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (10000000) = 19049.003057625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 22300,424 ms/op
# Warmup Iteration   2: 20863,003 ms/op
# Warmup Iteration   3: 19052,702 ms/op
# Warmup Iteration   4: 19937,421 ms/op
# Warmup Iteration   5: 20124,908 ms/op
# Warmup Iteration   6: 20138,067 ms/op
# Warmup Iteration   7: 20025,960 ms/op
# Warmup Iteration   8: 20097,552 ms/op
# Warmup Iteration   9: 20041,428 ms/op
# Warmup Iteration  10: 19989,029 ms/op
Iteration   1: 20068,792 ms/op
Iteration   2: 19998,677 ms/op
Iteration   3: 20093,037 ms/op
Iteration   4: 20074,442 ms/op
Iteration   5: 19989,663 ms/op
Iteration   6: 20039,085 ms/op
Iteration   7: 20070,914 ms/op
Iteration   8: 20031,592 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  20045,775 ±(99.9%) 71,649 ms/op

  Histogram, ms/op:
    [19900,000, 19912,500) = 0
    [19912,500, 19925,000) = 0
    [19925,000, 19937,500) = 0
    [19937,500, 19950,000) = 0
    [19950,000, 19962,500) = 0
    [19962,500, 19975,000) = 0
    [19975,000, 19987,500) = 0
    [19987,500, 20000,000) = 2
    [20000,000, 20012,500) = 0
    [20012,500, 20025,000) = 0
    [20025,000, 20037,500) = 1
    [20037,500, 20050,000) = 1
    [20050,000, 20062,500) = 0
    [20062,500, 20075,000) = 3
    [20075,000, 20087,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  19989,663 ms/op
     p(50,0000) =  20053,939 ms/op
     p(90,0000) =  20093,037 ms/op
     p(95,0000) =  20093,037 ms/op
     p(99,0000) =  20093,037 ms/op
     p(99,9000) =  20093,037 ms/op
     p(99,9900) =  20093,037 ms/op
     p(99,9990) =  20093,037 ms/op
     p(99,9999) =  20093,037 ms/op
    p(100,0000) =  20093,037 ms/op


# Run complete. Total time: 00:06:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest     10000000        remove    ss    8  20045,775 ± 71,649  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (10000000) = 20045.7753835
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21565,950 ms/op
# Warmup Iteration   2: 19507,943 ms/op
# Warmup Iteration   3: 17815,051 ms/op
# Warmup Iteration   4: 14207,483 ms/op
# Warmup Iteration   5: 13550,169 ms/op
# Warmup Iteration   6: 14353,154 ms/op
# Warmup Iteration   7: 14060,560 ms/op
# Warmup Iteration   8: 14434,576 ms/op
# Warmup Iteration   9: 14447,029 ms/op
# Warmup Iteration  10: 14196,460 ms/op
Iteration   1: 14375,466 ms/op
Iteration   2: 14512,348 ms/op
Iteration   3: 14547,229 ms/op
Iteration   4: 15454,285 ms/op
Iteration   5: 14645,421 ms/op
Iteration   6: 14589,108 ms/op
Iteration   7: 14903,224 ms/op
Iteration   8: 14748,550 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  14721,954 ±(99.9%) 641,458 ms/op

  Histogram, ms/op:
    [14000,000, 14125,000) = 0
    [14125,000, 14250,000) = 0
    [14250,000, 14375,000) = 0
    [14375,000, 14500,000) = 1
    [14500,000, 14625,000) = 3
    [14625,000, 14750,000) = 2
    [14750,000, 14875,000) = 0
    [14875,000, 15000,000) = 1
    [15000,000, 15125,000) = 0
    [15125,000, 15250,000) = 0
    [15250,000, 15375,000) = 0
    [15375,000, 15500,000) = 1
    [15500,000, 15625,000) = 0
    [15625,000, 15750,000) = 0
    [15750,000, 15875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  14375,466 ms/op
     p(50,0000) =  14617,264 ms/op
     p(90,0000) =  15454,285 ms/op
     p(95,0000) =  15454,285 ms/op
     p(99,0000) =  15454,285 ms/op
     p(99,9000) =  15454,285 ms/op
     p(99,9900) =  15454,285 ms/op
     p(99,9990) =  15454,285 ms/op
     p(99,9999) =  15454,285 ms/op
    p(100,0000) =  15454,285 ms/op


# Run complete. Total time: 00:04:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest     10000000        remove    ss    8  14721,954 ± 641,458  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (10000000) = 14721.953747625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15101,666 ms/op
# Warmup Iteration   2: 12459,326 ms/op
# Warmup Iteration   3: 12057,596 ms/op
# Warmup Iteration   4: 12315,891 ms/op
# Warmup Iteration   5: 11963,030 ms/op
# Warmup Iteration   6: 11962,599 ms/op
# Warmup Iteration   7: 11443,155 ms/op
# Warmup Iteration   8: 11925,196 ms/op
# Warmup Iteration   9: 11489,964 ms/op
# Warmup Iteration  10: 11582,363 ms/op
Iteration   1: 11393,557 ms/op
Iteration   2: 11242,561 ms/op
Iteration   3: 11801,879 ms/op
Iteration   4: 10955,529 ms/op
Iteration   5: 11175,482 ms/op
Iteration   6: 11726,872 ms/op
Iteration   7: 10512,447 ms/op
Iteration   8: 10888,945 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  11212,159 ±(99.9%) 826,425 ms/op

  Histogram, ms/op:
    [10000,000, 10125,000) = 0
    [10125,000, 10250,000) = 0
    [10250,000, 10375,000) = 0
    [10375,000, 10500,000) = 0
    [10500,000, 10625,000) = 1
    [10625,000, 10750,000) = 0
    [10750,000, 10875,000) = 0
    [10875,000, 11000,000) = 2
    [11000,000, 11125,000) = 0
    [11125,000, 11250,000) = 2
    [11250,000, 11375,000) = 0
    [11375,000, 11500,000) = 1
    [11500,000, 11625,000) = 0
    [11625,000, 11750,000) = 1
    [11750,000, 11875,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  10512,447 ms/op
     p(50,0000) =  11209,022 ms/op
     p(90,0000) =  11801,879 ms/op
     p(95,0000) =  11801,879 ms/op
     p(99,0000) =  11801,879 ms/op
     p(99,9000) =  11801,879 ms/op
     p(99,9900) =  11801,879 ms/op
     p(99,9990) =  11801,879 ms/op
     p(99,9999) =  11801,879 ms/op
    p(100,0000) =  11801,879 ms/op


# Run complete. Total time: 00:03:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest     10000000        remove    ss    8  11212,159 ± 826,425  ms/op
tests.maptests.identity_object.GsIdentityMapTest (10000000) = 11212.15912425
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 23543,646 ms/op
# Warmup Iteration   2: 23296,876 ms/op
# Warmup Iteration   3: 22220,609 ms/op
# Warmup Iteration   4: 21181,987 ms/op
# Warmup Iteration   5: 22098,372 ms/op
# Warmup Iteration   6: 20043,603 ms/op
# Warmup Iteration   7: 22308,710 ms/op
# Warmup Iteration   8: 19691,250 ms/op
# Warmup Iteration   9: 21770,789 ms/op
# Warmup Iteration  10: 19421,421 ms/op
Iteration   1: 18861,662 ms/op
Iteration   2: 16133,230 ms/op
Iteration   3: 16141,835 ms/op
Iteration   4: 16424,425 ms/op
Iteration   5: 16362,156 ms/op
Iteration   6: 16236,489 ms/op
Iteration   7: 15818,528 ms/op
Iteration   8: 15809,284 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  16473,451 ±(99.9%) 1894,173 ms/op

  Histogram, ms/op:
    [15000,000, 15250,000) = 0
    [15250,000, 15500,000) = 0
    [15500,000, 15750,000) = 0
    [15750,000, 16000,000) = 2
    [16000,000, 16250,000) = 3
    [16250,000, 16500,000) = 2
    [16500,000, 16750,000) = 0
    [16750,000, 17000,000) = 0
    [17000,000, 17250,000) = 0
    [17250,000, 17500,000) = 0
    [17500,000, 17750,000) = 0
    [17750,000, 18000,000) = 0
    [18000,000, 18250,000) = 0
    [18250,000, 18500,000) = 0
    [18500,000, 18750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  15809,284 ms/op
     p(50,0000) =  16189,162 ms/op
     p(90,0000) =  18861,662 ms/op
     p(95,0000) =  18861,662 ms/op
     p(99,0000) =  18861,662 ms/op
     p(99,9000) =  18861,662 ms/op
     p(99,9900) =  18861,662 ms/op
     p(99,9990) =  18861,662 ms/op
     p(99,9999) =  18861,662 ms/op
    p(100,0000) =  18861,662 ms/op


# Run complete. Total time: 00:05:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest     10000000        remove    ss    8  16473,451 ± 1894,173  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (10000000) = 16473.450983000002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 21323,126 ms/op
# Warmup Iteration   2: 19253,549 ms/op
# Warmup Iteration   3: 17719,006 ms/op
# Warmup Iteration   4: 14536,722 ms/op
# Warmup Iteration   5: 13684,687 ms/op
# Warmup Iteration   6: 13432,072 ms/op
# Warmup Iteration   7: 12964,730 ms/op
# Warmup Iteration   8: 13028,388 ms/op
# Warmup Iteration   9: 13064,240 ms/op
# Warmup Iteration  10: 12935,046 ms/op
Iteration   1: 13032,553 ms/op
Iteration   2: 13080,575 ms/op
Iteration   3: 12961,241 ms/op
Iteration   4: 12964,279 ms/op
Iteration   5: 12987,958 ms/op
Iteration   6: 13024,791 ms/op
Iteration   7: 13185,169 ms/op
Iteration   8: 13169,377 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13050,743 ±(99.9%) 167,100 ms/op

  Histogram, ms/op:
    [12900,000, 12925,000) = 0
    [12925,000, 12950,000) = 0
    [12950,000, 12975,000) = 2
    [12975,000, 13000,000) = 1
    [13000,000, 13025,000) = 1
    [13025,000, 13050,000) = 1
    [13050,000, 13075,000) = 0
    [13075,000, 13100,000) = 1
    [13100,000, 13125,000) = 0
    [13125,000, 13150,000) = 0
    [13150,000, 13175,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  12961,241 ms/op
     p(50,0000) =  13028,672 ms/op
     p(90,0000) =  13185,169 ms/op
     p(95,0000) =  13185,169 ms/op
     p(99,0000) =  13185,169 ms/op
     p(99,9000) =  13185,169 ms/op
     p(99,9900) =  13185,169 ms/op
     p(99,9990) =  13185,169 ms/op
     p(99,9999) =  13185,169 ms/op
    p(100,0000) =  13185,169 ms/op


# Run complete. Total time: 00:04:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest     10000000        remove    ss    8  13050,743 ± 167,100  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (10000000) = 13050.74267325
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 16784,362 ms/op
# Warmup Iteration   2: 15022,710 ms/op
# Warmup Iteration   3: 14647,181 ms/op
# Warmup Iteration   4: 13894,418 ms/op
# Warmup Iteration   5: 14960,152 ms/op
# Warmup Iteration   6: 15016,048 ms/op
# Warmup Iteration   7: 14972,861 ms/op
# Warmup Iteration   8: 14939,216 ms/op
# Warmup Iteration   9: 15016,708 ms/op
# Warmup Iteration  10: 15010,887 ms/op
Iteration   1: 14853,931 ms/op
Iteration   2: 14918,884 ms/op
Iteration   3: 14996,076 ms/op
Iteration   4: 14943,149 ms/op
Iteration   5: 14943,964 ms/op
Iteration   6: 14915,808 ms/op
Iteration   7: 14995,793 ms/op
Iteration   8: 15099,176 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  14958,348 ±(99.9%) 139,692 ms/op

  Histogram, ms/op:
    [14800,000, 14825,000) = 0
    [14825,000, 14850,000) = 0
    [14850,000, 14875,000) = 1
    [14875,000, 14900,000) = 0
    [14900,000, 14925,000) = 2
    [14925,000, 14950,000) = 2
    [14950,000, 14975,000) = 0
    [14975,000, 15000,000) = 2
    [15000,000, 15025,000) = 0
    [15025,000, 15050,000) = 0
    [15050,000, 15075,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  14853,931 ms/op
     p(50,0000) =  14943,557 ms/op
     p(90,0000) =  15099,176 ms/op
     p(95,0000) =  15099,176 ms/op
     p(99,0000) =  15099,176 ms/op
     p(99,9000) =  15099,176 ms/op
     p(99,9900) =  15099,176 ms/op
     p(99,9990) =  15099,176 ms/op
     p(99,9999) =  15099,176 ms/op
    p(100,0000) =  15099,176 ms/op


# Run complete. Total time: 00:04:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest     10000000        remove    ss    8  14958,348 ± 139,692  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (10000000) = 14958.34766325
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 28366,731 ms/op
# Warmup Iteration   2: 25691,498 ms/op
# Warmup Iteration   3: 21945,267 ms/op
# Warmup Iteration   4: 19108,222 ms/op
# Warmup Iteration   5: 18738,513 ms/op
# Warmup Iteration   6: 18595,161 ms/op
# Warmup Iteration   7: 18672,662 ms/op
# Warmup Iteration   8: 18428,728 ms/op
# Warmup Iteration   9: 18434,293 ms/op
# Warmup Iteration  10: 18542,204 ms/op
Iteration   1: 18428,141 ms/op
Iteration   2: 18400,238 ms/op
Iteration   3: 18448,376 ms/op
Iteration   4: 18404,545 ms/op
Iteration   5: 18450,676 ms/op
Iteration   6: 18456,115 ms/op
Iteration   7: 18506,126 ms/op
Iteration   8: 18476,163 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18446,297 ±(99.9%) 67,737 ms/op

  Histogram, ms/op:
    [18400,000, 18412,500) = 2
    [18412,500, 18425,000) = 0
    [18425,000, 18437,500) = 1
    [18437,500, 18450,000) = 1
    [18450,000, 18462,500) = 2
    [18462,500, 18475,000) = 0
    [18475,000, 18487,500) = 1
    [18487,500, 18500,000) = 0
    [18500,000, 18512,500) = 1
    [18512,500, 18525,000) = 0
    [18525,000, 18537,500) = 0
    [18537,500, 18550,000) = 0
    [18550,000, 18562,500) = 0
    [18562,500, 18575,000) = 0
    [18575,000, 18587,500) = 0

  Percentiles, ms/op:
      p(0,0000) =  18400,238 ms/op
     p(50,0000) =  18449,526 ms/op
     p(90,0000) =  18506,126 ms/op
     p(95,0000) =  18506,126 ms/op
     p(99,0000) =  18506,126 ms/op
     p(99,9000) =  18506,126 ms/op
     p(99,9900) =  18506,126 ms/op
     p(99,9990) =  18506,126 ms/op
     p(99,9999) =  18506,126 ms/op
    p(100,0000) =  18506,126 ms/op


# Run complete. Total time: 00:05:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score    Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest     10000000        remove    ss    8  18446,297 ± 67,737  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (10000000) = 18446.297358375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each, 10 calls per op
# Measurement: 8 iterations, single-shot each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 10000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27825,335 ms/op
# Warmup Iteration   2: 25669,759 ms/op
# Warmup Iteration   3: 21809,531 ms/op
# Warmup Iteration   4: 19324,715 ms/op
# Warmup Iteration   5: 18744,562 ms/op
# Warmup Iteration   6: 20228,289 ms/op
# Warmup Iteration   7: 20352,533 ms/op
# Warmup Iteration   8: 20437,764 ms/op
# Warmup Iteration   9: 20267,891 ms/op
# Warmup Iteration  10: 20385,542 ms/op
Iteration   1: 20422,858 ms/op
Iteration   2: 20433,762 ms/op
Iteration   3: 20269,911 ms/op
Iteration   4: 20419,017 ms/op
Iteration   5: 20390,786 ms/op
Iteration   6: 20276,221 ms/op
Iteration   7: 20443,112 ms/op
Iteration   8: 20559,529 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  20401,899 ±(99.9%) 179,406 ms/op

  Histogram, ms/op:
    [20200,000, 20225,000) = 0
    [20225,000, 20250,000) = 0
    [20250,000, 20275,000) = 1
    [20275,000, 20300,000) = 1
    [20300,000, 20325,000) = 0
    [20325,000, 20350,000) = 0
    [20350,000, 20375,000) = 0
    [20375,000, 20400,000) = 1
    [20400,000, 20425,000) = 2
    [20425,000, 20450,000) = 2
    [20450,000, 20475,000) = 0
    [20475,000, 20500,000) = 0
    [20500,000, 20525,000) = 0
    [20525,000, 20550,000) = 0
    [20550,000, 20575,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  20269,911 ms/op
     p(50,0000) =  20420,937 ms/op
     p(90,0000) =  20559,529 ms/op
     p(95,0000) =  20559,529 ms/op
     p(99,0000) =  20559,529 ms/op
     p(99,9000) =  20559,529 ms/op
     p(99,9900) =  20559,529 ms/op
     p(99,9990) =  20559,529 ms/op
     p(99,9999) =  20559,529 ms/op
    p(100,0000) =  20559,529 ms/op


# Run complete. Total time: 00:06:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest     10000000        remove    ss    8  20401,899 ± 179,406  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (10000000) = 20401.899450749996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap1Test, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14798,792 ms/op
# Warmup Iteration   2: 15272,256 ms/op
# Warmup Iteration   3: 15345,651 ms/op
# Warmup Iteration   4: 15187,843 ms/op
# Warmup Iteration   5: 15249,469 ms/op
# Warmup Iteration   6: 15674,825 ms/op
# Warmup Iteration   7: 15225,418 ms/op
# Warmup Iteration   8: 15188,009 ms/op
# Warmup Iteration   9: 15411,654 ms/op
# Warmup Iteration  10: 15298,399 ms/op
Iteration   1: 15194,748 ms/op
Iteration   2: 15111,529 ms/op
Iteration   3: 15195,698 ms/op
Iteration   4: 15359,311 ms/op
Iteration   5: 15159,287 ms/op
Iteration   6: 15289,290 ms/op
Iteration   7: 15034,784 ms/op
Iteration   8: 15045,443 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  15173,761 ±(99.9%) 215,056 ms/op

  Histogram, ms/op:
    [15000,000, 15025,000) = 0
    [15025,000, 15050,000) = 2
    [15050,000, 15075,000) = 0
    [15075,000, 15100,000) = 0
    [15100,000, 15125,000) = 1
    [15125,000, 15150,000) = 0
    [15150,000, 15175,000) = 1
    [15175,000, 15200,000) = 2
    [15200,000, 15225,000) = 0
    [15225,000, 15250,000) = 0
    [15250,000, 15275,000) = 0
    [15275,000, 15300,000) = 1
    [15300,000, 15325,000) = 0
    [15325,000, 15350,000) = 0
    [15350,000, 15375,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  15034,784 ms/op
     p(50,0000) =  15177,018 ms/op
     p(90,0000) =  15359,311 ms/op
     p(95,0000) =  15359,311 ms/op
     p(99,0000) =  15359,311 ms/op
     p(99,9000) =  15359,311 ms/op
     p(99,9900) =  15359,311 ms/op
     p(99,9990) =  15359,311 ms/op
     p(99,9999) =  15359,311 ms/op
    p(100,0000) =  15359,311 ms/op


# Run complete. Total time: 00:04:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap1Test    100000000        remove    ss    8  15173,761 ± 215,056  ms/op
tests.maptests.article_examples.IntIntMap1Test (100000000) = 15173.761122375001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap2Test, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14539,205 ms/op
# Warmup Iteration   2: 13666,627 ms/op
# Warmup Iteration   3: 14530,864 ms/op
# Warmup Iteration   4: 14509,617 ms/op
# Warmup Iteration   5: 14267,340 ms/op
# Warmup Iteration   6: 14412,718 ms/op
# Warmup Iteration   7: 14166,319 ms/op
# Warmup Iteration   8: 14339,247 ms/op
# Warmup Iteration   9: 14270,146 ms/op
# Warmup Iteration  10: 14433,949 ms/op
Iteration   1: 14286,714 ms/op
Iteration   2: 14906,221 ms/op
Iteration   3: 14569,855 ms/op
Iteration   4: 14297,689 ms/op
Iteration   5: 13611,705 ms/op
Iteration   6: 13632,842 ms/op
Iteration   7: 14344,839 ms/op
Iteration   8: 14321,529 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  14246,424 ±(99.9%) 836,185 ms/op

  Histogram, ms/op:
    [13000,000, 13125,000) = 0
    [13125,000, 13250,000) = 0
    [13250,000, 13375,000) = 0
    [13375,000, 13500,000) = 0
    [13500,000, 13625,000) = 1
    [13625,000, 13750,000) = 1
    [13750,000, 13875,000) = 0
    [13875,000, 14000,000) = 0
    [14000,000, 14125,000) = 0
    [14125,000, 14250,000) = 0
    [14250,000, 14375,000) = 4
    [14375,000, 14500,000) = 0
    [14500,000, 14625,000) = 1
    [14625,000, 14750,000) = 0
    [14750,000, 14875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13611,705 ms/op
     p(50,0000) =  14309,609 ms/op
     p(90,0000) =  14906,221 ms/op
     p(95,0000) =  14906,221 ms/op
     p(99,0000) =  14906,221 ms/op
     p(99,9000) =  14906,221 ms/op
     p(99,9900) =  14906,221 ms/op
     p(99,9990) =  14906,221 ms/op
     p(99,9999) =  14906,221 ms/op
    p(100,0000) =  14906,221 ms/op


# Run complete. Total time: 00:04:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap2Test    100000000        remove    ss    8  14246,424 ± 836,185  ms/op
tests.maptests.article_examples.IntIntMap2Test (100000000) = 14246.424178000001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap3Test, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9302,177 ms/op
# Warmup Iteration   2: 8761,199 ms/op
# Warmup Iteration   3: 8765,693 ms/op
# Warmup Iteration   4: 9102,102 ms/op
# Warmup Iteration   5: 8607,847 ms/op
# Warmup Iteration   6: 8534,562 ms/op
# Warmup Iteration   7: 8659,920 ms/op
# Warmup Iteration   8: 8786,605 ms/op
# Warmup Iteration   9: 8567,783 ms/op
# Warmup Iteration  10: 8619,218 ms/op
Iteration   1: 8748,073 ms/op
Iteration   2: 8631,058 ms/op
Iteration   3: 8497,344 ms/op
Iteration   4: 8705,664 ms/op
Iteration   5: 8688,675 ms/op
Iteration   6: 8709,158 ms/op
Iteration   7: 8597,617 ms/op
Iteration   8: 8768,216 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8668,225 ±(99.9%) 170,150 ms/op

  Histogram, ms/op:
    [8400,000, 8425,000) = 0
    [8425,000, 8450,000) = 0
    [8450,000, 8475,000) = 0
    [8475,000, 8500,000) = 1
    [8500,000, 8525,000) = 0
    [8525,000, 8550,000) = 0
    [8550,000, 8575,000) = 0
    [8575,000, 8600,000) = 1
    [8600,000, 8625,000) = 0
    [8625,000, 8650,000) = 1
    [8650,000, 8675,000) = 0
    [8675,000, 8700,000) = 1
    [8700,000, 8725,000) = 2
    [8725,000, 8750,000) = 1
    [8750,000, 8775,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8497,344 ms/op
     p(50,0000) =   8697,169 ms/op
     p(90,0000) =   8768,216 ms/op
     p(95,0000) =   8768,216 ms/op
     p(99,0000) =   8768,216 ms/op
     p(99,9000) =   8768,216 ms/op
     p(99,9900) =   8768,216 ms/op
     p(99,9990) =   8768,216 ms/op
     p(99,9999) =   8768,216 ms/op
    p(100,0000) =   8768,216 ms/op


# Run complete. Total time: 00:02:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap3Test    100000000        remove    ss    8  8668,225 ± 170,150  ms/op
tests.maptests.article_examples.IntIntMap3Test (100000000) = 8668.225411625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4Test, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6520,381 ms/op
# Warmup Iteration   2: 6096,867 ms/op
# Warmup Iteration   3: 6106,353 ms/op
# Warmup Iteration   4: 6119,370 ms/op
# Warmup Iteration   5: 6145,259 ms/op
# Warmup Iteration   6: 6057,113 ms/op
# Warmup Iteration   7: 6033,308 ms/op
# Warmup Iteration   8: 6168,231 ms/op
# Warmup Iteration   9: 6149,741 ms/op
# Warmup Iteration  10: 6073,622 ms/op
Iteration   1: 6104,197 ms/op
Iteration   2: 6122,155 ms/op
Iteration   3: 6094,290 ms/op
Iteration   4: 6115,997 ms/op
Iteration   5: 6054,699 ms/op
Iteration   6: 6163,268 ms/op
Iteration   7: 6134,037 ms/op
Iteration   8: 6047,702 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6104,543 ±(99.9%) 74,333 ms/op

  Histogram, ms/op:
    [6000,000, 6012,500) = 0
    [6012,500, 6025,000) = 0
    [6025,000, 6037,500) = 0
    [6037,500, 6050,000) = 1
    [6050,000, 6062,500) = 1
    [6062,500, 6075,000) = 0
    [6075,000, 6087,500) = 0
    [6087,500, 6100,000) = 1
    [6100,000, 6112,500) = 1
    [6112,500, 6125,000) = 2
    [6125,000, 6137,500) = 1
    [6137,500, 6150,000) = 0
    [6150,000, 6162,500) = 0
    [6162,500, 6175,000) = 1
    [6175,000, 6187,500) = 0

  Percentiles, ms/op:
      p(0,0000) =   6047,702 ms/op
     p(50,0000) =   6110,097 ms/op
     p(90,0000) =   6163,268 ms/op
     p(95,0000) =   6163,268 ms/op
     p(99,0000) =   6163,268 ms/op
     p(99,9000) =   6163,268 ms/op
     p(99,9900) =   6163,268 ms/op
     p(99,9990) =   6163,268 ms/op
     p(99,9999) =   6163,268 ms/op
    p(100,0000) =   6163,268 ms/op


# Run complete. Total time: 00:01:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4Test    100000000        remove    ss    8  6104,543 ± 74,333  ms/op
tests.maptests.article_examples.IntIntMap4Test (100000000) = 6104.543180375001
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.IntIntMap4aTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6543,294 ms/op
# Warmup Iteration   2: 6259,211 ms/op
# Warmup Iteration   3: 6163,937 ms/op
# Warmup Iteration   4: 6259,142 ms/op
# Warmup Iteration   5: 6145,297 ms/op
# Warmup Iteration   6: 6115,329 ms/op
# Warmup Iteration   7: 6080,125 ms/op
# Warmup Iteration   8: 6076,237 ms/op
# Warmup Iteration   9: 6187,836 ms/op
# Warmup Iteration  10: 6120,686 ms/op
Iteration   1: 6100,965 ms/op
Iteration   2: 6092,509 ms/op
Iteration   3: 6148,725 ms/op
Iteration   4: 6085,549 ms/op
Iteration   5: 6099,869 ms/op
Iteration   6: 6214,994 ms/op
Iteration   7: 6126,787 ms/op
Iteration   8: 6121,522 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6123,865 ±(99.9%) 80,758 ms/op

  Histogram, ms/op:
    [6000,000, 6025,000) = 0
    [6025,000, 6050,000) = 0
    [6050,000, 6075,000) = 0
    [6075,000, 6100,000) = 3
    [6100,000, 6125,000) = 2
    [6125,000, 6150,000) = 2
    [6150,000, 6175,000) = 0
    [6175,000, 6200,000) = 0
    [6200,000, 6225,000) = 1
    [6225,000, 6250,000) = 0
    [6250,000, 6275,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6085,549 ms/op
     p(50,0000) =   6111,243 ms/op
     p(90,0000) =   6214,994 ms/op
     p(95,0000) =   6214,994 ms/op
     p(99,0000) =   6214,994 ms/op
     p(99,9000) =   6214,994 ms/op
     p(99,9900) =   6214,994 ms/op
     p(99,9990) =   6214,994 ms/op
     p(99,9999) =   6214,994 ms/op
    p(100,0000) =   6214,994 ms/op


# Run complete. Total time: 00:01:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.IntIntMap4aTest    100000000        remove    ss    8  6123,865 ± 80,758  ms/op
tests.maptests.article_examples.IntIntMap4aTest (100000000) = 6123.865029125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.FastUtilMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8806,945 ms/op
# Warmup Iteration   2: 8468,165 ms/op
# Warmup Iteration   3: 8310,841 ms/op
# Warmup Iteration   4: 8205,260 ms/op
# Warmup Iteration   5: 8426,261 ms/op
# Warmup Iteration   6: 8296,036 ms/op
# Warmup Iteration   7: 8177,461 ms/op
# Warmup Iteration   8: 8484,622 ms/op
# Warmup Iteration   9: 8180,361 ms/op
# Warmup Iteration  10: 8355,561 ms/op
Iteration   1: 8315,995 ms/op
Iteration   2: 8432,945 ms/op
Iteration   3: 8503,294 ms/op
Iteration   4: 8273,906 ms/op
Iteration   5: 8343,531 ms/op
Iteration   6: 8189,172 ms/op
Iteration   7: 8232,210 ms/op
Iteration   8: 8243,326 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8316,797 ±(99.9%) 203,974 ms/op

  Histogram, ms/op:
    [8100,000, 8150,000) = 0
    [8150,000, 8200,000) = 1
    [8200,000, 8250,000) = 2
    [8250,000, 8300,000) = 1
    [8300,000, 8350,000) = 2
    [8350,000, 8400,000) = 0
    [8400,000, 8450,000) = 1
    [8450,000, 8500,000) = 0
    [8500,000, 8550,000) = 1

  Percentiles, ms/op:
      p(0,0000) =   8189,172 ms/op
     p(50,0000) =   8294,951 ms/op
     p(90,0000) =   8503,294 ms/op
     p(95,0000) =   8503,294 ms/op
     p(99,0000) =   8503,294 ms/op
     p(99,9000) =   8503,294 ms/op
     p(99,9900) =   8503,294 ms/op
     p(99,9990) =   8503,294 ms/op
     p(99,9999) =   8503,294 ms/op
    p(100,0000) =   8503,294 ms/op


# Run complete. Total time: 00:02:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.FastUtilMapTest    100000000        remove    ss    8  8316,797 ± 203,974  ms/op
tests.maptests.primitive.FastUtilMapTest (100000000) = 8316.797408875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.GsMutableMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8578,215 ms/op
# Warmup Iteration   2: 8213,874 ms/op
# Warmup Iteration   3: 8314,579 ms/op
# Warmup Iteration   4: 8282,213 ms/op
# Warmup Iteration   5: 8278,193 ms/op
# Warmup Iteration   6: 8198,300 ms/op
# Warmup Iteration   7: 8240,431 ms/op
# Warmup Iteration   8: 8293,859 ms/op
# Warmup Iteration   9: 8212,792 ms/op
# Warmup Iteration  10: 8210,886 ms/op
Iteration   1: 8339,815 ms/op
Iteration   2: 8198,954 ms/op
Iteration   3: 8256,481 ms/op
Iteration   4: 8190,275 ms/op
Iteration   5: 8268,265 ms/op
Iteration   6: 8261,667 ms/op
Iteration   7: 8242,610 ms/op
Iteration   8: 8211,348 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   8246,177 ±(99.9%) 91,931 ms/op

  Histogram, ms/op:
    [8100,000, 8125,000) = 0
    [8125,000, 8150,000) = 0
    [8150,000, 8175,000) = 0
    [8175,000, 8200,000) = 2
    [8200,000, 8225,000) = 1
    [8225,000, 8250,000) = 1
    [8250,000, 8275,000) = 3
    [8275,000, 8300,000) = 0
    [8300,000, 8325,000) = 0
    [8325,000, 8350,000) = 1
    [8350,000, 8375,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   8190,275 ms/op
     p(50,0000) =   8249,546 ms/op
     p(90,0000) =   8339,815 ms/op
     p(95,0000) =   8339,815 ms/op
     p(99,0000) =   8339,815 ms/op
     p(99,9000) =   8339,815 ms/op
     p(99,9900) =   8339,815 ms/op
     p(99,9990) =   8339,815 ms/op
     p(99,9999) =   8339,815 ms/op
    p(100,0000) =   8339,815 ms/op


# Run complete. Total time: 00:02:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score    Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.GsMutableMapTest    100000000        remove    ss    8  8246,177 ± 91,931  ms/op
tests.maptests.primitive.GsMutableMapTest (100000000) = 8246.17707625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.KolobokeMutableMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 6768,101 ms/op
# Warmup Iteration   2: 6490,492 ms/op
# Warmup Iteration   3: 6557,777 ms/op
# Warmup Iteration   4: 6505,539 ms/op
# Warmup Iteration   5: 6532,425 ms/op
# Warmup Iteration   6: 6480,780 ms/op
# Warmup Iteration   7: 6546,286 ms/op
# Warmup Iteration   8: 6595,997 ms/op
# Warmup Iteration   9: 6583,752 ms/op
# Warmup Iteration  10: 6838,831 ms/op
Iteration   1: 6462,162 ms/op
Iteration   2: 6509,777 ms/op
Iteration   3: 6568,438 ms/op
Iteration   4: 6492,002 ms/op
Iteration   5: 6502,071 ms/op
Iteration   6: 6592,409 ms/op
Iteration   7: 6639,649 ms/op
Iteration   8: 6588,954 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   6544,433 ±(99.9%) 117,505 ms/op

  Histogram, ms/op:
    [6400,000, 6425,000) = 0
    [6425,000, 6450,000) = 0
    [6450,000, 6475,000) = 1
    [6475,000, 6500,000) = 1
    [6500,000, 6525,000) = 2
    [6525,000, 6550,000) = 0
    [6550,000, 6575,000) = 1
    [6575,000, 6600,000) = 2
    [6600,000, 6625,000) = 0
    [6625,000, 6650,000) = 1
    [6650,000, 6675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   6462,162 ms/op
     p(50,0000) =   6539,108 ms/op
     p(90,0000) =   6639,649 ms/op
     p(95,0000) =   6639,649 ms/op
     p(99,0000) =   6639,649 ms/op
     p(99,9000) =   6639,649 ms/op
     p(99,9900) =   6639,649 ms/op
     p(99,9990) =   6639,649 ms/op
     p(99,9999) =   6639,649 ms/op
    p(100,0000) =   6639,649 ms/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.KolobokeMutableMapTest    100000000        remove    ss    8  6544,433 ± 117,505  ms/op
tests.maptests.primitive.KolobokeMutableMapTest (100000000) = 6544.4328675
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.HppcMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 8610,559 ms/op
# Warmup Iteration   2: 8162,257 ms/op
# Warmup Iteration   3: 7981,114 ms/op
# Warmup Iteration   4: 7979,138 ms/op
# Warmup Iteration   5: 8120,718 ms/op
# Warmup Iteration   6: 7979,079 ms/op
# Warmup Iteration   7: 7958,017 ms/op
# Warmup Iteration   8: 7912,162 ms/op
# Warmup Iteration   9: 7911,920 ms/op
# Warmup Iteration  10: 7968,912 ms/op
Iteration   1: 8085,309 ms/op
Iteration   2: 7890,467 ms/op
Iteration   3: 7938,838 ms/op
Iteration   4: 7995,223 ms/op
Iteration   5: 8198,408 ms/op
Iteration   6: 7965,527 ms/op
Iteration   7: 7930,574 ms/op
Iteration   8: 7903,891 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =   7988,530 ±(99.9%) 200,005 ms/op

  Histogram, ms/op:
    [7800,000, 7825,000) = 0
    [7825,000, 7850,000) = 0
    [7850,000, 7875,000) = 0
    [7875,000, 7900,000) = 1
    [7900,000, 7925,000) = 1
    [7925,000, 7950,000) = 2
    [7950,000, 7975,000) = 1
    [7975,000, 8000,000) = 1
    [8000,000, 8025,000) = 0
    [8025,000, 8050,000) = 0
    [8050,000, 8075,000) = 0
    [8075,000, 8100,000) = 1
    [8100,000, 8125,000) = 0
    [8125,000, 8150,000) = 0
    [8150,000, 8175,000) = 0

  Percentiles, ms/op:
      p(0,0000) =   7890,467 ms/op
     p(50,0000) =   7952,182 ms/op
     p(90,0000) =   8198,408 ms/op
     p(95,0000) =   8198,408 ms/op
     p(99,0000) =   8198,408 ms/op
     p(99,9000) =   8198,408 ms/op
     p(99,9900) =   8198,408 ms/op
     p(99,9990) =   8198,408 ms/op
     p(99,9999) =   8198,408 ms/op
    p(100,0000) =   8198,408 ms/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt     Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.HppcMapTest    100000000        remove    ss    8  7988,530 ± 200,005  ms/op
tests.maptests.primitive.HppcMapTest (100000000) = 7988.52965925
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveJbMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19690,531 ms/op
# Warmup Iteration   2: 19530,078 ms/op
# Warmup Iteration   3: 19888,247 ms/op
# Warmup Iteration   4: 19637,194 ms/op
# Warmup Iteration   5: 19550,662 ms/op
# Warmup Iteration   6: 19609,293 ms/op
# Warmup Iteration   7: 19559,356 ms/op
# Warmup Iteration   8: 19495,778 ms/op
# Warmup Iteration   9: 19726,052 ms/op
# Warmup Iteration  10: 19687,363 ms/op
Iteration   1: 19585,323 ms/op
Iteration   2: 19643,495 ms/op
Iteration   3: 19542,460 ms/op
Iteration   4: 19717,952 ms/op
Iteration   5: 19703,997 ms/op
Iteration   6: 19569,631 ms/op
Iteration   7: 19708,253 ms/op
Iteration   8: 19621,148 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  19636,532 ±(99.9%) 130,394 ms/op

  Histogram, ms/op:
    [19500,000, 19525,000) = 0
    [19525,000, 19550,000) = 1
    [19550,000, 19575,000) = 1
    [19575,000, 19600,000) = 1
    [19600,000, 19625,000) = 1
    [19625,000, 19650,000) = 1
    [19650,000, 19675,000) = 0
    [19675,000, 19700,000) = 0
    [19700,000, 19725,000) = 3
    [19725,000, 19750,000) = 0
    [19750,000, 19775,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  19542,460 ms/op
     p(50,0000) =  19632,321 ms/op
     p(90,0000) =  19717,952 ms/op
     p(95,0000) =  19717,952 ms/op
     p(99,0000) =  19717,952 ms/op
     p(99,9000) =  19717,952 ms/op
     p(99,9900) =  19717,952 ms/op
     p(99,9990) =  19717,952 ms/op
     p(99,9999) =  19717,952 ms/op
    p(100,0000) =  19717,952 ms/op


# Run complete. Total time: 00:05:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveJbMapTest    100000000        remove    ss    8  19636,532 ± 130,394  ms/op
tests.maptests.primitive.TroveJbMapTest (100000000) = 19636.5323335
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.primitive.TroveMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18803,893 ms/op
# Warmup Iteration   2: 18221,816 ms/op
# Warmup Iteration   3: 18564,192 ms/op
# Warmup Iteration   4: 18553,987 ms/op
# Warmup Iteration   5: 18417,421 ms/op
# Warmup Iteration   6: 18495,355 ms/op
# Warmup Iteration   7: 18415,775 ms/op
# Warmup Iteration   8: 18558,340 ms/op
# Warmup Iteration   9: 18419,923 ms/op
# Warmup Iteration  10: 18458,827 ms/op
Iteration   1: 18631,990 ms/op
Iteration   2: 18309,332 ms/op
Iteration   3: 18508,900 ms/op
Iteration   4: 18443,407 ms/op
Iteration   5: 18643,043 ms/op
Iteration   6: 18596,398 ms/op
Iteration   7: 18633,094 ms/op
Iteration   8: 18581,729 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18543,487 ±(99.9%) 223,997 ms/op

  Histogram, ms/op:
    [18300,000, 18325,000) = 1
    [18325,000, 18350,000) = 0
    [18350,000, 18375,000) = 0
    [18375,000, 18400,000) = 0
    [18400,000, 18425,000) = 0
    [18425,000, 18450,000) = 1
    [18450,000, 18475,000) = 0
    [18475,000, 18500,000) = 0
    [18500,000, 18525,000) = 1
    [18525,000, 18550,000) = 0
    [18550,000, 18575,000) = 0
    [18575,000, 18600,000) = 2
    [18600,000, 18625,000) = 0
    [18625,000, 18650,000) = 3
    [18650,000, 18675,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  18309,332 ms/op
     p(50,0000) =  18589,063 ms/op
     p(90,0000) =  18643,043 ms/op
     p(95,0000) =  18643,043 ms/op
     p(99,0000) =  18643,043 ms/op
     p(99,9000) =  18643,043 ms/op
     p(99,9900) =  18643,043 ms/op
     p(99,9990) =  18643,043 ms/op
     p(99,9999) =  18643,043 ms/op
    p(100,0000) =  18643,043 ms/op


# Run complete. Total time: 00:05:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.primitive.TroveMapTest    100000000        remove    ss    8  18543,487 ± 223,997  ms/op
tests.maptests.primitive.TroveMapTest (100000000) = 18543.486530625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.FastUtilObjMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 26810,476 ms/op
# Warmup Iteration   2: 26048,132 ms/op
# Warmup Iteration   3: 30370,532 ms/op
# Warmup Iteration   4: 25985,999 ms/op
# Warmup Iteration   5: 30012,555 ms/op
# Warmup Iteration   6: 26042,465 ms/op
# Warmup Iteration   7: 30040,522 ms/op
# Warmup Iteration   8: 26116,973 ms/op
# Warmup Iteration   9: 29857,994 ms/op
# Warmup Iteration  10: 26101,817 ms/op
Iteration   1: 30002,439 ms/op
Iteration   2: 26189,919 ms/op
Iteration   3: 29917,932 ms/op
Iteration   4: 26091,169 ms/op
Iteration   5: 30084,985 ms/op
Iteration   6: 26086,889 ms/op
Iteration   7: 30100,771 ms/op
Iteration   8: 26276,947 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  28093,882 ±(99.9%) 3953,350 ms/op

  Histogram, ms/op:
    [26000,000, 26500,000) = 4
    [26500,000, 27000,000) = 0
    [27000,000, 27500,000) = 0
    [27500,000, 28000,000) = 0
    [28000,000, 28500,000) = 0
    [28500,000, 29000,000) = 0
    [29000,000, 29500,000) = 0
    [29500,000, 30000,000) = 1
    [30000,000, 30500,000) = 3

  Percentiles, ms/op:
      p(0,0000) =  26086,889 ms/op
     p(50,0000) =  28097,440 ms/op
     p(90,0000) =  30100,771 ms/op
     p(95,0000) =  30100,771 ms/op
     p(99,0000) =  30100,771 ms/op
     p(99,9000) =  30100,771 ms/op
     p(99,9900) =  30100,771 ms/op
     p(99,9990) =  30100,771 ms/op
     p(99,9999) =  30100,771 ms/op
    p(100,0000) =  30100,771 ms/op


# Run complete. Total time: 00:08:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.FastUtilObjMapTest    100000000        remove    ss    8  28093,882 ± 3953,350  ms/op
tests.maptests.object.FastUtilObjMapTest (100000000) = 28093.881539125003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeMutableObjTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 26343,792 ms/op
# Warmup Iteration   2: 25949,936 ms/op
# Warmup Iteration   3: 26566,022 ms/op
# Warmup Iteration   4: 32244,075 ms/op
# Warmup Iteration   5: 25737,509 ms/op
# Warmup Iteration   6: 26396,936 ms/op
# Warmup Iteration   7: 21512,967 ms/op
# Warmup Iteration   8: 24874,229 ms/op
# Warmup Iteration   9: 21546,146 ms/op
# Warmup Iteration  10: 21634,656 ms/op
Iteration   1: 22048,367 ms/op
Iteration   2: 21920,300 ms/op
Iteration   3: 25075,863 ms/op
Iteration   4: 21784,004 ms/op
Iteration   5: 21719,500 ms/op
Iteration   6: 21705,303 ms/op
Iteration   7: 21656,050 ms/op
Iteration   8: 24956,259 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22608,206 ±(99.9%) 2852,467 ms/op

  Histogram, ms/op:
    [21000,000, 21500,000) = 0
    [21500,000, 22000,000) = 5
    [22000,000, 22500,000) = 1
    [22500,000, 23000,000) = 0
    [23000,000, 23500,000) = 0
    [23500,000, 24000,000) = 0
    [24000,000, 24500,000) = 0
    [24500,000, 25000,000) = 1
    [25000,000, 25500,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  21656,050 ms/op
     p(50,0000) =  21852,152 ms/op
     p(90,0000) =  25075,863 ms/op
     p(95,0000) =  25075,863 ms/op
     p(99,0000) =  25075,863 ms/op
     p(99,9000) =  25075,863 ms/op
     p(99,9900) =  25075,863 ms/op
     p(99,9990) =  25075,863 ms/op
     p(99,9999) =  25075,863 ms/op
    p(100,0000) =  25075,863 ms/op


# Run complete. Total time: 00:07:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeMutableObjTest    100000000        remove    ss    8  22608,206 ± 2852,467  ms/op
tests.maptests.object.KolobokeMutableObjTest (100000000) = 22608.205644
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeNotNullKeyObjTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27106,209 ms/op
# Warmup Iteration   2: 25673,065 ms/op
# Warmup Iteration   3: 25887,560 ms/op
# Warmup Iteration   4: 31614,532 ms/op
# Warmup Iteration   5: 25480,735 ms/op
# Warmup Iteration   6: 26003,538 ms/op
# Warmup Iteration   7: 21521,668 ms/op
# Warmup Iteration   8: 24669,875 ms/op
# Warmup Iteration   9: 21413,384 ms/op
# Warmup Iteration  10: 21573,486 ms/op
Iteration   1: 21812,297 ms/op
Iteration   2: 21875,691 ms/op
Iteration   3: 24776,766 ms/op
Iteration   4: 21569,997 ms/op
Iteration   5: 21523,341 ms/op
Iteration   6: 21583,633 ms/op
Iteration   7: 21546,162 ms/op
Iteration   8: 24867,729 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22444,452 ±(99.9%) 2817,083 ms/op

  Histogram, ms/op:
    [21000,000, 21250,000) = 0
    [21250,000, 21500,000) = 0
    [21500,000, 21750,000) = 4
    [21750,000, 22000,000) = 2
    [22000,000, 22250,000) = 0
    [22250,000, 22500,000) = 0
    [22500,000, 22750,000) = 0
    [22750,000, 23000,000) = 0
    [23000,000, 23250,000) = 0
    [23250,000, 23500,000) = 0
    [23500,000, 23750,000) = 0
    [23750,000, 24000,000) = 0
    [24000,000, 24250,000) = 0
    [24250,000, 24500,000) = 0
    [24500,000, 24750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  21523,341 ms/op
     p(50,0000) =  21697,965 ms/op
     p(90,0000) =  24867,729 ms/op
     p(95,0000) =  24867,729 ms/op
     p(99,0000) =  24867,729 ms/op
     p(99,9000) =  24867,729 ms/op
     p(99,9900) =  24867,729 ms/op
     p(99,9990) =  24867,729 ms/op
     p(99,9999) =  24867,729 ms/op
    p(100,0000) =  24867,729 ms/op


# Run complete. Total time: 00:07:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeNotNullKeyObjTest    100000000        remove    ss    8  22444,452 ± 2817,083  ms/op
tests.maptests.object.KolobokeNotNullKeyObjTest (100000000) = 22444.4519815
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.KolobokeHashCodeMixingObjTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27062,214 ms/op
# Warmup Iteration   2: 26806,630 ms/op
# Warmup Iteration   3: 30868,037 ms/op
# Warmup Iteration   4: 26536,893 ms/op
# Warmup Iteration   5: 26535,541 ms/op
# Warmup Iteration   6: 22047,871 ms/op
# Warmup Iteration   7: 22121,752 ms/op
# Warmup Iteration   8: 22381,466 ms/op
# Warmup Iteration   9: 22440,520 ms/op
# Warmup Iteration  10: 25433,651 ms/op
Iteration   1: 22114,645 ms/op
Iteration   2: 22191,952 ms/op
Iteration   3: 22153,329 ms/op
Iteration   4: 22037,241 ms/op
Iteration   5: 25255,170 ms/op
Iteration   6: 22214,485 ms/op
Iteration   7: 22270,253 ms/op
Iteration   8: 22062,066 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22537,393 ±(99.9%) 2104,858 ms/op

  Histogram, ms/op:
    [22000,000, 22250,000) = 6
    [22250,000, 22500,000) = 1
    [22500,000, 22750,000) = 0
    [22750,000, 23000,000) = 0
    [23000,000, 23250,000) = 0
    [23250,000, 23500,000) = 0
    [23500,000, 23750,000) = 0
    [23750,000, 24000,000) = 0
    [24000,000, 24250,000) = 0
    [24250,000, 24500,000) = 0
    [24500,000, 24750,000) = 0
    [24750,000, 25000,000) = 0
    [25000,000, 25250,000) = 0
    [25250,000, 25500,000) = 1
    [25500,000, 25750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  22037,241 ms/op
     p(50,0000) =  22172,640 ms/op
     p(90,0000) =  25255,170 ms/op
     p(95,0000) =  25255,170 ms/op
     p(99,0000) =  25255,170 ms/op
     p(99,9000) =  25255,170 ms/op
     p(99,9900) =  25255,170 ms/op
     p(99,9990) =  25255,170 ms/op
     p(99,9999) =  25255,170 ms/op
    p(100,0000) =  25255,170 ms/op


# Run complete. Total time: 00:07:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.KolobokeHashCodeMixingObjTest    100000000        remove    ss    8  22537,393 ± 2104,858  ms/op
tests.maptests.object.KolobokeHashCodeMixingObjTest (100000000) = 22537.392766750003
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.HppcObjMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 27413,302 ms/op
# Warmup Iteration   2: 25898,708 ms/op
# Warmup Iteration   3: 30795,698 ms/op
# Warmup Iteration   4: 26684,771 ms/op
# Warmup Iteration   5: 30338,942 ms/op
# Warmup Iteration   6: 26661,489 ms/op
# Warmup Iteration   7: 30377,798 ms/op
# Warmup Iteration   8: 26593,002 ms/op
# Warmup Iteration   9: 30159,213 ms/op
# Warmup Iteration  10: 26618,007 ms/op
Iteration   1: 30341,771 ms/op
Iteration   2: 26629,622 ms/op
Iteration   3: 30150,045 ms/op
Iteration   4: 26604,942 ms/op
Iteration   5: 30325,160 ms/op
Iteration   6: 26572,106 ms/op
Iteration   7: 30055,988 ms/op
Iteration   8: 26523,255 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  28400,361 ±(99.9%) 3720,220 ms/op

  Histogram, ms/op:
    [26000,000, 26500,000) = 0
    [26500,000, 27000,000) = 4
    [27000,000, 27500,000) = 0
    [27500,000, 28000,000) = 0
    [28000,000, 28500,000) = 0
    [28500,000, 29000,000) = 0
    [29000,000, 29500,000) = 0
    [29500,000, 30000,000) = 0
    [30000,000, 30500,000) = 4

  Percentiles, ms/op:
      p(0,0000) =  26523,255 ms/op
     p(50,0000) =  28342,805 ms/op
     p(90,0000) =  30341,771 ms/op
     p(95,0000) =  30341,771 ms/op
     p(99,0000) =  30341,771 ms/op
     p(99,9000) =  30341,771 ms/op
     p(99,9900) =  30341,771 ms/op
     p(99,9990) =  30341,771 ms/op
     p(99,9999) =  30341,771 ms/op
    p(100,0000) =  30341,771 ms/op


# Run complete. Total time: 00:08:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.HppcObjMapTest    100000000        remove    ss    8  28400,361 ± 3720,220  ms/op
tests.maptests.object.HppcObjMapTest (100000000) = 28400.361317125004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.GsObjMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 19573,850 ms/op
# Warmup Iteration   2: 19829,793 ms/op
# Warmup Iteration   3: 22611,979 ms/op
# Warmup Iteration   4: 18139,153 ms/op
# Warmup Iteration   5: 19002,215 ms/op
# Warmup Iteration   6: 18234,299 ms/op
# Warmup Iteration   7: 22564,159 ms/op
# Warmup Iteration   8: 18913,895 ms/op
# Warmup Iteration   9: 18133,948 ms/op
# Warmup Iteration  10: 19188,969 ms/op
Iteration   1: 21848,115 ms/op
Iteration   2: 18210,599 ms/op
Iteration   3: 19055,426 ms/op
Iteration   4: 17984,560 ms/op
Iteration   5: 22719,091 ms/op
Iteration   6: 19235,109 ms/op
Iteration   7: 18307,682 ms/op
Iteration   8: 19400,001 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  19595,073 ±(99.9%) 3347,901 ms/op

  Histogram, ms/op:
    [17000,000, 17500,000) = 0
    [17500,000, 18000,000) = 1
    [18000,000, 18500,000) = 2
    [18500,000, 19000,000) = 0
    [19000,000, 19500,000) = 3
    [19500,000, 20000,000) = 0
    [20000,000, 20500,000) = 0
    [20500,000, 21000,000) = 0
    [21000,000, 21500,000) = 0
    [21500,000, 22000,000) = 1
    [22000,000, 22500,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  17984,560 ms/op
     p(50,0000) =  19145,268 ms/op
     p(90,0000) =  22719,091 ms/op
     p(95,0000) =  22719,091 ms/op
     p(99,0000) =  22719,091 ms/op
     p(99,9000) =  22719,091 ms/op
     p(99,9900) =  22719,091 ms/op
     p(99,9990) =  22719,091 ms/op
     p(99,9999) =  22719,091 ms/op
    p(100,0000) =  22719,091 ms/op


# Run complete. Total time: 00:06:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.GsObjMapTest    100000000        remove    ss    8  19595,073 ± 3347,901  ms/op
tests.maptests.object.GsObjMapTest (100000000) = 19595.073010250002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 34720,123 ms/op
# Warmup Iteration   2: 35019,792 ms/op
# Warmup Iteration   3: 38977,671 ms/op
# Warmup Iteration   4: 35757,260 ms/op
# Warmup Iteration   5: 37867,837 ms/op
# Warmup Iteration   6: 35835,640 ms/op
# Warmup Iteration   7: 37677,902 ms/op
# Warmup Iteration   8: 36729,986 ms/op
# Warmup Iteration   9: 37880,242 ms/op
# Warmup Iteration  10: 36939,828 ms/op
Iteration   1: 38585,962 ms/op
Iteration   2: 36997,654 ms/op
Iteration   3: 38351,916 ms/op
Iteration   4: 36841,596 ms/op
Iteration   5: 38803,352 ms/op
Iteration   6: 37280,782 ms/op
Iteration   7: 38319,693 ms/op
Iteration   8: 36802,832 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  37747,973 ±(99.9%) 1616,515 ms/op

  Histogram, ms/op:
    [36000,000, 36250,000) = 0
    [36250,000, 36500,000) = 0
    [36500,000, 36750,000) = 0
    [36750,000, 37000,000) = 3
    [37000,000, 37250,000) = 0
    [37250,000, 37500,000) = 1
    [37500,000, 37750,000) = 0
    [37750,000, 38000,000) = 0
    [38000,000, 38250,000) = 0
    [38250,000, 38500,000) = 2
    [38500,000, 38750,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  36802,832 ms/op
     p(50,0000) =  37800,237 ms/op
     p(90,0000) =  38803,352 ms/op
     p(95,0000) =  38803,352 ms/op
     p(99,0000) =  38803,352 ms/op
     p(99,9000) =  38803,352 ms/op
     p(99,9900) =  38803,352 ms/op
     p(99,9990) =  38803,352 ms/op
     p(99,9999) =  38803,352 ms/op
    p(100,0000) =  38803,352 ms/op


# Run complete. Total time: 00:11:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTest    100000000        remove    ss    8  37747,973 ± 1616,515  ms/op
tests.maptests.object.JdkMapTest (100000000) = 37747.973344499995
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.JdkMapTestDifferentCapacity, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 31618,385 ms/op
# Warmup Iteration   2: 32364,260 ms/op
# Warmup Iteration   3: 35156,713 ms/op
# Warmup Iteration   4: 37331,245 ms/op
# Warmup Iteration   5: 34736,897 ms/op
# Warmup Iteration   6: 36197,930 ms/op
# Warmup Iteration   7: 34660,500 ms/op
# Warmup Iteration   8: 36321,244 ms/op
# Warmup Iteration   9: 38874,128 ms/op
# Warmup Iteration  10: 34956,251 ms/op
Iteration   1: 35562,396 ms/op
Iteration   2: 35238,635 ms/op
Iteration   3: 37021,580 ms/op
Iteration   4: 38521,611 ms/op
Iteration   5: 35466,994 ms/op
Iteration   6: 36923,967 ms/op
Iteration   7: 35273,207 ms/op
Iteration   8: 37249,788 ms/op
<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 24 seconds more...>

Non-finished threads:

Thread[DestroyJavaVM,5,main]




Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  36407,272 ±(99.9%) 2293,729 ms/op

  Histogram, ms/op:
    [35000,000, 35250,000) = 1
    [35250,000, 35500,000) = 2
    [35500,000, 35750,000) = 1
    [35750,000, 36000,000) = 0
    [36000,000, 36250,000) = 0
    [36250,000, 36500,000) = 0
    [36500,000, 36750,000) = 0
    [36750,000, 37000,000) = 1
    [37000,000, 37250,000) = 2
    [37250,000, 37500,000) = 0
    [37500,000, 37750,000) = 0
    [37750,000, 38000,000) = 0
    [38000,000, 38250,000) = 0
    [38250,000, 38500,000) = 0
    [38500,000, 38750,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  35238,635 ms/op
     p(50,0000) =  36243,182 ms/op
     p(90,0000) =  38521,611 ms/op
     p(95,0000) =  38521,611 ms/op
     p(99,0000) =  38521,611 ms/op
     p(99,9000) =  38521,611 ms/op
     p(99,9900) =  38521,611 ms/op
     p(99,9990) =  38521,611 ms/op
     p(99,9999) =  38521,611 ms/op
    p(100,0000) =  38521,611 ms/op


# Run complete. Total time: 00:11:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.JdkMapTestDifferentCapacity    100000000        remove    ss    8  36407,272 ± 2293,729  ms/op
tests.maptests.object.JdkMapTestDifferentCapacity (100000000) = 36407.272150875004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveJbObjMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 38772,813 ms/op
# Warmup Iteration   2: 39342,921 ms/op
# Warmup Iteration   3: 38454,616 ms/op
# Warmup Iteration   4: 38704,663 ms/op
# Warmup Iteration   5: 44227,820 ms/op
# Warmup Iteration   6: 38474,292 ms/op
# Warmup Iteration   7: 38677,243 ms/op
# Warmup Iteration   8: 39726,010 ms/op
# Warmup Iteration   9: 35247,043 ms/op
# Warmup Iteration  10: 34968,897 ms/op
Iteration   1: 38980,564 ms/op
Iteration   2: 35285,808 ms/op
Iteration   3: 35134,765 ms/op
Iteration   4: 38907,699 ms/op
Iteration   5: 35325,903 ms/op
Iteration   6: 35081,444 ms/op
Iteration   7: 39181,790 ms/op
Iteration   8: 34967,537 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  36608,189 ±(99.9%) 3832,541 ms/op

  Histogram, ms/op:
    [34000,000, 34500,000) = 0
    [34500,000, 35000,000) = 1
    [35000,000, 35500,000) = 4
    [35500,000, 36000,000) = 0
    [36000,000, 36500,000) = 0
    [36500,000, 37000,000) = 0
    [37000,000, 37500,000) = 0
    [37500,000, 38000,000) = 0
    [38000,000, 38500,000) = 0
    [38500,000, 39000,000) = 2
    [39000,000, 39500,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  34967,537 ms/op
     p(50,0000) =  35305,855 ms/op
     p(90,0000) =  39181,790 ms/op
     p(95,0000) =  39181,790 ms/op
     p(99,0000) =  39181,790 ms/op
     p(99,9000) =  39181,790 ms/op
     p(99,9900) =  39181,790 ms/op
     p(99,9990) =  39181,790 ms/op
     p(99,9999) =  39181,790 ms/op
    p(100,0000) =  39181,790 ms/op


# Run complete. Total time: 00:11:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveJbObjMapTest    100000000        remove    ss    8  36608,189 ± 3832,541  ms/op
tests.maptests.object.TroveJbObjMapTest (100000000) = 36608.188587625
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object.TroveObjMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 45118,296 ms/op
# Warmup Iteration   2: 43966,876 ms/op
# Warmup Iteration   3: 43716,104 ms/op
# Warmup Iteration   4: 43822,149 ms/op
# Warmup Iteration   5: 49005,508 ms/op
# Warmup Iteration   6: 43448,568 ms/op
# Warmup Iteration   7: 43757,722 ms/op
# Warmup Iteration   8: 38437,329 ms/op
# Warmup Iteration   9: 32413,755 ms/op
# Warmup Iteration  10: 32335,460 ms/op
Iteration   1: 36308,259 ms/op
Iteration   2: 32371,305 ms/op
Iteration   3: 32444,862 ms/op
Iteration   4: 36068,885 ms/op
Iteration   5: 32568,442 ms/op
Iteration   6: 32462,757 ms/op
Iteration   7: 36365,245 ms/op
Iteration   8: 32392,298 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  33872,757 ±(99.9%) 3764,870 ms/op

  Histogram, ms/op:
    [32000,000, 32500,000) = 4
    [32500,000, 33000,000) = 1
    [33000,000, 33500,000) = 0
    [33500,000, 34000,000) = 0
    [34000,000, 34500,000) = 0
    [34500,000, 35000,000) = 0
    [35000,000, 35500,000) = 0
    [35500,000, 36000,000) = 0
    [36000,000, 36500,000) = 3

  Percentiles, ms/op:
      p(0,0000) =  32371,305 ms/op
     p(50,0000) =  32515,599 ms/op
     p(90,0000) =  36365,245 ms/op
     p(95,0000) =  36365,245 ms/op
     p(99,0000) =  36365,245 ms/op
     p(99,9000) =  36365,245 ms/op
     p(99,9900) =  36365,245 ms/op
     p(99,9990) =  36365,245 ms/op
     p(99,9999) =  36365,245 ms/op
    p(100,0000) =  36365,245 ms/op


# Run complete. Total time: 00:11:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object.TroveObjMapTest    100000000        remove    ss    8  33872,757 ± 3764,870  ms/op
tests.maptests.object.TroveObjMapTest (100000000) = 33872.756757125004
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.article_examples.ObjObjMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 28670,690 ms/op
# Warmup Iteration   2: 27368,142 ms/op
# Warmup Iteration   3: 31588,739 ms/op
# Warmup Iteration   4: 27392,281 ms/op
# Warmup Iteration   5: 31318,326 ms/op
# Warmup Iteration   6: 27394,165 ms/op
# Warmup Iteration   7: 31272,791 ms/op
# Warmup Iteration   8: 27396,601 ms/op
# Warmup Iteration   9: 31208,960 ms/op
# Warmup Iteration  10: 27350,930 ms/op
Iteration   1: 31267,982 ms/op
Iteration   2: 27367,193 ms/op
Iteration   3: 31273,596 ms/op
Iteration   4: 27455,160 ms/op
Iteration   5: 31381,281 ms/op
Iteration   6: 27443,891 ms/op
Iteration   7: 31294,887 ms/op
Iteration   8: 27530,677 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  29376,833 ±(99.9%) 3941,434 ms/op

  Histogram, ms/op:
    [27000,000, 27500,000) = 3
    [27500,000, 28000,000) = 1
    [28000,000, 28500,000) = 0
    [28500,000, 29000,000) = 0
    [29000,000, 29500,000) = 0
    [29500,000, 30000,000) = 0
    [30000,000, 30500,000) = 0
    [30500,000, 31000,000) = 0
    [31000,000, 31500,000) = 4

  Percentiles, ms/op:
      p(0,0000) =  27367,193 ms/op
     p(50,0000) =  29399,330 ms/op
     p(90,0000) =  31381,281 ms/op
     p(95,0000) =  31381,281 ms/op
     p(99,0000) =  31381,281 ms/op
     p(99,9000) =  31381,281 ms/op
     p(99,9900) =  31381,281 ms/op
     p(99,9990) =  31381,281 ms/op
     p(99,9999) =  31381,281 ms/op
    p(100,0000) =  31381,281 ms/op


# Run complete. Total time: 00:08:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.article_examples.ObjObjMapTest    100000000        remove    ss    8  29376,833 ± 3941,434  ms/op
tests.maptests.article_examples.ObjObjMapTest (100000000) = 29376.833280125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.FastUtilIntObjectMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14330,108 ms/op
# Warmup Iteration   2: 14587,502 ms/op
# Warmup Iteration   3: 14589,445 ms/op
# Warmup Iteration   4: 14996,333 ms/op
# Warmup Iteration   5: 15039,312 ms/op
# Warmup Iteration   6: 14623,352 ms/op
# Warmup Iteration   7: 14466,440 ms/op
# Warmup Iteration   8: 14468,347 ms/op
# Warmup Iteration   9: 14468,123 ms/op
# Warmup Iteration  10: 14467,916 ms/op
Iteration   1: 14444,742 ms/op
Iteration   2: 14586,188 ms/op
Iteration   3: 14504,697 ms/op
Iteration   4: 14458,913 ms/op
Iteration   5: 14211,099 ms/op
Iteration   6: 13832,720 ms/op
Iteration   7: 12904,570 ms/op
Iteration   8: 12968,211 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13988,892 ±(99.9%) 1321,269 ms/op

  Histogram, ms/op:
    [12000,000, 12250,000) = 0
    [12250,000, 12500,000) = 0
    [12500,000, 12750,000) = 0
    [12750,000, 13000,000) = 2
    [13000,000, 13250,000) = 0
    [13250,000, 13500,000) = 0
    [13500,000, 13750,000) = 0
    [13750,000, 14000,000) = 1
    [14000,000, 14250,000) = 1
    [14250,000, 14500,000) = 2
    [14500,000, 14750,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  12904,570 ms/op
     p(50,0000) =  14327,920 ms/op
     p(90,0000) =  14586,188 ms/op
     p(95,0000) =  14586,188 ms/op
     p(99,0000) =  14586,188 ms/op
     p(99,9000) =  14586,188 ms/op
     p(99,9900) =  14586,188 ms/op
     p(99,9990) =  14586,188 ms/op
     p(99,9999) =  14586,188 ms/op
    p(100,0000) =  14586,188 ms/op


# Run complete. Total time: 00:04:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.FastUtilIntObjectMapTest    100000000        remove    ss    8  13988,892 ± 1321,269  ms/op
tests.maptests.prim_object.FastUtilIntObjectMapTest (100000000) = 13988.892467
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.GsIntObjectMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 16047,969 ms/op
# Warmup Iteration   2: 15918,139 ms/op
# Warmup Iteration   3: 15962,219 ms/op
# Warmup Iteration   4: 16044,091 ms/op
# Warmup Iteration   5: 15998,982 ms/op
# Warmup Iteration   6: 16464,949 ms/op
# Warmup Iteration   7: 16118,055 ms/op
# Warmup Iteration   8: 16047,825 ms/op
# Warmup Iteration   9: 16065,999 ms/op
# Warmup Iteration  10: 14809,351 ms/op
Iteration   1: 15141,252 ms/op
Iteration   2: 13668,030 ms/op
Iteration   3: 13673,640 ms/op
Iteration   4: 13536,502 ms/op
Iteration   5: 13755,884 ms/op
Iteration   6: 13562,666 ms/op
Iteration   7: 13550,353 ms/op
Iteration   8: 13606,173 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13811,813 ±(99.9%) 1036,913 ms/op

  Histogram, ms/op:
    [13000,000, 13250,000) = 0
    [13250,000, 13500,000) = 0
    [13500,000, 13750,000) = 6
    [13750,000, 14000,000) = 1
    [14000,000, 14250,000) = 0
    [14250,000, 14500,000) = 0
    [14500,000, 14750,000) = 0
    [14750,000, 15000,000) = 0
    [15000,000, 15250,000) = 1
    [15250,000, 15500,000) = 0
    [15500,000, 15750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13536,502 ms/op
     p(50,0000) =  13637,102 ms/op
     p(90,0000) =  15141,252 ms/op
     p(95,0000) =  15141,252 ms/op
     p(99,0000) =  15141,252 ms/op
     p(99,9000) =  15141,252 ms/op
     p(99,9900) =  15141,252 ms/op
     p(99,9990) =  15141,252 ms/op
     p(99,9999) =  15141,252 ms/op
    p(100,0000) =  15141,252 ms/op


# Run complete. Total time: 00:04:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.GsIntObjectMapTest    100000000        remove    ss    8  13811,813 ± 1036,913  ms/op
tests.maptests.prim_object.GsIntObjectMapTest (100000000) = 13811.812502125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.KolobokeIntObjectMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14417,755 ms/op
# Warmup Iteration   2: 14494,141 ms/op
# Warmup Iteration   3: 14215,840 ms/op
# Warmup Iteration   4: 14127,848 ms/op
# Warmup Iteration   5: 14212,386 ms/op
# Warmup Iteration   6: 14114,750 ms/op
# Warmup Iteration   7: 14124,939 ms/op
# Warmup Iteration   8: 14219,439 ms/op
# Warmup Iteration   9: 14147,702 ms/op
# Warmup Iteration  10: 14156,167 ms/op
Iteration   1: 14104,864 ms/op
Iteration   2: 14085,021 ms/op
Iteration   3: 14102,929 ms/op
Iteration   4: 14039,247 ms/op
Iteration   5: 13158,596 ms/op
Iteration   6: 12960,543 ms/op
Iteration   7: 12933,693 ms/op
Iteration   8: 13100,430 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13560,665 ±(99.9%) 1076,957 ms/op

  Histogram, ms/op:
    [12000,000, 12250,000) = 0
    [12250,000, 12500,000) = 0
    [12500,000, 12750,000) = 0
    [12750,000, 13000,000) = 2
    [13000,000, 13250,000) = 2
    [13250,000, 13500,000) = 0
    [13500,000, 13750,000) = 0
    [13750,000, 14000,000) = 0
    [14000,000, 14250,000) = 4
    [14250,000, 14500,000) = 0
    [14500,000, 14750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  12933,693 ms/op
     p(50,0000) =  13598,921 ms/op
     p(90,0000) =  14104,864 ms/op
     p(95,0000) =  14104,864 ms/op
     p(99,0000) =  14104,864 ms/op
     p(99,9000) =  14104,864 ms/op
     p(99,9900) =  14104,864 ms/op
     p(99,9990) =  14104,864 ms/op
     p(99,9999) =  14104,864 ms/op
    p(100,0000) =  14104,864 ms/op


# Run complete. Total time: 00:04:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.KolobokeIntObjectMapTest    100000000        remove    ss    8  13560,665 ± 1076,957  ms/op
tests.maptests.prim_object.KolobokeIntObjectMapTest (100000000) = 13560.665248125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.HppcIntObjectMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14265,636 ms/op
# Warmup Iteration   2: 14318,603 ms/op
# Warmup Iteration   3: 14479,801 ms/op
# Warmup Iteration   4: 14516,209 ms/op
# Warmup Iteration   5: 14463,961 ms/op
# Warmup Iteration   6: 14478,895 ms/op
# Warmup Iteration   7: 14515,894 ms/op
# Warmup Iteration   8: 14417,930 ms/op
# Warmup Iteration   9: 14487,696 ms/op
# Warmup Iteration  10: 14539,463 ms/op
Iteration   1: 14556,551 ms/op
Iteration   2: 14518,844 ms/op
Iteration   3: 14377,864 ms/op
Iteration   4: 14423,369 ms/op
Iteration   5: 13519,956 ms/op
Iteration   6: 13096,682 ms/op
Iteration   7: 13145,031 ms/op
Iteration   8: 13239,148 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  13859,681 ±(99.9%) 1272,320 ms/op

  Histogram, ms/op:
    [13000,000, 13125,000) = 1
    [13125,000, 13250,000) = 2
    [13250,000, 13375,000) = 0
    [13375,000, 13500,000) = 0
    [13500,000, 13625,000) = 1
    [13625,000, 13750,000) = 0
    [13750,000, 13875,000) = 0
    [13875,000, 14000,000) = 0
    [14000,000, 14125,000) = 0
    [14125,000, 14250,000) = 0
    [14250,000, 14375,000) = 0
    [14375,000, 14500,000) = 2
    [14500,000, 14625,000) = 2
    [14625,000, 14750,000) = 0
    [14750,000, 14875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  13096,682 ms/op
     p(50,0000) =  13948,910 ms/op
     p(90,0000) =  14556,551 ms/op
     p(95,0000) =  14556,551 ms/op
     p(99,0000) =  14556,551 ms/op
     p(99,9000) =  14556,551 ms/op
     p(99,9900) =  14556,551 ms/op
     p(99,9990) =  14556,551 ms/op
     p(99,9999) =  14556,551 ms/op
    p(100,0000) =  14556,551 ms/op


# Run complete. Total time: 00:04:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.HppcIntObjectMapTest    100000000        remove    ss    8  13859,681 ± 1272,320  ms/op
tests.maptests.prim_object.HppcIntObjectMapTest (100000000) = 13859.680766
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveJbIntObjectMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 26640,316 ms/op
# Warmup Iteration   2: 26876,743 ms/op
# Warmup Iteration   3: 26191,273 ms/op
# Warmup Iteration   4: 26421,045 ms/op
# Warmup Iteration   5: 26453,571 ms/op
# Warmup Iteration   6: 26536,621 ms/op
# Warmup Iteration   7: 26381,610 ms/op
# Warmup Iteration   8: 26349,525 ms/op
# Warmup Iteration   9: 26341,603 ms/op
# Warmup Iteration  10: 26344,480 ms/op
Iteration   1: 26227,852 ms/op
Iteration   2: 26325,465 ms/op
Iteration   3: 26282,242 ms/op
Iteration   4: 26313,813 ms/op
Iteration   5: 27155,035 ms/op
Iteration   6: 27131,127 ms/op
Iteration   7: 23511,912 ms/op
Iteration   8: 23444,741 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  25799,023 ±(99.9%) 2830,972 ms/op

  Histogram, ms/op:
    [23000,000, 23500,000) = 1
    [23500,000, 24000,000) = 1
    [24000,000, 24500,000) = 0
    [24500,000, 25000,000) = 0
    [25000,000, 25500,000) = 0
    [25500,000, 26000,000) = 0
    [26000,000, 26500,000) = 4
    [26500,000, 27000,000) = 0
    [27000,000, 27500,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  23444,741 ms/op
     p(50,0000) =  26298,027 ms/op
     p(90,0000) =  27155,035 ms/op
     p(95,0000) =  27155,035 ms/op
     p(99,0000) =  27155,035 ms/op
     p(99,9000) =  27155,035 ms/op
     p(99,9900) =  27155,035 ms/op
     p(99,9990) =  27155,035 ms/op
     p(99,9999) =  27155,035 ms/op
    p(100,0000) =  27155,035 ms/op


# Run complete. Total time: 00:07:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveJbIntObjectMapTest    100000000        remove    ss    8  25799,023 ± 2830,972  ms/op
tests.maptests.prim_object.TroveJbIntObjectMapTest (100000000) = 25799.023261125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.prim_object.TroveIntObjectMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18185,244 ms/op
# Warmup Iteration   2: 18299,345 ms/op
# Warmup Iteration   3: 18549,310 ms/op
# Warmup Iteration   4: 18487,168 ms/op
# Warmup Iteration   5: 18424,941 ms/op
# Warmup Iteration   6: 18738,382 ms/op
# Warmup Iteration   7: 18595,771 ms/op
# Warmup Iteration   8: 18782,495 ms/op
# Warmup Iteration   9: 18675,791 ms/op
# Warmup Iteration  10: 18618,002 ms/op
Iteration   1: 18512,571 ms/op
Iteration   2: 18508,384 ms/op
Iteration   3: 18658,088 ms/op
Iteration   4: 18592,052 ms/op
Iteration   5: 18136,604 ms/op
Iteration   6: 17712,970 ms/op
Iteration   7: 18142,522 ms/op
Iteration   8: 18007,285 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18283,809 ±(99.9%) 638,978 ms/op

  Histogram, ms/op:
    [17700,000, 17800,000) = 1
    [17800,000, 17900,000) = 0
    [17900,000, 18000,000) = 0
    [18000,000, 18100,000) = 1
    [18100,000, 18200,000) = 2
    [18200,000, 18300,000) = 0
    [18300,000, 18400,000) = 0
    [18400,000, 18500,000) = 0
    [18500,000, 18600,000) = 3

  Percentiles, ms/op:
      p(0,0000) =  17712,970 ms/op
     p(50,0000) =  18325,453 ms/op
     p(90,0000) =  18658,088 ms/op
     p(95,0000) =  18658,088 ms/op
     p(99,0000) =  18658,088 ms/op
     p(99,9000) =  18658,088 ms/op
     p(99,9900) =  18658,088 ms/op
     p(99,9990) =  18658,088 ms/op
     p(99,9999) =  18658,088 ms/op
    p(100,0000) =  18658,088 ms/op


# Run complete. Total time: 00:05:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score     Error  Units
MapTestRunner.testRandom  tests.maptests.prim_object.TroveIntObjectMapTest    100000000        remove    ss    8  18283,809 ± 638,978  ms/op
tests.maptests.prim_object.TroveIntObjectMapTest (100000000) = 18283.8094915
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.FastUtilObjectIntMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 15902,009 ms/op
# Warmup Iteration   2: 15801,692 ms/op
# Warmup Iteration   3: 16114,415 ms/op
# Warmup Iteration   4: 19947,887 ms/op
# Warmup Iteration   5: 15898,449 ms/op
# Warmup Iteration   6: 19302,676 ms/op
# Warmup Iteration   7: 15831,248 ms/op
# Warmup Iteration   8: 19085,686 ms/op
# Warmup Iteration   9: 15825,548 ms/op
# Warmup Iteration  10: 19247,374 ms/op
Iteration   1: 15777,629 ms/op
Iteration   2: 19159,762 ms/op
Iteration   3: 15661,824 ms/op
Iteration   4: 19274,498 ms/op
Iteration   5: 15712,749 ms/op
Iteration   6: 19024,376 ms/op
Iteration   7: 15797,202 ms/op
Iteration   8: 19156,741 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  17445,598 ±(99.9%) 3494,840 ms/op

  Histogram, ms/op:
    [15000,000, 15500,000) = 0
    [15500,000, 16000,000) = 4
    [16000,000, 16500,000) = 0
    [16500,000, 17000,000) = 0
    [17000,000, 17500,000) = 0
    [17500,000, 18000,000) = 0
    [18000,000, 18500,000) = 0
    [18500,000, 19000,000) = 0
    [19000,000, 19500,000) = 4

  Percentiles, ms/op:
      p(0,0000) =  15661,824 ms/op
     p(50,0000) =  17410,789 ms/op
     p(90,0000) =  19274,498 ms/op
     p(95,0000) =  19274,498 ms/op
     p(99,0000) =  19274,498 ms/op
     p(99,9000) =  19274,498 ms/op
     p(99,9900) =  19274,498 ms/op
     p(99,9990) =  19274,498 ms/op
     p(99,9999) =  19274,498 ms/op
    p(100,0000) =  19274,498 ms/op


# Run complete. Total time: 00:05:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.FastUtilObjectIntMapTest    100000000        remove    ss    8  17445,598 ± 3494,840  ms/op
tests.maptests.object_prim.FastUtilObjectIntMapTest (100000000) = 17445.597617875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.GsObjectIntMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 28183,608 ms/op
# Warmup Iteration   2: 34022,800 ms/op
# Warmup Iteration   3: 28735,447 ms/op
# Warmup Iteration   4: 28253,902 ms/op
# Warmup Iteration   5: 24853,193 ms/op
# Warmup Iteration   6: 29304,839 ms/op
# Warmup Iteration   7: 24445,932 ms/op
# Warmup Iteration   8: 28793,577 ms/op
# Warmup Iteration   9: 24394,500 ms/op
# Warmup Iteration  10: 28980,009 ms/op
Iteration   1: 24394,086 ms/op
Iteration   2: 28787,262 ms/op
Iteration   3: 24399,961 ms/op
Iteration   4: 28880,118 ms/op
Iteration   5: 24298,384 ms/op
Iteration   6: 28761,751 ms/op
Iteration   7: 24331,649 ms/op
Iteration   8: 28806,463 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  26582,459 ±(99.9%) 4551,678 ms/op

  Histogram, ms/op:
    [24000,000, 24500,000) = 4
    [24500,000, 25000,000) = 0
    [25000,000, 25500,000) = 0
    [25500,000, 26000,000) = 0
    [26000,000, 26500,000) = 0
    [26500,000, 27000,000) = 0
    [27000,000, 27500,000) = 0
    [27500,000, 28000,000) = 0
    [28000,000, 28500,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  24298,384 ms/op
     p(50,0000) =  26580,856 ms/op
     p(90,0000) =  28880,118 ms/op
     p(95,0000) =  28880,118 ms/op
     p(99,0000) =  28880,118 ms/op
     p(99,9000) =  28880,118 ms/op
     p(99,9900) =  28880,118 ms/op
     p(99,9990) =  28880,118 ms/op
     p(99,9999) =  28880,118 ms/op
    p(100,0000) =  28880,118 ms/op


# Run complete. Total time: 00:08:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.GsObjectIntMapTest    100000000        remove    ss    8  26582,459 ± 4551,678  ms/op
tests.maptests.object_prim.GsObjectIntMapTest (100000000) = 26582.459085875
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.KolobokeObjectIntMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 34504,310 ms/op
# Warmup Iteration   2: 32855,162 ms/op
# Warmup Iteration   3: 32131,883 ms/op
# Warmup Iteration   4: 36687,559 ms/op
# Warmup Iteration   5: 31216,312 ms/op
# Warmup Iteration   6: 25931,068 ms/op
# Warmup Iteration   7: 19080,427 ms/op
# Warmup Iteration   8: 23448,179 ms/op
# Warmup Iteration   9: 19091,726 ms/op
# Warmup Iteration  10: 19297,437 ms/op
Iteration   1: 19470,718 ms/op
Iteration   2: 19540,110 ms/op
Iteration   3: 22686,555 ms/op
Iteration   4: 19106,619 ms/op
Iteration   5: 19227,803 ms/op
Iteration   6: 19240,278 ms/op
Iteration   7: 19012,108 ms/op
Iteration   8: 22704,722 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  20123,614 ±(99.9%) 3053,181 ms/op

  Histogram, ms/op:
    [19000,000, 19250,000) = 4
    [19250,000, 19500,000) = 1
    [19500,000, 19750,000) = 1
    [19750,000, 20000,000) = 0
    [20000,000, 20250,000) = 0
    [20250,000, 20500,000) = 0
    [20500,000, 20750,000) = 0
    [20750,000, 21000,000) = 0
    [21000,000, 21250,000) = 0
    [21250,000, 21500,000) = 0
    [21500,000, 21750,000) = 0
    [21750,000, 22000,000) = 0
    [22000,000, 22250,000) = 0
    [22250,000, 22500,000) = 0
    [22500,000, 22750,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  19012,108 ms/op
     p(50,0000) =  19355,498 ms/op
     p(90,0000) =  22704,722 ms/op
     p(95,0000) =  22704,722 ms/op
     p(99,0000) =  22704,722 ms/op
     p(99,9000) =  22704,722 ms/op
     p(99,9900) =  22704,722 ms/op
     p(99,9990) =  22704,722 ms/op
     p(99,9999) =  22704,722 ms/op
    p(100,0000) =  22704,722 ms/op


# Run complete. Total time: 00:07:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.KolobokeObjectIntMapTest    100000000        remove    ss    8  20123,614 ± 3053,181  ms/op
tests.maptests.object_prim.KolobokeObjectIntMapTest (100000000) = 20123.614102375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.HppcObjectIntMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 18868,973 ms/op
# Warmup Iteration   2: 15998,886 ms/op
# Warmup Iteration   3: 16434,982 ms/op
# Warmup Iteration   4: 21756,644 ms/op
# Warmup Iteration   5: 16319,349 ms/op
# Warmup Iteration   6: 21202,281 ms/op
# Warmup Iteration   7: 16081,715 ms/op
# Warmup Iteration   8: 20635,496 ms/op
# Warmup Iteration   9: 16334,431 ms/op
# Warmup Iteration  10: 20966,788 ms/op
Iteration   1: 16241,958 ms/op
Iteration   2: 20760,996 ms/op
Iteration   3: 16008,977 ms/op
Iteration   4: 21044,697 ms/op
Iteration   5: 16115,712 ms/op
Iteration   6: 20860,435 ms/op
Iteration   7: 16026,913 ms/op
Iteration   8: 21004,864 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18508,069 ±(99.9%) 4929,888 ms/op

  Histogram, ms/op:
    [16000,000, 16500,000) = 4
    [16500,000, 17000,000) = 0
    [17000,000, 17500,000) = 0
    [17500,000, 18000,000) = 0
    [18000,000, 18500,000) = 0
    [18500,000, 19000,000) = 0
    [19000,000, 19500,000) = 0
    [19500,000, 20000,000) = 0
    [20000,000, 20500,000) = 0
    [20500,000, 21000,000) = 2
    [21000,000, 21500,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  16008,977 ms/op
     p(50,0000) =  18501,477 ms/op
     p(90,0000) =  21044,697 ms/op
     p(95,0000) =  21044,697 ms/op
     p(99,0000) =  21044,697 ms/op
     p(99,9000) =  21044,697 ms/op
     p(99,9900) =  21044,697 ms/op
     p(99,9990) =  21044,697 ms/op
     p(99,9999) =  21044,697 ms/op
    p(100,0000) =  21044,697 ms/op


# Run complete. Total time: 00:05:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.HppcObjectIntMapTest    100000000        remove    ss    8  18508,069 ± 4929,888  ms/op
tests.maptests.object_prim.HppcObjectIntMapTest (100000000) = 18508.068953249996
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveJbObjectIntMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 31498,552 ms/op
# Warmup Iteration   2: 30294,087 ms/op
# Warmup Iteration   3: 29598,077 ms/op
# Warmup Iteration   4: 30000,647 ms/op
# Warmup Iteration   5: 33948,498 ms/op
# Warmup Iteration   6: 29737,474 ms/op
# Warmup Iteration   7: 29623,789 ms/op
# Warmup Iteration   8: 30430,927 ms/op
# Warmup Iteration   9: 26434,798 ms/op
# Warmup Iteration  10: 26440,040 ms/op
Iteration   1: 29149,142 ms/op
Iteration   2: 26457,353 ms/op
Iteration   3: 26253,945 ms/op
Iteration   4: 29746,568 ms/op
Iteration   5: 26357,239 ms/op
Iteration   6: 26340,194 ms/op
Iteration   7: 29323,547 ms/op
Iteration   8: 26016,918 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  27455,613 ±(99.9%) 3113,867 ms/op

  Histogram, ms/op:
    [26000,000, 26250,000) = 1
    [26250,000, 26500,000) = 4
    [26500,000, 26750,000) = 0
    [26750,000, 27000,000) = 0
    [27000,000, 27250,000) = 0
    [27250,000, 27500,000) = 0
    [27500,000, 27750,000) = 0
    [27750,000, 28000,000) = 0
    [28000,000, 28250,000) = 0
    [28250,000, 28500,000) = 0
    [28500,000, 28750,000) = 0
    [28750,000, 29000,000) = 0
    [29000,000, 29250,000) = 1
    [29250,000, 29500,000) = 1
    [29500,000, 29750,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  26016,918 ms/op
     p(50,0000) =  26407,296 ms/op
     p(90,0000) =  29746,568 ms/op
     p(95,0000) =  29746,568 ms/op
     p(99,0000) =  29746,568 ms/op
     p(99,9000) =  29746,568 ms/op
     p(99,9900) =  29746,568 ms/op
     p(99,9990) =  29746,568 ms/op
     p(99,9999) =  29746,568 ms/op
    p(100,0000) =  29746,568 ms/op


# Run complete. Total time: 00:08:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveJbObjectIntMapTest    100000000        remove    ss    8  27455,613 ± 3113,867  ms/op
tests.maptests.object_prim.TroveJbObjectIntMapTest (100000000) = 27455.61329125
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.object_prim.TroveObjectIntMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 35404,345 ms/op
# Warmup Iteration   2: 35438,749 ms/op
# Warmup Iteration   3: 34522,054 ms/op
# Warmup Iteration   4: 34421,365 ms/op
# Warmup Iteration   5: 35430,656 ms/op
# Warmup Iteration   6: 34047,894 ms/op
# Warmup Iteration   7: 33964,471 ms/op
# Warmup Iteration   8: 30632,193 ms/op
# Warmup Iteration   9: 24495,016 ms/op
# Warmup Iteration  10: 24712,912 ms/op
Iteration   1: 28066,987 ms/op
Iteration   2: 24696,550 ms/op
Iteration   3: 24671,524 ms/op
Iteration   4: 28226,269 ms/op
Iteration   5: 24723,597 ms/op
Iteration   6: 24723,841 ms/op
Iteration   7: 28119,551 ms/op
Iteration   8: 24293,232 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  25940,194 ±(99.9%) 3490,319 ms/op

  Histogram, ms/op:
    [24000,000, 24500,000) = 1
    [24500,000, 25000,000) = 4
    [25000,000, 25500,000) = 0
    [25500,000, 26000,000) = 0
    [26000,000, 26500,000) = 0
    [26500,000, 27000,000) = 0
    [27000,000, 27500,000) = 0
    [27500,000, 28000,000) = 0
    [28000,000, 28500,000) = 3

  Percentiles, ms/op:
      p(0,0000) =  24293,232 ms/op
     p(50,0000) =  24723,719 ms/op
     p(90,0000) =  28226,269 ms/op
     p(95,0000) =  28226,269 ms/op
     p(99,0000) =  28226,269 ms/op
     p(99,9000) =  28226,269 ms/op
     p(99,9900) =  28226,269 ms/op
     p(99,9990) =  28226,269 ms/op
     p(99,9999) =  28226,269 ms/op
    p(100,0000) =  28226,269 ms/op


# Run complete. Total time: 00:09:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.object_prim.TroveObjectIntMapTest    100000000        remove    ss    8  25940,194 ± 3490,319  ms/op
tests.maptests.object_prim.TroveObjectIntMapTest (100000000) = 25940.193843125002
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.FastUtilRef2ObjectMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 38273,106 ms/op
# Warmup Iteration   2: 27382,804 ms/op
# Warmup Iteration   3: 25141,764 ms/op
# Warmup Iteration   4: 25541,842 ms/op
# Warmup Iteration   5: 25625,943 ms/op
# Warmup Iteration   6: 27362,847 ms/op
# Warmup Iteration   7: 25236,860 ms/op
# Warmup Iteration   8: 25260,676 ms/op
# Warmup Iteration   9: 25253,712 ms/op
# Warmup Iteration  10: 27161,930 ms/op
Iteration   1: 25340,975 ms/op
Iteration   2: 25327,731 ms/op
Iteration   3: 25262,951 ms/op
Iteration   4: 27206,824 ms/op
Iteration   5: 25235,851 ms/op
Iteration   6: 25499,833 ms/op
Iteration   7: 25311,581 ms/op
Iteration   8: 27171,717 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  25794,683 ±(99.9%) 1652,601 ms/op

  Histogram, ms/op:
    [25000,000, 25250,000) = 1
    [25250,000, 25500,000) = 5
    [25500,000, 25750,000) = 0
    [25750,000, 26000,000) = 0
    [26000,000, 26250,000) = 0
    [26250,000, 26500,000) = 0
    [26500,000, 26750,000) = 0
    [26750,000, 27000,000) = 0
    [27000,000, 27250,000) = 2
    [27250,000, 27500,000) = 0
    [27500,000, 27750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  25235,851 ms/op
     p(50,0000) =  25334,353 ms/op
     p(90,0000) =  27206,824 ms/op
     p(95,0000) =  27206,824 ms/op
     p(99,0000) =  27206,824 ms/op
     p(99,9000) =  27206,824 ms/op
     p(99,9900) =  27206,824 ms/op
     p(99,9990) =  27206,824 ms/op
     p(99,9999) =  27206,824 ms/op
    p(100,0000) =  27206,824 ms/op


# Run complete. Total time: 00:08:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.FastUtilRef2ObjectMapTest    100000000        remove    ss    8  25794,683 ± 1652,601  ms/op
tests.maptests.identity_object.FastUtilRef2ObjectMapTest (100000000) = 25794.682836999997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.GsIdentityMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 35949,860 ms/op
# Warmup Iteration   2: 20649,866 ms/op
# Warmup Iteration   3: 18917,434 ms/op
# Warmup Iteration   4: 20045,478 ms/op
# Warmup Iteration   5: 18302,777 ms/op
# Warmup Iteration   6: 18354,384 ms/op
# Warmup Iteration   7: 20054,474 ms/op
# Warmup Iteration   8: 18407,954 ms/op
# Warmup Iteration   9: 18403,076 ms/op
# Warmup Iteration  10: 19795,850 ms/op
Iteration   1: 19726,024 ms/op
Iteration   2: 18639,436 ms/op
Iteration   3: 19925,671 ms/op
Iteration   4: 18386,888 ms/op
Iteration   5: 18402,249 ms/op
Iteration   6: 19569,100 ms/op
Iteration   7: 18293,070 ms/op
Iteration   8: 18380,762 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  18915,400 ±(99.9%) 1331,933 ms/op

  Histogram, ms/op:
    [18000,000, 18125,000) = 0
    [18125,000, 18250,000) = 0
    [18250,000, 18375,000) = 1
    [18375,000, 18500,000) = 3
    [18500,000, 18625,000) = 0
    [18625,000, 18750,000) = 1
    [18750,000, 18875,000) = 0
    [18875,000, 19000,000) = 0
    [19000,000, 19125,000) = 0
    [19125,000, 19250,000) = 0
    [19250,000, 19375,000) = 0
    [19375,000, 19500,000) = 0
    [19500,000, 19625,000) = 1
    [19625,000, 19750,000) = 1
    [19750,000, 19875,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  18293,070 ms/op
     p(50,0000) =  18520,842 ms/op
     p(90,0000) =  19925,671 ms/op
     p(95,0000) =  19925,671 ms/op
     p(99,0000) =  19925,671 ms/op
     p(99,9000) =  19925,671 ms/op
     p(99,9900) =  19925,671 ms/op
     p(99,9990) =  19925,671 ms/op
     p(99,9999) =  19925,671 ms/op
    p(100,0000) =  19925,671 ms/op


# Run complete. Total time: 00:06:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.GsIdentityMapTest    100000000        remove    ss    8  18915,400 ± 1331,933  ms/op
tests.maptests.identity_object.GsIdentityMapTest (100000000) = 18915.3999685
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.KolobokeIdentityMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 36230,288 ms/op
# Warmup Iteration   2: 29669,674 ms/op
# Warmup Iteration   3: 24686,720 ms/op
# Warmup Iteration   4: 21782,385 ms/op
# Warmup Iteration   5: 21953,117 ms/op
# Warmup Iteration   6: 22108,062 ms/op
# Warmup Iteration   7: 23596,790 ms/op
# Warmup Iteration   8: 21695,026 ms/op
# Warmup Iteration   9: 21748,507 ms/op
# Warmup Iteration  10: 21836,564 ms/op
Iteration   1: 23546,884 ms/op
Iteration   2: 21696,058 ms/op
Iteration   3: 21776,659 ms/op
Iteration   4: 21664,017 ms/op
Iteration   5: 24075,823 ms/op
Iteration   6: 21777,040 ms/op
Iteration   7: 21826,030 ms/op
Iteration   8: 21792,124 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  22269,329 ±(99.9%) 1842,414 ms/op

  Histogram, ms/op:
    [21000,000, 21250,000) = 0
    [21250,000, 21500,000) = 0
    [21500,000, 21750,000) = 2
    [21750,000, 22000,000) = 4
    [22000,000, 22250,000) = 0
    [22250,000, 22500,000) = 0
    [22500,000, 22750,000) = 0
    [22750,000, 23000,000) = 0
    [23000,000, 23250,000) = 0
    [23250,000, 23500,000) = 0
    [23500,000, 23750,000) = 1
    [23750,000, 24000,000) = 0
    [24000,000, 24250,000) = 1
    [24250,000, 24500,000) = 0
    [24500,000, 24750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  21664,017 ms/op
     p(50,0000) =  21784,582 ms/op
     p(90,0000) =  24075,823 ms/op
     p(95,0000) =  24075,823 ms/op
     p(99,0000) =  24075,823 ms/op
     p(99,9000) =  24075,823 ms/op
     p(99,9900) =  24075,823 ms/op
     p(99,9990) =  24075,823 ms/op
     p(99,9999) =  24075,823 ms/op
    p(100,0000) =  24075,823 ms/op


# Run complete. Total time: 00:07:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.KolobokeIdentityMapTest    100000000        remove    ss    8  22269,329 ± 1842,414  ms/op
tests.maptests.identity_object.KolobokeIdentityMapTest (100000000) = 22269.329394
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.HppcIdentityMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 38280,862 ms/op
# Warmup Iteration   2: 25005,949 ms/op
# Warmup Iteration   3: 25381,238 ms/op
# Warmup Iteration   4: 25349,219 ms/op
# Warmup Iteration   5: 28697,908 ms/op
# Warmup Iteration   6: 24885,793 ms/op
# Warmup Iteration   7: 25021,157 ms/op
# Warmup Iteration   8: 25102,539 ms/op
# Warmup Iteration   9: 28455,905 ms/op
# Warmup Iteration  10: 24926,933 ms/op
Iteration   1: 24921,597 ms/op
Iteration   2: 25036,551 ms/op
Iteration   3: 28391,853 ms/op
Iteration   4: 24933,834 ms/op
Iteration   5: 24994,068 ms/op
Iteration   6: 24990,162 ms/op
Iteration   7: 28344,133 ms/op
Iteration   8: 24950,652 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  25820,356 ±(99.9%) 3007,376 ms/op

  Histogram, ms/op:
    [24000,000, 24500,000) = 0
    [24500,000, 25000,000) = 5
    [25000,000, 25500,000) = 1
    [25500,000, 26000,000) = 0
    [26000,000, 26500,000) = 0
    [26500,000, 27000,000) = 0
    [27000,000, 27500,000) = 0
    [27500,000, 28000,000) = 0
    [28000,000, 28500,000) = 2

  Percentiles, ms/op:
      p(0,0000) =  24921,597 ms/op
     p(50,0000) =  24992,115 ms/op
     p(90,0000) =  28391,853 ms/op
     p(95,0000) =  28391,853 ms/op
     p(99,0000) =  28391,853 ms/op
     p(99,9000) =  28391,853 ms/op
     p(99,9900) =  28391,853 ms/op
     p(99,9990) =  28391,853 ms/op
     p(99,9999) =  28391,853 ms/op
    p(100,0000) =  28391,853 ms/op


# Run complete. Total time: 00:08:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.HppcIdentityMapTest    100000000        remove    ss    8  25820,356 ± 3007,376  ms/op
tests.maptests.identity_object.HppcIdentityMapTest (100000000) = 25820.356286249997
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.JDKIdentityMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 32575,795 ms/op
# Warmup Iteration   2: 15248,155 ms/op
# Warmup Iteration   3: 15223,793 ms/op
# Warmup Iteration   4: 15715,224 ms/op
# Warmup Iteration   5: 18477,225 ms/op
# Warmup Iteration   6: 15179,048 ms/op
# Warmup Iteration   7: 15344,704 ms/op
# Warmup Iteration   8: 15590,532 ms/op
# Warmup Iteration   9: 18139,423 ms/op
# Warmup Iteration  10: 15260,755 ms/op
Iteration   1: 15292,626 ms/op
Iteration   2: 15273,980 ms/op
Iteration   3: 18168,514 ms/op
Iteration   4: 15250,982 ms/op
Iteration   5: 15287,199 ms/op
Iteration   6: 15372,186 ms/op
Iteration   7: 18064,419 ms/op
Iteration   8: 15164,444 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  15984,294 ±(99.9%) 2519,086 ms/op

  Histogram, ms/op:
    [15000,000, 15250,000) = 1
    [15250,000, 15500,000) = 5
    [15500,000, 15750,000) = 0
    [15750,000, 16000,000) = 0
    [16000,000, 16250,000) = 0
    [16250,000, 16500,000) = 0
    [16500,000, 16750,000) = 0
    [16750,000, 17000,000) = 0
    [17000,000, 17250,000) = 0
    [17250,000, 17500,000) = 0
    [17500,000, 17750,000) = 0
    [17750,000, 18000,000) = 0
    [18000,000, 18250,000) = 2
    [18250,000, 18500,000) = 0
    [18500,000, 18750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  15164,444 ms/op
     p(50,0000) =  15289,913 ms/op
     p(90,0000) =  18168,514 ms/op
     p(95,0000) =  18168,514 ms/op
     p(99,0000) =  18168,514 ms/op
     p(99,9000) =  18168,514 ms/op
     p(99,9900) =  18168,514 ms/op
     p(99,9990) =  18168,514 ms/op
     p(99,9999) =  18168,514 ms/op
    p(100,0000) =  18168,514 ms/op


# Run complete. Total time: 00:05:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.JDKIdentityMapTest    100000000        remove    ss    8  15984,294 ± 2519,086  ms/op
tests.maptests.identity_object.JDKIdentityMapTest (100000000) = 15984.293885624998
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveJbIdentityMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 42419,406 ms/op
# Warmup Iteration   2: 31565,635 ms/op
# Warmup Iteration   3: 31454,995 ms/op
# Warmup Iteration   4: 31434,006 ms/op
# Warmup Iteration   5: 31371,745 ms/op
# Warmup Iteration   6: 31330,396 ms/op
# Warmup Iteration   7: 34708,015 ms/op
# Warmup Iteration   8: 31060,840 ms/op
# Warmup Iteration   9: 31201,880 ms/op
# Warmup Iteration  10: 31185,836 ms/op
Iteration   1: 31083,351 ms/op
Iteration   2: 31152,911 ms/op
Iteration   3: 34316,841 ms/op
Iteration   4: 31053,578 ms/op
Iteration   5: 31119,595 ms/op
Iteration   6: 31054,215 ms/op
Iteration   7: 30967,996 ms/op
Iteration   8: 31019,685 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  31471,022 ±(99.9%) 2201,252 ms/op

  Histogram, ms/op:
    [30000,000, 30500,000) = 0
    [30500,000, 31000,000) = 1
    [31000,000, 31500,000) = 6
    [31500,000, 32000,000) = 0
    [32000,000, 32500,000) = 0
    [32500,000, 33000,000) = 0
    [33000,000, 33500,000) = 0
    [33500,000, 34000,000) = 0
    [34000,000, 34500,000) = 1

  Percentiles, ms/op:
      p(0,0000) =  30967,996 ms/op
     p(50,0000) =  31068,783 ms/op
     p(90,0000) =  34316,841 ms/op
     p(95,0000) =  34316,841 ms/op
     p(99,0000) =  34316,841 ms/op
     p(99,9000) =  34316,841 ms/op
     p(99,9900) =  34316,841 ms/op
     p(99,9990) =  34316,841 ms/op
     p(99,9999) =  34316,841 ms/op
    p(100,0000) =  34316,841 ms/op


# Run complete. Total time: 00:09:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveJbIdentityMapTest    100000000        remove    ss    8  31471,022 ± 2201,252  ms/op
tests.maptests.identity_object.TroveJbIdentityMapTest (100000000) = 31471.021523375
# JMH version: 1.23
# VM version: JDK 11.0.7, OpenJDK 64-Bit Server VM, 11.0.7+10-b909
# VM invoker: /Volumes/data/Downloads/jbr/Contents/Home/bin/java
# VM options: -Xmx30G
# Warmup: 10 iterations, single-shot each
# Measurement: 8 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: tests.MapTestRunner.testRandom
# Parameters: (m_className = tests.maptests.identity_object.TroveIdentityMapTest, m_mapSize = 100000000, m_testType = remove)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 59232,719 ms/op
# Warmup Iteration   2: 53220,575 ms/op
# Warmup Iteration   3: 53420,520 ms/op
# Warmup Iteration   4: 42659,918 ms/op
# Warmup Iteration   5: 51021,840 ms/op
# Warmup Iteration   6: 50790,355 ms/op
# Warmup Iteration   7: 42007,161 ms/op
# Warmup Iteration   8: 51376,324 ms/op
# Warmup Iteration   9: 51241,028 ms/op
# Warmup Iteration  10: 41944,303 ms/op
Iteration   1: 50730,671 ms/op
Iteration   2: 51240,635 ms/op
Iteration   3: 41896,673 ms/op
Iteration   4: 52251,868 ms/op
Iteration   5: 52321,936 ms/op
Iteration   6: 41985,271 ms/op
Iteration   7: 50995,398 ms/op
Iteration   8: 51462,500 ms/op


Result "tests.MapTestRunner.testRandom":
  N = 8
  mean =  49110,619 ±(99.9%) 8527,277 ms/op

  Histogram, ms/op:
    [40000,000, 41250,000) = 0
    [41250,000, 42500,000) = 2
    [42500,000, 43750,000) = 0
    [43750,000, 45000,000) = 0
    [45000,000, 46250,000) = 0
    [46250,000, 47500,000) = 0
    [47500,000, 48750,000) = 0
    [48750,000, 50000,000) = 0
    [50000,000, 51250,000) = 3
    [51250,000, 52500,000) = 3
    [52500,000, 53750,000) = 0
    [53750,000, 55000,000) = 0
    [55000,000, 56250,000) = 0
    [56250,000, 57500,000) = 0
    [57500,000, 58750,000) = 0

  Percentiles, ms/op:
      p(0,0000) =  41896,673 ms/op
     p(50,0000) =  51118,016 ms/op
     p(90,0000) =  52321,936 ms/op
     p(95,0000) =  52321,936 ms/op
     p(99,0000) =  52321,936 ms/op
     p(99,9000) =  52321,936 ms/op
     p(99,9900) =  52321,936 ms/op
     p(99,9990) =  52321,936 ms/op
     p(99,9999) =  52321,936 ms/op
    p(100,0000) =  52321,936 ms/op


# Run complete. Total time: 00:14:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (m_className)  (m_mapSize)  (m_testType)  Mode  Cnt      Score      Error  Units
MapTestRunner.testRandom  tests.maptests.identity_object.TroveIdentityMapTest    100000000        remove    ss    8  49110,619 ± 8527,277  ms/op
tests.maptests.identity_object.TroveIdentityMapTest (100000000) = 49110.618874375
Results for test type = remove:
,10000,100000,1000000,10000000,100000000
tests.maptests.article_examples.IntIntMap1Test,"3746","4145","5638","11775","15173"
tests.maptests.article_examples.IntIntMap2Test,"1216","1712","3807","10105","14246"
tests.maptests.article_examples.IntIntMap3Test,"982","1531","3070","6637","8668"
tests.maptests.article_examples.IntIntMap4Test,"718","1263","2824","5266","6104"
tests.maptests.article_examples.IntIntMap4aTest,"626","1275","2792","5275","6123"
tests.maptests.primitive.FastUtilMapTest,"728","1315","3141","6283","8316"
tests.maptests.primitive.GsMutableMapTest,"2373","2666","5332","8192","8246"
tests.maptests.primitive.KolobokeMutableMapTest,"647","1277","2631","5506","6544"
tests.maptests.primitive.HppcMapTest,"1159","1581","3157","6282","7988"
tests.maptests.primitive.TroveJbMapTest,"3182","3678","5593","13031","19636"
tests.maptests.primitive.TroveMapTest,"2764","3226","4889","13822","18543"
tests.maptests.object.FastUtilObjMapTest,"1647","2421","9915","15988","28093"
tests.maptests.object.KolobokeMutableObjTest,"1899","2583","10306","13240","22608"
tests.maptests.object.KolobokeNotNullKeyObjTest,"2018","2605","10330","13140","22444"
tests.maptests.object.KolobokeHashCodeMixingObjTest,"2039","2762","11089","14344","22537"
tests.maptests.object.HppcObjMapTest,"1947","2790","10013","13400","28400"
tests.maptests.object.GsObjMapTest,"1855","2591","9092","11791","19595"
tests.maptests.object.JdkMapTest,"2605","3155","8010","17539","37747"
tests.maptests.object.JdkMapTestDifferentCapacity,"1712","2451","6914","12798","36407"
tests.maptests.object.TroveJbObjMapTest,"3649","4419","11957","19113","36608"
tests.maptests.object.TroveObjMapTest,"4053","4773","13146","20224","33872"
tests.maptests.article_examples.ObjObjMapTest,"1642","2684","9580","18287","29376"
tests.maptests.prim_object.FastUtilIntObjectMapTest,"1203","1811","4360","8918","13988"
tests.maptests.prim_object.GsIntObjectMapTest,"2728","3072","7335","10980","13811"
tests.maptests.prim_object.KolobokeIntObjectMapTest,"1290","2026","4301","8888","13560"
tests.maptests.prim_object.HppcIntObjectMapTest,"1640","2225","4551","9311","13859"
tests.maptests.prim_object.TroveJbIntObjectMapTest,"3263","4152","7446","18012","25799"
tests.maptests.prim_object.TroveIntObjectMapTest,"3156","3638","6615","15089","18283"
tests.maptests.object_prim.FastUtilObjectIntMapTest,"1296","2063","8392","10552","17445"
tests.maptests.object_prim.GsObjectIntMapTest,"3257","3582","10860","16530","26582"
tests.maptests.object_prim.KolobokeObjectIntMapTest,"1754","2497","8821","12209","20123"
tests.maptests.object_prim.HppcObjectIntMapTest,"1636","2381","8371","11463","18508"
tests.maptests.object_prim.TroveJbObjectIntMapTest,"3374","4173","11235","19049","27455"
tests.maptests.object_prim.TroveObjectIntMapTest,"3694","4416","11907","20045","25940"
tests.maptests.identity_object.FastUtilRef2ObjectMapTest,"1932","2756","11257","14721","25794"
tests.maptests.identity_object.GsIdentityMapTest,"1971","2451","8292","11212","18915"
tests.maptests.identity_object.KolobokeIdentityMapTest,"2104","2839","10134","16473","22269"
tests.maptests.identity_object.HppcIdentityMapTest,"2027","2784","11449","13050","25820"
tests.maptests.identity_object.JDKIdentityMapTest,"2447","2441","10525","14958","15984"
tests.maptests.identity_object.TroveJbIdentityMapTest,"3728","4370","13175","18446","31471"
tests.maptests.identity_object.TroveIdentityMapTest,"4034","5087","13771","20401","49110"

Results for 'get':
,10000,100000,1000000,10000000,100000000
tests.maptests.article_examples.IntIntMap1Test,"1802","1739","4940","7941","9313"
tests.maptests.article_examples.IntIntMap2Test,"1181","1577","3654","6099","8928"
tests.maptests.article_examples.IntIntMap3Test,"962","1271","3289","4287","5551"
tests.maptests.article_examples.IntIntMap4Test,"796","1441","3183","3426","4218"
tests.maptests.article_examples.IntIntMap4aTest,"739","1408","2735","3376","4293"
tests.maptests.primitive.FastUtilMapTest,"778","1188","2739","4065","5588"
tests.maptests.primitive.GsMutableMapTest,"1024","1565","2771","4285","5478"
tests.maptests.primitive.KolobokeMutableMapTest,"669","1336","2667","3177","4179"
tests.maptests.primitive.HppcMapTest,"838","1413","3172","4711","5879"
tests.maptests.primitive.TroveJbMapTest,"2225","2696","5490","9955","13075"
tests.maptests.primitive.TroveMapTest,"2068","2442","5196","9604","12656"
tests.maptests.object.FastUtilObjMapTest,"1097","1748","5872","6400","10570"
tests.maptests.object.KolobokeMutableObjTest,"1517","1999","7885","7563","11994"
tests.maptests.object.KolobokeNotNullKeyObjTest,"1515","2003","7874","7572","12122"
tests.maptests.object.KolobokeHashCodeMixingObjTest,"1219","1774","6280","6069","9131"
tests.maptests.object.HppcObjMapTest,"1336","2189","6761","7368","11865"
tests.maptests.object.GsObjMapTest,"1236","1884","6857","7226","9975"
tests.maptests.object.JdkMapTest,"954","1185","5123","6136","8378"
tests.maptests.object.JdkMapTestDifferentCapacity,"947","1138","5103","5126","8196"
tests.maptests.object.TroveJbObjMapTest,"2543","3105","8926","12625","17437"
tests.maptests.object.TroveObjMapTest,"2329","3020","9125","13025","18374"
tests.maptests.article_examples.ObjObjMapTest,"1038","1575","6259","6114","8672"
tests.maptests.prim_object.FastUtilIntObjectMapTest,"787","1118","3021","4298","5642"
tests.maptests.prim_object.GsIntObjectMapTest,"841","1711","3532","4756","6471"
tests.maptests.prim_object.KolobokeIntObjectMapTest,"926","1194","3097","4269","5367"
tests.maptests.prim_object.HppcIntObjectMapTest,"1028","1492","3294","4785","6018"
tests.maptests.prim_object.TroveJbIntObjectMapTest,"2159","2739","6165","10161","11995"
tests.maptests.prim_object.TroveIntObjectMapTest,"2038","2528","5132","9517","12449"
tests.maptests.object_prim.FastUtilObjectIntMapTest,"1217","1591","5983","6305","11087"
tests.maptests.object_prim.GsObjectIntMapTest,"1544","2067","7992","8341","14747"
tests.maptests.object_prim.KolobokeObjectIntMapTest,"1355","1731","7392","7210","13834"
tests.maptests.object_prim.HppcObjectIntMapTest,"1372","1947","6882","7000","11821"
tests.maptests.object_prim.TroveJbObjectIntMapTest,"2538","3097","9544","12659","17151"
tests.maptests.object_prim.TroveObjectIntMapTest,"2436","2911","9149","12165","16622"
tests.maptests.identity_object.FastUtilRef2ObjectMapTest,"651","1295","3321","3855","4653"
tests.maptests.identity_object.GsIdentityMapTest,"833","1171","4295","4551","5911"
tests.maptests.identity_object.KolobokeIdentityMapTest,"967","1524","4494","4319","5456"
tests.maptests.identity_object.HppcIdentityMapTest,"875","1464","3297","4334","5167"
tests.maptests.identity_object.JDKIdentityMapTest,"1534","1238","3749","6971","5175"
tests.maptests.identity_object.TroveJbIdentityMapTest,"2225","2752","5150","9730","11265"
tests.maptests.identity_object.TroveIdentityMapTest,"2489","2844","4851","9398","11036"


Results for 'put':
,10000,100000,1000000,10000000,100000000
tests.maptests.article_examples.IntIntMap1Test,"4669","5408","8027","13799","18330"
tests.maptests.article_examples.IntIntMap2Test,"1478","2038","6949","16823","24972"
tests.maptests.article_examples.IntIntMap3Test,"1126","1711","5939","10365","14324"
tests.maptests.article_examples.IntIntMap4Test,"1020","1654","4386","7955","9015"
tests.maptests.article_examples.IntIntMap4aTest,"936","1610","4303","7071","8158"
tests.maptests.primitive.FastUtilMapTest,"1034","1553","4542","9159","11489"
tests.maptests.primitive.GsMutableMapTest,"1364","1948","5982","7811","9591"
tests.maptests.primitive.KolobokeMutableMapTest,"928","1907","4310","5677","8061"
tests.maptests.primitive.HppcMapTest,"1214","1681","4682","8800","11261"
tests.maptests.primitive.TroveJbMapTest,"2564","3512","8302","16099","22556"
tests.maptests.primitive.TroveMapTest,"2509","3228","8155","18844","24063"
tests.maptests.object.FastUtilObjMapTest,"2098","3054","25508","22043","42876"
tests.maptests.object.KolobokeMutableObjTest,"2489","5833","27332","19196","34898"
tests.maptests.object.KolobokeNotNullKeyObjTest,"2566","5869","27526","19702","34584"
tests.maptests.object.KolobokeHashCodeMixingObjTest,"3075","6591","29269","22280","41858"
tests.maptests.object.HppcObjMapTest,"2503","3525","27779","22771","51795"
tests.maptests.object.GsObjMapTest,"2786","8522","17859","19364","41120"
tests.maptests.object.JdkMapTest,"4636","7372","19003","33358","61827"
tests.maptests.object.JdkMapTestDifferentCapacity,"3165","5109","16574","25991","55876"
tests.maptests.object.TroveJbObjMapTest,"4577","6110","27078","33461","64130"
tests.maptests.object.TroveObjMapTest,"4223","5898","33808","29488","53873"
tests.maptests.article_examples.ObjObjMapTest,"2094","3124","25401","22428","42534"
tests.maptests.prim_object.FastUtilIntObjectMapTest,"1101","1635","4687","8540","11601"
tests.maptests.prim_object.GsIntObjectMapTest,"1311","2226","6305","9435","12576"
tests.maptests.prim_object.KolobokeIntObjectMapTest,"1073","1838","5303","8597","11652"
tests.maptests.prim_object.HppcIntObjectMapTest,"1491","2105","5594","8777","11087"
tests.maptests.prim_object.TroveJbIntObjectMapTest,"3436","4415","13440","18801","36144"
tests.maptests.prim_object.TroveIntObjectMapTest,"2851","3683","9140","18716","23786"
tests.maptests.object_prim.FastUtilObjectIntMapTest,"1724","2649","11064","11653","26687"
tests.maptests.object_prim.GsObjectIntMapTest,"1964","3037","12852","13639","28667"
tests.maptests.object_prim.KolobokeObjectIntMapTest,"2197","3002","13157","14026","27518"
tests.maptests.object_prim.HppcObjectIntMapTest,"2157","2966","13191","13783","27869"
tests.maptests.object_prim.TroveJbObjectIntMapTest,"3868","5179","27425","24943","42197"
tests.maptests.object_prim.TroveObjectIntMapTest,"4249","4999","21417","25005","35397"
tests.maptests.identity_object.FastUtilRef2ObjectMapTest,"1921","2561","32489","28169","37780"
tests.maptests.identity_object.GsIdentityMapTest,"2819","6571","15614","17618","38272"
tests.maptests.identity_object.KolobokeIdentityMapTest,"2924","5781","13872","23498","39224"
tests.maptests.identity_object.HppcIdentityMapTest,"2286","2985","34278","17796","39791"
tests.maptests.identity_object.JDKIdentityMapTest,"2822","4106","30916","21216","28797"
tests.maptests.identity_object.TroveJbIdentityMapTest,"4375","5206","37342","29673","56418"
tests.maptests.identity_object.TroveIdentityMapTest,"4124","5259","39640","26626","46892"


Results for 'remove':
,10000,100000,1000000,10000000,100000000
tests.maptests.article_examples.IntIntMap1Test,"3746","4145","5638","11775","15173"
tests.maptests.article_examples.IntIntMap2Test,"1216","1712","3807","10105","14246"
tests.maptests.article_examples.IntIntMap3Test,"982","1531","3070","6637","8668"
tests.maptests.article_examples.IntIntMap4Test,"718","1263","2824","5266","6104"
tests.maptests.article_examples.IntIntMap4aTest,"626","1275","2792","5275","6123"
tests.maptests.primitive.FastUtilMapTest,"728","1315","3141","6283","8316"
tests.maptests.primitive.GsMutableMapTest,"2373","2666","5332","8192","8246"
tests.maptests.primitive.KolobokeMutableMapTest,"647","1277","2631","5506","6544"
tests.maptests.primitive.HppcMapTest,"1159","1581","3157","6282","7988"
tests.maptests.primitive.TroveJbMapTest,"3182","3678","5593","13031","19636"
tests.maptests.primitive.TroveMapTest,"2764","3226","4889","13822","18543"
tests.maptests.object.FastUtilObjMapTest,"1647","2421","9915","15988","28093"
tests.maptests.object.KolobokeMutableObjTest,"1899","2583","10306","13240","22608"
tests.maptests.object.KolobokeNotNullKeyObjTest,"2018","2605","10330","13140","22444"
tests.maptests.object.KolobokeHashCodeMixingObjTest,"2039","2762","11089","14344","22537"
tests.maptests.object.HppcObjMapTest,"1947","2790","10013","13400","28400"
tests.maptests.object.GsObjMapTest,"1855","2591","9092","11791","19595"
tests.maptests.object.JdkMapTest,"2605","3155","8010","17539","37747"
tests.maptests.object.JdkMapTestDifferentCapacity,"1712","2451","6914","12798","36407"
tests.maptests.object.TroveJbObjMapTest,"3649","4419","11957","19113","36608"
tests.maptests.object.TroveObjMapTest,"4053","4773","13146","20224","33872"
tests.maptests.article_examples.ObjObjMapTest,"1642","2684","9580","18287","29376"
tests.maptests.prim_object.FastUtilIntObjectMapTest,"1203","1811","4360","8918","13988"
tests.maptests.prim_object.GsIntObjectMapTest,"2728","3072","7335","10980","13811"
tests.maptests.prim_object.KolobokeIntObjectMapTest,"1290","2026","4301","8888","13560"
tests.maptests.prim_object.HppcIntObjectMapTest,"1640","2225","4551","9311","13859"
tests.maptests.prim_object.TroveJbIntObjectMapTest,"3263","4152","7446","18012","25799"
tests.maptests.prim_object.TroveIntObjectMapTest,"3156","3638","6615","15089","18283"
tests.maptests.object_prim.FastUtilObjectIntMapTest,"1296","2063","8392","10552","17445"
tests.maptests.object_prim.GsObjectIntMapTest,"3257","3582","10860","16530","26582"
tests.maptests.object_prim.KolobokeObjectIntMapTest,"1754","2497","8821","12209","20123"
tests.maptests.object_prim.HppcObjectIntMapTest,"1636","2381","8371","11463","18508"
tests.maptests.object_prim.TroveJbObjectIntMapTest,"3374","4173","11235","19049","27455"
tests.maptests.object_prim.TroveObjectIntMapTest,"3694","4416","11907","20045","25940"
tests.maptests.identity_object.FastUtilRef2ObjectMapTest,"1932","2756","11257","14721","25794"
tests.maptests.identity_object.GsIdentityMapTest,"1971","2451","8292","11212","18915"
tests.maptests.identity_object.KolobokeIdentityMapTest,"2104","2839","10134","16473","22269"
tests.maptests.identity_object.HppcIdentityMapTest,"2027","2784","11449","13050","25820"
tests.maptests.identity_object.JDKIdentityMapTest,"2447","2441","10525","14958","15984"
tests.maptests.identity_object.TroveJbIdentityMapTest,"3728","4370","13175","18446","31471"
tests.maptests.identity_object.TroveIdentityMapTest,"4034","5087","13771","20401","49110"